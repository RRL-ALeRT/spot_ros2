// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/arm_command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2farm_5fcommand_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2farm_5fcommand_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/basic_command.pb.h"
#include "bosdyn/api/geometry.pb.h"
#include "bosdyn/api/trajectory.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2farm_5fcommand_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2farm_5fcommand_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2farm_5fcommand_2eproto;
namespace bosdyn {
namespace api {
class ArmCartesianCommand;
struct ArmCartesianCommandDefaultTypeInternal;
extern ArmCartesianCommandDefaultTypeInternal _ArmCartesianCommand_default_instance_;
class ArmCartesianCommand_Feedback;
struct ArmCartesianCommand_FeedbackDefaultTypeInternal;
extern ArmCartesianCommand_FeedbackDefaultTypeInternal _ArmCartesianCommand_Feedback_default_instance_;
class ArmCartesianCommand_Request;
struct ArmCartesianCommand_RequestDefaultTypeInternal;
extern ArmCartesianCommand_RequestDefaultTypeInternal _ArmCartesianCommand_Request_default_instance_;
class ArmCommand;
struct ArmCommandDefaultTypeInternal;
extern ArmCommandDefaultTypeInternal _ArmCommand_default_instance_;
class ArmCommand_Feedback;
struct ArmCommand_FeedbackDefaultTypeInternal;
extern ArmCommand_FeedbackDefaultTypeInternal _ArmCommand_Feedback_default_instance_;
class ArmCommand_Request;
struct ArmCommand_RequestDefaultTypeInternal;
extern ArmCommand_RequestDefaultTypeInternal _ArmCommand_Request_default_instance_;
class ArmImpedanceCommand;
struct ArmImpedanceCommandDefaultTypeInternal;
extern ArmImpedanceCommandDefaultTypeInternal _ArmImpedanceCommand_default_instance_;
class ArmImpedanceCommand_Feedback;
struct ArmImpedanceCommand_FeedbackDefaultTypeInternal;
extern ArmImpedanceCommand_FeedbackDefaultTypeInternal _ArmImpedanceCommand_Feedback_default_instance_;
class ArmImpedanceCommand_Request;
struct ArmImpedanceCommand_RequestDefaultTypeInternal;
extern ArmImpedanceCommand_RequestDefaultTypeInternal _ArmImpedanceCommand_Request_default_instance_;
class ArmJointMoveCommand;
struct ArmJointMoveCommandDefaultTypeInternal;
extern ArmJointMoveCommandDefaultTypeInternal _ArmJointMoveCommand_default_instance_;
class ArmJointMoveCommand_Feedback;
struct ArmJointMoveCommand_FeedbackDefaultTypeInternal;
extern ArmJointMoveCommand_FeedbackDefaultTypeInternal _ArmJointMoveCommand_Feedback_default_instance_;
class ArmJointMoveCommand_Request;
struct ArmJointMoveCommand_RequestDefaultTypeInternal;
extern ArmJointMoveCommand_RequestDefaultTypeInternal _ArmJointMoveCommand_Request_default_instance_;
class ArmJointPosition;
struct ArmJointPositionDefaultTypeInternal;
extern ArmJointPositionDefaultTypeInternal _ArmJointPosition_default_instance_;
class ArmJointTrajectory;
struct ArmJointTrajectoryDefaultTypeInternal;
extern ArmJointTrajectoryDefaultTypeInternal _ArmJointTrajectory_default_instance_;
class ArmJointTrajectoryPoint;
struct ArmJointTrajectoryPointDefaultTypeInternal;
extern ArmJointTrajectoryPointDefaultTypeInternal _ArmJointTrajectoryPoint_default_instance_;
class ArmJointVelocity;
struct ArmJointVelocityDefaultTypeInternal;
extern ArmJointVelocityDefaultTypeInternal _ArmJointVelocity_default_instance_;
class ArmParams;
struct ArmParamsDefaultTypeInternal;
extern ArmParamsDefaultTypeInternal _ArmParams_default_instance_;
class ArmStopCommand;
struct ArmStopCommandDefaultTypeInternal;
extern ArmStopCommandDefaultTypeInternal _ArmStopCommand_default_instance_;
class ArmStopCommand_Feedback;
struct ArmStopCommand_FeedbackDefaultTypeInternal;
extern ArmStopCommand_FeedbackDefaultTypeInternal _ArmStopCommand_Feedback_default_instance_;
class ArmStopCommand_Request;
struct ArmStopCommand_RequestDefaultTypeInternal;
extern ArmStopCommand_RequestDefaultTypeInternal _ArmStopCommand_Request_default_instance_;
class ArmVelocityCommand;
struct ArmVelocityCommandDefaultTypeInternal;
extern ArmVelocityCommandDefaultTypeInternal _ArmVelocityCommand_default_instance_;
class ArmVelocityCommand_CartesianVelocity;
struct ArmVelocityCommand_CartesianVelocityDefaultTypeInternal;
extern ArmVelocityCommand_CartesianVelocityDefaultTypeInternal _ArmVelocityCommand_CartesianVelocity_default_instance_;
class ArmVelocityCommand_CylindricalVelocity;
struct ArmVelocityCommand_CylindricalVelocityDefaultTypeInternal;
extern ArmVelocityCommand_CylindricalVelocityDefaultTypeInternal _ArmVelocityCommand_CylindricalVelocity_default_instance_;
class ArmVelocityCommand_Feedback;
struct ArmVelocityCommand_FeedbackDefaultTypeInternal;
extern ArmVelocityCommand_FeedbackDefaultTypeInternal _ArmVelocityCommand_Feedback_default_instance_;
class ArmVelocityCommand_Request;
struct ArmVelocityCommand_RequestDefaultTypeInternal;
extern ArmVelocityCommand_RequestDefaultTypeInternal _ArmVelocityCommand_Request_default_instance_;
class GazeCommand;
struct GazeCommandDefaultTypeInternal;
extern GazeCommandDefaultTypeInternal _GazeCommand_default_instance_;
class GazeCommand_Feedback;
struct GazeCommand_FeedbackDefaultTypeInternal;
extern GazeCommand_FeedbackDefaultTypeInternal _GazeCommand_Feedback_default_instance_;
class GazeCommand_Request;
struct GazeCommand_RequestDefaultTypeInternal;
extern GazeCommand_RequestDefaultTypeInternal _GazeCommand_Request_default_instance_;
class NamedArmPositionsCommand;
struct NamedArmPositionsCommandDefaultTypeInternal;
extern NamedArmPositionsCommandDefaultTypeInternal _NamedArmPositionsCommand_default_instance_;
class NamedArmPositionsCommand_Feedback;
struct NamedArmPositionsCommand_FeedbackDefaultTypeInternal;
extern NamedArmPositionsCommand_FeedbackDefaultTypeInternal _NamedArmPositionsCommand_Feedback_default_instance_;
class NamedArmPositionsCommand_Request;
struct NamedArmPositionsCommand_RequestDefaultTypeInternal;
extern NamedArmPositionsCommand_RequestDefaultTypeInternal _NamedArmPositionsCommand_Request_default_instance_;
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::ArmCartesianCommand* Arena::CreateMaybeMessage<::bosdyn::api::ArmCartesianCommand>(Arena*);
template<> ::bosdyn::api::ArmCartesianCommand_Feedback* Arena::CreateMaybeMessage<::bosdyn::api::ArmCartesianCommand_Feedback>(Arena*);
template<> ::bosdyn::api::ArmCartesianCommand_Request* Arena::CreateMaybeMessage<::bosdyn::api::ArmCartesianCommand_Request>(Arena*);
template<> ::bosdyn::api::ArmCommand* Arena::CreateMaybeMessage<::bosdyn::api::ArmCommand>(Arena*);
template<> ::bosdyn::api::ArmCommand_Feedback* Arena::CreateMaybeMessage<::bosdyn::api::ArmCommand_Feedback>(Arena*);
template<> ::bosdyn::api::ArmCommand_Request* Arena::CreateMaybeMessage<::bosdyn::api::ArmCommand_Request>(Arena*);
template<> ::bosdyn::api::ArmImpedanceCommand* Arena::CreateMaybeMessage<::bosdyn::api::ArmImpedanceCommand>(Arena*);
template<> ::bosdyn::api::ArmImpedanceCommand_Feedback* Arena::CreateMaybeMessage<::bosdyn::api::ArmImpedanceCommand_Feedback>(Arena*);
template<> ::bosdyn::api::ArmImpedanceCommand_Request* Arena::CreateMaybeMessage<::bosdyn::api::ArmImpedanceCommand_Request>(Arena*);
template<> ::bosdyn::api::ArmJointMoveCommand* Arena::CreateMaybeMessage<::bosdyn::api::ArmJointMoveCommand>(Arena*);
template<> ::bosdyn::api::ArmJointMoveCommand_Feedback* Arena::CreateMaybeMessage<::bosdyn::api::ArmJointMoveCommand_Feedback>(Arena*);
template<> ::bosdyn::api::ArmJointMoveCommand_Request* Arena::CreateMaybeMessage<::bosdyn::api::ArmJointMoveCommand_Request>(Arena*);
template<> ::bosdyn::api::ArmJointPosition* Arena::CreateMaybeMessage<::bosdyn::api::ArmJointPosition>(Arena*);
template<> ::bosdyn::api::ArmJointTrajectory* Arena::CreateMaybeMessage<::bosdyn::api::ArmJointTrajectory>(Arena*);
template<> ::bosdyn::api::ArmJointTrajectoryPoint* Arena::CreateMaybeMessage<::bosdyn::api::ArmJointTrajectoryPoint>(Arena*);
template<> ::bosdyn::api::ArmJointVelocity* Arena::CreateMaybeMessage<::bosdyn::api::ArmJointVelocity>(Arena*);
template<> ::bosdyn::api::ArmParams* Arena::CreateMaybeMessage<::bosdyn::api::ArmParams>(Arena*);
template<> ::bosdyn::api::ArmStopCommand* Arena::CreateMaybeMessage<::bosdyn::api::ArmStopCommand>(Arena*);
template<> ::bosdyn::api::ArmStopCommand_Feedback* Arena::CreateMaybeMessage<::bosdyn::api::ArmStopCommand_Feedback>(Arena*);
template<> ::bosdyn::api::ArmStopCommand_Request* Arena::CreateMaybeMessage<::bosdyn::api::ArmStopCommand_Request>(Arena*);
template<> ::bosdyn::api::ArmVelocityCommand* Arena::CreateMaybeMessage<::bosdyn::api::ArmVelocityCommand>(Arena*);
template<> ::bosdyn::api::ArmVelocityCommand_CartesianVelocity* Arena::CreateMaybeMessage<::bosdyn::api::ArmVelocityCommand_CartesianVelocity>(Arena*);
template<> ::bosdyn::api::ArmVelocityCommand_CylindricalVelocity* Arena::CreateMaybeMessage<::bosdyn::api::ArmVelocityCommand_CylindricalVelocity>(Arena*);
template<> ::bosdyn::api::ArmVelocityCommand_Feedback* Arena::CreateMaybeMessage<::bosdyn::api::ArmVelocityCommand_Feedback>(Arena*);
template<> ::bosdyn::api::ArmVelocityCommand_Request* Arena::CreateMaybeMessage<::bosdyn::api::ArmVelocityCommand_Request>(Arena*);
template<> ::bosdyn::api::GazeCommand* Arena::CreateMaybeMessage<::bosdyn::api::GazeCommand>(Arena*);
template<> ::bosdyn::api::GazeCommand_Feedback* Arena::CreateMaybeMessage<::bosdyn::api::GazeCommand_Feedback>(Arena*);
template<> ::bosdyn::api::GazeCommand_Request* Arena::CreateMaybeMessage<::bosdyn::api::GazeCommand_Request>(Arena*);
template<> ::bosdyn::api::NamedArmPositionsCommand* Arena::CreateMaybeMessage<::bosdyn::api::NamedArmPositionsCommand>(Arena*);
template<> ::bosdyn::api::NamedArmPositionsCommand_Feedback* Arena::CreateMaybeMessage<::bosdyn::api::NamedArmPositionsCommand_Feedback>(Arena*);
template<> ::bosdyn::api::NamedArmPositionsCommand_Request* Arena::CreateMaybeMessage<::bosdyn::api::NamedArmPositionsCommand_Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {

enum NamedArmPositionsCommand_Feedback_Status : int {
  NamedArmPositionsCommand_Feedback_Status_STATUS_UNKNOWN = 0,
  NamedArmPositionsCommand_Feedback_Status_STATUS_COMPLETE = 1,
  NamedArmPositionsCommand_Feedback_Status_STATUS_IN_PROGRESS = 2,
  NamedArmPositionsCommand_Feedback_Status_STATUS_STALLED_HOLDING_ITEM = 3,
  NamedArmPositionsCommand_Feedback_Status_NamedArmPositionsCommand_Feedback_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NamedArmPositionsCommand_Feedback_Status_NamedArmPositionsCommand_Feedback_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NamedArmPositionsCommand_Feedback_Status_IsValid(int value);
constexpr NamedArmPositionsCommand_Feedback_Status NamedArmPositionsCommand_Feedback_Status_Status_MIN = NamedArmPositionsCommand_Feedback_Status_STATUS_UNKNOWN;
constexpr NamedArmPositionsCommand_Feedback_Status NamedArmPositionsCommand_Feedback_Status_Status_MAX = NamedArmPositionsCommand_Feedback_Status_STATUS_STALLED_HOLDING_ITEM;
constexpr int NamedArmPositionsCommand_Feedback_Status_Status_ARRAYSIZE = NamedArmPositionsCommand_Feedback_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NamedArmPositionsCommand_Feedback_Status_descriptor();
template<typename T>
inline const std::string& NamedArmPositionsCommand_Feedback_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NamedArmPositionsCommand_Feedback_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NamedArmPositionsCommand_Feedback_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NamedArmPositionsCommand_Feedback_Status_descriptor(), enum_t_value);
}
inline bool NamedArmPositionsCommand_Feedback_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NamedArmPositionsCommand_Feedback_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NamedArmPositionsCommand_Feedback_Status>(
    NamedArmPositionsCommand_Feedback_Status_descriptor(), name, value);
}
enum NamedArmPositionsCommand_Positions : int {
  NamedArmPositionsCommand_Positions_POSITIONS_UNKNOWN = 0,
  NamedArmPositionsCommand_Positions_POSITIONS_CARRY = 1,
  NamedArmPositionsCommand_Positions_POSITIONS_READY = 2,
  NamedArmPositionsCommand_Positions_POSITIONS_STOW = 3,
  NamedArmPositionsCommand_Positions_NamedArmPositionsCommand_Positions_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NamedArmPositionsCommand_Positions_NamedArmPositionsCommand_Positions_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NamedArmPositionsCommand_Positions_IsValid(int value);
constexpr NamedArmPositionsCommand_Positions NamedArmPositionsCommand_Positions_Positions_MIN = NamedArmPositionsCommand_Positions_POSITIONS_UNKNOWN;
constexpr NamedArmPositionsCommand_Positions NamedArmPositionsCommand_Positions_Positions_MAX = NamedArmPositionsCommand_Positions_POSITIONS_STOW;
constexpr int NamedArmPositionsCommand_Positions_Positions_ARRAYSIZE = NamedArmPositionsCommand_Positions_Positions_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NamedArmPositionsCommand_Positions_descriptor();
template<typename T>
inline const std::string& NamedArmPositionsCommand_Positions_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NamedArmPositionsCommand_Positions>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NamedArmPositionsCommand_Positions_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NamedArmPositionsCommand_Positions_descriptor(), enum_t_value);
}
inline bool NamedArmPositionsCommand_Positions_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NamedArmPositionsCommand_Positions* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NamedArmPositionsCommand_Positions>(
    NamedArmPositionsCommand_Positions_descriptor(), name, value);
}
enum ArmCartesianCommand_Request_AxisMode : int {
  ArmCartesianCommand_Request_AxisMode_AXIS_MODE_POSITION = 0,
  ArmCartesianCommand_Request_AxisMode_AXIS_MODE_FORCE = 1,
  ArmCartesianCommand_Request_AxisMode_ArmCartesianCommand_Request_AxisMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ArmCartesianCommand_Request_AxisMode_ArmCartesianCommand_Request_AxisMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ArmCartesianCommand_Request_AxisMode_IsValid(int value);
constexpr ArmCartesianCommand_Request_AxisMode ArmCartesianCommand_Request_AxisMode_AxisMode_MIN = ArmCartesianCommand_Request_AxisMode_AXIS_MODE_POSITION;
constexpr ArmCartesianCommand_Request_AxisMode ArmCartesianCommand_Request_AxisMode_AxisMode_MAX = ArmCartesianCommand_Request_AxisMode_AXIS_MODE_FORCE;
constexpr int ArmCartesianCommand_Request_AxisMode_AxisMode_ARRAYSIZE = ArmCartesianCommand_Request_AxisMode_AxisMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ArmCartesianCommand_Request_AxisMode_descriptor();
template<typename T>
inline const std::string& ArmCartesianCommand_Request_AxisMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ArmCartesianCommand_Request_AxisMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ArmCartesianCommand_Request_AxisMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ArmCartesianCommand_Request_AxisMode_descriptor(), enum_t_value);
}
inline bool ArmCartesianCommand_Request_AxisMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ArmCartesianCommand_Request_AxisMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ArmCartesianCommand_Request_AxisMode>(
    ArmCartesianCommand_Request_AxisMode_descriptor(), name, value);
}
enum ArmCartesianCommand_Feedback_Status : int {
  ArmCartesianCommand_Feedback_Status_STATUS_UNKNOWN = 0,
  ArmCartesianCommand_Feedback_Status_STATUS_TRAJECTORY_COMPLETE = 1,
  ArmCartesianCommand_Feedback_Status_STATUS_IN_PROGRESS = 2,
  ArmCartesianCommand_Feedback_Status_STATUS_TRAJECTORY_CANCELLED = 3,
  ArmCartesianCommand_Feedback_Status_STATUS_TRAJECTORY_STALLED = 4,
  ArmCartesianCommand_Feedback_Status_ArmCartesianCommand_Feedback_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ArmCartesianCommand_Feedback_Status_ArmCartesianCommand_Feedback_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ArmCartesianCommand_Feedback_Status_IsValid(int value);
constexpr ArmCartesianCommand_Feedback_Status ArmCartesianCommand_Feedback_Status_Status_MIN = ArmCartesianCommand_Feedback_Status_STATUS_UNKNOWN;
constexpr ArmCartesianCommand_Feedback_Status ArmCartesianCommand_Feedback_Status_Status_MAX = ArmCartesianCommand_Feedback_Status_STATUS_TRAJECTORY_STALLED;
constexpr int ArmCartesianCommand_Feedback_Status_Status_ARRAYSIZE = ArmCartesianCommand_Feedback_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ArmCartesianCommand_Feedback_Status_descriptor();
template<typename T>
inline const std::string& ArmCartesianCommand_Feedback_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ArmCartesianCommand_Feedback_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ArmCartesianCommand_Feedback_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ArmCartesianCommand_Feedback_Status_descriptor(), enum_t_value);
}
inline bool ArmCartesianCommand_Feedback_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ArmCartesianCommand_Feedback_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ArmCartesianCommand_Feedback_Status>(
    ArmCartesianCommand_Feedback_Status_descriptor(), name, value);
}
enum ArmJointMoveCommand_Feedback_Status : int {
  ArmJointMoveCommand_Feedback_Status_STATUS_UNKNOWN = 0,
  ArmJointMoveCommand_Feedback_Status_STATUS_COMPLETE = 1,
  ArmJointMoveCommand_Feedback_Status_STATUS_IN_PROGRESS = 2,
  ArmJointMoveCommand_Feedback_Status_STATUS_STALLED = 3,
  ArmJointMoveCommand_Feedback_Status_ArmJointMoveCommand_Feedback_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ArmJointMoveCommand_Feedback_Status_ArmJointMoveCommand_Feedback_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ArmJointMoveCommand_Feedback_Status_IsValid(int value);
constexpr ArmJointMoveCommand_Feedback_Status ArmJointMoveCommand_Feedback_Status_Status_MIN = ArmJointMoveCommand_Feedback_Status_STATUS_UNKNOWN;
constexpr ArmJointMoveCommand_Feedback_Status ArmJointMoveCommand_Feedback_Status_Status_MAX = ArmJointMoveCommand_Feedback_Status_STATUS_STALLED;
constexpr int ArmJointMoveCommand_Feedback_Status_Status_ARRAYSIZE = ArmJointMoveCommand_Feedback_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ArmJointMoveCommand_Feedback_Status_descriptor();
template<typename T>
inline const std::string& ArmJointMoveCommand_Feedback_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ArmJointMoveCommand_Feedback_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ArmJointMoveCommand_Feedback_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ArmJointMoveCommand_Feedback_Status_descriptor(), enum_t_value);
}
inline bool ArmJointMoveCommand_Feedback_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ArmJointMoveCommand_Feedback_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ArmJointMoveCommand_Feedback_Status>(
    ArmJointMoveCommand_Feedback_Status_descriptor(), name, value);
}
enum ArmJointMoveCommand_Feedback_PlannerStatus : int {
  ArmJointMoveCommand_Feedback_PlannerStatus_PLANNER_STATUS_UNKNOWN = 0,
  ArmJointMoveCommand_Feedback_PlannerStatus_PLANNER_STATUS_SUCCESS = 1,
  ArmJointMoveCommand_Feedback_PlannerStatus_PLANNER_STATUS_MODIFIED = 2,
  ArmJointMoveCommand_Feedback_PlannerStatus_PLANNER_STATUS_FAILED = 3,
  ArmJointMoveCommand_Feedback_PlannerStatus_ArmJointMoveCommand_Feedback_PlannerStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ArmJointMoveCommand_Feedback_PlannerStatus_ArmJointMoveCommand_Feedback_PlannerStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ArmJointMoveCommand_Feedback_PlannerStatus_IsValid(int value);
constexpr ArmJointMoveCommand_Feedback_PlannerStatus ArmJointMoveCommand_Feedback_PlannerStatus_PlannerStatus_MIN = ArmJointMoveCommand_Feedback_PlannerStatus_PLANNER_STATUS_UNKNOWN;
constexpr ArmJointMoveCommand_Feedback_PlannerStatus ArmJointMoveCommand_Feedback_PlannerStatus_PlannerStatus_MAX = ArmJointMoveCommand_Feedback_PlannerStatus_PLANNER_STATUS_FAILED;
constexpr int ArmJointMoveCommand_Feedback_PlannerStatus_PlannerStatus_ARRAYSIZE = ArmJointMoveCommand_Feedback_PlannerStatus_PlannerStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ArmJointMoveCommand_Feedback_PlannerStatus_descriptor();
template<typename T>
inline const std::string& ArmJointMoveCommand_Feedback_PlannerStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ArmJointMoveCommand_Feedback_PlannerStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ArmJointMoveCommand_Feedback_PlannerStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ArmJointMoveCommand_Feedback_PlannerStatus_descriptor(), enum_t_value);
}
inline bool ArmJointMoveCommand_Feedback_PlannerStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ArmJointMoveCommand_Feedback_PlannerStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ArmJointMoveCommand_Feedback_PlannerStatus>(
    ArmJointMoveCommand_Feedback_PlannerStatus_descriptor(), name, value);
}
enum GazeCommand_Feedback_Status : int {
  GazeCommand_Feedback_Status_STATUS_UNKNOWN = 0,
  GazeCommand_Feedback_Status_STATUS_TRAJECTORY_COMPLETE = 1,
  GazeCommand_Feedback_Status_STATUS_IN_PROGRESS = 2,
  GazeCommand_Feedback_Status_STATUS_TOOL_TRAJECTORY_STALLED = 3,
  GazeCommand_Feedback_Status_GazeCommand_Feedback_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GazeCommand_Feedback_Status_GazeCommand_Feedback_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GazeCommand_Feedback_Status_IsValid(int value);
constexpr GazeCommand_Feedback_Status GazeCommand_Feedback_Status_Status_MIN = GazeCommand_Feedback_Status_STATUS_UNKNOWN;
constexpr GazeCommand_Feedback_Status GazeCommand_Feedback_Status_Status_MAX = GazeCommand_Feedback_Status_STATUS_TOOL_TRAJECTORY_STALLED;
constexpr int GazeCommand_Feedback_Status_Status_ARRAYSIZE = GazeCommand_Feedback_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GazeCommand_Feedback_Status_descriptor();
template<typename T>
inline const std::string& GazeCommand_Feedback_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GazeCommand_Feedback_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GazeCommand_Feedback_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GazeCommand_Feedback_Status_descriptor(), enum_t_value);
}
inline bool GazeCommand_Feedback_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GazeCommand_Feedback_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GazeCommand_Feedback_Status>(
    GazeCommand_Feedback_Status_descriptor(), name, value);
}
// ===================================================================

class ArmCommand_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.ArmCommand.Request) */ {
 public:
  inline ArmCommand_Request() : ArmCommand_Request(nullptr) {}
  ~ArmCommand_Request() override;
  explicit PROTOBUF_CONSTEXPR ArmCommand_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmCommand_Request(const ArmCommand_Request& from);
  ArmCommand_Request(ArmCommand_Request&& from) noexcept
    : ArmCommand_Request() {
    *this = ::std::move(from);
  }

  inline ArmCommand_Request& operator=(const ArmCommand_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmCommand_Request& operator=(ArmCommand_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmCommand_Request& default_instance() {
    return *internal_default_instance();
  }
  enum CommandCase {
    kArmCartesianCommand = 3,
    kArmJointMoveCommand = 4,
    kNamedArmPositionCommand = 5,
    kArmVelocityCommand = 6,
    kArmGazeCommand = 8,
    kArmStopCommand = 9,
    kArmDragCommand = 10,
    kArmImpedanceCommand = 12,
    COMMAND_NOT_SET = 0,
  };

  static inline const ArmCommand_Request* internal_default_instance() {
    return reinterpret_cast<const ArmCommand_Request*>(
               &_ArmCommand_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ArmCommand_Request& a, ArmCommand_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmCommand_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmCommand_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArmCommand_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArmCommand_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArmCommand_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArmCommand_Request& from) {
    ArmCommand_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArmCommand_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ArmCommand.Request";
  }
  protected:
  explicit ArmCommand_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 11,
    kArmCartesianCommandFieldNumber = 3,
    kArmJointMoveCommandFieldNumber = 4,
    kNamedArmPositionCommandFieldNumber = 5,
    kArmVelocityCommandFieldNumber = 6,
    kArmGazeCommandFieldNumber = 8,
    kArmStopCommandFieldNumber = 9,
    kArmDragCommandFieldNumber = 10,
    kArmImpedanceCommandFieldNumber = 12,
  };
  // .bosdyn.api.ArmParams params = 11;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::bosdyn::api::ArmParams& params() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ArmParams* release_params();
  ::bosdyn::api::ArmParams* mutable_params();
  void set_allocated_params(::bosdyn::api::ArmParams* params);
  private:
  const ::bosdyn::api::ArmParams& _internal_params() const;
  ::bosdyn::api::ArmParams* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::bosdyn::api::ArmParams* params);
  ::bosdyn::api::ArmParams* unsafe_arena_release_params();

  // .bosdyn.api.ArmCartesianCommand.Request arm_cartesian_command = 3;
  bool has_arm_cartesian_command() const;
  private:
  bool _internal_has_arm_cartesian_command() const;
  public:
  void clear_arm_cartesian_command();
  const ::bosdyn::api::ArmCartesianCommand_Request& arm_cartesian_command() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ArmCartesianCommand_Request* release_arm_cartesian_command();
  ::bosdyn::api::ArmCartesianCommand_Request* mutable_arm_cartesian_command();
  void set_allocated_arm_cartesian_command(::bosdyn::api::ArmCartesianCommand_Request* arm_cartesian_command);
  private:
  const ::bosdyn::api::ArmCartesianCommand_Request& _internal_arm_cartesian_command() const;
  ::bosdyn::api::ArmCartesianCommand_Request* _internal_mutable_arm_cartesian_command();
  public:
  void unsafe_arena_set_allocated_arm_cartesian_command(
      ::bosdyn::api::ArmCartesianCommand_Request* arm_cartesian_command);
  ::bosdyn::api::ArmCartesianCommand_Request* unsafe_arena_release_arm_cartesian_command();

  // .bosdyn.api.ArmJointMoveCommand.Request arm_joint_move_command = 4;
  bool has_arm_joint_move_command() const;
  private:
  bool _internal_has_arm_joint_move_command() const;
  public:
  void clear_arm_joint_move_command();
  const ::bosdyn::api::ArmJointMoveCommand_Request& arm_joint_move_command() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ArmJointMoveCommand_Request* release_arm_joint_move_command();
  ::bosdyn::api::ArmJointMoveCommand_Request* mutable_arm_joint_move_command();
  void set_allocated_arm_joint_move_command(::bosdyn::api::ArmJointMoveCommand_Request* arm_joint_move_command);
  private:
  const ::bosdyn::api::ArmJointMoveCommand_Request& _internal_arm_joint_move_command() const;
  ::bosdyn::api::ArmJointMoveCommand_Request* _internal_mutable_arm_joint_move_command();
  public:
  void unsafe_arena_set_allocated_arm_joint_move_command(
      ::bosdyn::api::ArmJointMoveCommand_Request* arm_joint_move_command);
  ::bosdyn::api::ArmJointMoveCommand_Request* unsafe_arena_release_arm_joint_move_command();

  // .bosdyn.api.NamedArmPositionsCommand.Request named_arm_position_command = 5;
  bool has_named_arm_position_command() const;
  private:
  bool _internal_has_named_arm_position_command() const;
  public:
  void clear_named_arm_position_command();
  const ::bosdyn::api::NamedArmPositionsCommand_Request& named_arm_position_command() const;
  PROTOBUF_NODISCARD ::bosdyn::api::NamedArmPositionsCommand_Request* release_named_arm_position_command();
  ::bosdyn::api::NamedArmPositionsCommand_Request* mutable_named_arm_position_command();
  void set_allocated_named_arm_position_command(::bosdyn::api::NamedArmPositionsCommand_Request* named_arm_position_command);
  private:
  const ::bosdyn::api::NamedArmPositionsCommand_Request& _internal_named_arm_position_command() const;
  ::bosdyn::api::NamedArmPositionsCommand_Request* _internal_mutable_named_arm_position_command();
  public:
  void unsafe_arena_set_allocated_named_arm_position_command(
      ::bosdyn::api::NamedArmPositionsCommand_Request* named_arm_position_command);
  ::bosdyn::api::NamedArmPositionsCommand_Request* unsafe_arena_release_named_arm_position_command();

  // .bosdyn.api.ArmVelocityCommand.Request arm_velocity_command = 6;
  bool has_arm_velocity_command() const;
  private:
  bool _internal_has_arm_velocity_command() const;
  public:
  void clear_arm_velocity_command();
  const ::bosdyn::api::ArmVelocityCommand_Request& arm_velocity_command() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ArmVelocityCommand_Request* release_arm_velocity_command();
  ::bosdyn::api::ArmVelocityCommand_Request* mutable_arm_velocity_command();
  void set_allocated_arm_velocity_command(::bosdyn::api::ArmVelocityCommand_Request* arm_velocity_command);
  private:
  const ::bosdyn::api::ArmVelocityCommand_Request& _internal_arm_velocity_command() const;
  ::bosdyn::api::ArmVelocityCommand_Request* _internal_mutable_arm_velocity_command();
  public:
  void unsafe_arena_set_allocated_arm_velocity_command(
      ::bosdyn::api::ArmVelocityCommand_Request* arm_velocity_command);
  ::bosdyn::api::ArmVelocityCommand_Request* unsafe_arena_release_arm_velocity_command();

  // .bosdyn.api.GazeCommand.Request arm_gaze_command = 8;
  bool has_arm_gaze_command() const;
  private:
  bool _internal_has_arm_gaze_command() const;
  public:
  void clear_arm_gaze_command();
  const ::bosdyn::api::GazeCommand_Request& arm_gaze_command() const;
  PROTOBUF_NODISCARD ::bosdyn::api::GazeCommand_Request* release_arm_gaze_command();
  ::bosdyn::api::GazeCommand_Request* mutable_arm_gaze_command();
  void set_allocated_arm_gaze_command(::bosdyn::api::GazeCommand_Request* arm_gaze_command);
  private:
  const ::bosdyn::api::GazeCommand_Request& _internal_arm_gaze_command() const;
  ::bosdyn::api::GazeCommand_Request* _internal_mutable_arm_gaze_command();
  public:
  void unsafe_arena_set_allocated_arm_gaze_command(
      ::bosdyn::api::GazeCommand_Request* arm_gaze_command);
  ::bosdyn::api::GazeCommand_Request* unsafe_arena_release_arm_gaze_command();

  // .bosdyn.api.ArmStopCommand.Request arm_stop_command = 9;
  bool has_arm_stop_command() const;
  private:
  bool _internal_has_arm_stop_command() const;
  public:
  void clear_arm_stop_command();
  const ::bosdyn::api::ArmStopCommand_Request& arm_stop_command() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ArmStopCommand_Request* release_arm_stop_command();
  ::bosdyn::api::ArmStopCommand_Request* mutable_arm_stop_command();
  void set_allocated_arm_stop_command(::bosdyn::api::ArmStopCommand_Request* arm_stop_command);
  private:
  const ::bosdyn::api::ArmStopCommand_Request& _internal_arm_stop_command() const;
  ::bosdyn::api::ArmStopCommand_Request* _internal_mutable_arm_stop_command();
  public:
  void unsafe_arena_set_allocated_arm_stop_command(
      ::bosdyn::api::ArmStopCommand_Request* arm_stop_command);
  ::bosdyn::api::ArmStopCommand_Request* unsafe_arena_release_arm_stop_command();

  // .bosdyn.api.ArmDragCommand.Request arm_drag_command = 10;
  bool has_arm_drag_command() const;
  private:
  bool _internal_has_arm_drag_command() const;
  public:
  void clear_arm_drag_command();
  const ::bosdyn::api::ArmDragCommand_Request& arm_drag_command() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ArmDragCommand_Request* release_arm_drag_command();
  ::bosdyn::api::ArmDragCommand_Request* mutable_arm_drag_command();
  void set_allocated_arm_drag_command(::bosdyn::api::ArmDragCommand_Request* arm_drag_command);
  private:
  const ::bosdyn::api::ArmDragCommand_Request& _internal_arm_drag_command() const;
  ::bosdyn::api::ArmDragCommand_Request* _internal_mutable_arm_drag_command();
  public:
  void unsafe_arena_set_allocated_arm_drag_command(
      ::bosdyn::api::ArmDragCommand_Request* arm_drag_command);
  ::bosdyn::api::ArmDragCommand_Request* unsafe_arena_release_arm_drag_command();

  // .bosdyn.api.ArmImpedanceCommand.Request arm_impedance_command = 12;
  bool has_arm_impedance_command() const;
  private:
  bool _internal_has_arm_impedance_command() const;
  public:
  void clear_arm_impedance_command();
  const ::bosdyn::api::ArmImpedanceCommand_Request& arm_impedance_command() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ArmImpedanceCommand_Request* release_arm_impedance_command();
  ::bosdyn::api::ArmImpedanceCommand_Request* mutable_arm_impedance_command();
  void set_allocated_arm_impedance_command(::bosdyn::api::ArmImpedanceCommand_Request* arm_impedance_command);
  private:
  const ::bosdyn::api::ArmImpedanceCommand_Request& _internal_arm_impedance_command() const;
  ::bosdyn::api::ArmImpedanceCommand_Request* _internal_mutable_arm_impedance_command();
  public:
  void unsafe_arena_set_allocated_arm_impedance_command(
      ::bosdyn::api::ArmImpedanceCommand_Request* arm_impedance_command);
  ::bosdyn::api::ArmImpedanceCommand_Request* unsafe_arena_release_arm_impedance_command();

  void clear_command();
  CommandCase command_case() const;
  // @@protoc_insertion_point(class_scope:bosdyn.api.ArmCommand.Request)
 private:
  class _Internal;
  void set_has_arm_cartesian_command();
  void set_has_arm_joint_move_command();
  void set_has_named_arm_position_command();
  void set_has_arm_velocity_command();
  void set_has_arm_gaze_command();
  void set_has_arm_stop_command();
  void set_has_arm_drag_command();
  void set_has_arm_impedance_command();

  inline bool has_command() const;
  inline void clear_has_command();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::ArmParams* params_;
    union CommandUnion {
      constexpr CommandUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::bosdyn::api::ArmCartesianCommand_Request* arm_cartesian_command_;
      ::bosdyn::api::ArmJointMoveCommand_Request* arm_joint_move_command_;
      ::bosdyn::api::NamedArmPositionsCommand_Request* named_arm_position_command_;
      ::bosdyn::api::ArmVelocityCommand_Request* arm_velocity_command_;
      ::bosdyn::api::GazeCommand_Request* arm_gaze_command_;
      ::bosdyn::api::ArmStopCommand_Request* arm_stop_command_;
      ::bosdyn::api::ArmDragCommand_Request* arm_drag_command_;
      ::bosdyn::api::ArmImpedanceCommand_Request* arm_impedance_command_;
    } command_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class ArmCommand_Feedback final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.ArmCommand.Feedback) */ {
 public:
  inline ArmCommand_Feedback() : ArmCommand_Feedback(nullptr) {}
  ~ArmCommand_Feedback() override;
  explicit PROTOBUF_CONSTEXPR ArmCommand_Feedback(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmCommand_Feedback(const ArmCommand_Feedback& from);
  ArmCommand_Feedback(ArmCommand_Feedback&& from) noexcept
    : ArmCommand_Feedback() {
    *this = ::std::move(from);
  }

  inline ArmCommand_Feedback& operator=(const ArmCommand_Feedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmCommand_Feedback& operator=(ArmCommand_Feedback&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmCommand_Feedback& default_instance() {
    return *internal_default_instance();
  }
  enum FeedbackCase {
    kArmCartesianFeedback = 3,
    kArmJointMoveFeedback = 4,
    kNamedArmPositionFeedback = 5,
    kArmVelocityFeedback = 6,
    kArmGazeFeedback = 8,
    kArmStopFeedback = 9,
    kArmDragFeedback = 10,
    kArmImpedanceFeedback = 12,
    FEEDBACK_NOT_SET = 0,
  };

  static inline const ArmCommand_Feedback* internal_default_instance() {
    return reinterpret_cast<const ArmCommand_Feedback*>(
               &_ArmCommand_Feedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ArmCommand_Feedback& a, ArmCommand_Feedback& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmCommand_Feedback* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmCommand_Feedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArmCommand_Feedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArmCommand_Feedback>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArmCommand_Feedback& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArmCommand_Feedback& from) {
    ArmCommand_Feedback::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArmCommand_Feedback* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ArmCommand.Feedback";
  }
  protected:
  explicit ArmCommand_Feedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 100,
    kArmCartesianFeedbackFieldNumber = 3,
    kArmJointMoveFeedbackFieldNumber = 4,
    kNamedArmPositionFeedbackFieldNumber = 5,
    kArmVelocityFeedbackFieldNumber = 6,
    kArmGazeFeedbackFieldNumber = 8,
    kArmStopFeedbackFieldNumber = 9,
    kArmDragFeedbackFieldNumber = 10,
    kArmImpedanceFeedbackFieldNumber = 12,
  };
  // .bosdyn.api.RobotCommandFeedbackStatus.Status status = 100;
  void clear_status();
  ::bosdyn::api::RobotCommandFeedbackStatus_Status status() const;
  void set_status(::bosdyn::api::RobotCommandFeedbackStatus_Status value);
  private:
  ::bosdyn::api::RobotCommandFeedbackStatus_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::RobotCommandFeedbackStatus_Status value);
  public:

  // .bosdyn.api.ArmCartesianCommand.Feedback arm_cartesian_feedback = 3;
  bool has_arm_cartesian_feedback() const;
  private:
  bool _internal_has_arm_cartesian_feedback() const;
  public:
  void clear_arm_cartesian_feedback();
  const ::bosdyn::api::ArmCartesianCommand_Feedback& arm_cartesian_feedback() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ArmCartesianCommand_Feedback* release_arm_cartesian_feedback();
  ::bosdyn::api::ArmCartesianCommand_Feedback* mutable_arm_cartesian_feedback();
  void set_allocated_arm_cartesian_feedback(::bosdyn::api::ArmCartesianCommand_Feedback* arm_cartesian_feedback);
  private:
  const ::bosdyn::api::ArmCartesianCommand_Feedback& _internal_arm_cartesian_feedback() const;
  ::bosdyn::api::ArmCartesianCommand_Feedback* _internal_mutable_arm_cartesian_feedback();
  public:
  void unsafe_arena_set_allocated_arm_cartesian_feedback(
      ::bosdyn::api::ArmCartesianCommand_Feedback* arm_cartesian_feedback);
  ::bosdyn::api::ArmCartesianCommand_Feedback* unsafe_arena_release_arm_cartesian_feedback();

  // .bosdyn.api.ArmJointMoveCommand.Feedback arm_joint_move_feedback = 4;
  bool has_arm_joint_move_feedback() const;
  private:
  bool _internal_has_arm_joint_move_feedback() const;
  public:
  void clear_arm_joint_move_feedback();
  const ::bosdyn::api::ArmJointMoveCommand_Feedback& arm_joint_move_feedback() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ArmJointMoveCommand_Feedback* release_arm_joint_move_feedback();
  ::bosdyn::api::ArmJointMoveCommand_Feedback* mutable_arm_joint_move_feedback();
  void set_allocated_arm_joint_move_feedback(::bosdyn::api::ArmJointMoveCommand_Feedback* arm_joint_move_feedback);
  private:
  const ::bosdyn::api::ArmJointMoveCommand_Feedback& _internal_arm_joint_move_feedback() const;
  ::bosdyn::api::ArmJointMoveCommand_Feedback* _internal_mutable_arm_joint_move_feedback();
  public:
  void unsafe_arena_set_allocated_arm_joint_move_feedback(
      ::bosdyn::api::ArmJointMoveCommand_Feedback* arm_joint_move_feedback);
  ::bosdyn::api::ArmJointMoveCommand_Feedback* unsafe_arena_release_arm_joint_move_feedback();

  // .bosdyn.api.NamedArmPositionsCommand.Feedback named_arm_position_feedback = 5;
  bool has_named_arm_position_feedback() const;
  private:
  bool _internal_has_named_arm_position_feedback() const;
  public:
  void clear_named_arm_position_feedback();
  const ::bosdyn::api::NamedArmPositionsCommand_Feedback& named_arm_position_feedback() const;
  PROTOBUF_NODISCARD ::bosdyn::api::NamedArmPositionsCommand_Feedback* release_named_arm_position_feedback();
  ::bosdyn::api::NamedArmPositionsCommand_Feedback* mutable_named_arm_position_feedback();
  void set_allocated_named_arm_position_feedback(::bosdyn::api::NamedArmPositionsCommand_Feedback* named_arm_position_feedback);
  private:
  const ::bosdyn::api::NamedArmPositionsCommand_Feedback& _internal_named_arm_position_feedback() const;
  ::bosdyn::api::NamedArmPositionsCommand_Feedback* _internal_mutable_named_arm_position_feedback();
  public:
  void unsafe_arena_set_allocated_named_arm_position_feedback(
      ::bosdyn::api::NamedArmPositionsCommand_Feedback* named_arm_position_feedback);
  ::bosdyn::api::NamedArmPositionsCommand_Feedback* unsafe_arena_release_named_arm_position_feedback();

  // .bosdyn.api.ArmVelocityCommand.Feedback arm_velocity_feedback = 6;
  bool has_arm_velocity_feedback() const;
  private:
  bool _internal_has_arm_velocity_feedback() const;
  public:
  void clear_arm_velocity_feedback();
  const ::bosdyn::api::ArmVelocityCommand_Feedback& arm_velocity_feedback() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ArmVelocityCommand_Feedback* release_arm_velocity_feedback();
  ::bosdyn::api::ArmVelocityCommand_Feedback* mutable_arm_velocity_feedback();
  void set_allocated_arm_velocity_feedback(::bosdyn::api::ArmVelocityCommand_Feedback* arm_velocity_feedback);
  private:
  const ::bosdyn::api::ArmVelocityCommand_Feedback& _internal_arm_velocity_feedback() const;
  ::bosdyn::api::ArmVelocityCommand_Feedback* _internal_mutable_arm_velocity_feedback();
  public:
  void unsafe_arena_set_allocated_arm_velocity_feedback(
      ::bosdyn::api::ArmVelocityCommand_Feedback* arm_velocity_feedback);
  ::bosdyn::api::ArmVelocityCommand_Feedback* unsafe_arena_release_arm_velocity_feedback();

  // .bosdyn.api.GazeCommand.Feedback arm_gaze_feedback = 8;
  bool has_arm_gaze_feedback() const;
  private:
  bool _internal_has_arm_gaze_feedback() const;
  public:
  void clear_arm_gaze_feedback();
  const ::bosdyn::api::GazeCommand_Feedback& arm_gaze_feedback() const;
  PROTOBUF_NODISCARD ::bosdyn::api::GazeCommand_Feedback* release_arm_gaze_feedback();
  ::bosdyn::api::GazeCommand_Feedback* mutable_arm_gaze_feedback();
  void set_allocated_arm_gaze_feedback(::bosdyn::api::GazeCommand_Feedback* arm_gaze_feedback);
  private:
  const ::bosdyn::api::GazeCommand_Feedback& _internal_arm_gaze_feedback() const;
  ::bosdyn::api::GazeCommand_Feedback* _internal_mutable_arm_gaze_feedback();
  public:
  void unsafe_arena_set_allocated_arm_gaze_feedback(
      ::bosdyn::api::GazeCommand_Feedback* arm_gaze_feedback);
  ::bosdyn::api::GazeCommand_Feedback* unsafe_arena_release_arm_gaze_feedback();

  // .bosdyn.api.ArmStopCommand.Feedback arm_stop_feedback = 9;
  bool has_arm_stop_feedback() const;
  private:
  bool _internal_has_arm_stop_feedback() const;
  public:
  void clear_arm_stop_feedback();
  const ::bosdyn::api::ArmStopCommand_Feedback& arm_stop_feedback() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ArmStopCommand_Feedback* release_arm_stop_feedback();
  ::bosdyn::api::ArmStopCommand_Feedback* mutable_arm_stop_feedback();
  void set_allocated_arm_stop_feedback(::bosdyn::api::ArmStopCommand_Feedback* arm_stop_feedback);
  private:
  const ::bosdyn::api::ArmStopCommand_Feedback& _internal_arm_stop_feedback() const;
  ::bosdyn::api::ArmStopCommand_Feedback* _internal_mutable_arm_stop_feedback();
  public:
  void unsafe_arena_set_allocated_arm_stop_feedback(
      ::bosdyn::api::ArmStopCommand_Feedback* arm_stop_feedback);
  ::bosdyn::api::ArmStopCommand_Feedback* unsafe_arena_release_arm_stop_feedback();

  // .bosdyn.api.ArmDragCommand.Feedback arm_drag_feedback = 10;
  bool has_arm_drag_feedback() const;
  private:
  bool _internal_has_arm_drag_feedback() const;
  public:
  void clear_arm_drag_feedback();
  const ::bosdyn::api::ArmDragCommand_Feedback& arm_drag_feedback() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ArmDragCommand_Feedback* release_arm_drag_feedback();
  ::bosdyn::api::ArmDragCommand_Feedback* mutable_arm_drag_feedback();
  void set_allocated_arm_drag_feedback(::bosdyn::api::ArmDragCommand_Feedback* arm_drag_feedback);
  private:
  const ::bosdyn::api::ArmDragCommand_Feedback& _internal_arm_drag_feedback() const;
  ::bosdyn::api::ArmDragCommand_Feedback* _internal_mutable_arm_drag_feedback();
  public:
  void unsafe_arena_set_allocated_arm_drag_feedback(
      ::bosdyn::api::ArmDragCommand_Feedback* arm_drag_feedback);
  ::bosdyn::api::ArmDragCommand_Feedback* unsafe_arena_release_arm_drag_feedback();

  // .bosdyn.api.ArmImpedanceCommand.Feedback arm_impedance_feedback = 12;
  bool has_arm_impedance_feedback() const;
  private:
  bool _internal_has_arm_impedance_feedback() const;
  public:
  void clear_arm_impedance_feedback();
  const ::bosdyn::api::ArmImpedanceCommand_Feedback& arm_impedance_feedback() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ArmImpedanceCommand_Feedback* release_arm_impedance_feedback();
  ::bosdyn::api::ArmImpedanceCommand_Feedback* mutable_arm_impedance_feedback();
  void set_allocated_arm_impedance_feedback(::bosdyn::api::ArmImpedanceCommand_Feedback* arm_impedance_feedback);
  private:
  const ::bosdyn::api::ArmImpedanceCommand_Feedback& _internal_arm_impedance_feedback() const;
  ::bosdyn::api::ArmImpedanceCommand_Feedback* _internal_mutable_arm_impedance_feedback();
  public:
  void unsafe_arena_set_allocated_arm_impedance_feedback(
      ::bosdyn::api::ArmImpedanceCommand_Feedback* arm_impedance_feedback);
  ::bosdyn::api::ArmImpedanceCommand_Feedback* unsafe_arena_release_arm_impedance_feedback();

  void clear_feedback();
  FeedbackCase feedback_case() const;
  // @@protoc_insertion_point(class_scope:bosdyn.api.ArmCommand.Feedback)
 private:
  class _Internal;
  void set_has_arm_cartesian_feedback();
  void set_has_arm_joint_move_feedback();
  void set_has_named_arm_position_feedback();
  void set_has_arm_velocity_feedback();
  void set_has_arm_gaze_feedback();
  void set_has_arm_stop_feedback();
  void set_has_arm_drag_feedback();
  void set_has_arm_impedance_feedback();

  inline bool has_feedback() const;
  inline void clear_has_feedback();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int status_;
    union FeedbackUnion {
      constexpr FeedbackUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::bosdyn::api::ArmCartesianCommand_Feedback* arm_cartesian_feedback_;
      ::bosdyn::api::ArmJointMoveCommand_Feedback* arm_joint_move_feedback_;
      ::bosdyn::api::NamedArmPositionsCommand_Feedback* named_arm_position_feedback_;
      ::bosdyn::api::ArmVelocityCommand_Feedback* arm_velocity_feedback_;
      ::bosdyn::api::GazeCommand_Feedback* arm_gaze_feedback_;
      ::bosdyn::api::ArmStopCommand_Feedback* arm_stop_feedback_;
      ::bosdyn::api::ArmDragCommand_Feedback* arm_drag_feedback_;
      ::bosdyn::api::ArmImpedanceCommand_Feedback* arm_impedance_feedback_;
    } feedback_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class ArmCommand final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:bosdyn.api.ArmCommand) */ {
 public:
  inline ArmCommand() : ArmCommand(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ArmCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmCommand(const ArmCommand& from);
  ArmCommand(ArmCommand&& from) noexcept
    : ArmCommand() {
    *this = ::std::move(from);
  }

  inline ArmCommand& operator=(const ArmCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmCommand& operator=(ArmCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArmCommand* internal_default_instance() {
    return reinterpret_cast<const ArmCommand*>(
               &_ArmCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ArmCommand& a, ArmCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArmCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArmCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ArmCommand& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ArmCommand& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ArmCommand";
  }
  protected:
  explicit ArmCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ArmCommand_Request Request;
  typedef ArmCommand_Feedback Feedback;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.ArmCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class ArmParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.ArmParams) */ {
 public:
  inline ArmParams() : ArmParams(nullptr) {}
  ~ArmParams() override;
  explicit PROTOBUF_CONSTEXPR ArmParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmParams(const ArmParams& from);
  ArmParams(ArmParams&& from) noexcept
    : ArmParams() {
    *this = ::std::move(from);
  }

  inline ArmParams& operator=(const ArmParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmParams& operator=(ArmParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArmParams* internal_default_instance() {
    return reinterpret_cast<const ArmParams*>(
               &_ArmParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ArmParams& a, ArmParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArmParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArmParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArmParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArmParams& from) {
    ArmParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArmParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ArmParams";
  }
  protected:
  explicit ArmParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisableBodyForceLimiterFieldNumber = 1,
  };
  // .google.protobuf.BoolValue disable_body_force_limiter = 1;
  bool has_disable_body_force_limiter() const;
  private:
  bool _internal_has_disable_body_force_limiter() const;
  public:
  void clear_disable_body_force_limiter();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& disable_body_force_limiter() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_disable_body_force_limiter();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_disable_body_force_limiter();
  void set_allocated_disable_body_force_limiter(::PROTOBUF_NAMESPACE_ID::BoolValue* disable_body_force_limiter);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_disable_body_force_limiter() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_disable_body_force_limiter();
  public:
  void unsafe_arena_set_allocated_disable_body_force_limiter(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* disable_body_force_limiter);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_disable_body_force_limiter();

  // @@protoc_insertion_point(class_scope:bosdyn.api.ArmParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::BoolValue* disable_body_force_limiter_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class ArmVelocityCommand_CylindricalVelocity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.ArmVelocityCommand.CylindricalVelocity) */ {
 public:
  inline ArmVelocityCommand_CylindricalVelocity() : ArmVelocityCommand_CylindricalVelocity(nullptr) {}
  ~ArmVelocityCommand_CylindricalVelocity() override;
  explicit PROTOBUF_CONSTEXPR ArmVelocityCommand_CylindricalVelocity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmVelocityCommand_CylindricalVelocity(const ArmVelocityCommand_CylindricalVelocity& from);
  ArmVelocityCommand_CylindricalVelocity(ArmVelocityCommand_CylindricalVelocity&& from) noexcept
    : ArmVelocityCommand_CylindricalVelocity() {
    *this = ::std::move(from);
  }

  inline ArmVelocityCommand_CylindricalVelocity& operator=(const ArmVelocityCommand_CylindricalVelocity& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmVelocityCommand_CylindricalVelocity& operator=(ArmVelocityCommand_CylindricalVelocity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmVelocityCommand_CylindricalVelocity& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArmVelocityCommand_CylindricalVelocity* internal_default_instance() {
    return reinterpret_cast<const ArmVelocityCommand_CylindricalVelocity*>(
               &_ArmVelocityCommand_CylindricalVelocity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ArmVelocityCommand_CylindricalVelocity& a, ArmVelocityCommand_CylindricalVelocity& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmVelocityCommand_CylindricalVelocity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmVelocityCommand_CylindricalVelocity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArmVelocityCommand_CylindricalVelocity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArmVelocityCommand_CylindricalVelocity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArmVelocityCommand_CylindricalVelocity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArmVelocityCommand_CylindricalVelocity& from) {
    ArmVelocityCommand_CylindricalVelocity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArmVelocityCommand_CylindricalVelocity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ArmVelocityCommand.CylindricalVelocity";
  }
  protected:
  explicit ArmVelocityCommand_CylindricalVelocity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinearVelocityFieldNumber = 1,
    kMaxLinearVelocityFieldNumber = 2,
  };
  // .bosdyn.api.CylindricalCoordinate linear_velocity = 1;
  bool has_linear_velocity() const;
  private:
  bool _internal_has_linear_velocity() const;
  public:
  void clear_linear_velocity();
  const ::bosdyn::api::CylindricalCoordinate& linear_velocity() const;
  PROTOBUF_NODISCARD ::bosdyn::api::CylindricalCoordinate* release_linear_velocity();
  ::bosdyn::api::CylindricalCoordinate* mutable_linear_velocity();
  void set_allocated_linear_velocity(::bosdyn::api::CylindricalCoordinate* linear_velocity);
  private:
  const ::bosdyn::api::CylindricalCoordinate& _internal_linear_velocity() const;
  ::bosdyn::api::CylindricalCoordinate* _internal_mutable_linear_velocity();
  public:
  void unsafe_arena_set_allocated_linear_velocity(
      ::bosdyn::api::CylindricalCoordinate* linear_velocity);
  ::bosdyn::api::CylindricalCoordinate* unsafe_arena_release_linear_velocity();

  // .google.protobuf.DoubleValue max_linear_velocity = 2;
  bool has_max_linear_velocity() const;
  private:
  bool _internal_has_max_linear_velocity() const;
  public:
  void clear_max_linear_velocity();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_linear_velocity() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_linear_velocity();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_linear_velocity();
  void set_allocated_max_linear_velocity(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_linear_velocity);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_linear_velocity() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_linear_velocity();
  public:
  void unsafe_arena_set_allocated_max_linear_velocity(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_linear_velocity);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_linear_velocity();

  // @@protoc_insertion_point(class_scope:bosdyn.api.ArmVelocityCommand.CylindricalVelocity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::CylindricalCoordinate* linear_velocity_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_linear_velocity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class ArmVelocityCommand_CartesianVelocity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.ArmVelocityCommand.CartesianVelocity) */ {
 public:
  inline ArmVelocityCommand_CartesianVelocity() : ArmVelocityCommand_CartesianVelocity(nullptr) {}
  ~ArmVelocityCommand_CartesianVelocity() override;
  explicit PROTOBUF_CONSTEXPR ArmVelocityCommand_CartesianVelocity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmVelocityCommand_CartesianVelocity(const ArmVelocityCommand_CartesianVelocity& from);
  ArmVelocityCommand_CartesianVelocity(ArmVelocityCommand_CartesianVelocity&& from) noexcept
    : ArmVelocityCommand_CartesianVelocity() {
    *this = ::std::move(from);
  }

  inline ArmVelocityCommand_CartesianVelocity& operator=(const ArmVelocityCommand_CartesianVelocity& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmVelocityCommand_CartesianVelocity& operator=(ArmVelocityCommand_CartesianVelocity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmVelocityCommand_CartesianVelocity& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArmVelocityCommand_CartesianVelocity* internal_default_instance() {
    return reinterpret_cast<const ArmVelocityCommand_CartesianVelocity*>(
               &_ArmVelocityCommand_CartesianVelocity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ArmVelocityCommand_CartesianVelocity& a, ArmVelocityCommand_CartesianVelocity& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmVelocityCommand_CartesianVelocity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmVelocityCommand_CartesianVelocity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArmVelocityCommand_CartesianVelocity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArmVelocityCommand_CartesianVelocity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArmVelocityCommand_CartesianVelocity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArmVelocityCommand_CartesianVelocity& from) {
    ArmVelocityCommand_CartesianVelocity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArmVelocityCommand_CartesianVelocity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ArmVelocityCommand.CartesianVelocity";
  }
  protected:
  explicit ArmVelocityCommand_CartesianVelocity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameNameFieldNumber = 1,
    kVelocityInFrameNameFieldNumber = 2,
  };
  // string frame_name = 1;
  void clear_frame_name();
  const std::string& frame_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frame_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frame_name();
  PROTOBUF_NODISCARD std::string* release_frame_name();
  void set_allocated_frame_name(std::string* frame_name);
  private:
  const std::string& _internal_frame_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame_name(const std::string& value);
  std::string* _internal_mutable_frame_name();
  public:

  // .bosdyn.api.Vec3 velocity_in_frame_name = 2;
  bool has_velocity_in_frame_name() const;
  private:
  bool _internal_has_velocity_in_frame_name() const;
  public:
  void clear_velocity_in_frame_name();
  const ::bosdyn::api::Vec3& velocity_in_frame_name() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec3* release_velocity_in_frame_name();
  ::bosdyn::api::Vec3* mutable_velocity_in_frame_name();
  void set_allocated_velocity_in_frame_name(::bosdyn::api::Vec3* velocity_in_frame_name);
  private:
  const ::bosdyn::api::Vec3& _internal_velocity_in_frame_name() const;
  ::bosdyn::api::Vec3* _internal_mutable_velocity_in_frame_name();
  public:
  void unsafe_arena_set_allocated_velocity_in_frame_name(
      ::bosdyn::api::Vec3* velocity_in_frame_name);
  ::bosdyn::api::Vec3* unsafe_arena_release_velocity_in_frame_name();

  // @@protoc_insertion_point(class_scope:bosdyn.api.ArmVelocityCommand.CartesianVelocity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_name_;
    ::bosdyn::api::Vec3* velocity_in_frame_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class ArmVelocityCommand_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.ArmVelocityCommand.Request) */ {
 public:
  inline ArmVelocityCommand_Request() : ArmVelocityCommand_Request(nullptr) {}
  ~ArmVelocityCommand_Request() override;
  explicit PROTOBUF_CONSTEXPR ArmVelocityCommand_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmVelocityCommand_Request(const ArmVelocityCommand_Request& from);
  ArmVelocityCommand_Request(ArmVelocityCommand_Request&& from) noexcept
    : ArmVelocityCommand_Request() {
    *this = ::std::move(from);
  }

  inline ArmVelocityCommand_Request& operator=(const ArmVelocityCommand_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmVelocityCommand_Request& operator=(ArmVelocityCommand_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmVelocityCommand_Request& default_instance() {
    return *internal_default_instance();
  }
  enum CommandCase {
    kCylindricalVelocity = 1,
    kCartesianVelocity = 2,
    COMMAND_NOT_SET = 0,
  };

  static inline const ArmVelocityCommand_Request* internal_default_instance() {
    return reinterpret_cast<const ArmVelocityCommand_Request*>(
               &_ArmVelocityCommand_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ArmVelocityCommand_Request& a, ArmVelocityCommand_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmVelocityCommand_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmVelocityCommand_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArmVelocityCommand_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArmVelocityCommand_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArmVelocityCommand_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArmVelocityCommand_Request& from) {
    ArmVelocityCommand_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArmVelocityCommand_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ArmVelocityCommand.Request";
  }
  protected:
  explicit ArmVelocityCommand_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaximumAccelerationFieldNumber = 3,
    kEndTimeFieldNumber = 5,
    kAngularVelocityOfHandRtOdomInHandFieldNumber = 6,
    kCylindricalVelocityFieldNumber = 1,
    kCartesianVelocityFieldNumber = 2,
  };
  // .google.protobuf.DoubleValue maximum_acceleration = 3;
  bool has_maximum_acceleration() const;
  private:
  bool _internal_has_maximum_acceleration() const;
  public:
  void clear_maximum_acceleration();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& maximum_acceleration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_maximum_acceleration();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_maximum_acceleration();
  void set_allocated_maximum_acceleration(::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_acceleration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_maximum_acceleration() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_maximum_acceleration();
  public:
  void unsafe_arena_set_allocated_maximum_acceleration(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_acceleration);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_maximum_acceleration();

  // .google.protobuf.Timestamp end_time = 5;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // .bosdyn.api.Vec3 angular_velocity_of_hand_rt_odom_in_hand = 6;
  bool has_angular_velocity_of_hand_rt_odom_in_hand() const;
  private:
  bool _internal_has_angular_velocity_of_hand_rt_odom_in_hand() const;
  public:
  void clear_angular_velocity_of_hand_rt_odom_in_hand();
  const ::bosdyn::api::Vec3& angular_velocity_of_hand_rt_odom_in_hand() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec3* release_angular_velocity_of_hand_rt_odom_in_hand();
  ::bosdyn::api::Vec3* mutable_angular_velocity_of_hand_rt_odom_in_hand();
  void set_allocated_angular_velocity_of_hand_rt_odom_in_hand(::bosdyn::api::Vec3* angular_velocity_of_hand_rt_odom_in_hand);
  private:
  const ::bosdyn::api::Vec3& _internal_angular_velocity_of_hand_rt_odom_in_hand() const;
  ::bosdyn::api::Vec3* _internal_mutable_angular_velocity_of_hand_rt_odom_in_hand();
  public:
  void unsafe_arena_set_allocated_angular_velocity_of_hand_rt_odom_in_hand(
      ::bosdyn::api::Vec3* angular_velocity_of_hand_rt_odom_in_hand);
  ::bosdyn::api::Vec3* unsafe_arena_release_angular_velocity_of_hand_rt_odom_in_hand();

  // .bosdyn.api.ArmVelocityCommand.CylindricalVelocity cylindrical_velocity = 1;
  bool has_cylindrical_velocity() const;
  private:
  bool _internal_has_cylindrical_velocity() const;
  public:
  void clear_cylindrical_velocity();
  const ::bosdyn::api::ArmVelocityCommand_CylindricalVelocity& cylindrical_velocity() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ArmVelocityCommand_CylindricalVelocity* release_cylindrical_velocity();
  ::bosdyn::api::ArmVelocityCommand_CylindricalVelocity* mutable_cylindrical_velocity();
  void set_allocated_cylindrical_velocity(::bosdyn::api::ArmVelocityCommand_CylindricalVelocity* cylindrical_velocity);
  private:
  const ::bosdyn::api::ArmVelocityCommand_CylindricalVelocity& _internal_cylindrical_velocity() const;
  ::bosdyn::api::ArmVelocityCommand_CylindricalVelocity* _internal_mutable_cylindrical_velocity();
  public:
  void unsafe_arena_set_allocated_cylindrical_velocity(
      ::bosdyn::api::ArmVelocityCommand_CylindricalVelocity* cylindrical_velocity);
  ::bosdyn::api::ArmVelocityCommand_CylindricalVelocity* unsafe_arena_release_cylindrical_velocity();

  // .bosdyn.api.ArmVelocityCommand.CartesianVelocity cartesian_velocity = 2;
  bool has_cartesian_velocity() const;
  private:
  bool _internal_has_cartesian_velocity() const;
  public:
  void clear_cartesian_velocity();
  const ::bosdyn::api::ArmVelocityCommand_CartesianVelocity& cartesian_velocity() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ArmVelocityCommand_CartesianVelocity* release_cartesian_velocity();
  ::bosdyn::api::ArmVelocityCommand_CartesianVelocity* mutable_cartesian_velocity();
  void set_allocated_cartesian_velocity(::bosdyn::api::ArmVelocityCommand_CartesianVelocity* cartesian_velocity);
  private:
  const ::bosdyn::api::ArmVelocityCommand_CartesianVelocity& _internal_cartesian_velocity() const;
  ::bosdyn::api::ArmVelocityCommand_CartesianVelocity* _internal_mutable_cartesian_velocity();
  public:
  void unsafe_arena_set_allocated_cartesian_velocity(
      ::bosdyn::api::ArmVelocityCommand_CartesianVelocity* cartesian_velocity);
  ::bosdyn::api::ArmVelocityCommand_CartesianVelocity* unsafe_arena_release_cartesian_velocity();

  void clear_command();
  CommandCase command_case() const;
  // @@protoc_insertion_point(class_scope:bosdyn.api.ArmVelocityCommand.Request)
 private:
  class _Internal;
  void set_has_cylindrical_velocity();
  void set_has_cartesian_velocity();

  inline bool has_command() const;
  inline void clear_has_command();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_acceleration_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
    ::bosdyn::api::Vec3* angular_velocity_of_hand_rt_odom_in_hand_;
    union CommandUnion {
      constexpr CommandUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::bosdyn::api::ArmVelocityCommand_CylindricalVelocity* cylindrical_velocity_;
      ::bosdyn::api::ArmVelocityCommand_CartesianVelocity* cartesian_velocity_;
    } command_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class ArmVelocityCommand_Feedback final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:bosdyn.api.ArmVelocityCommand.Feedback) */ {
 public:
  inline ArmVelocityCommand_Feedback() : ArmVelocityCommand_Feedback(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ArmVelocityCommand_Feedback(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmVelocityCommand_Feedback(const ArmVelocityCommand_Feedback& from);
  ArmVelocityCommand_Feedback(ArmVelocityCommand_Feedback&& from) noexcept
    : ArmVelocityCommand_Feedback() {
    *this = ::std::move(from);
  }

  inline ArmVelocityCommand_Feedback& operator=(const ArmVelocityCommand_Feedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmVelocityCommand_Feedback& operator=(ArmVelocityCommand_Feedback&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmVelocityCommand_Feedback& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArmVelocityCommand_Feedback* internal_default_instance() {
    return reinterpret_cast<const ArmVelocityCommand_Feedback*>(
               &_ArmVelocityCommand_Feedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ArmVelocityCommand_Feedback& a, ArmVelocityCommand_Feedback& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmVelocityCommand_Feedback* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmVelocityCommand_Feedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArmVelocityCommand_Feedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArmVelocityCommand_Feedback>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ArmVelocityCommand_Feedback& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ArmVelocityCommand_Feedback& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ArmVelocityCommand.Feedback";
  }
  protected:
  explicit ArmVelocityCommand_Feedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.ArmVelocityCommand.Feedback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class ArmVelocityCommand final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:bosdyn.api.ArmVelocityCommand) */ {
 public:
  inline ArmVelocityCommand() : ArmVelocityCommand(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ArmVelocityCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmVelocityCommand(const ArmVelocityCommand& from);
  ArmVelocityCommand(ArmVelocityCommand&& from) noexcept
    : ArmVelocityCommand() {
    *this = ::std::move(from);
  }

  inline ArmVelocityCommand& operator=(const ArmVelocityCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmVelocityCommand& operator=(ArmVelocityCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmVelocityCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArmVelocityCommand* internal_default_instance() {
    return reinterpret_cast<const ArmVelocityCommand*>(
               &_ArmVelocityCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ArmVelocityCommand& a, ArmVelocityCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmVelocityCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmVelocityCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArmVelocityCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArmVelocityCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ArmVelocityCommand& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ArmVelocityCommand& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ArmVelocityCommand";
  }
  protected:
  explicit ArmVelocityCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ArmVelocityCommand_CylindricalVelocity CylindricalVelocity;
  typedef ArmVelocityCommand_CartesianVelocity CartesianVelocity;
  typedef ArmVelocityCommand_Request Request;
  typedef ArmVelocityCommand_Feedback Feedback;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.ArmVelocityCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class NamedArmPositionsCommand_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.NamedArmPositionsCommand.Request) */ {
 public:
  inline NamedArmPositionsCommand_Request() : NamedArmPositionsCommand_Request(nullptr) {}
  ~NamedArmPositionsCommand_Request() override;
  explicit PROTOBUF_CONSTEXPR NamedArmPositionsCommand_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NamedArmPositionsCommand_Request(const NamedArmPositionsCommand_Request& from);
  NamedArmPositionsCommand_Request(NamedArmPositionsCommand_Request&& from) noexcept
    : NamedArmPositionsCommand_Request() {
    *this = ::std::move(from);
  }

  inline NamedArmPositionsCommand_Request& operator=(const NamedArmPositionsCommand_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline NamedArmPositionsCommand_Request& operator=(NamedArmPositionsCommand_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NamedArmPositionsCommand_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const NamedArmPositionsCommand_Request* internal_default_instance() {
    return reinterpret_cast<const NamedArmPositionsCommand_Request*>(
               &_NamedArmPositionsCommand_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(NamedArmPositionsCommand_Request& a, NamedArmPositionsCommand_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(NamedArmPositionsCommand_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NamedArmPositionsCommand_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NamedArmPositionsCommand_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NamedArmPositionsCommand_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NamedArmPositionsCommand_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NamedArmPositionsCommand_Request& from) {
    NamedArmPositionsCommand_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NamedArmPositionsCommand_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.NamedArmPositionsCommand.Request";
  }
  protected:
  explicit NamedArmPositionsCommand_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
  };
  // .bosdyn.api.NamedArmPositionsCommand.Positions position = 1;
  void clear_position();
  ::bosdyn::api::NamedArmPositionsCommand_Positions position() const;
  void set_position(::bosdyn::api::NamedArmPositionsCommand_Positions value);
  private:
  ::bosdyn::api::NamedArmPositionsCommand_Positions _internal_position() const;
  void _internal_set_position(::bosdyn::api::NamedArmPositionsCommand_Positions value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.NamedArmPositionsCommand.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int position_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class NamedArmPositionsCommand_Feedback final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.NamedArmPositionsCommand.Feedback) */ {
 public:
  inline NamedArmPositionsCommand_Feedback() : NamedArmPositionsCommand_Feedback(nullptr) {}
  ~NamedArmPositionsCommand_Feedback() override;
  explicit PROTOBUF_CONSTEXPR NamedArmPositionsCommand_Feedback(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NamedArmPositionsCommand_Feedback(const NamedArmPositionsCommand_Feedback& from);
  NamedArmPositionsCommand_Feedback(NamedArmPositionsCommand_Feedback&& from) noexcept
    : NamedArmPositionsCommand_Feedback() {
    *this = ::std::move(from);
  }

  inline NamedArmPositionsCommand_Feedback& operator=(const NamedArmPositionsCommand_Feedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline NamedArmPositionsCommand_Feedback& operator=(NamedArmPositionsCommand_Feedback&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NamedArmPositionsCommand_Feedback& default_instance() {
    return *internal_default_instance();
  }
  static inline const NamedArmPositionsCommand_Feedback* internal_default_instance() {
    return reinterpret_cast<const NamedArmPositionsCommand_Feedback*>(
               &_NamedArmPositionsCommand_Feedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(NamedArmPositionsCommand_Feedback& a, NamedArmPositionsCommand_Feedback& b) {
    a.Swap(&b);
  }
  inline void Swap(NamedArmPositionsCommand_Feedback* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NamedArmPositionsCommand_Feedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NamedArmPositionsCommand_Feedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NamedArmPositionsCommand_Feedback>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NamedArmPositionsCommand_Feedback& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NamedArmPositionsCommand_Feedback& from) {
    NamedArmPositionsCommand_Feedback::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NamedArmPositionsCommand_Feedback* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.NamedArmPositionsCommand.Feedback";
  }
  protected:
  explicit NamedArmPositionsCommand_Feedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NamedArmPositionsCommand_Feedback_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    NamedArmPositionsCommand_Feedback_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_COMPLETE =
    NamedArmPositionsCommand_Feedback_Status_STATUS_COMPLETE;
  static constexpr Status STATUS_IN_PROGRESS =
    NamedArmPositionsCommand_Feedback_Status_STATUS_IN_PROGRESS;
  static constexpr Status STATUS_STALLED_HOLDING_ITEM =
    NamedArmPositionsCommand_Feedback_Status_STATUS_STALLED_HOLDING_ITEM;
  static inline bool Status_IsValid(int value) {
    return NamedArmPositionsCommand_Feedback_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    NamedArmPositionsCommand_Feedback_Status_Status_MIN;
  static constexpr Status Status_MAX =
    NamedArmPositionsCommand_Feedback_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    NamedArmPositionsCommand_Feedback_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return NamedArmPositionsCommand_Feedback_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return NamedArmPositionsCommand_Feedback_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return NamedArmPositionsCommand_Feedback_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .bosdyn.api.NamedArmPositionsCommand.Feedback.Status status = 1;
  void clear_status();
  ::bosdyn::api::NamedArmPositionsCommand_Feedback_Status status() const;
  void set_status(::bosdyn::api::NamedArmPositionsCommand_Feedback_Status value);
  private:
  ::bosdyn::api::NamedArmPositionsCommand_Feedback_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::NamedArmPositionsCommand_Feedback_Status value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.NamedArmPositionsCommand.Feedback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class NamedArmPositionsCommand final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:bosdyn.api.NamedArmPositionsCommand) */ {
 public:
  inline NamedArmPositionsCommand() : NamedArmPositionsCommand(nullptr) {}
  explicit PROTOBUF_CONSTEXPR NamedArmPositionsCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NamedArmPositionsCommand(const NamedArmPositionsCommand& from);
  NamedArmPositionsCommand(NamedArmPositionsCommand&& from) noexcept
    : NamedArmPositionsCommand() {
    *this = ::std::move(from);
  }

  inline NamedArmPositionsCommand& operator=(const NamedArmPositionsCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline NamedArmPositionsCommand& operator=(NamedArmPositionsCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NamedArmPositionsCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const NamedArmPositionsCommand* internal_default_instance() {
    return reinterpret_cast<const NamedArmPositionsCommand*>(
               &_NamedArmPositionsCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(NamedArmPositionsCommand& a, NamedArmPositionsCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(NamedArmPositionsCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NamedArmPositionsCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NamedArmPositionsCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NamedArmPositionsCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const NamedArmPositionsCommand& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const NamedArmPositionsCommand& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.NamedArmPositionsCommand";
  }
  protected:
  explicit NamedArmPositionsCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NamedArmPositionsCommand_Request Request;
  typedef NamedArmPositionsCommand_Feedback Feedback;

  typedef NamedArmPositionsCommand_Positions Positions;
  static constexpr Positions POSITIONS_UNKNOWN =
    NamedArmPositionsCommand_Positions_POSITIONS_UNKNOWN;
  static constexpr Positions POSITIONS_CARRY =
    NamedArmPositionsCommand_Positions_POSITIONS_CARRY;
  static constexpr Positions POSITIONS_READY =
    NamedArmPositionsCommand_Positions_POSITIONS_READY;
  static constexpr Positions POSITIONS_STOW =
    NamedArmPositionsCommand_Positions_POSITIONS_STOW;
  static inline bool Positions_IsValid(int value) {
    return NamedArmPositionsCommand_Positions_IsValid(value);
  }
  static constexpr Positions Positions_MIN =
    NamedArmPositionsCommand_Positions_Positions_MIN;
  static constexpr Positions Positions_MAX =
    NamedArmPositionsCommand_Positions_Positions_MAX;
  static constexpr int Positions_ARRAYSIZE =
    NamedArmPositionsCommand_Positions_Positions_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Positions_descriptor() {
    return NamedArmPositionsCommand_Positions_descriptor();
  }
  template<typename T>
  static inline const std::string& Positions_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Positions>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Positions_Name.");
    return NamedArmPositionsCommand_Positions_Name(enum_t_value);
  }
  static inline bool Positions_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Positions* value) {
    return NamedArmPositionsCommand_Positions_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.NamedArmPositionsCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class ArmCartesianCommand_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.ArmCartesianCommand.Request) */ {
 public:
  inline ArmCartesianCommand_Request() : ArmCartesianCommand_Request(nullptr) {}
  ~ArmCartesianCommand_Request() override;
  explicit PROTOBUF_CONSTEXPR ArmCartesianCommand_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmCartesianCommand_Request(const ArmCartesianCommand_Request& from);
  ArmCartesianCommand_Request(ArmCartesianCommand_Request&& from) noexcept
    : ArmCartesianCommand_Request() {
    *this = ::std::move(from);
  }

  inline ArmCartesianCommand_Request& operator=(const ArmCartesianCommand_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmCartesianCommand_Request& operator=(ArmCartesianCommand_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmCartesianCommand_Request& default_instance() {
    return *internal_default_instance();
  }
  enum JointConfigurationCase {
    kForceRemainNearCurrentJointConfiguration = 17,
    kPreferredJointConfiguration = 18,
    JOINT_CONFIGURATION_NOT_SET = 0,
  };

  static inline const ArmCartesianCommand_Request* internal_default_instance() {
    return reinterpret_cast<const ArmCartesianCommand_Request*>(
               &_ArmCartesianCommand_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ArmCartesianCommand_Request& a, ArmCartesianCommand_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmCartesianCommand_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmCartesianCommand_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArmCartesianCommand_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArmCartesianCommand_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArmCartesianCommand_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArmCartesianCommand_Request& from) {
    ArmCartesianCommand_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArmCartesianCommand_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ArmCartesianCommand.Request";
  }
  protected:
  explicit ArmCartesianCommand_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ArmCartesianCommand_Request_AxisMode AxisMode;
  static constexpr AxisMode AXIS_MODE_POSITION =
    ArmCartesianCommand_Request_AxisMode_AXIS_MODE_POSITION;
  static constexpr AxisMode AXIS_MODE_FORCE =
    ArmCartesianCommand_Request_AxisMode_AXIS_MODE_FORCE;
  static inline bool AxisMode_IsValid(int value) {
    return ArmCartesianCommand_Request_AxisMode_IsValid(value);
  }
  static constexpr AxisMode AxisMode_MIN =
    ArmCartesianCommand_Request_AxisMode_AxisMode_MIN;
  static constexpr AxisMode AxisMode_MAX =
    ArmCartesianCommand_Request_AxisMode_AxisMode_MAX;
  static constexpr int AxisMode_ARRAYSIZE =
    ArmCartesianCommand_Request_AxisMode_AxisMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AxisMode_descriptor() {
    return ArmCartesianCommand_Request_AxisMode_descriptor();
  }
  template<typename T>
  static inline const std::string& AxisMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AxisMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AxisMode_Name.");
    return ArmCartesianCommand_Request_AxisMode_Name(enum_t_value);
  }
  static inline bool AxisMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AxisMode* value) {
    return ArmCartesianCommand_Request_AxisMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRootFrameNameFieldNumber = 19,
    kPoseTrajectoryInTaskFieldNumber = 2,
    kMaximumAccelerationFieldNumber = 3,
    kMaxLinearVelocityFieldNumber = 4,
    kMaxAngularVelocityFieldNumber = 5,
    kWristTformToolFieldNumber = 6,
    kWrenchTrajectoryInTaskFieldNumber = 14,
    kMaxPosTrackingErrorFieldNumber = 15,
    kMaxRotTrackingErrorFieldNumber = 16,
    kRootTformTaskFieldNumber = 20,
    kXAxisFieldNumber = 8,
    kYAxisFieldNumber = 9,
    kZAxisFieldNumber = 10,
    kRxAxisFieldNumber = 11,
    kRyAxisFieldNumber = 12,
    kRzAxisFieldNumber = 13,
    kForceRemainNearCurrentJointConfigurationFieldNumber = 17,
    kPreferredJointConfigurationFieldNumber = 18,
  };
  // string root_frame_name = 19;
  void clear_root_frame_name();
  const std::string& root_frame_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_root_frame_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_root_frame_name();
  PROTOBUF_NODISCARD std::string* release_root_frame_name();
  void set_allocated_root_frame_name(std::string* root_frame_name);
  private:
  const std::string& _internal_root_frame_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_root_frame_name(const std::string& value);
  std::string* _internal_mutable_root_frame_name();
  public:

  // .bosdyn.api.SE3Trajectory pose_trajectory_in_task = 2;
  bool has_pose_trajectory_in_task() const;
  private:
  bool _internal_has_pose_trajectory_in_task() const;
  public:
  void clear_pose_trajectory_in_task();
  const ::bosdyn::api::SE3Trajectory& pose_trajectory_in_task() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SE3Trajectory* release_pose_trajectory_in_task();
  ::bosdyn::api::SE3Trajectory* mutable_pose_trajectory_in_task();
  void set_allocated_pose_trajectory_in_task(::bosdyn::api::SE3Trajectory* pose_trajectory_in_task);
  private:
  const ::bosdyn::api::SE3Trajectory& _internal_pose_trajectory_in_task() const;
  ::bosdyn::api::SE3Trajectory* _internal_mutable_pose_trajectory_in_task();
  public:
  void unsafe_arena_set_allocated_pose_trajectory_in_task(
      ::bosdyn::api::SE3Trajectory* pose_trajectory_in_task);
  ::bosdyn::api::SE3Trajectory* unsafe_arena_release_pose_trajectory_in_task();

  // .google.protobuf.DoubleValue maximum_acceleration = 3;
  bool has_maximum_acceleration() const;
  private:
  bool _internal_has_maximum_acceleration() const;
  public:
  void clear_maximum_acceleration();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& maximum_acceleration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_maximum_acceleration();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_maximum_acceleration();
  void set_allocated_maximum_acceleration(::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_acceleration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_maximum_acceleration() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_maximum_acceleration();
  public:
  void unsafe_arena_set_allocated_maximum_acceleration(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_acceleration);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_maximum_acceleration();

  // .google.protobuf.DoubleValue max_linear_velocity = 4;
  bool has_max_linear_velocity() const;
  private:
  bool _internal_has_max_linear_velocity() const;
  public:
  void clear_max_linear_velocity();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_linear_velocity() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_linear_velocity();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_linear_velocity();
  void set_allocated_max_linear_velocity(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_linear_velocity);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_linear_velocity() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_linear_velocity();
  public:
  void unsafe_arena_set_allocated_max_linear_velocity(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_linear_velocity);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_linear_velocity();

  // .google.protobuf.DoubleValue max_angular_velocity = 5;
  bool has_max_angular_velocity() const;
  private:
  bool _internal_has_max_angular_velocity() const;
  public:
  void clear_max_angular_velocity();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_angular_velocity() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_angular_velocity();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_angular_velocity();
  void set_allocated_max_angular_velocity(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_angular_velocity);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_angular_velocity() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_angular_velocity();
  public:
  void unsafe_arena_set_allocated_max_angular_velocity(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_angular_velocity);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_angular_velocity();

  // .bosdyn.api.SE3Pose wrist_tform_tool = 6;
  bool has_wrist_tform_tool() const;
  private:
  bool _internal_has_wrist_tform_tool() const;
  public:
  void clear_wrist_tform_tool();
  const ::bosdyn::api::SE3Pose& wrist_tform_tool() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SE3Pose* release_wrist_tform_tool();
  ::bosdyn::api::SE3Pose* mutable_wrist_tform_tool();
  void set_allocated_wrist_tform_tool(::bosdyn::api::SE3Pose* wrist_tform_tool);
  private:
  const ::bosdyn::api::SE3Pose& _internal_wrist_tform_tool() const;
  ::bosdyn::api::SE3Pose* _internal_mutable_wrist_tform_tool();
  public:
  void unsafe_arena_set_allocated_wrist_tform_tool(
      ::bosdyn::api::SE3Pose* wrist_tform_tool);
  ::bosdyn::api::SE3Pose* unsafe_arena_release_wrist_tform_tool();

  // .bosdyn.api.WrenchTrajectory wrench_trajectory_in_task = 14;
  bool has_wrench_trajectory_in_task() const;
  private:
  bool _internal_has_wrench_trajectory_in_task() const;
  public:
  void clear_wrench_trajectory_in_task();
  const ::bosdyn::api::WrenchTrajectory& wrench_trajectory_in_task() const;
  PROTOBUF_NODISCARD ::bosdyn::api::WrenchTrajectory* release_wrench_trajectory_in_task();
  ::bosdyn::api::WrenchTrajectory* mutable_wrench_trajectory_in_task();
  void set_allocated_wrench_trajectory_in_task(::bosdyn::api::WrenchTrajectory* wrench_trajectory_in_task);
  private:
  const ::bosdyn::api::WrenchTrajectory& _internal_wrench_trajectory_in_task() const;
  ::bosdyn::api::WrenchTrajectory* _internal_mutable_wrench_trajectory_in_task();
  public:
  void unsafe_arena_set_allocated_wrench_trajectory_in_task(
      ::bosdyn::api::WrenchTrajectory* wrench_trajectory_in_task);
  ::bosdyn::api::WrenchTrajectory* unsafe_arena_release_wrench_trajectory_in_task();

  // .google.protobuf.DoubleValue max_pos_tracking_error = 15;
  bool has_max_pos_tracking_error() const;
  private:
  bool _internal_has_max_pos_tracking_error() const;
  public:
  void clear_max_pos_tracking_error();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_pos_tracking_error() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_pos_tracking_error();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_pos_tracking_error();
  void set_allocated_max_pos_tracking_error(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_pos_tracking_error);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_pos_tracking_error() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_pos_tracking_error();
  public:
  void unsafe_arena_set_allocated_max_pos_tracking_error(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_pos_tracking_error);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_pos_tracking_error();

  // .google.protobuf.DoubleValue max_rot_tracking_error = 16;
  bool has_max_rot_tracking_error() const;
  private:
  bool _internal_has_max_rot_tracking_error() const;
  public:
  void clear_max_rot_tracking_error();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_rot_tracking_error() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_rot_tracking_error();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_rot_tracking_error();
  void set_allocated_max_rot_tracking_error(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_rot_tracking_error);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_rot_tracking_error() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_rot_tracking_error();
  public:
  void unsafe_arena_set_allocated_max_rot_tracking_error(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_rot_tracking_error);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_rot_tracking_error();

  // .bosdyn.api.SE3Pose root_tform_task = 20;
  bool has_root_tform_task() const;
  private:
  bool _internal_has_root_tform_task() const;
  public:
  void clear_root_tform_task();
  const ::bosdyn::api::SE3Pose& root_tform_task() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SE3Pose* release_root_tform_task();
  ::bosdyn::api::SE3Pose* mutable_root_tform_task();
  void set_allocated_root_tform_task(::bosdyn::api::SE3Pose* root_tform_task);
  private:
  const ::bosdyn::api::SE3Pose& _internal_root_tform_task() const;
  ::bosdyn::api::SE3Pose* _internal_mutable_root_tform_task();
  public:
  void unsafe_arena_set_allocated_root_tform_task(
      ::bosdyn::api::SE3Pose* root_tform_task);
  ::bosdyn::api::SE3Pose* unsafe_arena_release_root_tform_task();

  // .bosdyn.api.ArmCartesianCommand.Request.AxisMode x_axis = 8;
  void clear_x_axis();
  ::bosdyn::api::ArmCartesianCommand_Request_AxisMode x_axis() const;
  void set_x_axis(::bosdyn::api::ArmCartesianCommand_Request_AxisMode value);
  private:
  ::bosdyn::api::ArmCartesianCommand_Request_AxisMode _internal_x_axis() const;
  void _internal_set_x_axis(::bosdyn::api::ArmCartesianCommand_Request_AxisMode value);
  public:

  // .bosdyn.api.ArmCartesianCommand.Request.AxisMode y_axis = 9;
  void clear_y_axis();
  ::bosdyn::api::ArmCartesianCommand_Request_AxisMode y_axis() const;
  void set_y_axis(::bosdyn::api::ArmCartesianCommand_Request_AxisMode value);
  private:
  ::bosdyn::api::ArmCartesianCommand_Request_AxisMode _internal_y_axis() const;
  void _internal_set_y_axis(::bosdyn::api::ArmCartesianCommand_Request_AxisMode value);
  public:

  // .bosdyn.api.ArmCartesianCommand.Request.AxisMode z_axis = 10;
  void clear_z_axis();
  ::bosdyn::api::ArmCartesianCommand_Request_AxisMode z_axis() const;
  void set_z_axis(::bosdyn::api::ArmCartesianCommand_Request_AxisMode value);
  private:
  ::bosdyn::api::ArmCartesianCommand_Request_AxisMode _internal_z_axis() const;
  void _internal_set_z_axis(::bosdyn::api::ArmCartesianCommand_Request_AxisMode value);
  public:

  // .bosdyn.api.ArmCartesianCommand.Request.AxisMode rx_axis = 11;
  void clear_rx_axis();
  ::bosdyn::api::ArmCartesianCommand_Request_AxisMode rx_axis() const;
  void set_rx_axis(::bosdyn::api::ArmCartesianCommand_Request_AxisMode value);
  private:
  ::bosdyn::api::ArmCartesianCommand_Request_AxisMode _internal_rx_axis() const;
  void _internal_set_rx_axis(::bosdyn::api::ArmCartesianCommand_Request_AxisMode value);
  public:

  // .bosdyn.api.ArmCartesianCommand.Request.AxisMode ry_axis = 12;
  void clear_ry_axis();
  ::bosdyn::api::ArmCartesianCommand_Request_AxisMode ry_axis() const;
  void set_ry_axis(::bosdyn::api::ArmCartesianCommand_Request_AxisMode value);
  private:
  ::bosdyn::api::ArmCartesianCommand_Request_AxisMode _internal_ry_axis() const;
  void _internal_set_ry_axis(::bosdyn::api::ArmCartesianCommand_Request_AxisMode value);
  public:

  // .bosdyn.api.ArmCartesianCommand.Request.AxisMode rz_axis = 13;
  void clear_rz_axis();
  ::bosdyn::api::ArmCartesianCommand_Request_AxisMode rz_axis() const;
  void set_rz_axis(::bosdyn::api::ArmCartesianCommand_Request_AxisMode value);
  private:
  ::bosdyn::api::ArmCartesianCommand_Request_AxisMode _internal_rz_axis() const;
  void _internal_set_rz_axis(::bosdyn::api::ArmCartesianCommand_Request_AxisMode value);
  public:

  // bool force_remain_near_current_joint_configuration = 17;
  bool has_force_remain_near_current_joint_configuration() const;
  private:
  bool _internal_has_force_remain_near_current_joint_configuration() const;
  public:
  void clear_force_remain_near_current_joint_configuration();
  bool force_remain_near_current_joint_configuration() const;
  void set_force_remain_near_current_joint_configuration(bool value);
  private:
  bool _internal_force_remain_near_current_joint_configuration() const;
  void _internal_set_force_remain_near_current_joint_configuration(bool value);
  public:

  // .bosdyn.api.ArmJointPosition preferred_joint_configuration = 18;
  bool has_preferred_joint_configuration() const;
  private:
  bool _internal_has_preferred_joint_configuration() const;
  public:
  void clear_preferred_joint_configuration();
  const ::bosdyn::api::ArmJointPosition& preferred_joint_configuration() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ArmJointPosition* release_preferred_joint_configuration();
  ::bosdyn::api::ArmJointPosition* mutable_preferred_joint_configuration();
  void set_allocated_preferred_joint_configuration(::bosdyn::api::ArmJointPosition* preferred_joint_configuration);
  private:
  const ::bosdyn::api::ArmJointPosition& _internal_preferred_joint_configuration() const;
  ::bosdyn::api::ArmJointPosition* _internal_mutable_preferred_joint_configuration();
  public:
  void unsafe_arena_set_allocated_preferred_joint_configuration(
      ::bosdyn::api::ArmJointPosition* preferred_joint_configuration);
  ::bosdyn::api::ArmJointPosition* unsafe_arena_release_preferred_joint_configuration();

  void clear_joint_configuration();
  JointConfigurationCase joint_configuration_case() const;
  // @@protoc_insertion_point(class_scope:bosdyn.api.ArmCartesianCommand.Request)
 private:
  class _Internal;
  void set_has_force_remain_near_current_joint_configuration();
  void set_has_preferred_joint_configuration();

  inline bool has_joint_configuration() const;
  inline void clear_has_joint_configuration();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_frame_name_;
    ::bosdyn::api::SE3Trajectory* pose_trajectory_in_task_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_acceleration_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_linear_velocity_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_angular_velocity_;
    ::bosdyn::api::SE3Pose* wrist_tform_tool_;
    ::bosdyn::api::WrenchTrajectory* wrench_trajectory_in_task_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_pos_tracking_error_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_rot_tracking_error_;
    ::bosdyn::api::SE3Pose* root_tform_task_;
    int x_axis_;
    int y_axis_;
    int z_axis_;
    int rx_axis_;
    int ry_axis_;
    int rz_axis_;
    union JointConfigurationUnion {
      constexpr JointConfigurationUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool force_remain_near_current_joint_configuration_;
      ::bosdyn::api::ArmJointPosition* preferred_joint_configuration_;
    } joint_configuration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class ArmCartesianCommand_Feedback final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.ArmCartesianCommand.Feedback) */ {
 public:
  inline ArmCartesianCommand_Feedback() : ArmCartesianCommand_Feedback(nullptr) {}
  ~ArmCartesianCommand_Feedback() override;
  explicit PROTOBUF_CONSTEXPR ArmCartesianCommand_Feedback(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmCartesianCommand_Feedback(const ArmCartesianCommand_Feedback& from);
  ArmCartesianCommand_Feedback(ArmCartesianCommand_Feedback&& from) noexcept
    : ArmCartesianCommand_Feedback() {
    *this = ::std::move(from);
  }

  inline ArmCartesianCommand_Feedback& operator=(const ArmCartesianCommand_Feedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmCartesianCommand_Feedback& operator=(ArmCartesianCommand_Feedback&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmCartesianCommand_Feedback& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArmCartesianCommand_Feedback* internal_default_instance() {
    return reinterpret_cast<const ArmCartesianCommand_Feedback*>(
               &_ArmCartesianCommand_Feedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ArmCartesianCommand_Feedback& a, ArmCartesianCommand_Feedback& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmCartesianCommand_Feedback* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmCartesianCommand_Feedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArmCartesianCommand_Feedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArmCartesianCommand_Feedback>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArmCartesianCommand_Feedback& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArmCartesianCommand_Feedback& from) {
    ArmCartesianCommand_Feedback::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArmCartesianCommand_Feedback* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ArmCartesianCommand.Feedback";
  }
  protected:
  explicit ArmCartesianCommand_Feedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ArmCartesianCommand_Feedback_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    ArmCartesianCommand_Feedback_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_TRAJECTORY_COMPLETE =
    ArmCartesianCommand_Feedback_Status_STATUS_TRAJECTORY_COMPLETE;
  static constexpr Status STATUS_IN_PROGRESS =
    ArmCartesianCommand_Feedback_Status_STATUS_IN_PROGRESS;
  static constexpr Status STATUS_TRAJECTORY_CANCELLED =
    ArmCartesianCommand_Feedback_Status_STATUS_TRAJECTORY_CANCELLED;
  static constexpr Status STATUS_TRAJECTORY_STALLED =
    ArmCartesianCommand_Feedback_Status_STATUS_TRAJECTORY_STALLED;
  static inline bool Status_IsValid(int value) {
    return ArmCartesianCommand_Feedback_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ArmCartesianCommand_Feedback_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ArmCartesianCommand_Feedback_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ArmCartesianCommand_Feedback_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ArmCartesianCommand_Feedback_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ArmCartesianCommand_Feedback_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return ArmCartesianCommand_Feedback_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMeasuredPosTrackingErrorFieldNumber = 2,
    kMeasuredRotTrackingErrorFieldNumber = 3,
    kMeasuredPosDistanceToGoalFieldNumber = 4,
    kMeasuredRotDistanceToGoalFieldNumber = 5,
    kStatusFieldNumber = 1,
  };
  // double measured_pos_tracking_error = 2;
  void clear_measured_pos_tracking_error();
  double measured_pos_tracking_error() const;
  void set_measured_pos_tracking_error(double value);
  private:
  double _internal_measured_pos_tracking_error() const;
  void _internal_set_measured_pos_tracking_error(double value);
  public:

  // double measured_rot_tracking_error = 3;
  void clear_measured_rot_tracking_error();
  double measured_rot_tracking_error() const;
  void set_measured_rot_tracking_error(double value);
  private:
  double _internal_measured_rot_tracking_error() const;
  void _internal_set_measured_rot_tracking_error(double value);
  public:

  // double measured_pos_distance_to_goal = 4;
  void clear_measured_pos_distance_to_goal();
  double measured_pos_distance_to_goal() const;
  void set_measured_pos_distance_to_goal(double value);
  private:
  double _internal_measured_pos_distance_to_goal() const;
  void _internal_set_measured_pos_distance_to_goal(double value);
  public:

  // double measured_rot_distance_to_goal = 5;
  void clear_measured_rot_distance_to_goal();
  double measured_rot_distance_to_goal() const;
  void set_measured_rot_distance_to_goal(double value);
  private:
  double _internal_measured_rot_distance_to_goal() const;
  void _internal_set_measured_rot_distance_to_goal(double value);
  public:

  // .bosdyn.api.ArmCartesianCommand.Feedback.Status status = 1;
  void clear_status();
  ::bosdyn::api::ArmCartesianCommand_Feedback_Status status() const;
  void set_status(::bosdyn::api::ArmCartesianCommand_Feedback_Status value);
  private:
  ::bosdyn::api::ArmCartesianCommand_Feedback_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::ArmCartesianCommand_Feedback_Status value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.ArmCartesianCommand.Feedback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double measured_pos_tracking_error_;
    double measured_rot_tracking_error_;
    double measured_pos_distance_to_goal_;
    double measured_rot_distance_to_goal_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class ArmCartesianCommand final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:bosdyn.api.ArmCartesianCommand) */ {
 public:
  inline ArmCartesianCommand() : ArmCartesianCommand(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ArmCartesianCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmCartesianCommand(const ArmCartesianCommand& from);
  ArmCartesianCommand(ArmCartesianCommand&& from) noexcept
    : ArmCartesianCommand() {
    *this = ::std::move(from);
  }

  inline ArmCartesianCommand& operator=(const ArmCartesianCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmCartesianCommand& operator=(ArmCartesianCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmCartesianCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArmCartesianCommand* internal_default_instance() {
    return reinterpret_cast<const ArmCartesianCommand*>(
               &_ArmCartesianCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ArmCartesianCommand& a, ArmCartesianCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmCartesianCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmCartesianCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArmCartesianCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArmCartesianCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ArmCartesianCommand& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ArmCartesianCommand& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ArmCartesianCommand";
  }
  protected:
  explicit ArmCartesianCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ArmCartesianCommand_Request Request;
  typedef ArmCartesianCommand_Feedback Feedback;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.ArmCartesianCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class ArmJointMoveCommand_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.ArmJointMoveCommand.Request) */ {
 public:
  inline ArmJointMoveCommand_Request() : ArmJointMoveCommand_Request(nullptr) {}
  ~ArmJointMoveCommand_Request() override;
  explicit PROTOBUF_CONSTEXPR ArmJointMoveCommand_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmJointMoveCommand_Request(const ArmJointMoveCommand_Request& from);
  ArmJointMoveCommand_Request(ArmJointMoveCommand_Request&& from) noexcept
    : ArmJointMoveCommand_Request() {
    *this = ::std::move(from);
  }

  inline ArmJointMoveCommand_Request& operator=(const ArmJointMoveCommand_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmJointMoveCommand_Request& operator=(ArmJointMoveCommand_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmJointMoveCommand_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArmJointMoveCommand_Request* internal_default_instance() {
    return reinterpret_cast<const ArmJointMoveCommand_Request*>(
               &_ArmJointMoveCommand_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ArmJointMoveCommand_Request& a, ArmJointMoveCommand_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmJointMoveCommand_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmJointMoveCommand_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArmJointMoveCommand_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArmJointMoveCommand_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArmJointMoveCommand_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArmJointMoveCommand_Request& from) {
    ArmJointMoveCommand_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArmJointMoveCommand_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ArmJointMoveCommand.Request";
  }
  protected:
  explicit ArmJointMoveCommand_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrajectoryFieldNumber = 1,
  };
  // .bosdyn.api.ArmJointTrajectory trajectory = 1;
  bool has_trajectory() const;
  private:
  bool _internal_has_trajectory() const;
  public:
  void clear_trajectory();
  const ::bosdyn::api::ArmJointTrajectory& trajectory() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ArmJointTrajectory* release_trajectory();
  ::bosdyn::api::ArmJointTrajectory* mutable_trajectory();
  void set_allocated_trajectory(::bosdyn::api::ArmJointTrajectory* trajectory);
  private:
  const ::bosdyn::api::ArmJointTrajectory& _internal_trajectory() const;
  ::bosdyn::api::ArmJointTrajectory* _internal_mutable_trajectory();
  public:
  void unsafe_arena_set_allocated_trajectory(
      ::bosdyn::api::ArmJointTrajectory* trajectory);
  ::bosdyn::api::ArmJointTrajectory* unsafe_arena_release_trajectory();

  // @@protoc_insertion_point(class_scope:bosdyn.api.ArmJointMoveCommand.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::ArmJointTrajectory* trajectory_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class ArmJointMoveCommand_Feedback final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.ArmJointMoveCommand.Feedback) */ {
 public:
  inline ArmJointMoveCommand_Feedback() : ArmJointMoveCommand_Feedback(nullptr) {}
  ~ArmJointMoveCommand_Feedback() override;
  explicit PROTOBUF_CONSTEXPR ArmJointMoveCommand_Feedback(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmJointMoveCommand_Feedback(const ArmJointMoveCommand_Feedback& from);
  ArmJointMoveCommand_Feedback(ArmJointMoveCommand_Feedback&& from) noexcept
    : ArmJointMoveCommand_Feedback() {
    *this = ::std::move(from);
  }

  inline ArmJointMoveCommand_Feedback& operator=(const ArmJointMoveCommand_Feedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmJointMoveCommand_Feedback& operator=(ArmJointMoveCommand_Feedback&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmJointMoveCommand_Feedback& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArmJointMoveCommand_Feedback* internal_default_instance() {
    return reinterpret_cast<const ArmJointMoveCommand_Feedback*>(
               &_ArmJointMoveCommand_Feedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ArmJointMoveCommand_Feedback& a, ArmJointMoveCommand_Feedback& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmJointMoveCommand_Feedback* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmJointMoveCommand_Feedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArmJointMoveCommand_Feedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArmJointMoveCommand_Feedback>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArmJointMoveCommand_Feedback& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArmJointMoveCommand_Feedback& from) {
    ArmJointMoveCommand_Feedback::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArmJointMoveCommand_Feedback* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ArmJointMoveCommand.Feedback";
  }
  protected:
  explicit ArmJointMoveCommand_Feedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ArmJointMoveCommand_Feedback_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    ArmJointMoveCommand_Feedback_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_COMPLETE =
    ArmJointMoveCommand_Feedback_Status_STATUS_COMPLETE;
  static constexpr Status STATUS_IN_PROGRESS =
    ArmJointMoveCommand_Feedback_Status_STATUS_IN_PROGRESS;
  static constexpr Status STATUS_STALLED =
    ArmJointMoveCommand_Feedback_Status_STATUS_STALLED;
  static inline bool Status_IsValid(int value) {
    return ArmJointMoveCommand_Feedback_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ArmJointMoveCommand_Feedback_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ArmJointMoveCommand_Feedback_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ArmJointMoveCommand_Feedback_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ArmJointMoveCommand_Feedback_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ArmJointMoveCommand_Feedback_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return ArmJointMoveCommand_Feedback_Status_Parse(name, value);
  }

  typedef ArmJointMoveCommand_Feedback_PlannerStatus PlannerStatus;
  static constexpr PlannerStatus PLANNER_STATUS_UNKNOWN =
    ArmJointMoveCommand_Feedback_PlannerStatus_PLANNER_STATUS_UNKNOWN;
  static constexpr PlannerStatus PLANNER_STATUS_SUCCESS =
    ArmJointMoveCommand_Feedback_PlannerStatus_PLANNER_STATUS_SUCCESS;
  static constexpr PlannerStatus PLANNER_STATUS_MODIFIED =
    ArmJointMoveCommand_Feedback_PlannerStatus_PLANNER_STATUS_MODIFIED;
  static constexpr PlannerStatus PLANNER_STATUS_FAILED =
    ArmJointMoveCommand_Feedback_PlannerStatus_PLANNER_STATUS_FAILED;
  static inline bool PlannerStatus_IsValid(int value) {
    return ArmJointMoveCommand_Feedback_PlannerStatus_IsValid(value);
  }
  static constexpr PlannerStatus PlannerStatus_MIN =
    ArmJointMoveCommand_Feedback_PlannerStatus_PlannerStatus_MIN;
  static constexpr PlannerStatus PlannerStatus_MAX =
    ArmJointMoveCommand_Feedback_PlannerStatus_PlannerStatus_MAX;
  static constexpr int PlannerStatus_ARRAYSIZE =
    ArmJointMoveCommand_Feedback_PlannerStatus_PlannerStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PlannerStatus_descriptor() {
    return ArmJointMoveCommand_Feedback_PlannerStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& PlannerStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PlannerStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PlannerStatus_Name.");
    return ArmJointMoveCommand_Feedback_PlannerStatus_Name(enum_t_value);
  }
  static inline bool PlannerStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PlannerStatus* value) {
    return ArmJointMoveCommand_Feedback_PlannerStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlannedPointsFieldNumber = 3,
    kTimeToGoalFieldNumber = 4,
    kStatusFieldNumber = 1,
    kPlannerStatusFieldNumber = 2,
  };
  // repeated .bosdyn.api.ArmJointTrajectoryPoint planned_points = 3;
  int planned_points_size() const;
  private:
  int _internal_planned_points_size() const;
  public:
  void clear_planned_points();
  ::bosdyn::api::ArmJointTrajectoryPoint* mutable_planned_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::ArmJointTrajectoryPoint >*
      mutable_planned_points();
  private:
  const ::bosdyn::api::ArmJointTrajectoryPoint& _internal_planned_points(int index) const;
  ::bosdyn::api::ArmJointTrajectoryPoint* _internal_add_planned_points();
  public:
  const ::bosdyn::api::ArmJointTrajectoryPoint& planned_points(int index) const;
  ::bosdyn::api::ArmJointTrajectoryPoint* add_planned_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::ArmJointTrajectoryPoint >&
      planned_points() const;

  // .google.protobuf.Duration time_to_goal = 4;
  bool has_time_to_goal() const;
  private:
  bool _internal_has_time_to_goal() const;
  public:
  void clear_time_to_goal();
  const ::PROTOBUF_NAMESPACE_ID::Duration& time_to_goal() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_time_to_goal();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_time_to_goal();
  void set_allocated_time_to_goal(::PROTOBUF_NAMESPACE_ID::Duration* time_to_goal);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_time_to_goal() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_time_to_goal();
  public:
  void unsafe_arena_set_allocated_time_to_goal(
      ::PROTOBUF_NAMESPACE_ID::Duration* time_to_goal);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_time_to_goal();

  // .bosdyn.api.ArmJointMoveCommand.Feedback.Status status = 1;
  void clear_status();
  ::bosdyn::api::ArmJointMoveCommand_Feedback_Status status() const;
  void set_status(::bosdyn::api::ArmJointMoveCommand_Feedback_Status value);
  private:
  ::bosdyn::api::ArmJointMoveCommand_Feedback_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::ArmJointMoveCommand_Feedback_Status value);
  public:

  // .bosdyn.api.ArmJointMoveCommand.Feedback.PlannerStatus planner_status = 2;
  void clear_planner_status();
  ::bosdyn::api::ArmJointMoveCommand_Feedback_PlannerStatus planner_status() const;
  void set_planner_status(::bosdyn::api::ArmJointMoveCommand_Feedback_PlannerStatus value);
  private:
  ::bosdyn::api::ArmJointMoveCommand_Feedback_PlannerStatus _internal_planner_status() const;
  void _internal_set_planner_status(::bosdyn::api::ArmJointMoveCommand_Feedback_PlannerStatus value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.ArmJointMoveCommand.Feedback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::ArmJointTrajectoryPoint > planned_points_;
    ::PROTOBUF_NAMESPACE_ID::Duration* time_to_goal_;
    int status_;
    int planner_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class ArmJointMoveCommand final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:bosdyn.api.ArmJointMoveCommand) */ {
 public:
  inline ArmJointMoveCommand() : ArmJointMoveCommand(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ArmJointMoveCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmJointMoveCommand(const ArmJointMoveCommand& from);
  ArmJointMoveCommand(ArmJointMoveCommand&& from) noexcept
    : ArmJointMoveCommand() {
    *this = ::std::move(from);
  }

  inline ArmJointMoveCommand& operator=(const ArmJointMoveCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmJointMoveCommand& operator=(ArmJointMoveCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmJointMoveCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArmJointMoveCommand* internal_default_instance() {
    return reinterpret_cast<const ArmJointMoveCommand*>(
               &_ArmJointMoveCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ArmJointMoveCommand& a, ArmJointMoveCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmJointMoveCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmJointMoveCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArmJointMoveCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArmJointMoveCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ArmJointMoveCommand& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ArmJointMoveCommand& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ArmJointMoveCommand";
  }
  protected:
  explicit ArmJointMoveCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ArmJointMoveCommand_Request Request;
  typedef ArmJointMoveCommand_Feedback Feedback;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.ArmJointMoveCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class ArmJointPosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.ArmJointPosition) */ {
 public:
  inline ArmJointPosition() : ArmJointPosition(nullptr) {}
  ~ArmJointPosition() override;
  explicit PROTOBUF_CONSTEXPR ArmJointPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmJointPosition(const ArmJointPosition& from);
  ArmJointPosition(ArmJointPosition&& from) noexcept
    : ArmJointPosition() {
    *this = ::std::move(from);
  }

  inline ArmJointPosition& operator=(const ArmJointPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmJointPosition& operator=(ArmJointPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmJointPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArmJointPosition* internal_default_instance() {
    return reinterpret_cast<const ArmJointPosition*>(
               &_ArmJointPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ArmJointPosition& a, ArmJointPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmJointPosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmJointPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArmJointPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArmJointPosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArmJointPosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArmJointPosition& from) {
    ArmJointPosition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArmJointPosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ArmJointPosition";
  }
  protected:
  explicit ArmJointPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSh0FieldNumber = 1,
    kSh1FieldNumber = 2,
    kEl0FieldNumber = 3,
    kEl1FieldNumber = 4,
    kWr0FieldNumber = 5,
    kWr1FieldNumber = 6,
  };
  // .google.protobuf.DoubleValue sh0 = 1;
  bool has_sh0() const;
  private:
  bool _internal_has_sh0() const;
  public:
  void clear_sh0();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& sh0() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_sh0();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_sh0();
  void set_allocated_sh0(::PROTOBUF_NAMESPACE_ID::DoubleValue* sh0);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_sh0() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_sh0();
  public:
  void unsafe_arena_set_allocated_sh0(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* sh0);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_sh0();

  // .google.protobuf.DoubleValue sh1 = 2;
  bool has_sh1() const;
  private:
  bool _internal_has_sh1() const;
  public:
  void clear_sh1();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& sh1() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_sh1();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_sh1();
  void set_allocated_sh1(::PROTOBUF_NAMESPACE_ID::DoubleValue* sh1);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_sh1() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_sh1();
  public:
  void unsafe_arena_set_allocated_sh1(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* sh1);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_sh1();

  // .google.protobuf.DoubleValue el0 = 3;
  bool has_el0() const;
  private:
  bool _internal_has_el0() const;
  public:
  void clear_el0();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& el0() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_el0();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_el0();
  void set_allocated_el0(::PROTOBUF_NAMESPACE_ID::DoubleValue* el0);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_el0() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_el0();
  public:
  void unsafe_arena_set_allocated_el0(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* el0);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_el0();

  // .google.protobuf.DoubleValue el1 = 4;
  bool has_el1() const;
  private:
  bool _internal_has_el1() const;
  public:
  void clear_el1();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& el1() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_el1();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_el1();
  void set_allocated_el1(::PROTOBUF_NAMESPACE_ID::DoubleValue* el1);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_el1() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_el1();
  public:
  void unsafe_arena_set_allocated_el1(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* el1);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_el1();

  // .google.protobuf.DoubleValue wr0 = 5;
  bool has_wr0() const;
  private:
  bool _internal_has_wr0() const;
  public:
  void clear_wr0();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& wr0() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_wr0();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_wr0();
  void set_allocated_wr0(::PROTOBUF_NAMESPACE_ID::DoubleValue* wr0);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_wr0() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_wr0();
  public:
  void unsafe_arena_set_allocated_wr0(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* wr0);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_wr0();

  // .google.protobuf.DoubleValue wr1 = 6;
  bool has_wr1() const;
  private:
  bool _internal_has_wr1() const;
  public:
  void clear_wr1();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& wr1() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_wr1();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_wr1();
  void set_allocated_wr1(::PROTOBUF_NAMESPACE_ID::DoubleValue* wr1);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_wr1() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_wr1();
  public:
  void unsafe_arena_set_allocated_wr1(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* wr1);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_wr1();

  // @@protoc_insertion_point(class_scope:bosdyn.api.ArmJointPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* sh0_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* sh1_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* el0_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* el1_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* wr0_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* wr1_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class ArmJointVelocity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.ArmJointVelocity) */ {
 public:
  inline ArmJointVelocity() : ArmJointVelocity(nullptr) {}
  ~ArmJointVelocity() override;
  explicit PROTOBUF_CONSTEXPR ArmJointVelocity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmJointVelocity(const ArmJointVelocity& from);
  ArmJointVelocity(ArmJointVelocity&& from) noexcept
    : ArmJointVelocity() {
    *this = ::std::move(from);
  }

  inline ArmJointVelocity& operator=(const ArmJointVelocity& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmJointVelocity& operator=(ArmJointVelocity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmJointVelocity& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArmJointVelocity* internal_default_instance() {
    return reinterpret_cast<const ArmJointVelocity*>(
               &_ArmJointVelocity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ArmJointVelocity& a, ArmJointVelocity& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmJointVelocity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmJointVelocity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArmJointVelocity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArmJointVelocity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArmJointVelocity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArmJointVelocity& from) {
    ArmJointVelocity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArmJointVelocity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ArmJointVelocity";
  }
  protected:
  explicit ArmJointVelocity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSh0FieldNumber = 1,
    kSh1FieldNumber = 2,
    kEl0FieldNumber = 3,
    kEl1FieldNumber = 4,
    kWr0FieldNumber = 5,
    kWr1FieldNumber = 6,
  };
  // .google.protobuf.DoubleValue sh0 = 1;
  bool has_sh0() const;
  private:
  bool _internal_has_sh0() const;
  public:
  void clear_sh0();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& sh0() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_sh0();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_sh0();
  void set_allocated_sh0(::PROTOBUF_NAMESPACE_ID::DoubleValue* sh0);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_sh0() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_sh0();
  public:
  void unsafe_arena_set_allocated_sh0(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* sh0);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_sh0();

  // .google.protobuf.DoubleValue sh1 = 2;
  bool has_sh1() const;
  private:
  bool _internal_has_sh1() const;
  public:
  void clear_sh1();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& sh1() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_sh1();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_sh1();
  void set_allocated_sh1(::PROTOBUF_NAMESPACE_ID::DoubleValue* sh1);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_sh1() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_sh1();
  public:
  void unsafe_arena_set_allocated_sh1(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* sh1);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_sh1();

  // .google.protobuf.DoubleValue el0 = 3;
  bool has_el0() const;
  private:
  bool _internal_has_el0() const;
  public:
  void clear_el0();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& el0() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_el0();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_el0();
  void set_allocated_el0(::PROTOBUF_NAMESPACE_ID::DoubleValue* el0);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_el0() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_el0();
  public:
  void unsafe_arena_set_allocated_el0(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* el0);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_el0();

  // .google.protobuf.DoubleValue el1 = 4;
  bool has_el1() const;
  private:
  bool _internal_has_el1() const;
  public:
  void clear_el1();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& el1() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_el1();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_el1();
  void set_allocated_el1(::PROTOBUF_NAMESPACE_ID::DoubleValue* el1);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_el1() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_el1();
  public:
  void unsafe_arena_set_allocated_el1(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* el1);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_el1();

  // .google.protobuf.DoubleValue wr0 = 5;
  bool has_wr0() const;
  private:
  bool _internal_has_wr0() const;
  public:
  void clear_wr0();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& wr0() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_wr0();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_wr0();
  void set_allocated_wr0(::PROTOBUF_NAMESPACE_ID::DoubleValue* wr0);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_wr0() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_wr0();
  public:
  void unsafe_arena_set_allocated_wr0(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* wr0);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_wr0();

  // .google.protobuf.DoubleValue wr1 = 6;
  bool has_wr1() const;
  private:
  bool _internal_has_wr1() const;
  public:
  void clear_wr1();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& wr1() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_wr1();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_wr1();
  void set_allocated_wr1(::PROTOBUF_NAMESPACE_ID::DoubleValue* wr1);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_wr1() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_wr1();
  public:
  void unsafe_arena_set_allocated_wr1(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* wr1);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_wr1();

  // @@protoc_insertion_point(class_scope:bosdyn.api.ArmJointVelocity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* sh0_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* sh1_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* el0_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* el1_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* wr0_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* wr1_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class ArmJointTrajectoryPoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.ArmJointTrajectoryPoint) */ {
 public:
  inline ArmJointTrajectoryPoint() : ArmJointTrajectoryPoint(nullptr) {}
  ~ArmJointTrajectoryPoint() override;
  explicit PROTOBUF_CONSTEXPR ArmJointTrajectoryPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmJointTrajectoryPoint(const ArmJointTrajectoryPoint& from);
  ArmJointTrajectoryPoint(ArmJointTrajectoryPoint&& from) noexcept
    : ArmJointTrajectoryPoint() {
    *this = ::std::move(from);
  }

  inline ArmJointTrajectoryPoint& operator=(const ArmJointTrajectoryPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmJointTrajectoryPoint& operator=(ArmJointTrajectoryPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmJointTrajectoryPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArmJointTrajectoryPoint* internal_default_instance() {
    return reinterpret_cast<const ArmJointTrajectoryPoint*>(
               &_ArmJointTrajectoryPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ArmJointTrajectoryPoint& a, ArmJointTrajectoryPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmJointTrajectoryPoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmJointTrajectoryPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArmJointTrajectoryPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArmJointTrajectoryPoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArmJointTrajectoryPoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArmJointTrajectoryPoint& from) {
    ArmJointTrajectoryPoint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArmJointTrajectoryPoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ArmJointTrajectoryPoint";
  }
  protected:
  explicit ArmJointTrajectoryPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kVelocityFieldNumber = 2,
    kTimeSinceReferenceFieldNumber = 3,
  };
  // .bosdyn.api.ArmJointPosition position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::bosdyn::api::ArmJointPosition& position() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ArmJointPosition* release_position();
  ::bosdyn::api::ArmJointPosition* mutable_position();
  void set_allocated_position(::bosdyn::api::ArmJointPosition* position);
  private:
  const ::bosdyn::api::ArmJointPosition& _internal_position() const;
  ::bosdyn::api::ArmJointPosition* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::bosdyn::api::ArmJointPosition* position);
  ::bosdyn::api::ArmJointPosition* unsafe_arena_release_position();

  // .bosdyn.api.ArmJointVelocity velocity = 2;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::bosdyn::api::ArmJointVelocity& velocity() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ArmJointVelocity* release_velocity();
  ::bosdyn::api::ArmJointVelocity* mutable_velocity();
  void set_allocated_velocity(::bosdyn::api::ArmJointVelocity* velocity);
  private:
  const ::bosdyn::api::ArmJointVelocity& _internal_velocity() const;
  ::bosdyn::api::ArmJointVelocity* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::bosdyn::api::ArmJointVelocity* velocity);
  ::bosdyn::api::ArmJointVelocity* unsafe_arena_release_velocity();

  // .google.protobuf.Duration time_since_reference = 3;
  bool has_time_since_reference() const;
  private:
  bool _internal_has_time_since_reference() const;
  public:
  void clear_time_since_reference();
  const ::PROTOBUF_NAMESPACE_ID::Duration& time_since_reference() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_time_since_reference();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_time_since_reference();
  void set_allocated_time_since_reference(::PROTOBUF_NAMESPACE_ID::Duration* time_since_reference);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_time_since_reference() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_time_since_reference();
  public:
  void unsafe_arena_set_allocated_time_since_reference(
      ::PROTOBUF_NAMESPACE_ID::Duration* time_since_reference);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_time_since_reference();

  // @@protoc_insertion_point(class_scope:bosdyn.api.ArmJointTrajectoryPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::ArmJointPosition* position_;
    ::bosdyn::api::ArmJointVelocity* velocity_;
    ::PROTOBUF_NAMESPACE_ID::Duration* time_since_reference_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class ArmJointTrajectory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.ArmJointTrajectory) */ {
 public:
  inline ArmJointTrajectory() : ArmJointTrajectory(nullptr) {}
  ~ArmJointTrajectory() override;
  explicit PROTOBUF_CONSTEXPR ArmJointTrajectory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmJointTrajectory(const ArmJointTrajectory& from);
  ArmJointTrajectory(ArmJointTrajectory&& from) noexcept
    : ArmJointTrajectory() {
    *this = ::std::move(from);
  }

  inline ArmJointTrajectory& operator=(const ArmJointTrajectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmJointTrajectory& operator=(ArmJointTrajectory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmJointTrajectory& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArmJointTrajectory* internal_default_instance() {
    return reinterpret_cast<const ArmJointTrajectory*>(
               &_ArmJointTrajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ArmJointTrajectory& a, ArmJointTrajectory& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmJointTrajectory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmJointTrajectory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArmJointTrajectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArmJointTrajectory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArmJointTrajectory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArmJointTrajectory& from) {
    ArmJointTrajectory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArmJointTrajectory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ArmJointTrajectory";
  }
  protected:
  explicit ArmJointTrajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
    kReferenceTimeFieldNumber = 2,
    kMaximumVelocityFieldNumber = 3,
    kMaximumAccelerationFieldNumber = 4,
  };
  // repeated .bosdyn.api.ArmJointTrajectoryPoint points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::bosdyn::api::ArmJointTrajectoryPoint* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::ArmJointTrajectoryPoint >*
      mutable_points();
  private:
  const ::bosdyn::api::ArmJointTrajectoryPoint& _internal_points(int index) const;
  ::bosdyn::api::ArmJointTrajectoryPoint* _internal_add_points();
  public:
  const ::bosdyn::api::ArmJointTrajectoryPoint& points(int index) const;
  ::bosdyn::api::ArmJointTrajectoryPoint* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::ArmJointTrajectoryPoint >&
      points() const;

  // .google.protobuf.Timestamp reference_time = 2;
  bool has_reference_time() const;
  private:
  bool _internal_has_reference_time() const;
  public:
  void clear_reference_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& reference_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_reference_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_reference_time();
  void set_allocated_reference_time(::PROTOBUF_NAMESPACE_ID::Timestamp* reference_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_reference_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_reference_time();
  public:
  void unsafe_arena_set_allocated_reference_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* reference_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_reference_time();

  // .google.protobuf.DoubleValue maximum_velocity = 3;
  bool has_maximum_velocity() const;
  private:
  bool _internal_has_maximum_velocity() const;
  public:
  void clear_maximum_velocity();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& maximum_velocity() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_maximum_velocity();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_maximum_velocity();
  void set_allocated_maximum_velocity(::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_velocity);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_maximum_velocity() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_maximum_velocity();
  public:
  void unsafe_arena_set_allocated_maximum_velocity(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_velocity);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_maximum_velocity();

  // .google.protobuf.DoubleValue maximum_acceleration = 4;
  bool has_maximum_acceleration() const;
  private:
  bool _internal_has_maximum_acceleration() const;
  public:
  void clear_maximum_acceleration();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& maximum_acceleration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_maximum_acceleration();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_maximum_acceleration();
  void set_allocated_maximum_acceleration(::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_acceleration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_maximum_acceleration() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_maximum_acceleration();
  public:
  void unsafe_arena_set_allocated_maximum_acceleration(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_acceleration);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_maximum_acceleration();

  // @@protoc_insertion_point(class_scope:bosdyn.api.ArmJointTrajectory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::ArmJointTrajectoryPoint > points_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* reference_time_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_velocity_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_acceleration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class GazeCommand_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.GazeCommand.Request) */ {
 public:
  inline GazeCommand_Request() : GazeCommand_Request(nullptr) {}
  ~GazeCommand_Request() override;
  explicit PROTOBUF_CONSTEXPR GazeCommand_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GazeCommand_Request(const GazeCommand_Request& from);
  GazeCommand_Request(GazeCommand_Request&& from) noexcept
    : GazeCommand_Request() {
    *this = ::std::move(from);
  }

  inline GazeCommand_Request& operator=(const GazeCommand_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline GazeCommand_Request& operator=(GazeCommand_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GazeCommand_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const GazeCommand_Request* internal_default_instance() {
    return reinterpret_cast<const GazeCommand_Request*>(
               &_GazeCommand_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GazeCommand_Request& a, GazeCommand_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(GazeCommand_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GazeCommand_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GazeCommand_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GazeCommand_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GazeCommand_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GazeCommand_Request& from) {
    GazeCommand_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GazeCommand_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.GazeCommand.Request";
  }
  protected:
  explicit GazeCommand_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrame1NameFieldNumber = 2,
    kFrame2NameFieldNumber = 11,
    kTargetTrajectoryInFrame1FieldNumber = 1,
    kTargetTrajectoryInitialVelocityFieldNumber = 5,
    kMaximumAccelerationFieldNumber = 6,
    kMaxLinearVelocityFieldNumber = 7,
    kMaxAngularVelocityFieldNumber = 8,
    kWristTformToolFieldNumber = 9,
    kToolTrajectoryInFrame2FieldNumber = 10,
  };
  // string frame1_name = 2;
  void clear_frame1_name();
  const std::string& frame1_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frame1_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frame1_name();
  PROTOBUF_NODISCARD std::string* release_frame1_name();
  void set_allocated_frame1_name(std::string* frame1_name);
  private:
  const std::string& _internal_frame1_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame1_name(const std::string& value);
  std::string* _internal_mutable_frame1_name();
  public:

  // string frame2_name = 11;
  void clear_frame2_name();
  const std::string& frame2_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frame2_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frame2_name();
  PROTOBUF_NODISCARD std::string* release_frame2_name();
  void set_allocated_frame2_name(std::string* frame2_name);
  private:
  const std::string& _internal_frame2_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame2_name(const std::string& value);
  std::string* _internal_mutable_frame2_name();
  public:

  // .bosdyn.api.Vec3Trajectory target_trajectory_in_frame1 = 1;
  bool has_target_trajectory_in_frame1() const;
  private:
  bool _internal_has_target_trajectory_in_frame1() const;
  public:
  void clear_target_trajectory_in_frame1();
  const ::bosdyn::api::Vec3Trajectory& target_trajectory_in_frame1() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec3Trajectory* release_target_trajectory_in_frame1();
  ::bosdyn::api::Vec3Trajectory* mutable_target_trajectory_in_frame1();
  void set_allocated_target_trajectory_in_frame1(::bosdyn::api::Vec3Trajectory* target_trajectory_in_frame1);
  private:
  const ::bosdyn::api::Vec3Trajectory& _internal_target_trajectory_in_frame1() const;
  ::bosdyn::api::Vec3Trajectory* _internal_mutable_target_trajectory_in_frame1();
  public:
  void unsafe_arena_set_allocated_target_trajectory_in_frame1(
      ::bosdyn::api::Vec3Trajectory* target_trajectory_in_frame1);
  ::bosdyn::api::Vec3Trajectory* unsafe_arena_release_target_trajectory_in_frame1();

  // .google.protobuf.DoubleValue target_trajectory_initial_velocity = 5;
  bool has_target_trajectory_initial_velocity() const;
  private:
  bool _internal_has_target_trajectory_initial_velocity() const;
  public:
  void clear_target_trajectory_initial_velocity();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& target_trajectory_initial_velocity() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_target_trajectory_initial_velocity();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_target_trajectory_initial_velocity();
  void set_allocated_target_trajectory_initial_velocity(::PROTOBUF_NAMESPACE_ID::DoubleValue* target_trajectory_initial_velocity);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_target_trajectory_initial_velocity() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_target_trajectory_initial_velocity();
  public:
  void unsafe_arena_set_allocated_target_trajectory_initial_velocity(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* target_trajectory_initial_velocity);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_target_trajectory_initial_velocity();

  // .google.protobuf.DoubleValue maximum_acceleration = 6;
  bool has_maximum_acceleration() const;
  private:
  bool _internal_has_maximum_acceleration() const;
  public:
  void clear_maximum_acceleration();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& maximum_acceleration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_maximum_acceleration();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_maximum_acceleration();
  void set_allocated_maximum_acceleration(::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_acceleration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_maximum_acceleration() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_maximum_acceleration();
  public:
  void unsafe_arena_set_allocated_maximum_acceleration(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_acceleration);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_maximum_acceleration();

  // .google.protobuf.DoubleValue max_linear_velocity = 7;
  bool has_max_linear_velocity() const;
  private:
  bool _internal_has_max_linear_velocity() const;
  public:
  void clear_max_linear_velocity();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_linear_velocity() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_linear_velocity();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_linear_velocity();
  void set_allocated_max_linear_velocity(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_linear_velocity);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_linear_velocity() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_linear_velocity();
  public:
  void unsafe_arena_set_allocated_max_linear_velocity(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_linear_velocity);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_linear_velocity();

  // .google.protobuf.DoubleValue max_angular_velocity = 8;
  bool has_max_angular_velocity() const;
  private:
  bool _internal_has_max_angular_velocity() const;
  public:
  void clear_max_angular_velocity();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_angular_velocity() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_angular_velocity();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_angular_velocity();
  void set_allocated_max_angular_velocity(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_angular_velocity);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_angular_velocity() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_angular_velocity();
  public:
  void unsafe_arena_set_allocated_max_angular_velocity(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_angular_velocity);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_angular_velocity();

  // .bosdyn.api.SE3Pose wrist_tform_tool = 9;
  bool has_wrist_tform_tool() const;
  private:
  bool _internal_has_wrist_tform_tool() const;
  public:
  void clear_wrist_tform_tool();
  const ::bosdyn::api::SE3Pose& wrist_tform_tool() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SE3Pose* release_wrist_tform_tool();
  ::bosdyn::api::SE3Pose* mutable_wrist_tform_tool();
  void set_allocated_wrist_tform_tool(::bosdyn::api::SE3Pose* wrist_tform_tool);
  private:
  const ::bosdyn::api::SE3Pose& _internal_wrist_tform_tool() const;
  ::bosdyn::api::SE3Pose* _internal_mutable_wrist_tform_tool();
  public:
  void unsafe_arena_set_allocated_wrist_tform_tool(
      ::bosdyn::api::SE3Pose* wrist_tform_tool);
  ::bosdyn::api::SE3Pose* unsafe_arena_release_wrist_tform_tool();

  // .bosdyn.api.SE3Trajectory tool_trajectory_in_frame2 = 10;
  bool has_tool_trajectory_in_frame2() const;
  private:
  bool _internal_has_tool_trajectory_in_frame2() const;
  public:
  void clear_tool_trajectory_in_frame2();
  const ::bosdyn::api::SE3Trajectory& tool_trajectory_in_frame2() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SE3Trajectory* release_tool_trajectory_in_frame2();
  ::bosdyn::api::SE3Trajectory* mutable_tool_trajectory_in_frame2();
  void set_allocated_tool_trajectory_in_frame2(::bosdyn::api::SE3Trajectory* tool_trajectory_in_frame2);
  private:
  const ::bosdyn::api::SE3Trajectory& _internal_tool_trajectory_in_frame2() const;
  ::bosdyn::api::SE3Trajectory* _internal_mutable_tool_trajectory_in_frame2();
  public:
  void unsafe_arena_set_allocated_tool_trajectory_in_frame2(
      ::bosdyn::api::SE3Trajectory* tool_trajectory_in_frame2);
  ::bosdyn::api::SE3Trajectory* unsafe_arena_release_tool_trajectory_in_frame2();

  // @@protoc_insertion_point(class_scope:bosdyn.api.GazeCommand.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame1_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame2_name_;
    ::bosdyn::api::Vec3Trajectory* target_trajectory_in_frame1_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* target_trajectory_initial_velocity_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_acceleration_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_linear_velocity_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_angular_velocity_;
    ::bosdyn::api::SE3Pose* wrist_tform_tool_;
    ::bosdyn::api::SE3Trajectory* tool_trajectory_in_frame2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class GazeCommand_Feedback final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.GazeCommand.Feedback) */ {
 public:
  inline GazeCommand_Feedback() : GazeCommand_Feedback(nullptr) {}
  ~GazeCommand_Feedback() override;
  explicit PROTOBUF_CONSTEXPR GazeCommand_Feedback(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GazeCommand_Feedback(const GazeCommand_Feedback& from);
  GazeCommand_Feedback(GazeCommand_Feedback&& from) noexcept
    : GazeCommand_Feedback() {
    *this = ::std::move(from);
  }

  inline GazeCommand_Feedback& operator=(const GazeCommand_Feedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline GazeCommand_Feedback& operator=(GazeCommand_Feedback&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GazeCommand_Feedback& default_instance() {
    return *internal_default_instance();
  }
  static inline const GazeCommand_Feedback* internal_default_instance() {
    return reinterpret_cast<const GazeCommand_Feedback*>(
               &_GazeCommand_Feedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GazeCommand_Feedback& a, GazeCommand_Feedback& b) {
    a.Swap(&b);
  }
  inline void Swap(GazeCommand_Feedback* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GazeCommand_Feedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GazeCommand_Feedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GazeCommand_Feedback>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GazeCommand_Feedback& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GazeCommand_Feedback& from) {
    GazeCommand_Feedback::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GazeCommand_Feedback* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.GazeCommand.Feedback";
  }
  protected:
  explicit GazeCommand_Feedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GazeCommand_Feedback_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    GazeCommand_Feedback_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_TRAJECTORY_COMPLETE =
    GazeCommand_Feedback_Status_STATUS_TRAJECTORY_COMPLETE;
  static constexpr Status STATUS_IN_PROGRESS =
    GazeCommand_Feedback_Status_STATUS_IN_PROGRESS;
  static constexpr Status STATUS_TOOL_TRAJECTORY_STALLED =
    GazeCommand_Feedback_Status_STATUS_TOOL_TRAJECTORY_STALLED;
  static inline bool Status_IsValid(int value) {
    return GazeCommand_Feedback_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    GazeCommand_Feedback_Status_Status_MIN;
  static constexpr Status Status_MAX =
    GazeCommand_Feedback_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    GazeCommand_Feedback_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return GazeCommand_Feedback_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return GazeCommand_Feedback_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return GazeCommand_Feedback_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kGazingAtTargetFieldNumber = 2,
    kHandPositionAtGoalFieldNumber = 3,
    kHandRollAtGoalFieldNumber = 4,
    kGazeToTargetRotationMeasuredFieldNumber = 5,
    kHandDistanceToGoalMeasuredFieldNumber = 6,
    kHandRollToTargetRollMeasuredFieldNumber = 7,
  };
  // .bosdyn.api.GazeCommand.Feedback.Status status = 1;
  void clear_status();
  ::bosdyn::api::GazeCommand_Feedback_Status status() const;
  void set_status(::bosdyn::api::GazeCommand_Feedback_Status value);
  private:
  ::bosdyn::api::GazeCommand_Feedback_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::GazeCommand_Feedback_Status value);
  public:

  // bool gazing_at_target = 2;
  void clear_gazing_at_target();
  bool gazing_at_target() const;
  void set_gazing_at_target(bool value);
  private:
  bool _internal_gazing_at_target() const;
  void _internal_set_gazing_at_target(bool value);
  public:

  // bool hand_position_at_goal = 3;
  void clear_hand_position_at_goal();
  bool hand_position_at_goal() const;
  void set_hand_position_at_goal(bool value);
  private:
  bool _internal_hand_position_at_goal() const;
  void _internal_set_hand_position_at_goal(bool value);
  public:

  // bool hand_roll_at_goal = 4;
  void clear_hand_roll_at_goal();
  bool hand_roll_at_goal() const;
  void set_hand_roll_at_goal(bool value);
  private:
  bool _internal_hand_roll_at_goal() const;
  void _internal_set_hand_roll_at_goal(bool value);
  public:

  // float gaze_to_target_rotation_measured = 5;
  void clear_gaze_to_target_rotation_measured();
  float gaze_to_target_rotation_measured() const;
  void set_gaze_to_target_rotation_measured(float value);
  private:
  float _internal_gaze_to_target_rotation_measured() const;
  void _internal_set_gaze_to_target_rotation_measured(float value);
  public:

  // float hand_distance_to_goal_measured = 6;
  void clear_hand_distance_to_goal_measured();
  float hand_distance_to_goal_measured() const;
  void set_hand_distance_to_goal_measured(float value);
  private:
  float _internal_hand_distance_to_goal_measured() const;
  void _internal_set_hand_distance_to_goal_measured(float value);
  public:

  // float hand_roll_to_target_roll_measured = 7;
  void clear_hand_roll_to_target_roll_measured();
  float hand_roll_to_target_roll_measured() const;
  void set_hand_roll_to_target_roll_measured(float value);
  private:
  float _internal_hand_roll_to_target_roll_measured() const;
  void _internal_set_hand_roll_to_target_roll_measured(float value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.GazeCommand.Feedback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int status_;
    bool gazing_at_target_;
    bool hand_position_at_goal_;
    bool hand_roll_at_goal_;
    float gaze_to_target_rotation_measured_;
    float hand_distance_to_goal_measured_;
    float hand_roll_to_target_roll_measured_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class GazeCommand final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:bosdyn.api.GazeCommand) */ {
 public:
  inline GazeCommand() : GazeCommand(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GazeCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GazeCommand(const GazeCommand& from);
  GazeCommand(GazeCommand&& from) noexcept
    : GazeCommand() {
    *this = ::std::move(from);
  }

  inline GazeCommand& operator=(const GazeCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GazeCommand& operator=(GazeCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GazeCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const GazeCommand* internal_default_instance() {
    return reinterpret_cast<const GazeCommand*>(
               &_GazeCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GazeCommand& a, GazeCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(GazeCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GazeCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GazeCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GazeCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GazeCommand& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GazeCommand& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.GazeCommand";
  }
  protected:
  explicit GazeCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GazeCommand_Request Request;
  typedef GazeCommand_Feedback Feedback;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.GazeCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class ArmStopCommand_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:bosdyn.api.ArmStopCommand.Request) */ {
 public:
  inline ArmStopCommand_Request() : ArmStopCommand_Request(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ArmStopCommand_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmStopCommand_Request(const ArmStopCommand_Request& from);
  ArmStopCommand_Request(ArmStopCommand_Request&& from) noexcept
    : ArmStopCommand_Request() {
    *this = ::std::move(from);
  }

  inline ArmStopCommand_Request& operator=(const ArmStopCommand_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmStopCommand_Request& operator=(ArmStopCommand_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmStopCommand_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArmStopCommand_Request* internal_default_instance() {
    return reinterpret_cast<const ArmStopCommand_Request*>(
               &_ArmStopCommand_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ArmStopCommand_Request& a, ArmStopCommand_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmStopCommand_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmStopCommand_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArmStopCommand_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArmStopCommand_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ArmStopCommand_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ArmStopCommand_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ArmStopCommand.Request";
  }
  protected:
  explicit ArmStopCommand_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.ArmStopCommand.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class ArmStopCommand_Feedback final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:bosdyn.api.ArmStopCommand.Feedback) */ {
 public:
  inline ArmStopCommand_Feedback() : ArmStopCommand_Feedback(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ArmStopCommand_Feedback(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmStopCommand_Feedback(const ArmStopCommand_Feedback& from);
  ArmStopCommand_Feedback(ArmStopCommand_Feedback&& from) noexcept
    : ArmStopCommand_Feedback() {
    *this = ::std::move(from);
  }

  inline ArmStopCommand_Feedback& operator=(const ArmStopCommand_Feedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmStopCommand_Feedback& operator=(ArmStopCommand_Feedback&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmStopCommand_Feedback& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArmStopCommand_Feedback* internal_default_instance() {
    return reinterpret_cast<const ArmStopCommand_Feedback*>(
               &_ArmStopCommand_Feedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ArmStopCommand_Feedback& a, ArmStopCommand_Feedback& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmStopCommand_Feedback* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmStopCommand_Feedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArmStopCommand_Feedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArmStopCommand_Feedback>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ArmStopCommand_Feedback& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ArmStopCommand_Feedback& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ArmStopCommand.Feedback";
  }
  protected:
  explicit ArmStopCommand_Feedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.ArmStopCommand.Feedback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class ArmStopCommand final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:bosdyn.api.ArmStopCommand) */ {
 public:
  inline ArmStopCommand() : ArmStopCommand(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ArmStopCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmStopCommand(const ArmStopCommand& from);
  ArmStopCommand(ArmStopCommand&& from) noexcept
    : ArmStopCommand() {
    *this = ::std::move(from);
  }

  inline ArmStopCommand& operator=(const ArmStopCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmStopCommand& operator=(ArmStopCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmStopCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArmStopCommand* internal_default_instance() {
    return reinterpret_cast<const ArmStopCommand*>(
               &_ArmStopCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ArmStopCommand& a, ArmStopCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmStopCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmStopCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArmStopCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArmStopCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ArmStopCommand& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ArmStopCommand& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ArmStopCommand";
  }
  protected:
  explicit ArmStopCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ArmStopCommand_Request Request;
  typedef ArmStopCommand_Feedback Feedback;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.ArmStopCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class ArmImpedanceCommand_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.ArmImpedanceCommand.Request) */ {
 public:
  inline ArmImpedanceCommand_Request() : ArmImpedanceCommand_Request(nullptr) {}
  ~ArmImpedanceCommand_Request() override;
  explicit PROTOBUF_CONSTEXPR ArmImpedanceCommand_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmImpedanceCommand_Request(const ArmImpedanceCommand_Request& from);
  ArmImpedanceCommand_Request(ArmImpedanceCommand_Request&& from) noexcept
    : ArmImpedanceCommand_Request() {
    *this = ::std::move(from);
  }

  inline ArmImpedanceCommand_Request& operator=(const ArmImpedanceCommand_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmImpedanceCommand_Request& operator=(ArmImpedanceCommand_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmImpedanceCommand_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArmImpedanceCommand_Request* internal_default_instance() {
    return reinterpret_cast<const ArmImpedanceCommand_Request*>(
               &_ArmImpedanceCommand_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ArmImpedanceCommand_Request& a, ArmImpedanceCommand_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmImpedanceCommand_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmImpedanceCommand_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArmImpedanceCommand_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArmImpedanceCommand_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArmImpedanceCommand_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArmImpedanceCommand_Request& from) {
    ArmImpedanceCommand_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArmImpedanceCommand_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ArmImpedanceCommand.Request";
  }
  protected:
  explicit ArmImpedanceCommand_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootFrameNameFieldNumber = 1,
    kRootTformTaskFieldNumber = 2,
    kWristTformToolFieldNumber = 3,
    kTaskTformDesiredToolFieldNumber = 4,
    kFeedForwardWrenchAtToolInDesiredToolFieldNumber = 5,
    kDiagonalStiffnessMatrixFieldNumber = 6,
    kDiagonalDampingMatrixFieldNumber = 7,
    kMaxForceMagFieldNumber = 8,
    kMaxTorqueMagFieldNumber = 9,
  };
  // string root_frame_name = 1;
  void clear_root_frame_name();
  const std::string& root_frame_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_root_frame_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_root_frame_name();
  PROTOBUF_NODISCARD std::string* release_root_frame_name();
  void set_allocated_root_frame_name(std::string* root_frame_name);
  private:
  const std::string& _internal_root_frame_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_root_frame_name(const std::string& value);
  std::string* _internal_mutable_root_frame_name();
  public:

  // .bosdyn.api.SE3Pose root_tform_task = 2;
  bool has_root_tform_task() const;
  private:
  bool _internal_has_root_tform_task() const;
  public:
  void clear_root_tform_task();
  const ::bosdyn::api::SE3Pose& root_tform_task() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SE3Pose* release_root_tform_task();
  ::bosdyn::api::SE3Pose* mutable_root_tform_task();
  void set_allocated_root_tform_task(::bosdyn::api::SE3Pose* root_tform_task);
  private:
  const ::bosdyn::api::SE3Pose& _internal_root_tform_task() const;
  ::bosdyn::api::SE3Pose* _internal_mutable_root_tform_task();
  public:
  void unsafe_arena_set_allocated_root_tform_task(
      ::bosdyn::api::SE3Pose* root_tform_task);
  ::bosdyn::api::SE3Pose* unsafe_arena_release_root_tform_task();

  // .bosdyn.api.SE3Pose wrist_tform_tool = 3;
  bool has_wrist_tform_tool() const;
  private:
  bool _internal_has_wrist_tform_tool() const;
  public:
  void clear_wrist_tform_tool();
  const ::bosdyn::api::SE3Pose& wrist_tform_tool() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SE3Pose* release_wrist_tform_tool();
  ::bosdyn::api::SE3Pose* mutable_wrist_tform_tool();
  void set_allocated_wrist_tform_tool(::bosdyn::api::SE3Pose* wrist_tform_tool);
  private:
  const ::bosdyn::api::SE3Pose& _internal_wrist_tform_tool() const;
  ::bosdyn::api::SE3Pose* _internal_mutable_wrist_tform_tool();
  public:
  void unsafe_arena_set_allocated_wrist_tform_tool(
      ::bosdyn::api::SE3Pose* wrist_tform_tool);
  ::bosdyn::api::SE3Pose* unsafe_arena_release_wrist_tform_tool();

  // .bosdyn.api.SE3Trajectory task_tform_desired_tool = 4;
  bool has_task_tform_desired_tool() const;
  private:
  bool _internal_has_task_tform_desired_tool() const;
  public:
  void clear_task_tform_desired_tool();
  const ::bosdyn::api::SE3Trajectory& task_tform_desired_tool() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SE3Trajectory* release_task_tform_desired_tool();
  ::bosdyn::api::SE3Trajectory* mutable_task_tform_desired_tool();
  void set_allocated_task_tform_desired_tool(::bosdyn::api::SE3Trajectory* task_tform_desired_tool);
  private:
  const ::bosdyn::api::SE3Trajectory& _internal_task_tform_desired_tool() const;
  ::bosdyn::api::SE3Trajectory* _internal_mutable_task_tform_desired_tool();
  public:
  void unsafe_arena_set_allocated_task_tform_desired_tool(
      ::bosdyn::api::SE3Trajectory* task_tform_desired_tool);
  ::bosdyn::api::SE3Trajectory* unsafe_arena_release_task_tform_desired_tool();

  // .bosdyn.api.Wrench feed_forward_wrench_at_tool_in_desired_tool = 5;
  bool has_feed_forward_wrench_at_tool_in_desired_tool() const;
  private:
  bool _internal_has_feed_forward_wrench_at_tool_in_desired_tool() const;
  public:
  void clear_feed_forward_wrench_at_tool_in_desired_tool();
  const ::bosdyn::api::Wrench& feed_forward_wrench_at_tool_in_desired_tool() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Wrench* release_feed_forward_wrench_at_tool_in_desired_tool();
  ::bosdyn::api::Wrench* mutable_feed_forward_wrench_at_tool_in_desired_tool();
  void set_allocated_feed_forward_wrench_at_tool_in_desired_tool(::bosdyn::api::Wrench* feed_forward_wrench_at_tool_in_desired_tool);
  private:
  const ::bosdyn::api::Wrench& _internal_feed_forward_wrench_at_tool_in_desired_tool() const;
  ::bosdyn::api::Wrench* _internal_mutable_feed_forward_wrench_at_tool_in_desired_tool();
  public:
  void unsafe_arena_set_allocated_feed_forward_wrench_at_tool_in_desired_tool(
      ::bosdyn::api::Wrench* feed_forward_wrench_at_tool_in_desired_tool);
  ::bosdyn::api::Wrench* unsafe_arena_release_feed_forward_wrench_at_tool_in_desired_tool();

  // .bosdyn.api.Vector diagonal_stiffness_matrix = 6;
  bool has_diagonal_stiffness_matrix() const;
  private:
  bool _internal_has_diagonal_stiffness_matrix() const;
  public:
  void clear_diagonal_stiffness_matrix();
  const ::bosdyn::api::Vector& diagonal_stiffness_matrix() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vector* release_diagonal_stiffness_matrix();
  ::bosdyn::api::Vector* mutable_diagonal_stiffness_matrix();
  void set_allocated_diagonal_stiffness_matrix(::bosdyn::api::Vector* diagonal_stiffness_matrix);
  private:
  const ::bosdyn::api::Vector& _internal_diagonal_stiffness_matrix() const;
  ::bosdyn::api::Vector* _internal_mutable_diagonal_stiffness_matrix();
  public:
  void unsafe_arena_set_allocated_diagonal_stiffness_matrix(
      ::bosdyn::api::Vector* diagonal_stiffness_matrix);
  ::bosdyn::api::Vector* unsafe_arena_release_diagonal_stiffness_matrix();

  // .bosdyn.api.Vector diagonal_damping_matrix = 7;
  bool has_diagonal_damping_matrix() const;
  private:
  bool _internal_has_diagonal_damping_matrix() const;
  public:
  void clear_diagonal_damping_matrix();
  const ::bosdyn::api::Vector& diagonal_damping_matrix() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vector* release_diagonal_damping_matrix();
  ::bosdyn::api::Vector* mutable_diagonal_damping_matrix();
  void set_allocated_diagonal_damping_matrix(::bosdyn::api::Vector* diagonal_damping_matrix);
  private:
  const ::bosdyn::api::Vector& _internal_diagonal_damping_matrix() const;
  ::bosdyn::api::Vector* _internal_mutable_diagonal_damping_matrix();
  public:
  void unsafe_arena_set_allocated_diagonal_damping_matrix(
      ::bosdyn::api::Vector* diagonal_damping_matrix);
  ::bosdyn::api::Vector* unsafe_arena_release_diagonal_damping_matrix();

  // .google.protobuf.DoubleValue max_force_mag = 8;
  bool has_max_force_mag() const;
  private:
  bool _internal_has_max_force_mag() const;
  public:
  void clear_max_force_mag();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_force_mag() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_force_mag();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_force_mag();
  void set_allocated_max_force_mag(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_force_mag);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_force_mag() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_force_mag();
  public:
  void unsafe_arena_set_allocated_max_force_mag(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_force_mag);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_force_mag();

  // .google.protobuf.DoubleValue max_torque_mag = 9;
  bool has_max_torque_mag() const;
  private:
  bool _internal_has_max_torque_mag() const;
  public:
  void clear_max_torque_mag();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_torque_mag() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_torque_mag();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_torque_mag();
  void set_allocated_max_torque_mag(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_torque_mag);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_torque_mag() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_torque_mag();
  public:
  void unsafe_arena_set_allocated_max_torque_mag(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_torque_mag);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_torque_mag();

  // @@protoc_insertion_point(class_scope:bosdyn.api.ArmImpedanceCommand.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_frame_name_;
    ::bosdyn::api::SE3Pose* root_tform_task_;
    ::bosdyn::api::SE3Pose* wrist_tform_tool_;
    ::bosdyn::api::SE3Trajectory* task_tform_desired_tool_;
    ::bosdyn::api::Wrench* feed_forward_wrench_at_tool_in_desired_tool_;
    ::bosdyn::api::Vector* diagonal_stiffness_matrix_;
    ::bosdyn::api::Vector* diagonal_damping_matrix_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_force_mag_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_torque_mag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class ArmImpedanceCommand_Feedback final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:bosdyn.api.ArmImpedanceCommand.Feedback) */ {
 public:
  inline ArmImpedanceCommand_Feedback() : ArmImpedanceCommand_Feedback(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ArmImpedanceCommand_Feedback(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmImpedanceCommand_Feedback(const ArmImpedanceCommand_Feedback& from);
  ArmImpedanceCommand_Feedback(ArmImpedanceCommand_Feedback&& from) noexcept
    : ArmImpedanceCommand_Feedback() {
    *this = ::std::move(from);
  }

  inline ArmImpedanceCommand_Feedback& operator=(const ArmImpedanceCommand_Feedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmImpedanceCommand_Feedback& operator=(ArmImpedanceCommand_Feedback&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmImpedanceCommand_Feedback& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArmImpedanceCommand_Feedback* internal_default_instance() {
    return reinterpret_cast<const ArmImpedanceCommand_Feedback*>(
               &_ArmImpedanceCommand_Feedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ArmImpedanceCommand_Feedback& a, ArmImpedanceCommand_Feedback& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmImpedanceCommand_Feedback* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmImpedanceCommand_Feedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArmImpedanceCommand_Feedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArmImpedanceCommand_Feedback>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ArmImpedanceCommand_Feedback& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ArmImpedanceCommand_Feedback& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ArmImpedanceCommand.Feedback";
  }
  protected:
  explicit ArmImpedanceCommand_Feedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.ArmImpedanceCommand.Feedback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class ArmImpedanceCommand final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:bosdyn.api.ArmImpedanceCommand) */ {
 public:
  inline ArmImpedanceCommand() : ArmImpedanceCommand(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ArmImpedanceCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmImpedanceCommand(const ArmImpedanceCommand& from);
  ArmImpedanceCommand(ArmImpedanceCommand&& from) noexcept
    : ArmImpedanceCommand() {
    *this = ::std::move(from);
  }

  inline ArmImpedanceCommand& operator=(const ArmImpedanceCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmImpedanceCommand& operator=(ArmImpedanceCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmImpedanceCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArmImpedanceCommand* internal_default_instance() {
    return reinterpret_cast<const ArmImpedanceCommand*>(
               &_ArmImpedanceCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ArmImpedanceCommand& a, ArmImpedanceCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmImpedanceCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmImpedanceCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArmImpedanceCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArmImpedanceCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ArmImpedanceCommand& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ArmImpedanceCommand& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ArmImpedanceCommand";
  }
  protected:
  explicit ArmImpedanceCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ArmImpedanceCommand_Request Request;
  typedef ArmImpedanceCommand_Feedback Feedback;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.ArmImpedanceCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fcommand_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ArmCommand_Request

// .bosdyn.api.ArmCartesianCommand.Request arm_cartesian_command = 3;
inline bool ArmCommand_Request::_internal_has_arm_cartesian_command() const {
  return command_case() == kArmCartesianCommand;
}
inline bool ArmCommand_Request::has_arm_cartesian_command() const {
  return _internal_has_arm_cartesian_command();
}
inline void ArmCommand_Request::set_has_arm_cartesian_command() {
  _impl_._oneof_case_[0] = kArmCartesianCommand;
}
inline void ArmCommand_Request::clear_arm_cartesian_command() {
  if (_internal_has_arm_cartesian_command()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.command_.arm_cartesian_command_;
    }
    clear_has_command();
  }
}
inline ::bosdyn::api::ArmCartesianCommand_Request* ArmCommand_Request::release_arm_cartesian_command() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmCommand.Request.arm_cartesian_command)
  if (_internal_has_arm_cartesian_command()) {
    clear_has_command();
    ::bosdyn::api::ArmCartesianCommand_Request* temp = _impl_.command_.arm_cartesian_command_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.arm_cartesian_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::ArmCartesianCommand_Request& ArmCommand_Request::_internal_arm_cartesian_command() const {
  return _internal_has_arm_cartesian_command()
      ? *_impl_.command_.arm_cartesian_command_
      : reinterpret_cast< ::bosdyn::api::ArmCartesianCommand_Request&>(::bosdyn::api::_ArmCartesianCommand_Request_default_instance_);
}
inline const ::bosdyn::api::ArmCartesianCommand_Request& ArmCommand_Request::arm_cartesian_command() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCommand.Request.arm_cartesian_command)
  return _internal_arm_cartesian_command();
}
inline ::bosdyn::api::ArmCartesianCommand_Request* ArmCommand_Request::unsafe_arena_release_arm_cartesian_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.ArmCommand.Request.arm_cartesian_command)
  if (_internal_has_arm_cartesian_command()) {
    clear_has_command();
    ::bosdyn::api::ArmCartesianCommand_Request* temp = _impl_.command_.arm_cartesian_command_;
    _impl_.command_.arm_cartesian_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ArmCommand_Request::unsafe_arena_set_allocated_arm_cartesian_command(::bosdyn::api::ArmCartesianCommand_Request* arm_cartesian_command) {
  clear_command();
  if (arm_cartesian_command) {
    set_has_arm_cartesian_command();
    _impl_.command_.arm_cartesian_command_ = arm_cartesian_command;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmCommand.Request.arm_cartesian_command)
}
inline ::bosdyn::api::ArmCartesianCommand_Request* ArmCommand_Request::_internal_mutable_arm_cartesian_command() {
  if (!_internal_has_arm_cartesian_command()) {
    clear_command();
    set_has_arm_cartesian_command();
    _impl_.command_.arm_cartesian_command_ = CreateMaybeMessage< ::bosdyn::api::ArmCartesianCommand_Request >(GetArenaForAllocation());
  }
  return _impl_.command_.arm_cartesian_command_;
}
inline ::bosdyn::api::ArmCartesianCommand_Request* ArmCommand_Request::mutable_arm_cartesian_command() {
  ::bosdyn::api::ArmCartesianCommand_Request* _msg = _internal_mutable_arm_cartesian_command();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmCommand.Request.arm_cartesian_command)
  return _msg;
}

// .bosdyn.api.ArmJointMoveCommand.Request arm_joint_move_command = 4;
inline bool ArmCommand_Request::_internal_has_arm_joint_move_command() const {
  return command_case() == kArmJointMoveCommand;
}
inline bool ArmCommand_Request::has_arm_joint_move_command() const {
  return _internal_has_arm_joint_move_command();
}
inline void ArmCommand_Request::set_has_arm_joint_move_command() {
  _impl_._oneof_case_[0] = kArmJointMoveCommand;
}
inline void ArmCommand_Request::clear_arm_joint_move_command() {
  if (_internal_has_arm_joint_move_command()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.command_.arm_joint_move_command_;
    }
    clear_has_command();
  }
}
inline ::bosdyn::api::ArmJointMoveCommand_Request* ArmCommand_Request::release_arm_joint_move_command() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmCommand.Request.arm_joint_move_command)
  if (_internal_has_arm_joint_move_command()) {
    clear_has_command();
    ::bosdyn::api::ArmJointMoveCommand_Request* temp = _impl_.command_.arm_joint_move_command_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.arm_joint_move_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::ArmJointMoveCommand_Request& ArmCommand_Request::_internal_arm_joint_move_command() const {
  return _internal_has_arm_joint_move_command()
      ? *_impl_.command_.arm_joint_move_command_
      : reinterpret_cast< ::bosdyn::api::ArmJointMoveCommand_Request&>(::bosdyn::api::_ArmJointMoveCommand_Request_default_instance_);
}
inline const ::bosdyn::api::ArmJointMoveCommand_Request& ArmCommand_Request::arm_joint_move_command() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCommand.Request.arm_joint_move_command)
  return _internal_arm_joint_move_command();
}
inline ::bosdyn::api::ArmJointMoveCommand_Request* ArmCommand_Request::unsafe_arena_release_arm_joint_move_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.ArmCommand.Request.arm_joint_move_command)
  if (_internal_has_arm_joint_move_command()) {
    clear_has_command();
    ::bosdyn::api::ArmJointMoveCommand_Request* temp = _impl_.command_.arm_joint_move_command_;
    _impl_.command_.arm_joint_move_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ArmCommand_Request::unsafe_arena_set_allocated_arm_joint_move_command(::bosdyn::api::ArmJointMoveCommand_Request* arm_joint_move_command) {
  clear_command();
  if (arm_joint_move_command) {
    set_has_arm_joint_move_command();
    _impl_.command_.arm_joint_move_command_ = arm_joint_move_command;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmCommand.Request.arm_joint_move_command)
}
inline ::bosdyn::api::ArmJointMoveCommand_Request* ArmCommand_Request::_internal_mutable_arm_joint_move_command() {
  if (!_internal_has_arm_joint_move_command()) {
    clear_command();
    set_has_arm_joint_move_command();
    _impl_.command_.arm_joint_move_command_ = CreateMaybeMessage< ::bosdyn::api::ArmJointMoveCommand_Request >(GetArenaForAllocation());
  }
  return _impl_.command_.arm_joint_move_command_;
}
inline ::bosdyn::api::ArmJointMoveCommand_Request* ArmCommand_Request::mutable_arm_joint_move_command() {
  ::bosdyn::api::ArmJointMoveCommand_Request* _msg = _internal_mutable_arm_joint_move_command();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmCommand.Request.arm_joint_move_command)
  return _msg;
}

// .bosdyn.api.NamedArmPositionsCommand.Request named_arm_position_command = 5;
inline bool ArmCommand_Request::_internal_has_named_arm_position_command() const {
  return command_case() == kNamedArmPositionCommand;
}
inline bool ArmCommand_Request::has_named_arm_position_command() const {
  return _internal_has_named_arm_position_command();
}
inline void ArmCommand_Request::set_has_named_arm_position_command() {
  _impl_._oneof_case_[0] = kNamedArmPositionCommand;
}
inline void ArmCommand_Request::clear_named_arm_position_command() {
  if (_internal_has_named_arm_position_command()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.command_.named_arm_position_command_;
    }
    clear_has_command();
  }
}
inline ::bosdyn::api::NamedArmPositionsCommand_Request* ArmCommand_Request::release_named_arm_position_command() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmCommand.Request.named_arm_position_command)
  if (_internal_has_named_arm_position_command()) {
    clear_has_command();
    ::bosdyn::api::NamedArmPositionsCommand_Request* temp = _impl_.command_.named_arm_position_command_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.named_arm_position_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::NamedArmPositionsCommand_Request& ArmCommand_Request::_internal_named_arm_position_command() const {
  return _internal_has_named_arm_position_command()
      ? *_impl_.command_.named_arm_position_command_
      : reinterpret_cast< ::bosdyn::api::NamedArmPositionsCommand_Request&>(::bosdyn::api::_NamedArmPositionsCommand_Request_default_instance_);
}
inline const ::bosdyn::api::NamedArmPositionsCommand_Request& ArmCommand_Request::named_arm_position_command() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCommand.Request.named_arm_position_command)
  return _internal_named_arm_position_command();
}
inline ::bosdyn::api::NamedArmPositionsCommand_Request* ArmCommand_Request::unsafe_arena_release_named_arm_position_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.ArmCommand.Request.named_arm_position_command)
  if (_internal_has_named_arm_position_command()) {
    clear_has_command();
    ::bosdyn::api::NamedArmPositionsCommand_Request* temp = _impl_.command_.named_arm_position_command_;
    _impl_.command_.named_arm_position_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ArmCommand_Request::unsafe_arena_set_allocated_named_arm_position_command(::bosdyn::api::NamedArmPositionsCommand_Request* named_arm_position_command) {
  clear_command();
  if (named_arm_position_command) {
    set_has_named_arm_position_command();
    _impl_.command_.named_arm_position_command_ = named_arm_position_command;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmCommand.Request.named_arm_position_command)
}
inline ::bosdyn::api::NamedArmPositionsCommand_Request* ArmCommand_Request::_internal_mutable_named_arm_position_command() {
  if (!_internal_has_named_arm_position_command()) {
    clear_command();
    set_has_named_arm_position_command();
    _impl_.command_.named_arm_position_command_ = CreateMaybeMessage< ::bosdyn::api::NamedArmPositionsCommand_Request >(GetArenaForAllocation());
  }
  return _impl_.command_.named_arm_position_command_;
}
inline ::bosdyn::api::NamedArmPositionsCommand_Request* ArmCommand_Request::mutable_named_arm_position_command() {
  ::bosdyn::api::NamedArmPositionsCommand_Request* _msg = _internal_mutable_named_arm_position_command();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmCommand.Request.named_arm_position_command)
  return _msg;
}

// .bosdyn.api.ArmVelocityCommand.Request arm_velocity_command = 6;
inline bool ArmCommand_Request::_internal_has_arm_velocity_command() const {
  return command_case() == kArmVelocityCommand;
}
inline bool ArmCommand_Request::has_arm_velocity_command() const {
  return _internal_has_arm_velocity_command();
}
inline void ArmCommand_Request::set_has_arm_velocity_command() {
  _impl_._oneof_case_[0] = kArmVelocityCommand;
}
inline void ArmCommand_Request::clear_arm_velocity_command() {
  if (_internal_has_arm_velocity_command()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.command_.arm_velocity_command_;
    }
    clear_has_command();
  }
}
inline ::bosdyn::api::ArmVelocityCommand_Request* ArmCommand_Request::release_arm_velocity_command() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmCommand.Request.arm_velocity_command)
  if (_internal_has_arm_velocity_command()) {
    clear_has_command();
    ::bosdyn::api::ArmVelocityCommand_Request* temp = _impl_.command_.arm_velocity_command_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.arm_velocity_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::ArmVelocityCommand_Request& ArmCommand_Request::_internal_arm_velocity_command() const {
  return _internal_has_arm_velocity_command()
      ? *_impl_.command_.arm_velocity_command_
      : reinterpret_cast< ::bosdyn::api::ArmVelocityCommand_Request&>(::bosdyn::api::_ArmVelocityCommand_Request_default_instance_);
}
inline const ::bosdyn::api::ArmVelocityCommand_Request& ArmCommand_Request::arm_velocity_command() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCommand.Request.arm_velocity_command)
  return _internal_arm_velocity_command();
}
inline ::bosdyn::api::ArmVelocityCommand_Request* ArmCommand_Request::unsafe_arena_release_arm_velocity_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.ArmCommand.Request.arm_velocity_command)
  if (_internal_has_arm_velocity_command()) {
    clear_has_command();
    ::bosdyn::api::ArmVelocityCommand_Request* temp = _impl_.command_.arm_velocity_command_;
    _impl_.command_.arm_velocity_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ArmCommand_Request::unsafe_arena_set_allocated_arm_velocity_command(::bosdyn::api::ArmVelocityCommand_Request* arm_velocity_command) {
  clear_command();
  if (arm_velocity_command) {
    set_has_arm_velocity_command();
    _impl_.command_.arm_velocity_command_ = arm_velocity_command;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmCommand.Request.arm_velocity_command)
}
inline ::bosdyn::api::ArmVelocityCommand_Request* ArmCommand_Request::_internal_mutable_arm_velocity_command() {
  if (!_internal_has_arm_velocity_command()) {
    clear_command();
    set_has_arm_velocity_command();
    _impl_.command_.arm_velocity_command_ = CreateMaybeMessage< ::bosdyn::api::ArmVelocityCommand_Request >(GetArenaForAllocation());
  }
  return _impl_.command_.arm_velocity_command_;
}
inline ::bosdyn::api::ArmVelocityCommand_Request* ArmCommand_Request::mutable_arm_velocity_command() {
  ::bosdyn::api::ArmVelocityCommand_Request* _msg = _internal_mutable_arm_velocity_command();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmCommand.Request.arm_velocity_command)
  return _msg;
}

// .bosdyn.api.GazeCommand.Request arm_gaze_command = 8;
inline bool ArmCommand_Request::_internal_has_arm_gaze_command() const {
  return command_case() == kArmGazeCommand;
}
inline bool ArmCommand_Request::has_arm_gaze_command() const {
  return _internal_has_arm_gaze_command();
}
inline void ArmCommand_Request::set_has_arm_gaze_command() {
  _impl_._oneof_case_[0] = kArmGazeCommand;
}
inline void ArmCommand_Request::clear_arm_gaze_command() {
  if (_internal_has_arm_gaze_command()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.command_.arm_gaze_command_;
    }
    clear_has_command();
  }
}
inline ::bosdyn::api::GazeCommand_Request* ArmCommand_Request::release_arm_gaze_command() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmCommand.Request.arm_gaze_command)
  if (_internal_has_arm_gaze_command()) {
    clear_has_command();
    ::bosdyn::api::GazeCommand_Request* temp = _impl_.command_.arm_gaze_command_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.arm_gaze_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::GazeCommand_Request& ArmCommand_Request::_internal_arm_gaze_command() const {
  return _internal_has_arm_gaze_command()
      ? *_impl_.command_.arm_gaze_command_
      : reinterpret_cast< ::bosdyn::api::GazeCommand_Request&>(::bosdyn::api::_GazeCommand_Request_default_instance_);
}
inline const ::bosdyn::api::GazeCommand_Request& ArmCommand_Request::arm_gaze_command() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCommand.Request.arm_gaze_command)
  return _internal_arm_gaze_command();
}
inline ::bosdyn::api::GazeCommand_Request* ArmCommand_Request::unsafe_arena_release_arm_gaze_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.ArmCommand.Request.arm_gaze_command)
  if (_internal_has_arm_gaze_command()) {
    clear_has_command();
    ::bosdyn::api::GazeCommand_Request* temp = _impl_.command_.arm_gaze_command_;
    _impl_.command_.arm_gaze_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ArmCommand_Request::unsafe_arena_set_allocated_arm_gaze_command(::bosdyn::api::GazeCommand_Request* arm_gaze_command) {
  clear_command();
  if (arm_gaze_command) {
    set_has_arm_gaze_command();
    _impl_.command_.arm_gaze_command_ = arm_gaze_command;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmCommand.Request.arm_gaze_command)
}
inline ::bosdyn::api::GazeCommand_Request* ArmCommand_Request::_internal_mutable_arm_gaze_command() {
  if (!_internal_has_arm_gaze_command()) {
    clear_command();
    set_has_arm_gaze_command();
    _impl_.command_.arm_gaze_command_ = CreateMaybeMessage< ::bosdyn::api::GazeCommand_Request >(GetArenaForAllocation());
  }
  return _impl_.command_.arm_gaze_command_;
}
inline ::bosdyn::api::GazeCommand_Request* ArmCommand_Request::mutable_arm_gaze_command() {
  ::bosdyn::api::GazeCommand_Request* _msg = _internal_mutable_arm_gaze_command();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmCommand.Request.arm_gaze_command)
  return _msg;
}

// .bosdyn.api.ArmStopCommand.Request arm_stop_command = 9;
inline bool ArmCommand_Request::_internal_has_arm_stop_command() const {
  return command_case() == kArmStopCommand;
}
inline bool ArmCommand_Request::has_arm_stop_command() const {
  return _internal_has_arm_stop_command();
}
inline void ArmCommand_Request::set_has_arm_stop_command() {
  _impl_._oneof_case_[0] = kArmStopCommand;
}
inline void ArmCommand_Request::clear_arm_stop_command() {
  if (_internal_has_arm_stop_command()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.command_.arm_stop_command_;
    }
    clear_has_command();
  }
}
inline ::bosdyn::api::ArmStopCommand_Request* ArmCommand_Request::release_arm_stop_command() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmCommand.Request.arm_stop_command)
  if (_internal_has_arm_stop_command()) {
    clear_has_command();
    ::bosdyn::api::ArmStopCommand_Request* temp = _impl_.command_.arm_stop_command_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.arm_stop_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::ArmStopCommand_Request& ArmCommand_Request::_internal_arm_stop_command() const {
  return _internal_has_arm_stop_command()
      ? *_impl_.command_.arm_stop_command_
      : reinterpret_cast< ::bosdyn::api::ArmStopCommand_Request&>(::bosdyn::api::_ArmStopCommand_Request_default_instance_);
}
inline const ::bosdyn::api::ArmStopCommand_Request& ArmCommand_Request::arm_stop_command() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCommand.Request.arm_stop_command)
  return _internal_arm_stop_command();
}
inline ::bosdyn::api::ArmStopCommand_Request* ArmCommand_Request::unsafe_arena_release_arm_stop_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.ArmCommand.Request.arm_stop_command)
  if (_internal_has_arm_stop_command()) {
    clear_has_command();
    ::bosdyn::api::ArmStopCommand_Request* temp = _impl_.command_.arm_stop_command_;
    _impl_.command_.arm_stop_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ArmCommand_Request::unsafe_arena_set_allocated_arm_stop_command(::bosdyn::api::ArmStopCommand_Request* arm_stop_command) {
  clear_command();
  if (arm_stop_command) {
    set_has_arm_stop_command();
    _impl_.command_.arm_stop_command_ = arm_stop_command;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmCommand.Request.arm_stop_command)
}
inline ::bosdyn::api::ArmStopCommand_Request* ArmCommand_Request::_internal_mutable_arm_stop_command() {
  if (!_internal_has_arm_stop_command()) {
    clear_command();
    set_has_arm_stop_command();
    _impl_.command_.arm_stop_command_ = CreateMaybeMessage< ::bosdyn::api::ArmStopCommand_Request >(GetArenaForAllocation());
  }
  return _impl_.command_.arm_stop_command_;
}
inline ::bosdyn::api::ArmStopCommand_Request* ArmCommand_Request::mutable_arm_stop_command() {
  ::bosdyn::api::ArmStopCommand_Request* _msg = _internal_mutable_arm_stop_command();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmCommand.Request.arm_stop_command)
  return _msg;
}

// .bosdyn.api.ArmDragCommand.Request arm_drag_command = 10;
inline bool ArmCommand_Request::_internal_has_arm_drag_command() const {
  return command_case() == kArmDragCommand;
}
inline bool ArmCommand_Request::has_arm_drag_command() const {
  return _internal_has_arm_drag_command();
}
inline void ArmCommand_Request::set_has_arm_drag_command() {
  _impl_._oneof_case_[0] = kArmDragCommand;
}
inline ::bosdyn::api::ArmDragCommand_Request* ArmCommand_Request::release_arm_drag_command() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmCommand.Request.arm_drag_command)
  if (_internal_has_arm_drag_command()) {
    clear_has_command();
    ::bosdyn::api::ArmDragCommand_Request* temp = _impl_.command_.arm_drag_command_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.arm_drag_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::ArmDragCommand_Request& ArmCommand_Request::_internal_arm_drag_command() const {
  return _internal_has_arm_drag_command()
      ? *_impl_.command_.arm_drag_command_
      : reinterpret_cast< ::bosdyn::api::ArmDragCommand_Request&>(::bosdyn::api::_ArmDragCommand_Request_default_instance_);
}
inline const ::bosdyn::api::ArmDragCommand_Request& ArmCommand_Request::arm_drag_command() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCommand.Request.arm_drag_command)
  return _internal_arm_drag_command();
}
inline ::bosdyn::api::ArmDragCommand_Request* ArmCommand_Request::unsafe_arena_release_arm_drag_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.ArmCommand.Request.arm_drag_command)
  if (_internal_has_arm_drag_command()) {
    clear_has_command();
    ::bosdyn::api::ArmDragCommand_Request* temp = _impl_.command_.arm_drag_command_;
    _impl_.command_.arm_drag_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ArmCommand_Request::unsafe_arena_set_allocated_arm_drag_command(::bosdyn::api::ArmDragCommand_Request* arm_drag_command) {
  clear_command();
  if (arm_drag_command) {
    set_has_arm_drag_command();
    _impl_.command_.arm_drag_command_ = arm_drag_command;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmCommand.Request.arm_drag_command)
}
inline ::bosdyn::api::ArmDragCommand_Request* ArmCommand_Request::_internal_mutable_arm_drag_command() {
  if (!_internal_has_arm_drag_command()) {
    clear_command();
    set_has_arm_drag_command();
    _impl_.command_.arm_drag_command_ = CreateMaybeMessage< ::bosdyn::api::ArmDragCommand_Request >(GetArenaForAllocation());
  }
  return _impl_.command_.arm_drag_command_;
}
inline ::bosdyn::api::ArmDragCommand_Request* ArmCommand_Request::mutable_arm_drag_command() {
  ::bosdyn::api::ArmDragCommand_Request* _msg = _internal_mutable_arm_drag_command();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmCommand.Request.arm_drag_command)
  return _msg;
}

// .bosdyn.api.ArmImpedanceCommand.Request arm_impedance_command = 12;
inline bool ArmCommand_Request::_internal_has_arm_impedance_command() const {
  return command_case() == kArmImpedanceCommand;
}
inline bool ArmCommand_Request::has_arm_impedance_command() const {
  return _internal_has_arm_impedance_command();
}
inline void ArmCommand_Request::set_has_arm_impedance_command() {
  _impl_._oneof_case_[0] = kArmImpedanceCommand;
}
inline void ArmCommand_Request::clear_arm_impedance_command() {
  if (_internal_has_arm_impedance_command()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.command_.arm_impedance_command_;
    }
    clear_has_command();
  }
}
inline ::bosdyn::api::ArmImpedanceCommand_Request* ArmCommand_Request::release_arm_impedance_command() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmCommand.Request.arm_impedance_command)
  if (_internal_has_arm_impedance_command()) {
    clear_has_command();
    ::bosdyn::api::ArmImpedanceCommand_Request* temp = _impl_.command_.arm_impedance_command_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.arm_impedance_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::ArmImpedanceCommand_Request& ArmCommand_Request::_internal_arm_impedance_command() const {
  return _internal_has_arm_impedance_command()
      ? *_impl_.command_.arm_impedance_command_
      : reinterpret_cast< ::bosdyn::api::ArmImpedanceCommand_Request&>(::bosdyn::api::_ArmImpedanceCommand_Request_default_instance_);
}
inline const ::bosdyn::api::ArmImpedanceCommand_Request& ArmCommand_Request::arm_impedance_command() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCommand.Request.arm_impedance_command)
  return _internal_arm_impedance_command();
}
inline ::bosdyn::api::ArmImpedanceCommand_Request* ArmCommand_Request::unsafe_arena_release_arm_impedance_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.ArmCommand.Request.arm_impedance_command)
  if (_internal_has_arm_impedance_command()) {
    clear_has_command();
    ::bosdyn::api::ArmImpedanceCommand_Request* temp = _impl_.command_.arm_impedance_command_;
    _impl_.command_.arm_impedance_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ArmCommand_Request::unsafe_arena_set_allocated_arm_impedance_command(::bosdyn::api::ArmImpedanceCommand_Request* arm_impedance_command) {
  clear_command();
  if (arm_impedance_command) {
    set_has_arm_impedance_command();
    _impl_.command_.arm_impedance_command_ = arm_impedance_command;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmCommand.Request.arm_impedance_command)
}
inline ::bosdyn::api::ArmImpedanceCommand_Request* ArmCommand_Request::_internal_mutable_arm_impedance_command() {
  if (!_internal_has_arm_impedance_command()) {
    clear_command();
    set_has_arm_impedance_command();
    _impl_.command_.arm_impedance_command_ = CreateMaybeMessage< ::bosdyn::api::ArmImpedanceCommand_Request >(GetArenaForAllocation());
  }
  return _impl_.command_.arm_impedance_command_;
}
inline ::bosdyn::api::ArmImpedanceCommand_Request* ArmCommand_Request::mutable_arm_impedance_command() {
  ::bosdyn::api::ArmImpedanceCommand_Request* _msg = _internal_mutable_arm_impedance_command();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmCommand.Request.arm_impedance_command)
  return _msg;
}

// .bosdyn.api.ArmParams params = 11;
inline bool ArmCommand_Request::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool ArmCommand_Request::has_params() const {
  return _internal_has_params();
}
inline void ArmCommand_Request::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::bosdyn::api::ArmParams& ArmCommand_Request::_internal_params() const {
  const ::bosdyn::api::ArmParams* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ArmParams&>(
      ::bosdyn::api::_ArmParams_default_instance_);
}
inline const ::bosdyn::api::ArmParams& ArmCommand_Request::params() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCommand.Request.params)
  return _internal_params();
}
inline void ArmCommand_Request::unsafe_arena_set_allocated_params(
    ::bosdyn::api::ArmParams* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmCommand.Request.params)
}
inline ::bosdyn::api::ArmParams* ArmCommand_Request::release_params() {
  
  ::bosdyn::api::ArmParams* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ArmParams* ArmCommand_Request::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmCommand.Request.params)
  
  ::bosdyn::api::ArmParams* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ArmParams* ArmCommand_Request::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ArmParams>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::bosdyn::api::ArmParams* ArmCommand_Request::mutable_params() {
  ::bosdyn::api::ArmParams* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmCommand.Request.params)
  return _msg;
}
inline void ArmCommand_Request::set_allocated_params(::bosdyn::api::ArmParams* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmCommand.Request.params)
}

inline bool ArmCommand_Request::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
inline void ArmCommand_Request::clear_has_command() {
  _impl_._oneof_case_[0] = COMMAND_NOT_SET;
}
inline ArmCommand_Request::CommandCase ArmCommand_Request::command_case() const {
  return ArmCommand_Request::CommandCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ArmCommand_Feedback

// .bosdyn.api.ArmCartesianCommand.Feedback arm_cartesian_feedback = 3;
inline bool ArmCommand_Feedback::_internal_has_arm_cartesian_feedback() const {
  return feedback_case() == kArmCartesianFeedback;
}
inline bool ArmCommand_Feedback::has_arm_cartesian_feedback() const {
  return _internal_has_arm_cartesian_feedback();
}
inline void ArmCommand_Feedback::set_has_arm_cartesian_feedback() {
  _impl_._oneof_case_[0] = kArmCartesianFeedback;
}
inline void ArmCommand_Feedback::clear_arm_cartesian_feedback() {
  if (_internal_has_arm_cartesian_feedback()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.feedback_.arm_cartesian_feedback_;
    }
    clear_has_feedback();
  }
}
inline ::bosdyn::api::ArmCartesianCommand_Feedback* ArmCommand_Feedback::release_arm_cartesian_feedback() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmCommand.Feedback.arm_cartesian_feedback)
  if (_internal_has_arm_cartesian_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::ArmCartesianCommand_Feedback* temp = _impl_.feedback_.arm_cartesian_feedback_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.feedback_.arm_cartesian_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::ArmCartesianCommand_Feedback& ArmCommand_Feedback::_internal_arm_cartesian_feedback() const {
  return _internal_has_arm_cartesian_feedback()
      ? *_impl_.feedback_.arm_cartesian_feedback_
      : reinterpret_cast< ::bosdyn::api::ArmCartesianCommand_Feedback&>(::bosdyn::api::_ArmCartesianCommand_Feedback_default_instance_);
}
inline const ::bosdyn::api::ArmCartesianCommand_Feedback& ArmCommand_Feedback::arm_cartesian_feedback() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCommand.Feedback.arm_cartesian_feedback)
  return _internal_arm_cartesian_feedback();
}
inline ::bosdyn::api::ArmCartesianCommand_Feedback* ArmCommand_Feedback::unsafe_arena_release_arm_cartesian_feedback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.ArmCommand.Feedback.arm_cartesian_feedback)
  if (_internal_has_arm_cartesian_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::ArmCartesianCommand_Feedback* temp = _impl_.feedback_.arm_cartesian_feedback_;
    _impl_.feedback_.arm_cartesian_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ArmCommand_Feedback::unsafe_arena_set_allocated_arm_cartesian_feedback(::bosdyn::api::ArmCartesianCommand_Feedback* arm_cartesian_feedback) {
  clear_feedback();
  if (arm_cartesian_feedback) {
    set_has_arm_cartesian_feedback();
    _impl_.feedback_.arm_cartesian_feedback_ = arm_cartesian_feedback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmCommand.Feedback.arm_cartesian_feedback)
}
inline ::bosdyn::api::ArmCartesianCommand_Feedback* ArmCommand_Feedback::_internal_mutable_arm_cartesian_feedback() {
  if (!_internal_has_arm_cartesian_feedback()) {
    clear_feedback();
    set_has_arm_cartesian_feedback();
    _impl_.feedback_.arm_cartesian_feedback_ = CreateMaybeMessage< ::bosdyn::api::ArmCartesianCommand_Feedback >(GetArenaForAllocation());
  }
  return _impl_.feedback_.arm_cartesian_feedback_;
}
inline ::bosdyn::api::ArmCartesianCommand_Feedback* ArmCommand_Feedback::mutable_arm_cartesian_feedback() {
  ::bosdyn::api::ArmCartesianCommand_Feedback* _msg = _internal_mutable_arm_cartesian_feedback();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmCommand.Feedback.arm_cartesian_feedback)
  return _msg;
}

// .bosdyn.api.ArmJointMoveCommand.Feedback arm_joint_move_feedback = 4;
inline bool ArmCommand_Feedback::_internal_has_arm_joint_move_feedback() const {
  return feedback_case() == kArmJointMoveFeedback;
}
inline bool ArmCommand_Feedback::has_arm_joint_move_feedback() const {
  return _internal_has_arm_joint_move_feedback();
}
inline void ArmCommand_Feedback::set_has_arm_joint_move_feedback() {
  _impl_._oneof_case_[0] = kArmJointMoveFeedback;
}
inline void ArmCommand_Feedback::clear_arm_joint_move_feedback() {
  if (_internal_has_arm_joint_move_feedback()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.feedback_.arm_joint_move_feedback_;
    }
    clear_has_feedback();
  }
}
inline ::bosdyn::api::ArmJointMoveCommand_Feedback* ArmCommand_Feedback::release_arm_joint_move_feedback() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmCommand.Feedback.arm_joint_move_feedback)
  if (_internal_has_arm_joint_move_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::ArmJointMoveCommand_Feedback* temp = _impl_.feedback_.arm_joint_move_feedback_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.feedback_.arm_joint_move_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::ArmJointMoveCommand_Feedback& ArmCommand_Feedback::_internal_arm_joint_move_feedback() const {
  return _internal_has_arm_joint_move_feedback()
      ? *_impl_.feedback_.arm_joint_move_feedback_
      : reinterpret_cast< ::bosdyn::api::ArmJointMoveCommand_Feedback&>(::bosdyn::api::_ArmJointMoveCommand_Feedback_default_instance_);
}
inline const ::bosdyn::api::ArmJointMoveCommand_Feedback& ArmCommand_Feedback::arm_joint_move_feedback() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCommand.Feedback.arm_joint_move_feedback)
  return _internal_arm_joint_move_feedback();
}
inline ::bosdyn::api::ArmJointMoveCommand_Feedback* ArmCommand_Feedback::unsafe_arena_release_arm_joint_move_feedback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.ArmCommand.Feedback.arm_joint_move_feedback)
  if (_internal_has_arm_joint_move_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::ArmJointMoveCommand_Feedback* temp = _impl_.feedback_.arm_joint_move_feedback_;
    _impl_.feedback_.arm_joint_move_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ArmCommand_Feedback::unsafe_arena_set_allocated_arm_joint_move_feedback(::bosdyn::api::ArmJointMoveCommand_Feedback* arm_joint_move_feedback) {
  clear_feedback();
  if (arm_joint_move_feedback) {
    set_has_arm_joint_move_feedback();
    _impl_.feedback_.arm_joint_move_feedback_ = arm_joint_move_feedback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmCommand.Feedback.arm_joint_move_feedback)
}
inline ::bosdyn::api::ArmJointMoveCommand_Feedback* ArmCommand_Feedback::_internal_mutable_arm_joint_move_feedback() {
  if (!_internal_has_arm_joint_move_feedback()) {
    clear_feedback();
    set_has_arm_joint_move_feedback();
    _impl_.feedback_.arm_joint_move_feedback_ = CreateMaybeMessage< ::bosdyn::api::ArmJointMoveCommand_Feedback >(GetArenaForAllocation());
  }
  return _impl_.feedback_.arm_joint_move_feedback_;
}
inline ::bosdyn::api::ArmJointMoveCommand_Feedback* ArmCommand_Feedback::mutable_arm_joint_move_feedback() {
  ::bosdyn::api::ArmJointMoveCommand_Feedback* _msg = _internal_mutable_arm_joint_move_feedback();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmCommand.Feedback.arm_joint_move_feedback)
  return _msg;
}

// .bosdyn.api.NamedArmPositionsCommand.Feedback named_arm_position_feedback = 5;
inline bool ArmCommand_Feedback::_internal_has_named_arm_position_feedback() const {
  return feedback_case() == kNamedArmPositionFeedback;
}
inline bool ArmCommand_Feedback::has_named_arm_position_feedback() const {
  return _internal_has_named_arm_position_feedback();
}
inline void ArmCommand_Feedback::set_has_named_arm_position_feedback() {
  _impl_._oneof_case_[0] = kNamedArmPositionFeedback;
}
inline void ArmCommand_Feedback::clear_named_arm_position_feedback() {
  if (_internal_has_named_arm_position_feedback()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.feedback_.named_arm_position_feedback_;
    }
    clear_has_feedback();
  }
}
inline ::bosdyn::api::NamedArmPositionsCommand_Feedback* ArmCommand_Feedback::release_named_arm_position_feedback() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmCommand.Feedback.named_arm_position_feedback)
  if (_internal_has_named_arm_position_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::NamedArmPositionsCommand_Feedback* temp = _impl_.feedback_.named_arm_position_feedback_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.feedback_.named_arm_position_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::NamedArmPositionsCommand_Feedback& ArmCommand_Feedback::_internal_named_arm_position_feedback() const {
  return _internal_has_named_arm_position_feedback()
      ? *_impl_.feedback_.named_arm_position_feedback_
      : reinterpret_cast< ::bosdyn::api::NamedArmPositionsCommand_Feedback&>(::bosdyn::api::_NamedArmPositionsCommand_Feedback_default_instance_);
}
inline const ::bosdyn::api::NamedArmPositionsCommand_Feedback& ArmCommand_Feedback::named_arm_position_feedback() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCommand.Feedback.named_arm_position_feedback)
  return _internal_named_arm_position_feedback();
}
inline ::bosdyn::api::NamedArmPositionsCommand_Feedback* ArmCommand_Feedback::unsafe_arena_release_named_arm_position_feedback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.ArmCommand.Feedback.named_arm_position_feedback)
  if (_internal_has_named_arm_position_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::NamedArmPositionsCommand_Feedback* temp = _impl_.feedback_.named_arm_position_feedback_;
    _impl_.feedback_.named_arm_position_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ArmCommand_Feedback::unsafe_arena_set_allocated_named_arm_position_feedback(::bosdyn::api::NamedArmPositionsCommand_Feedback* named_arm_position_feedback) {
  clear_feedback();
  if (named_arm_position_feedback) {
    set_has_named_arm_position_feedback();
    _impl_.feedback_.named_arm_position_feedback_ = named_arm_position_feedback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmCommand.Feedback.named_arm_position_feedback)
}
inline ::bosdyn::api::NamedArmPositionsCommand_Feedback* ArmCommand_Feedback::_internal_mutable_named_arm_position_feedback() {
  if (!_internal_has_named_arm_position_feedback()) {
    clear_feedback();
    set_has_named_arm_position_feedback();
    _impl_.feedback_.named_arm_position_feedback_ = CreateMaybeMessage< ::bosdyn::api::NamedArmPositionsCommand_Feedback >(GetArenaForAllocation());
  }
  return _impl_.feedback_.named_arm_position_feedback_;
}
inline ::bosdyn::api::NamedArmPositionsCommand_Feedback* ArmCommand_Feedback::mutable_named_arm_position_feedback() {
  ::bosdyn::api::NamedArmPositionsCommand_Feedback* _msg = _internal_mutable_named_arm_position_feedback();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmCommand.Feedback.named_arm_position_feedback)
  return _msg;
}

// .bosdyn.api.ArmVelocityCommand.Feedback arm_velocity_feedback = 6;
inline bool ArmCommand_Feedback::_internal_has_arm_velocity_feedback() const {
  return feedback_case() == kArmVelocityFeedback;
}
inline bool ArmCommand_Feedback::has_arm_velocity_feedback() const {
  return _internal_has_arm_velocity_feedback();
}
inline void ArmCommand_Feedback::set_has_arm_velocity_feedback() {
  _impl_._oneof_case_[0] = kArmVelocityFeedback;
}
inline void ArmCommand_Feedback::clear_arm_velocity_feedback() {
  if (_internal_has_arm_velocity_feedback()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.feedback_.arm_velocity_feedback_;
    }
    clear_has_feedback();
  }
}
inline ::bosdyn::api::ArmVelocityCommand_Feedback* ArmCommand_Feedback::release_arm_velocity_feedback() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmCommand.Feedback.arm_velocity_feedback)
  if (_internal_has_arm_velocity_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::ArmVelocityCommand_Feedback* temp = _impl_.feedback_.arm_velocity_feedback_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.feedback_.arm_velocity_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::ArmVelocityCommand_Feedback& ArmCommand_Feedback::_internal_arm_velocity_feedback() const {
  return _internal_has_arm_velocity_feedback()
      ? *_impl_.feedback_.arm_velocity_feedback_
      : reinterpret_cast< ::bosdyn::api::ArmVelocityCommand_Feedback&>(::bosdyn::api::_ArmVelocityCommand_Feedback_default_instance_);
}
inline const ::bosdyn::api::ArmVelocityCommand_Feedback& ArmCommand_Feedback::arm_velocity_feedback() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCommand.Feedback.arm_velocity_feedback)
  return _internal_arm_velocity_feedback();
}
inline ::bosdyn::api::ArmVelocityCommand_Feedback* ArmCommand_Feedback::unsafe_arena_release_arm_velocity_feedback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.ArmCommand.Feedback.arm_velocity_feedback)
  if (_internal_has_arm_velocity_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::ArmVelocityCommand_Feedback* temp = _impl_.feedback_.arm_velocity_feedback_;
    _impl_.feedback_.arm_velocity_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ArmCommand_Feedback::unsafe_arena_set_allocated_arm_velocity_feedback(::bosdyn::api::ArmVelocityCommand_Feedback* arm_velocity_feedback) {
  clear_feedback();
  if (arm_velocity_feedback) {
    set_has_arm_velocity_feedback();
    _impl_.feedback_.arm_velocity_feedback_ = arm_velocity_feedback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmCommand.Feedback.arm_velocity_feedback)
}
inline ::bosdyn::api::ArmVelocityCommand_Feedback* ArmCommand_Feedback::_internal_mutable_arm_velocity_feedback() {
  if (!_internal_has_arm_velocity_feedback()) {
    clear_feedback();
    set_has_arm_velocity_feedback();
    _impl_.feedback_.arm_velocity_feedback_ = CreateMaybeMessage< ::bosdyn::api::ArmVelocityCommand_Feedback >(GetArenaForAllocation());
  }
  return _impl_.feedback_.arm_velocity_feedback_;
}
inline ::bosdyn::api::ArmVelocityCommand_Feedback* ArmCommand_Feedback::mutable_arm_velocity_feedback() {
  ::bosdyn::api::ArmVelocityCommand_Feedback* _msg = _internal_mutable_arm_velocity_feedback();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmCommand.Feedback.arm_velocity_feedback)
  return _msg;
}

// .bosdyn.api.GazeCommand.Feedback arm_gaze_feedback = 8;
inline bool ArmCommand_Feedback::_internal_has_arm_gaze_feedback() const {
  return feedback_case() == kArmGazeFeedback;
}
inline bool ArmCommand_Feedback::has_arm_gaze_feedback() const {
  return _internal_has_arm_gaze_feedback();
}
inline void ArmCommand_Feedback::set_has_arm_gaze_feedback() {
  _impl_._oneof_case_[0] = kArmGazeFeedback;
}
inline void ArmCommand_Feedback::clear_arm_gaze_feedback() {
  if (_internal_has_arm_gaze_feedback()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.feedback_.arm_gaze_feedback_;
    }
    clear_has_feedback();
  }
}
inline ::bosdyn::api::GazeCommand_Feedback* ArmCommand_Feedback::release_arm_gaze_feedback() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmCommand.Feedback.arm_gaze_feedback)
  if (_internal_has_arm_gaze_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::GazeCommand_Feedback* temp = _impl_.feedback_.arm_gaze_feedback_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.feedback_.arm_gaze_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::GazeCommand_Feedback& ArmCommand_Feedback::_internal_arm_gaze_feedback() const {
  return _internal_has_arm_gaze_feedback()
      ? *_impl_.feedback_.arm_gaze_feedback_
      : reinterpret_cast< ::bosdyn::api::GazeCommand_Feedback&>(::bosdyn::api::_GazeCommand_Feedback_default_instance_);
}
inline const ::bosdyn::api::GazeCommand_Feedback& ArmCommand_Feedback::arm_gaze_feedback() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCommand.Feedback.arm_gaze_feedback)
  return _internal_arm_gaze_feedback();
}
inline ::bosdyn::api::GazeCommand_Feedback* ArmCommand_Feedback::unsafe_arena_release_arm_gaze_feedback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.ArmCommand.Feedback.arm_gaze_feedback)
  if (_internal_has_arm_gaze_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::GazeCommand_Feedback* temp = _impl_.feedback_.arm_gaze_feedback_;
    _impl_.feedback_.arm_gaze_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ArmCommand_Feedback::unsafe_arena_set_allocated_arm_gaze_feedback(::bosdyn::api::GazeCommand_Feedback* arm_gaze_feedback) {
  clear_feedback();
  if (arm_gaze_feedback) {
    set_has_arm_gaze_feedback();
    _impl_.feedback_.arm_gaze_feedback_ = arm_gaze_feedback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmCommand.Feedback.arm_gaze_feedback)
}
inline ::bosdyn::api::GazeCommand_Feedback* ArmCommand_Feedback::_internal_mutable_arm_gaze_feedback() {
  if (!_internal_has_arm_gaze_feedback()) {
    clear_feedback();
    set_has_arm_gaze_feedback();
    _impl_.feedback_.arm_gaze_feedback_ = CreateMaybeMessage< ::bosdyn::api::GazeCommand_Feedback >(GetArenaForAllocation());
  }
  return _impl_.feedback_.arm_gaze_feedback_;
}
inline ::bosdyn::api::GazeCommand_Feedback* ArmCommand_Feedback::mutable_arm_gaze_feedback() {
  ::bosdyn::api::GazeCommand_Feedback* _msg = _internal_mutable_arm_gaze_feedback();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmCommand.Feedback.arm_gaze_feedback)
  return _msg;
}

// .bosdyn.api.ArmStopCommand.Feedback arm_stop_feedback = 9;
inline bool ArmCommand_Feedback::_internal_has_arm_stop_feedback() const {
  return feedback_case() == kArmStopFeedback;
}
inline bool ArmCommand_Feedback::has_arm_stop_feedback() const {
  return _internal_has_arm_stop_feedback();
}
inline void ArmCommand_Feedback::set_has_arm_stop_feedback() {
  _impl_._oneof_case_[0] = kArmStopFeedback;
}
inline void ArmCommand_Feedback::clear_arm_stop_feedback() {
  if (_internal_has_arm_stop_feedback()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.feedback_.arm_stop_feedback_;
    }
    clear_has_feedback();
  }
}
inline ::bosdyn::api::ArmStopCommand_Feedback* ArmCommand_Feedback::release_arm_stop_feedback() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmCommand.Feedback.arm_stop_feedback)
  if (_internal_has_arm_stop_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::ArmStopCommand_Feedback* temp = _impl_.feedback_.arm_stop_feedback_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.feedback_.arm_stop_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::ArmStopCommand_Feedback& ArmCommand_Feedback::_internal_arm_stop_feedback() const {
  return _internal_has_arm_stop_feedback()
      ? *_impl_.feedback_.arm_stop_feedback_
      : reinterpret_cast< ::bosdyn::api::ArmStopCommand_Feedback&>(::bosdyn::api::_ArmStopCommand_Feedback_default_instance_);
}
inline const ::bosdyn::api::ArmStopCommand_Feedback& ArmCommand_Feedback::arm_stop_feedback() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCommand.Feedback.arm_stop_feedback)
  return _internal_arm_stop_feedback();
}
inline ::bosdyn::api::ArmStopCommand_Feedback* ArmCommand_Feedback::unsafe_arena_release_arm_stop_feedback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.ArmCommand.Feedback.arm_stop_feedback)
  if (_internal_has_arm_stop_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::ArmStopCommand_Feedback* temp = _impl_.feedback_.arm_stop_feedback_;
    _impl_.feedback_.arm_stop_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ArmCommand_Feedback::unsafe_arena_set_allocated_arm_stop_feedback(::bosdyn::api::ArmStopCommand_Feedback* arm_stop_feedback) {
  clear_feedback();
  if (arm_stop_feedback) {
    set_has_arm_stop_feedback();
    _impl_.feedback_.arm_stop_feedback_ = arm_stop_feedback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmCommand.Feedback.arm_stop_feedback)
}
inline ::bosdyn::api::ArmStopCommand_Feedback* ArmCommand_Feedback::_internal_mutable_arm_stop_feedback() {
  if (!_internal_has_arm_stop_feedback()) {
    clear_feedback();
    set_has_arm_stop_feedback();
    _impl_.feedback_.arm_stop_feedback_ = CreateMaybeMessage< ::bosdyn::api::ArmStopCommand_Feedback >(GetArenaForAllocation());
  }
  return _impl_.feedback_.arm_stop_feedback_;
}
inline ::bosdyn::api::ArmStopCommand_Feedback* ArmCommand_Feedback::mutable_arm_stop_feedback() {
  ::bosdyn::api::ArmStopCommand_Feedback* _msg = _internal_mutable_arm_stop_feedback();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmCommand.Feedback.arm_stop_feedback)
  return _msg;
}

// .bosdyn.api.ArmDragCommand.Feedback arm_drag_feedback = 10;
inline bool ArmCommand_Feedback::_internal_has_arm_drag_feedback() const {
  return feedback_case() == kArmDragFeedback;
}
inline bool ArmCommand_Feedback::has_arm_drag_feedback() const {
  return _internal_has_arm_drag_feedback();
}
inline void ArmCommand_Feedback::set_has_arm_drag_feedback() {
  _impl_._oneof_case_[0] = kArmDragFeedback;
}
inline ::bosdyn::api::ArmDragCommand_Feedback* ArmCommand_Feedback::release_arm_drag_feedback() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmCommand.Feedback.arm_drag_feedback)
  if (_internal_has_arm_drag_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::ArmDragCommand_Feedback* temp = _impl_.feedback_.arm_drag_feedback_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.feedback_.arm_drag_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::ArmDragCommand_Feedback& ArmCommand_Feedback::_internal_arm_drag_feedback() const {
  return _internal_has_arm_drag_feedback()
      ? *_impl_.feedback_.arm_drag_feedback_
      : reinterpret_cast< ::bosdyn::api::ArmDragCommand_Feedback&>(::bosdyn::api::_ArmDragCommand_Feedback_default_instance_);
}
inline const ::bosdyn::api::ArmDragCommand_Feedback& ArmCommand_Feedback::arm_drag_feedback() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCommand.Feedback.arm_drag_feedback)
  return _internal_arm_drag_feedback();
}
inline ::bosdyn::api::ArmDragCommand_Feedback* ArmCommand_Feedback::unsafe_arena_release_arm_drag_feedback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.ArmCommand.Feedback.arm_drag_feedback)
  if (_internal_has_arm_drag_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::ArmDragCommand_Feedback* temp = _impl_.feedback_.arm_drag_feedback_;
    _impl_.feedback_.arm_drag_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ArmCommand_Feedback::unsafe_arena_set_allocated_arm_drag_feedback(::bosdyn::api::ArmDragCommand_Feedback* arm_drag_feedback) {
  clear_feedback();
  if (arm_drag_feedback) {
    set_has_arm_drag_feedback();
    _impl_.feedback_.arm_drag_feedback_ = arm_drag_feedback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmCommand.Feedback.arm_drag_feedback)
}
inline ::bosdyn::api::ArmDragCommand_Feedback* ArmCommand_Feedback::_internal_mutable_arm_drag_feedback() {
  if (!_internal_has_arm_drag_feedback()) {
    clear_feedback();
    set_has_arm_drag_feedback();
    _impl_.feedback_.arm_drag_feedback_ = CreateMaybeMessage< ::bosdyn::api::ArmDragCommand_Feedback >(GetArenaForAllocation());
  }
  return _impl_.feedback_.arm_drag_feedback_;
}
inline ::bosdyn::api::ArmDragCommand_Feedback* ArmCommand_Feedback::mutable_arm_drag_feedback() {
  ::bosdyn::api::ArmDragCommand_Feedback* _msg = _internal_mutable_arm_drag_feedback();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmCommand.Feedback.arm_drag_feedback)
  return _msg;
}

// .bosdyn.api.ArmImpedanceCommand.Feedback arm_impedance_feedback = 12;
inline bool ArmCommand_Feedback::_internal_has_arm_impedance_feedback() const {
  return feedback_case() == kArmImpedanceFeedback;
}
inline bool ArmCommand_Feedback::has_arm_impedance_feedback() const {
  return _internal_has_arm_impedance_feedback();
}
inline void ArmCommand_Feedback::set_has_arm_impedance_feedback() {
  _impl_._oneof_case_[0] = kArmImpedanceFeedback;
}
inline void ArmCommand_Feedback::clear_arm_impedance_feedback() {
  if (_internal_has_arm_impedance_feedback()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.feedback_.arm_impedance_feedback_;
    }
    clear_has_feedback();
  }
}
inline ::bosdyn::api::ArmImpedanceCommand_Feedback* ArmCommand_Feedback::release_arm_impedance_feedback() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmCommand.Feedback.arm_impedance_feedback)
  if (_internal_has_arm_impedance_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::ArmImpedanceCommand_Feedback* temp = _impl_.feedback_.arm_impedance_feedback_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.feedback_.arm_impedance_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::ArmImpedanceCommand_Feedback& ArmCommand_Feedback::_internal_arm_impedance_feedback() const {
  return _internal_has_arm_impedance_feedback()
      ? *_impl_.feedback_.arm_impedance_feedback_
      : reinterpret_cast< ::bosdyn::api::ArmImpedanceCommand_Feedback&>(::bosdyn::api::_ArmImpedanceCommand_Feedback_default_instance_);
}
inline const ::bosdyn::api::ArmImpedanceCommand_Feedback& ArmCommand_Feedback::arm_impedance_feedback() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCommand.Feedback.arm_impedance_feedback)
  return _internal_arm_impedance_feedback();
}
inline ::bosdyn::api::ArmImpedanceCommand_Feedback* ArmCommand_Feedback::unsafe_arena_release_arm_impedance_feedback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.ArmCommand.Feedback.arm_impedance_feedback)
  if (_internal_has_arm_impedance_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::ArmImpedanceCommand_Feedback* temp = _impl_.feedback_.arm_impedance_feedback_;
    _impl_.feedback_.arm_impedance_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ArmCommand_Feedback::unsafe_arena_set_allocated_arm_impedance_feedback(::bosdyn::api::ArmImpedanceCommand_Feedback* arm_impedance_feedback) {
  clear_feedback();
  if (arm_impedance_feedback) {
    set_has_arm_impedance_feedback();
    _impl_.feedback_.arm_impedance_feedback_ = arm_impedance_feedback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmCommand.Feedback.arm_impedance_feedback)
}
inline ::bosdyn::api::ArmImpedanceCommand_Feedback* ArmCommand_Feedback::_internal_mutable_arm_impedance_feedback() {
  if (!_internal_has_arm_impedance_feedback()) {
    clear_feedback();
    set_has_arm_impedance_feedback();
    _impl_.feedback_.arm_impedance_feedback_ = CreateMaybeMessage< ::bosdyn::api::ArmImpedanceCommand_Feedback >(GetArenaForAllocation());
  }
  return _impl_.feedback_.arm_impedance_feedback_;
}
inline ::bosdyn::api::ArmImpedanceCommand_Feedback* ArmCommand_Feedback::mutable_arm_impedance_feedback() {
  ::bosdyn::api::ArmImpedanceCommand_Feedback* _msg = _internal_mutable_arm_impedance_feedback();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmCommand.Feedback.arm_impedance_feedback)
  return _msg;
}

// .bosdyn.api.RobotCommandFeedbackStatus.Status status = 100;
inline void ArmCommand_Feedback::clear_status() {
  _impl_.status_ = 0;
}
inline ::bosdyn::api::RobotCommandFeedbackStatus_Status ArmCommand_Feedback::_internal_status() const {
  return static_cast< ::bosdyn::api::RobotCommandFeedbackStatus_Status >(_impl_.status_);
}
inline ::bosdyn::api::RobotCommandFeedbackStatus_Status ArmCommand_Feedback::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCommand.Feedback.status)
  return _internal_status();
}
inline void ArmCommand_Feedback::_internal_set_status(::bosdyn::api::RobotCommandFeedbackStatus_Status value) {
  
  _impl_.status_ = value;
}
inline void ArmCommand_Feedback::set_status(::bosdyn::api::RobotCommandFeedbackStatus_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.ArmCommand.Feedback.status)
}

inline bool ArmCommand_Feedback::has_feedback() const {
  return feedback_case() != FEEDBACK_NOT_SET;
}
inline void ArmCommand_Feedback::clear_has_feedback() {
  _impl_._oneof_case_[0] = FEEDBACK_NOT_SET;
}
inline ArmCommand_Feedback::FeedbackCase ArmCommand_Feedback::feedback_case() const {
  return ArmCommand_Feedback::FeedbackCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ArmCommand

// -------------------------------------------------------------------

// ArmParams

// .google.protobuf.BoolValue disable_body_force_limiter = 1;
inline bool ArmParams::_internal_has_disable_body_force_limiter() const {
  return this != internal_default_instance() && _impl_.disable_body_force_limiter_ != nullptr;
}
inline bool ArmParams::has_disable_body_force_limiter() const {
  return _internal_has_disable_body_force_limiter();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& ArmParams::_internal_disable_body_force_limiter() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.disable_body_force_limiter_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& ArmParams::disable_body_force_limiter() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmParams.disable_body_force_limiter)
  return _internal_disable_body_force_limiter();
}
inline void ArmParams::unsafe_arena_set_allocated_disable_body_force_limiter(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* disable_body_force_limiter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.disable_body_force_limiter_);
  }
  _impl_.disable_body_force_limiter_ = disable_body_force_limiter;
  if (disable_body_force_limiter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmParams.disable_body_force_limiter)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ArmParams::release_disable_body_force_limiter() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.disable_body_force_limiter_;
  _impl_.disable_body_force_limiter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ArmParams::unsafe_arena_release_disable_body_force_limiter() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmParams.disable_body_force_limiter)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.disable_body_force_limiter_;
  _impl_.disable_body_force_limiter_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ArmParams::_internal_mutable_disable_body_force_limiter() {
  
  if (_impl_.disable_body_force_limiter_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.disable_body_force_limiter_ = p;
  }
  return _impl_.disable_body_force_limiter_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ArmParams::mutable_disable_body_force_limiter() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_disable_body_force_limiter();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmParams.disable_body_force_limiter)
  return _msg;
}
inline void ArmParams::set_allocated_disable_body_force_limiter(::PROTOBUF_NAMESPACE_ID::BoolValue* disable_body_force_limiter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.disable_body_force_limiter_);
  }
  if (disable_body_force_limiter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(disable_body_force_limiter));
    if (message_arena != submessage_arena) {
      disable_body_force_limiter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disable_body_force_limiter, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.disable_body_force_limiter_ = disable_body_force_limiter;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmParams.disable_body_force_limiter)
}

// -------------------------------------------------------------------

// ArmVelocityCommand_CylindricalVelocity

// .bosdyn.api.CylindricalCoordinate linear_velocity = 1;
inline bool ArmVelocityCommand_CylindricalVelocity::_internal_has_linear_velocity() const {
  return this != internal_default_instance() && _impl_.linear_velocity_ != nullptr;
}
inline bool ArmVelocityCommand_CylindricalVelocity::has_linear_velocity() const {
  return _internal_has_linear_velocity();
}
inline const ::bosdyn::api::CylindricalCoordinate& ArmVelocityCommand_CylindricalVelocity::_internal_linear_velocity() const {
  const ::bosdyn::api::CylindricalCoordinate* p = _impl_.linear_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::CylindricalCoordinate&>(
      ::bosdyn::api::_CylindricalCoordinate_default_instance_);
}
inline const ::bosdyn::api::CylindricalCoordinate& ArmVelocityCommand_CylindricalVelocity::linear_velocity() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmVelocityCommand.CylindricalVelocity.linear_velocity)
  return _internal_linear_velocity();
}
inline void ArmVelocityCommand_CylindricalVelocity::unsafe_arena_set_allocated_linear_velocity(
    ::bosdyn::api::CylindricalCoordinate* linear_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.linear_velocity_);
  }
  _impl_.linear_velocity_ = linear_velocity;
  if (linear_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmVelocityCommand.CylindricalVelocity.linear_velocity)
}
inline ::bosdyn::api::CylindricalCoordinate* ArmVelocityCommand_CylindricalVelocity::release_linear_velocity() {
  
  ::bosdyn::api::CylindricalCoordinate* temp = _impl_.linear_velocity_;
  _impl_.linear_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::CylindricalCoordinate* ArmVelocityCommand_CylindricalVelocity::unsafe_arena_release_linear_velocity() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmVelocityCommand.CylindricalVelocity.linear_velocity)
  
  ::bosdyn::api::CylindricalCoordinate* temp = _impl_.linear_velocity_;
  _impl_.linear_velocity_ = nullptr;
  return temp;
}
inline ::bosdyn::api::CylindricalCoordinate* ArmVelocityCommand_CylindricalVelocity::_internal_mutable_linear_velocity() {
  
  if (_impl_.linear_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::CylindricalCoordinate>(GetArenaForAllocation());
    _impl_.linear_velocity_ = p;
  }
  return _impl_.linear_velocity_;
}
inline ::bosdyn::api::CylindricalCoordinate* ArmVelocityCommand_CylindricalVelocity::mutable_linear_velocity() {
  ::bosdyn::api::CylindricalCoordinate* _msg = _internal_mutable_linear_velocity();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmVelocityCommand.CylindricalVelocity.linear_velocity)
  return _msg;
}
inline void ArmVelocityCommand_CylindricalVelocity::set_allocated_linear_velocity(::bosdyn::api::CylindricalCoordinate* linear_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.linear_velocity_);
  }
  if (linear_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_velocity));
    if (message_arena != submessage_arena) {
      linear_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.linear_velocity_ = linear_velocity;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmVelocityCommand.CylindricalVelocity.linear_velocity)
}

// .google.protobuf.DoubleValue max_linear_velocity = 2;
inline bool ArmVelocityCommand_CylindricalVelocity::_internal_has_max_linear_velocity() const {
  return this != internal_default_instance() && _impl_.max_linear_velocity_ != nullptr;
}
inline bool ArmVelocityCommand_CylindricalVelocity::has_max_linear_velocity() const {
  return _internal_has_max_linear_velocity();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmVelocityCommand_CylindricalVelocity::_internal_max_linear_velocity() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.max_linear_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmVelocityCommand_CylindricalVelocity::max_linear_velocity() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmVelocityCommand.CylindricalVelocity.max_linear_velocity)
  return _internal_max_linear_velocity();
}
inline void ArmVelocityCommand_CylindricalVelocity::unsafe_arena_set_allocated_max_linear_velocity(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_linear_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_linear_velocity_);
  }
  _impl_.max_linear_velocity_ = max_linear_velocity;
  if (max_linear_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmVelocityCommand.CylindricalVelocity.max_linear_velocity)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmVelocityCommand_CylindricalVelocity::release_max_linear_velocity() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_linear_velocity_;
  _impl_.max_linear_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmVelocityCommand_CylindricalVelocity::unsafe_arena_release_max_linear_velocity() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmVelocityCommand.CylindricalVelocity.max_linear_velocity)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_linear_velocity_;
  _impl_.max_linear_velocity_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmVelocityCommand_CylindricalVelocity::_internal_mutable_max_linear_velocity() {
  
  if (_impl_.max_linear_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.max_linear_velocity_ = p;
  }
  return _impl_.max_linear_velocity_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmVelocityCommand_CylindricalVelocity::mutable_max_linear_velocity() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_max_linear_velocity();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmVelocityCommand.CylindricalVelocity.max_linear_velocity)
  return _msg;
}
inline void ArmVelocityCommand_CylindricalVelocity::set_allocated_max_linear_velocity(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_linear_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_linear_velocity_);
  }
  if (max_linear_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_linear_velocity));
    if (message_arena != submessage_arena) {
      max_linear_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_linear_velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_linear_velocity_ = max_linear_velocity;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmVelocityCommand.CylindricalVelocity.max_linear_velocity)
}

// -------------------------------------------------------------------

// ArmVelocityCommand_CartesianVelocity

// string frame_name = 1;
inline void ArmVelocityCommand_CartesianVelocity::clear_frame_name() {
  _impl_.frame_name_.ClearToEmpty();
}
inline const std::string& ArmVelocityCommand_CartesianVelocity::frame_name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmVelocityCommand.CartesianVelocity.frame_name)
  return _internal_frame_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ArmVelocityCommand_CartesianVelocity::set_frame_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.frame_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.ArmVelocityCommand.CartesianVelocity.frame_name)
}
inline std::string* ArmVelocityCommand_CartesianVelocity::mutable_frame_name() {
  std::string* _s = _internal_mutable_frame_name();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmVelocityCommand.CartesianVelocity.frame_name)
  return _s;
}
inline const std::string& ArmVelocityCommand_CartesianVelocity::_internal_frame_name() const {
  return _impl_.frame_name_.Get();
}
inline void ArmVelocityCommand_CartesianVelocity::_internal_set_frame_name(const std::string& value) {
  
  _impl_.frame_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ArmVelocityCommand_CartesianVelocity::_internal_mutable_frame_name() {
  
  return _impl_.frame_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ArmVelocityCommand_CartesianVelocity::release_frame_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmVelocityCommand.CartesianVelocity.frame_name)
  return _impl_.frame_name_.Release();
}
inline void ArmVelocityCommand_CartesianVelocity::set_allocated_frame_name(std::string* frame_name) {
  if (frame_name != nullptr) {
    
  } else {
    
  }
  _impl_.frame_name_.SetAllocated(frame_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.frame_name_.IsDefault()) {
    _impl_.frame_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmVelocityCommand.CartesianVelocity.frame_name)
}

// .bosdyn.api.Vec3 velocity_in_frame_name = 2;
inline bool ArmVelocityCommand_CartesianVelocity::_internal_has_velocity_in_frame_name() const {
  return this != internal_default_instance() && _impl_.velocity_in_frame_name_ != nullptr;
}
inline bool ArmVelocityCommand_CartesianVelocity::has_velocity_in_frame_name() const {
  return _internal_has_velocity_in_frame_name();
}
inline const ::bosdyn::api::Vec3& ArmVelocityCommand_CartesianVelocity::_internal_velocity_in_frame_name() const {
  const ::bosdyn::api::Vec3* p = _impl_.velocity_in_frame_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec3&>(
      ::bosdyn::api::_Vec3_default_instance_);
}
inline const ::bosdyn::api::Vec3& ArmVelocityCommand_CartesianVelocity::velocity_in_frame_name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmVelocityCommand.CartesianVelocity.velocity_in_frame_name)
  return _internal_velocity_in_frame_name();
}
inline void ArmVelocityCommand_CartesianVelocity::unsafe_arena_set_allocated_velocity_in_frame_name(
    ::bosdyn::api::Vec3* velocity_in_frame_name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_in_frame_name_);
  }
  _impl_.velocity_in_frame_name_ = velocity_in_frame_name;
  if (velocity_in_frame_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmVelocityCommand.CartesianVelocity.velocity_in_frame_name)
}
inline ::bosdyn::api::Vec3* ArmVelocityCommand_CartesianVelocity::release_velocity_in_frame_name() {
  
  ::bosdyn::api::Vec3* temp = _impl_.velocity_in_frame_name_;
  _impl_.velocity_in_frame_name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec3* ArmVelocityCommand_CartesianVelocity::unsafe_arena_release_velocity_in_frame_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmVelocityCommand.CartesianVelocity.velocity_in_frame_name)
  
  ::bosdyn::api::Vec3* temp = _impl_.velocity_in_frame_name_;
  _impl_.velocity_in_frame_name_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec3* ArmVelocityCommand_CartesianVelocity::_internal_mutable_velocity_in_frame_name() {
  
  if (_impl_.velocity_in_frame_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec3>(GetArenaForAllocation());
    _impl_.velocity_in_frame_name_ = p;
  }
  return _impl_.velocity_in_frame_name_;
}
inline ::bosdyn::api::Vec3* ArmVelocityCommand_CartesianVelocity::mutable_velocity_in_frame_name() {
  ::bosdyn::api::Vec3* _msg = _internal_mutable_velocity_in_frame_name();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmVelocityCommand.CartesianVelocity.velocity_in_frame_name)
  return _msg;
}
inline void ArmVelocityCommand_CartesianVelocity::set_allocated_velocity_in_frame_name(::bosdyn::api::Vec3* velocity_in_frame_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_in_frame_name_);
  }
  if (velocity_in_frame_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_in_frame_name));
    if (message_arena != submessage_arena) {
      velocity_in_frame_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity_in_frame_name, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.velocity_in_frame_name_ = velocity_in_frame_name;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmVelocityCommand.CartesianVelocity.velocity_in_frame_name)
}

// -------------------------------------------------------------------

// ArmVelocityCommand_Request

// .bosdyn.api.ArmVelocityCommand.CylindricalVelocity cylindrical_velocity = 1;
inline bool ArmVelocityCommand_Request::_internal_has_cylindrical_velocity() const {
  return command_case() == kCylindricalVelocity;
}
inline bool ArmVelocityCommand_Request::has_cylindrical_velocity() const {
  return _internal_has_cylindrical_velocity();
}
inline void ArmVelocityCommand_Request::set_has_cylindrical_velocity() {
  _impl_._oneof_case_[0] = kCylindricalVelocity;
}
inline void ArmVelocityCommand_Request::clear_cylindrical_velocity() {
  if (_internal_has_cylindrical_velocity()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.command_.cylindrical_velocity_;
    }
    clear_has_command();
  }
}
inline ::bosdyn::api::ArmVelocityCommand_CylindricalVelocity* ArmVelocityCommand_Request::release_cylindrical_velocity() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmVelocityCommand.Request.cylindrical_velocity)
  if (_internal_has_cylindrical_velocity()) {
    clear_has_command();
    ::bosdyn::api::ArmVelocityCommand_CylindricalVelocity* temp = _impl_.command_.cylindrical_velocity_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.cylindrical_velocity_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::ArmVelocityCommand_CylindricalVelocity& ArmVelocityCommand_Request::_internal_cylindrical_velocity() const {
  return _internal_has_cylindrical_velocity()
      ? *_impl_.command_.cylindrical_velocity_
      : reinterpret_cast< ::bosdyn::api::ArmVelocityCommand_CylindricalVelocity&>(::bosdyn::api::_ArmVelocityCommand_CylindricalVelocity_default_instance_);
}
inline const ::bosdyn::api::ArmVelocityCommand_CylindricalVelocity& ArmVelocityCommand_Request::cylindrical_velocity() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmVelocityCommand.Request.cylindrical_velocity)
  return _internal_cylindrical_velocity();
}
inline ::bosdyn::api::ArmVelocityCommand_CylindricalVelocity* ArmVelocityCommand_Request::unsafe_arena_release_cylindrical_velocity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.ArmVelocityCommand.Request.cylindrical_velocity)
  if (_internal_has_cylindrical_velocity()) {
    clear_has_command();
    ::bosdyn::api::ArmVelocityCommand_CylindricalVelocity* temp = _impl_.command_.cylindrical_velocity_;
    _impl_.command_.cylindrical_velocity_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ArmVelocityCommand_Request::unsafe_arena_set_allocated_cylindrical_velocity(::bosdyn::api::ArmVelocityCommand_CylindricalVelocity* cylindrical_velocity) {
  clear_command();
  if (cylindrical_velocity) {
    set_has_cylindrical_velocity();
    _impl_.command_.cylindrical_velocity_ = cylindrical_velocity;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmVelocityCommand.Request.cylindrical_velocity)
}
inline ::bosdyn::api::ArmVelocityCommand_CylindricalVelocity* ArmVelocityCommand_Request::_internal_mutable_cylindrical_velocity() {
  if (!_internal_has_cylindrical_velocity()) {
    clear_command();
    set_has_cylindrical_velocity();
    _impl_.command_.cylindrical_velocity_ = CreateMaybeMessage< ::bosdyn::api::ArmVelocityCommand_CylindricalVelocity >(GetArenaForAllocation());
  }
  return _impl_.command_.cylindrical_velocity_;
}
inline ::bosdyn::api::ArmVelocityCommand_CylindricalVelocity* ArmVelocityCommand_Request::mutable_cylindrical_velocity() {
  ::bosdyn::api::ArmVelocityCommand_CylindricalVelocity* _msg = _internal_mutable_cylindrical_velocity();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmVelocityCommand.Request.cylindrical_velocity)
  return _msg;
}

// .bosdyn.api.ArmVelocityCommand.CartesianVelocity cartesian_velocity = 2;
inline bool ArmVelocityCommand_Request::_internal_has_cartesian_velocity() const {
  return command_case() == kCartesianVelocity;
}
inline bool ArmVelocityCommand_Request::has_cartesian_velocity() const {
  return _internal_has_cartesian_velocity();
}
inline void ArmVelocityCommand_Request::set_has_cartesian_velocity() {
  _impl_._oneof_case_[0] = kCartesianVelocity;
}
inline void ArmVelocityCommand_Request::clear_cartesian_velocity() {
  if (_internal_has_cartesian_velocity()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.command_.cartesian_velocity_;
    }
    clear_has_command();
  }
}
inline ::bosdyn::api::ArmVelocityCommand_CartesianVelocity* ArmVelocityCommand_Request::release_cartesian_velocity() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmVelocityCommand.Request.cartesian_velocity)
  if (_internal_has_cartesian_velocity()) {
    clear_has_command();
    ::bosdyn::api::ArmVelocityCommand_CartesianVelocity* temp = _impl_.command_.cartesian_velocity_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.cartesian_velocity_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::ArmVelocityCommand_CartesianVelocity& ArmVelocityCommand_Request::_internal_cartesian_velocity() const {
  return _internal_has_cartesian_velocity()
      ? *_impl_.command_.cartesian_velocity_
      : reinterpret_cast< ::bosdyn::api::ArmVelocityCommand_CartesianVelocity&>(::bosdyn::api::_ArmVelocityCommand_CartesianVelocity_default_instance_);
}
inline const ::bosdyn::api::ArmVelocityCommand_CartesianVelocity& ArmVelocityCommand_Request::cartesian_velocity() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmVelocityCommand.Request.cartesian_velocity)
  return _internal_cartesian_velocity();
}
inline ::bosdyn::api::ArmVelocityCommand_CartesianVelocity* ArmVelocityCommand_Request::unsafe_arena_release_cartesian_velocity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.ArmVelocityCommand.Request.cartesian_velocity)
  if (_internal_has_cartesian_velocity()) {
    clear_has_command();
    ::bosdyn::api::ArmVelocityCommand_CartesianVelocity* temp = _impl_.command_.cartesian_velocity_;
    _impl_.command_.cartesian_velocity_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ArmVelocityCommand_Request::unsafe_arena_set_allocated_cartesian_velocity(::bosdyn::api::ArmVelocityCommand_CartesianVelocity* cartesian_velocity) {
  clear_command();
  if (cartesian_velocity) {
    set_has_cartesian_velocity();
    _impl_.command_.cartesian_velocity_ = cartesian_velocity;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmVelocityCommand.Request.cartesian_velocity)
}
inline ::bosdyn::api::ArmVelocityCommand_CartesianVelocity* ArmVelocityCommand_Request::_internal_mutable_cartesian_velocity() {
  if (!_internal_has_cartesian_velocity()) {
    clear_command();
    set_has_cartesian_velocity();
    _impl_.command_.cartesian_velocity_ = CreateMaybeMessage< ::bosdyn::api::ArmVelocityCommand_CartesianVelocity >(GetArenaForAllocation());
  }
  return _impl_.command_.cartesian_velocity_;
}
inline ::bosdyn::api::ArmVelocityCommand_CartesianVelocity* ArmVelocityCommand_Request::mutable_cartesian_velocity() {
  ::bosdyn::api::ArmVelocityCommand_CartesianVelocity* _msg = _internal_mutable_cartesian_velocity();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmVelocityCommand.Request.cartesian_velocity)
  return _msg;
}

// .bosdyn.api.Vec3 angular_velocity_of_hand_rt_odom_in_hand = 6;
inline bool ArmVelocityCommand_Request::_internal_has_angular_velocity_of_hand_rt_odom_in_hand() const {
  return this != internal_default_instance() && _impl_.angular_velocity_of_hand_rt_odom_in_hand_ != nullptr;
}
inline bool ArmVelocityCommand_Request::has_angular_velocity_of_hand_rt_odom_in_hand() const {
  return _internal_has_angular_velocity_of_hand_rt_odom_in_hand();
}
inline const ::bosdyn::api::Vec3& ArmVelocityCommand_Request::_internal_angular_velocity_of_hand_rt_odom_in_hand() const {
  const ::bosdyn::api::Vec3* p = _impl_.angular_velocity_of_hand_rt_odom_in_hand_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec3&>(
      ::bosdyn::api::_Vec3_default_instance_);
}
inline const ::bosdyn::api::Vec3& ArmVelocityCommand_Request::angular_velocity_of_hand_rt_odom_in_hand() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmVelocityCommand.Request.angular_velocity_of_hand_rt_odom_in_hand)
  return _internal_angular_velocity_of_hand_rt_odom_in_hand();
}
inline void ArmVelocityCommand_Request::unsafe_arena_set_allocated_angular_velocity_of_hand_rt_odom_in_hand(
    ::bosdyn::api::Vec3* angular_velocity_of_hand_rt_odom_in_hand) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angular_velocity_of_hand_rt_odom_in_hand_);
  }
  _impl_.angular_velocity_of_hand_rt_odom_in_hand_ = angular_velocity_of_hand_rt_odom_in_hand;
  if (angular_velocity_of_hand_rt_odom_in_hand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmVelocityCommand.Request.angular_velocity_of_hand_rt_odom_in_hand)
}
inline ::bosdyn::api::Vec3* ArmVelocityCommand_Request::release_angular_velocity_of_hand_rt_odom_in_hand() {
  
  ::bosdyn::api::Vec3* temp = _impl_.angular_velocity_of_hand_rt_odom_in_hand_;
  _impl_.angular_velocity_of_hand_rt_odom_in_hand_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec3* ArmVelocityCommand_Request::unsafe_arena_release_angular_velocity_of_hand_rt_odom_in_hand() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmVelocityCommand.Request.angular_velocity_of_hand_rt_odom_in_hand)
  
  ::bosdyn::api::Vec3* temp = _impl_.angular_velocity_of_hand_rt_odom_in_hand_;
  _impl_.angular_velocity_of_hand_rt_odom_in_hand_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec3* ArmVelocityCommand_Request::_internal_mutable_angular_velocity_of_hand_rt_odom_in_hand() {
  
  if (_impl_.angular_velocity_of_hand_rt_odom_in_hand_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec3>(GetArenaForAllocation());
    _impl_.angular_velocity_of_hand_rt_odom_in_hand_ = p;
  }
  return _impl_.angular_velocity_of_hand_rt_odom_in_hand_;
}
inline ::bosdyn::api::Vec3* ArmVelocityCommand_Request::mutable_angular_velocity_of_hand_rt_odom_in_hand() {
  ::bosdyn::api::Vec3* _msg = _internal_mutable_angular_velocity_of_hand_rt_odom_in_hand();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmVelocityCommand.Request.angular_velocity_of_hand_rt_odom_in_hand)
  return _msg;
}
inline void ArmVelocityCommand_Request::set_allocated_angular_velocity_of_hand_rt_odom_in_hand(::bosdyn::api::Vec3* angular_velocity_of_hand_rt_odom_in_hand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angular_velocity_of_hand_rt_odom_in_hand_);
  }
  if (angular_velocity_of_hand_rt_odom_in_hand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity_of_hand_rt_odom_in_hand));
    if (message_arena != submessage_arena) {
      angular_velocity_of_hand_rt_odom_in_hand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_velocity_of_hand_rt_odom_in_hand, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.angular_velocity_of_hand_rt_odom_in_hand_ = angular_velocity_of_hand_rt_odom_in_hand;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmVelocityCommand.Request.angular_velocity_of_hand_rt_odom_in_hand)
}

// .google.protobuf.DoubleValue maximum_acceleration = 3;
inline bool ArmVelocityCommand_Request::_internal_has_maximum_acceleration() const {
  return this != internal_default_instance() && _impl_.maximum_acceleration_ != nullptr;
}
inline bool ArmVelocityCommand_Request::has_maximum_acceleration() const {
  return _internal_has_maximum_acceleration();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmVelocityCommand_Request::_internal_maximum_acceleration() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.maximum_acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmVelocityCommand_Request::maximum_acceleration() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmVelocityCommand.Request.maximum_acceleration)
  return _internal_maximum_acceleration();
}
inline void ArmVelocityCommand_Request::unsafe_arena_set_allocated_maximum_acceleration(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_acceleration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maximum_acceleration_);
  }
  _impl_.maximum_acceleration_ = maximum_acceleration;
  if (maximum_acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmVelocityCommand.Request.maximum_acceleration)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmVelocityCommand_Request::release_maximum_acceleration() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.maximum_acceleration_;
  _impl_.maximum_acceleration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmVelocityCommand_Request::unsafe_arena_release_maximum_acceleration() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmVelocityCommand.Request.maximum_acceleration)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.maximum_acceleration_;
  _impl_.maximum_acceleration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmVelocityCommand_Request::_internal_mutable_maximum_acceleration() {
  
  if (_impl_.maximum_acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.maximum_acceleration_ = p;
  }
  return _impl_.maximum_acceleration_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmVelocityCommand_Request::mutable_maximum_acceleration() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_maximum_acceleration();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmVelocityCommand.Request.maximum_acceleration)
  return _msg;
}
inline void ArmVelocityCommand_Request::set_allocated_maximum_acceleration(::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maximum_acceleration_);
  }
  if (maximum_acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maximum_acceleration));
    if (message_arena != submessage_arena) {
      maximum_acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maximum_acceleration, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.maximum_acceleration_ = maximum_acceleration;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmVelocityCommand.Request.maximum_acceleration)
}

// .google.protobuf.Timestamp end_time = 5;
inline bool ArmVelocityCommand_Request::_internal_has_end_time() const {
  return this != internal_default_instance() && _impl_.end_time_ != nullptr;
}
inline bool ArmVelocityCommand_Request::has_end_time() const {
  return _internal_has_end_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ArmVelocityCommand_Request::_internal_end_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ArmVelocityCommand_Request::end_time() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmVelocityCommand.Request.end_time)
  return _internal_end_time();
}
inline void ArmVelocityCommand_Request::unsafe_arena_set_allocated_end_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  _impl_.end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmVelocityCommand.Request.end_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ArmVelocityCommand_Request::release_end_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ArmVelocityCommand_Request::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmVelocityCommand.Request.end_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ArmVelocityCommand_Request::_internal_mutable_end_time() {
  
  if (_impl_.end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.end_time_ = p;
  }
  return _impl_.end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ArmVelocityCommand_Request::mutable_end_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_end_time();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmVelocityCommand.Request.end_time)
  return _msg;
}
inline void ArmVelocityCommand_Request::set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time));
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmVelocityCommand.Request.end_time)
}

inline bool ArmVelocityCommand_Request::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
inline void ArmVelocityCommand_Request::clear_has_command() {
  _impl_._oneof_case_[0] = COMMAND_NOT_SET;
}
inline ArmVelocityCommand_Request::CommandCase ArmVelocityCommand_Request::command_case() const {
  return ArmVelocityCommand_Request::CommandCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ArmVelocityCommand_Feedback

// -------------------------------------------------------------------

// ArmVelocityCommand

// -------------------------------------------------------------------

// NamedArmPositionsCommand_Request

// .bosdyn.api.NamedArmPositionsCommand.Positions position = 1;
inline void NamedArmPositionsCommand_Request::clear_position() {
  _impl_.position_ = 0;
}
inline ::bosdyn::api::NamedArmPositionsCommand_Positions NamedArmPositionsCommand_Request::_internal_position() const {
  return static_cast< ::bosdyn::api::NamedArmPositionsCommand_Positions >(_impl_.position_);
}
inline ::bosdyn::api::NamedArmPositionsCommand_Positions NamedArmPositionsCommand_Request::position() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.NamedArmPositionsCommand.Request.position)
  return _internal_position();
}
inline void NamedArmPositionsCommand_Request::_internal_set_position(::bosdyn::api::NamedArmPositionsCommand_Positions value) {
  
  _impl_.position_ = value;
}
inline void NamedArmPositionsCommand_Request::set_position(::bosdyn::api::NamedArmPositionsCommand_Positions value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.NamedArmPositionsCommand.Request.position)
}

// -------------------------------------------------------------------

// NamedArmPositionsCommand_Feedback

// .bosdyn.api.NamedArmPositionsCommand.Feedback.Status status = 1;
inline void NamedArmPositionsCommand_Feedback::clear_status() {
  _impl_.status_ = 0;
}
inline ::bosdyn::api::NamedArmPositionsCommand_Feedback_Status NamedArmPositionsCommand_Feedback::_internal_status() const {
  return static_cast< ::bosdyn::api::NamedArmPositionsCommand_Feedback_Status >(_impl_.status_);
}
inline ::bosdyn::api::NamedArmPositionsCommand_Feedback_Status NamedArmPositionsCommand_Feedback::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.NamedArmPositionsCommand.Feedback.status)
  return _internal_status();
}
inline void NamedArmPositionsCommand_Feedback::_internal_set_status(::bosdyn::api::NamedArmPositionsCommand_Feedback_Status value) {
  
  _impl_.status_ = value;
}
inline void NamedArmPositionsCommand_Feedback::set_status(::bosdyn::api::NamedArmPositionsCommand_Feedback_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.NamedArmPositionsCommand.Feedback.status)
}

// -------------------------------------------------------------------

// NamedArmPositionsCommand

// -------------------------------------------------------------------

// ArmCartesianCommand_Request

// string root_frame_name = 19;
inline void ArmCartesianCommand_Request::clear_root_frame_name() {
  _impl_.root_frame_name_.ClearToEmpty();
}
inline const std::string& ArmCartesianCommand_Request::root_frame_name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCartesianCommand.Request.root_frame_name)
  return _internal_root_frame_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ArmCartesianCommand_Request::set_root_frame_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.root_frame_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.ArmCartesianCommand.Request.root_frame_name)
}
inline std::string* ArmCartesianCommand_Request::mutable_root_frame_name() {
  std::string* _s = _internal_mutable_root_frame_name();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmCartesianCommand.Request.root_frame_name)
  return _s;
}
inline const std::string& ArmCartesianCommand_Request::_internal_root_frame_name() const {
  return _impl_.root_frame_name_.Get();
}
inline void ArmCartesianCommand_Request::_internal_set_root_frame_name(const std::string& value) {
  
  _impl_.root_frame_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ArmCartesianCommand_Request::_internal_mutable_root_frame_name() {
  
  return _impl_.root_frame_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ArmCartesianCommand_Request::release_root_frame_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmCartesianCommand.Request.root_frame_name)
  return _impl_.root_frame_name_.Release();
}
inline void ArmCartesianCommand_Request::set_allocated_root_frame_name(std::string* root_frame_name) {
  if (root_frame_name != nullptr) {
    
  } else {
    
  }
  _impl_.root_frame_name_.SetAllocated(root_frame_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.root_frame_name_.IsDefault()) {
    _impl_.root_frame_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmCartesianCommand.Request.root_frame_name)
}

// .bosdyn.api.SE3Pose wrist_tform_tool = 6;
inline bool ArmCartesianCommand_Request::_internal_has_wrist_tform_tool() const {
  return this != internal_default_instance() && _impl_.wrist_tform_tool_ != nullptr;
}
inline bool ArmCartesianCommand_Request::has_wrist_tform_tool() const {
  return _internal_has_wrist_tform_tool();
}
inline const ::bosdyn::api::SE3Pose& ArmCartesianCommand_Request::_internal_wrist_tform_tool() const {
  const ::bosdyn::api::SE3Pose* p = _impl_.wrist_tform_tool_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::SE3Pose&>(
      ::bosdyn::api::_SE3Pose_default_instance_);
}
inline const ::bosdyn::api::SE3Pose& ArmCartesianCommand_Request::wrist_tform_tool() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCartesianCommand.Request.wrist_tform_tool)
  return _internal_wrist_tform_tool();
}
inline void ArmCartesianCommand_Request::unsafe_arena_set_allocated_wrist_tform_tool(
    ::bosdyn::api::SE3Pose* wrist_tform_tool) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wrist_tform_tool_);
  }
  _impl_.wrist_tform_tool_ = wrist_tform_tool;
  if (wrist_tform_tool) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmCartesianCommand.Request.wrist_tform_tool)
}
inline ::bosdyn::api::SE3Pose* ArmCartesianCommand_Request::release_wrist_tform_tool() {
  
  ::bosdyn::api::SE3Pose* temp = _impl_.wrist_tform_tool_;
  _impl_.wrist_tform_tool_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::SE3Pose* ArmCartesianCommand_Request::unsafe_arena_release_wrist_tform_tool() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmCartesianCommand.Request.wrist_tform_tool)
  
  ::bosdyn::api::SE3Pose* temp = _impl_.wrist_tform_tool_;
  _impl_.wrist_tform_tool_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Pose* ArmCartesianCommand_Request::_internal_mutable_wrist_tform_tool() {
  
  if (_impl_.wrist_tform_tool_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Pose>(GetArenaForAllocation());
    _impl_.wrist_tform_tool_ = p;
  }
  return _impl_.wrist_tform_tool_;
}
inline ::bosdyn::api::SE3Pose* ArmCartesianCommand_Request::mutable_wrist_tform_tool() {
  ::bosdyn::api::SE3Pose* _msg = _internal_mutable_wrist_tform_tool();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmCartesianCommand.Request.wrist_tform_tool)
  return _msg;
}
inline void ArmCartesianCommand_Request::set_allocated_wrist_tform_tool(::bosdyn::api::SE3Pose* wrist_tform_tool) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wrist_tform_tool_);
  }
  if (wrist_tform_tool) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wrist_tform_tool));
    if (message_arena != submessage_arena) {
      wrist_tform_tool = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wrist_tform_tool, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.wrist_tform_tool_ = wrist_tform_tool;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmCartesianCommand.Request.wrist_tform_tool)
}

// .bosdyn.api.SE3Pose root_tform_task = 20;
inline bool ArmCartesianCommand_Request::_internal_has_root_tform_task() const {
  return this != internal_default_instance() && _impl_.root_tform_task_ != nullptr;
}
inline bool ArmCartesianCommand_Request::has_root_tform_task() const {
  return _internal_has_root_tform_task();
}
inline const ::bosdyn::api::SE3Pose& ArmCartesianCommand_Request::_internal_root_tform_task() const {
  const ::bosdyn::api::SE3Pose* p = _impl_.root_tform_task_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::SE3Pose&>(
      ::bosdyn::api::_SE3Pose_default_instance_);
}
inline const ::bosdyn::api::SE3Pose& ArmCartesianCommand_Request::root_tform_task() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCartesianCommand.Request.root_tform_task)
  return _internal_root_tform_task();
}
inline void ArmCartesianCommand_Request::unsafe_arena_set_allocated_root_tform_task(
    ::bosdyn::api::SE3Pose* root_tform_task) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.root_tform_task_);
  }
  _impl_.root_tform_task_ = root_tform_task;
  if (root_tform_task) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmCartesianCommand.Request.root_tform_task)
}
inline ::bosdyn::api::SE3Pose* ArmCartesianCommand_Request::release_root_tform_task() {
  
  ::bosdyn::api::SE3Pose* temp = _impl_.root_tform_task_;
  _impl_.root_tform_task_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::SE3Pose* ArmCartesianCommand_Request::unsafe_arena_release_root_tform_task() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmCartesianCommand.Request.root_tform_task)
  
  ::bosdyn::api::SE3Pose* temp = _impl_.root_tform_task_;
  _impl_.root_tform_task_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Pose* ArmCartesianCommand_Request::_internal_mutable_root_tform_task() {
  
  if (_impl_.root_tform_task_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Pose>(GetArenaForAllocation());
    _impl_.root_tform_task_ = p;
  }
  return _impl_.root_tform_task_;
}
inline ::bosdyn::api::SE3Pose* ArmCartesianCommand_Request::mutable_root_tform_task() {
  ::bosdyn::api::SE3Pose* _msg = _internal_mutable_root_tform_task();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmCartesianCommand.Request.root_tform_task)
  return _msg;
}
inline void ArmCartesianCommand_Request::set_allocated_root_tform_task(::bosdyn::api::SE3Pose* root_tform_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.root_tform_task_);
  }
  if (root_tform_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(root_tform_task));
    if (message_arena != submessage_arena) {
      root_tform_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root_tform_task, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.root_tform_task_ = root_tform_task;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmCartesianCommand.Request.root_tform_task)
}

// .bosdyn.api.SE3Trajectory pose_trajectory_in_task = 2;
inline bool ArmCartesianCommand_Request::_internal_has_pose_trajectory_in_task() const {
  return this != internal_default_instance() && _impl_.pose_trajectory_in_task_ != nullptr;
}
inline bool ArmCartesianCommand_Request::has_pose_trajectory_in_task() const {
  return _internal_has_pose_trajectory_in_task();
}
inline const ::bosdyn::api::SE3Trajectory& ArmCartesianCommand_Request::_internal_pose_trajectory_in_task() const {
  const ::bosdyn::api::SE3Trajectory* p = _impl_.pose_trajectory_in_task_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::SE3Trajectory&>(
      ::bosdyn::api::_SE3Trajectory_default_instance_);
}
inline const ::bosdyn::api::SE3Trajectory& ArmCartesianCommand_Request::pose_trajectory_in_task() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCartesianCommand.Request.pose_trajectory_in_task)
  return _internal_pose_trajectory_in_task();
}
inline void ArmCartesianCommand_Request::unsafe_arena_set_allocated_pose_trajectory_in_task(
    ::bosdyn::api::SE3Trajectory* pose_trajectory_in_task) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_trajectory_in_task_);
  }
  _impl_.pose_trajectory_in_task_ = pose_trajectory_in_task;
  if (pose_trajectory_in_task) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmCartesianCommand.Request.pose_trajectory_in_task)
}
inline ::bosdyn::api::SE3Trajectory* ArmCartesianCommand_Request::release_pose_trajectory_in_task() {
  
  ::bosdyn::api::SE3Trajectory* temp = _impl_.pose_trajectory_in_task_;
  _impl_.pose_trajectory_in_task_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::SE3Trajectory* ArmCartesianCommand_Request::unsafe_arena_release_pose_trajectory_in_task() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmCartesianCommand.Request.pose_trajectory_in_task)
  
  ::bosdyn::api::SE3Trajectory* temp = _impl_.pose_trajectory_in_task_;
  _impl_.pose_trajectory_in_task_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Trajectory* ArmCartesianCommand_Request::_internal_mutable_pose_trajectory_in_task() {
  
  if (_impl_.pose_trajectory_in_task_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Trajectory>(GetArenaForAllocation());
    _impl_.pose_trajectory_in_task_ = p;
  }
  return _impl_.pose_trajectory_in_task_;
}
inline ::bosdyn::api::SE3Trajectory* ArmCartesianCommand_Request::mutable_pose_trajectory_in_task() {
  ::bosdyn::api::SE3Trajectory* _msg = _internal_mutable_pose_trajectory_in_task();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmCartesianCommand.Request.pose_trajectory_in_task)
  return _msg;
}
inline void ArmCartesianCommand_Request::set_allocated_pose_trajectory_in_task(::bosdyn::api::SE3Trajectory* pose_trajectory_in_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_trajectory_in_task_);
  }
  if (pose_trajectory_in_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_trajectory_in_task));
    if (message_arena != submessage_arena) {
      pose_trajectory_in_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose_trajectory_in_task, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pose_trajectory_in_task_ = pose_trajectory_in_task;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmCartesianCommand.Request.pose_trajectory_in_task)
}

// .google.protobuf.DoubleValue maximum_acceleration = 3;
inline bool ArmCartesianCommand_Request::_internal_has_maximum_acceleration() const {
  return this != internal_default_instance() && _impl_.maximum_acceleration_ != nullptr;
}
inline bool ArmCartesianCommand_Request::has_maximum_acceleration() const {
  return _internal_has_maximum_acceleration();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmCartesianCommand_Request::_internal_maximum_acceleration() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.maximum_acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmCartesianCommand_Request::maximum_acceleration() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCartesianCommand.Request.maximum_acceleration)
  return _internal_maximum_acceleration();
}
inline void ArmCartesianCommand_Request::unsafe_arena_set_allocated_maximum_acceleration(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_acceleration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maximum_acceleration_);
  }
  _impl_.maximum_acceleration_ = maximum_acceleration;
  if (maximum_acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmCartesianCommand.Request.maximum_acceleration)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmCartesianCommand_Request::release_maximum_acceleration() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.maximum_acceleration_;
  _impl_.maximum_acceleration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmCartesianCommand_Request::unsafe_arena_release_maximum_acceleration() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmCartesianCommand.Request.maximum_acceleration)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.maximum_acceleration_;
  _impl_.maximum_acceleration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmCartesianCommand_Request::_internal_mutable_maximum_acceleration() {
  
  if (_impl_.maximum_acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.maximum_acceleration_ = p;
  }
  return _impl_.maximum_acceleration_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmCartesianCommand_Request::mutable_maximum_acceleration() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_maximum_acceleration();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmCartesianCommand.Request.maximum_acceleration)
  return _msg;
}
inline void ArmCartesianCommand_Request::set_allocated_maximum_acceleration(::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maximum_acceleration_);
  }
  if (maximum_acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maximum_acceleration));
    if (message_arena != submessage_arena) {
      maximum_acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maximum_acceleration, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.maximum_acceleration_ = maximum_acceleration;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmCartesianCommand.Request.maximum_acceleration)
}

// .google.protobuf.DoubleValue max_linear_velocity = 4;
inline bool ArmCartesianCommand_Request::_internal_has_max_linear_velocity() const {
  return this != internal_default_instance() && _impl_.max_linear_velocity_ != nullptr;
}
inline bool ArmCartesianCommand_Request::has_max_linear_velocity() const {
  return _internal_has_max_linear_velocity();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmCartesianCommand_Request::_internal_max_linear_velocity() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.max_linear_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmCartesianCommand_Request::max_linear_velocity() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCartesianCommand.Request.max_linear_velocity)
  return _internal_max_linear_velocity();
}
inline void ArmCartesianCommand_Request::unsafe_arena_set_allocated_max_linear_velocity(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_linear_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_linear_velocity_);
  }
  _impl_.max_linear_velocity_ = max_linear_velocity;
  if (max_linear_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmCartesianCommand.Request.max_linear_velocity)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmCartesianCommand_Request::release_max_linear_velocity() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_linear_velocity_;
  _impl_.max_linear_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmCartesianCommand_Request::unsafe_arena_release_max_linear_velocity() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmCartesianCommand.Request.max_linear_velocity)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_linear_velocity_;
  _impl_.max_linear_velocity_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmCartesianCommand_Request::_internal_mutable_max_linear_velocity() {
  
  if (_impl_.max_linear_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.max_linear_velocity_ = p;
  }
  return _impl_.max_linear_velocity_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmCartesianCommand_Request::mutable_max_linear_velocity() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_max_linear_velocity();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmCartesianCommand.Request.max_linear_velocity)
  return _msg;
}
inline void ArmCartesianCommand_Request::set_allocated_max_linear_velocity(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_linear_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_linear_velocity_);
  }
  if (max_linear_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_linear_velocity));
    if (message_arena != submessage_arena) {
      max_linear_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_linear_velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_linear_velocity_ = max_linear_velocity;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmCartesianCommand.Request.max_linear_velocity)
}

// .google.protobuf.DoubleValue max_angular_velocity = 5;
inline bool ArmCartesianCommand_Request::_internal_has_max_angular_velocity() const {
  return this != internal_default_instance() && _impl_.max_angular_velocity_ != nullptr;
}
inline bool ArmCartesianCommand_Request::has_max_angular_velocity() const {
  return _internal_has_max_angular_velocity();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmCartesianCommand_Request::_internal_max_angular_velocity() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.max_angular_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmCartesianCommand_Request::max_angular_velocity() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCartesianCommand.Request.max_angular_velocity)
  return _internal_max_angular_velocity();
}
inline void ArmCartesianCommand_Request::unsafe_arena_set_allocated_max_angular_velocity(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_angular_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_angular_velocity_);
  }
  _impl_.max_angular_velocity_ = max_angular_velocity;
  if (max_angular_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmCartesianCommand.Request.max_angular_velocity)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmCartesianCommand_Request::release_max_angular_velocity() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_angular_velocity_;
  _impl_.max_angular_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmCartesianCommand_Request::unsafe_arena_release_max_angular_velocity() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmCartesianCommand.Request.max_angular_velocity)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_angular_velocity_;
  _impl_.max_angular_velocity_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmCartesianCommand_Request::_internal_mutable_max_angular_velocity() {
  
  if (_impl_.max_angular_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.max_angular_velocity_ = p;
  }
  return _impl_.max_angular_velocity_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmCartesianCommand_Request::mutable_max_angular_velocity() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_max_angular_velocity();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmCartesianCommand.Request.max_angular_velocity)
  return _msg;
}
inline void ArmCartesianCommand_Request::set_allocated_max_angular_velocity(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_angular_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_angular_velocity_);
  }
  if (max_angular_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_angular_velocity));
    if (message_arena != submessage_arena) {
      max_angular_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_angular_velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_angular_velocity_ = max_angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmCartesianCommand.Request.max_angular_velocity)
}

// .google.protobuf.DoubleValue max_pos_tracking_error = 15;
inline bool ArmCartesianCommand_Request::_internal_has_max_pos_tracking_error() const {
  return this != internal_default_instance() && _impl_.max_pos_tracking_error_ != nullptr;
}
inline bool ArmCartesianCommand_Request::has_max_pos_tracking_error() const {
  return _internal_has_max_pos_tracking_error();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmCartesianCommand_Request::_internal_max_pos_tracking_error() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.max_pos_tracking_error_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmCartesianCommand_Request::max_pos_tracking_error() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCartesianCommand.Request.max_pos_tracking_error)
  return _internal_max_pos_tracking_error();
}
inline void ArmCartesianCommand_Request::unsafe_arena_set_allocated_max_pos_tracking_error(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_pos_tracking_error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_pos_tracking_error_);
  }
  _impl_.max_pos_tracking_error_ = max_pos_tracking_error;
  if (max_pos_tracking_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmCartesianCommand.Request.max_pos_tracking_error)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmCartesianCommand_Request::release_max_pos_tracking_error() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_pos_tracking_error_;
  _impl_.max_pos_tracking_error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmCartesianCommand_Request::unsafe_arena_release_max_pos_tracking_error() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmCartesianCommand.Request.max_pos_tracking_error)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_pos_tracking_error_;
  _impl_.max_pos_tracking_error_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmCartesianCommand_Request::_internal_mutable_max_pos_tracking_error() {
  
  if (_impl_.max_pos_tracking_error_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.max_pos_tracking_error_ = p;
  }
  return _impl_.max_pos_tracking_error_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmCartesianCommand_Request::mutable_max_pos_tracking_error() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_max_pos_tracking_error();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmCartesianCommand.Request.max_pos_tracking_error)
  return _msg;
}
inline void ArmCartesianCommand_Request::set_allocated_max_pos_tracking_error(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_pos_tracking_error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_pos_tracking_error_);
  }
  if (max_pos_tracking_error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_pos_tracking_error));
    if (message_arena != submessage_arena) {
      max_pos_tracking_error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_pos_tracking_error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_pos_tracking_error_ = max_pos_tracking_error;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmCartesianCommand.Request.max_pos_tracking_error)
}

// .google.protobuf.DoubleValue max_rot_tracking_error = 16;
inline bool ArmCartesianCommand_Request::_internal_has_max_rot_tracking_error() const {
  return this != internal_default_instance() && _impl_.max_rot_tracking_error_ != nullptr;
}
inline bool ArmCartesianCommand_Request::has_max_rot_tracking_error() const {
  return _internal_has_max_rot_tracking_error();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmCartesianCommand_Request::_internal_max_rot_tracking_error() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.max_rot_tracking_error_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmCartesianCommand_Request::max_rot_tracking_error() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCartesianCommand.Request.max_rot_tracking_error)
  return _internal_max_rot_tracking_error();
}
inline void ArmCartesianCommand_Request::unsafe_arena_set_allocated_max_rot_tracking_error(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_rot_tracking_error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_rot_tracking_error_);
  }
  _impl_.max_rot_tracking_error_ = max_rot_tracking_error;
  if (max_rot_tracking_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmCartesianCommand.Request.max_rot_tracking_error)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmCartesianCommand_Request::release_max_rot_tracking_error() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_rot_tracking_error_;
  _impl_.max_rot_tracking_error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmCartesianCommand_Request::unsafe_arena_release_max_rot_tracking_error() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmCartesianCommand.Request.max_rot_tracking_error)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_rot_tracking_error_;
  _impl_.max_rot_tracking_error_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmCartesianCommand_Request::_internal_mutable_max_rot_tracking_error() {
  
  if (_impl_.max_rot_tracking_error_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.max_rot_tracking_error_ = p;
  }
  return _impl_.max_rot_tracking_error_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmCartesianCommand_Request::mutable_max_rot_tracking_error() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_max_rot_tracking_error();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmCartesianCommand.Request.max_rot_tracking_error)
  return _msg;
}
inline void ArmCartesianCommand_Request::set_allocated_max_rot_tracking_error(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_rot_tracking_error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_rot_tracking_error_);
  }
  if (max_rot_tracking_error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_rot_tracking_error));
    if (message_arena != submessage_arena) {
      max_rot_tracking_error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_rot_tracking_error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_rot_tracking_error_ = max_rot_tracking_error;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmCartesianCommand.Request.max_rot_tracking_error)
}

// bool force_remain_near_current_joint_configuration = 17;
inline bool ArmCartesianCommand_Request::_internal_has_force_remain_near_current_joint_configuration() const {
  return joint_configuration_case() == kForceRemainNearCurrentJointConfiguration;
}
inline bool ArmCartesianCommand_Request::has_force_remain_near_current_joint_configuration() const {
  return _internal_has_force_remain_near_current_joint_configuration();
}
inline void ArmCartesianCommand_Request::set_has_force_remain_near_current_joint_configuration() {
  _impl_._oneof_case_[0] = kForceRemainNearCurrentJointConfiguration;
}
inline void ArmCartesianCommand_Request::clear_force_remain_near_current_joint_configuration() {
  if (_internal_has_force_remain_near_current_joint_configuration()) {
    _impl_.joint_configuration_.force_remain_near_current_joint_configuration_ = false;
    clear_has_joint_configuration();
  }
}
inline bool ArmCartesianCommand_Request::_internal_force_remain_near_current_joint_configuration() const {
  if (_internal_has_force_remain_near_current_joint_configuration()) {
    return _impl_.joint_configuration_.force_remain_near_current_joint_configuration_;
  }
  return false;
}
inline void ArmCartesianCommand_Request::_internal_set_force_remain_near_current_joint_configuration(bool value) {
  if (!_internal_has_force_remain_near_current_joint_configuration()) {
    clear_joint_configuration();
    set_has_force_remain_near_current_joint_configuration();
  }
  _impl_.joint_configuration_.force_remain_near_current_joint_configuration_ = value;
}
inline bool ArmCartesianCommand_Request::force_remain_near_current_joint_configuration() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCartesianCommand.Request.force_remain_near_current_joint_configuration)
  return _internal_force_remain_near_current_joint_configuration();
}
inline void ArmCartesianCommand_Request::set_force_remain_near_current_joint_configuration(bool value) {
  _internal_set_force_remain_near_current_joint_configuration(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.ArmCartesianCommand.Request.force_remain_near_current_joint_configuration)
}

// .bosdyn.api.ArmJointPosition preferred_joint_configuration = 18;
inline bool ArmCartesianCommand_Request::_internal_has_preferred_joint_configuration() const {
  return joint_configuration_case() == kPreferredJointConfiguration;
}
inline bool ArmCartesianCommand_Request::has_preferred_joint_configuration() const {
  return _internal_has_preferred_joint_configuration();
}
inline void ArmCartesianCommand_Request::set_has_preferred_joint_configuration() {
  _impl_._oneof_case_[0] = kPreferredJointConfiguration;
}
inline void ArmCartesianCommand_Request::clear_preferred_joint_configuration() {
  if (_internal_has_preferred_joint_configuration()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.joint_configuration_.preferred_joint_configuration_;
    }
    clear_has_joint_configuration();
  }
}
inline ::bosdyn::api::ArmJointPosition* ArmCartesianCommand_Request::release_preferred_joint_configuration() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmCartesianCommand.Request.preferred_joint_configuration)
  if (_internal_has_preferred_joint_configuration()) {
    clear_has_joint_configuration();
    ::bosdyn::api::ArmJointPosition* temp = _impl_.joint_configuration_.preferred_joint_configuration_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.joint_configuration_.preferred_joint_configuration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::ArmJointPosition& ArmCartesianCommand_Request::_internal_preferred_joint_configuration() const {
  return _internal_has_preferred_joint_configuration()
      ? *_impl_.joint_configuration_.preferred_joint_configuration_
      : reinterpret_cast< ::bosdyn::api::ArmJointPosition&>(::bosdyn::api::_ArmJointPosition_default_instance_);
}
inline const ::bosdyn::api::ArmJointPosition& ArmCartesianCommand_Request::preferred_joint_configuration() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCartesianCommand.Request.preferred_joint_configuration)
  return _internal_preferred_joint_configuration();
}
inline ::bosdyn::api::ArmJointPosition* ArmCartesianCommand_Request::unsafe_arena_release_preferred_joint_configuration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.ArmCartesianCommand.Request.preferred_joint_configuration)
  if (_internal_has_preferred_joint_configuration()) {
    clear_has_joint_configuration();
    ::bosdyn::api::ArmJointPosition* temp = _impl_.joint_configuration_.preferred_joint_configuration_;
    _impl_.joint_configuration_.preferred_joint_configuration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ArmCartesianCommand_Request::unsafe_arena_set_allocated_preferred_joint_configuration(::bosdyn::api::ArmJointPosition* preferred_joint_configuration) {
  clear_joint_configuration();
  if (preferred_joint_configuration) {
    set_has_preferred_joint_configuration();
    _impl_.joint_configuration_.preferred_joint_configuration_ = preferred_joint_configuration;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmCartesianCommand.Request.preferred_joint_configuration)
}
inline ::bosdyn::api::ArmJointPosition* ArmCartesianCommand_Request::_internal_mutable_preferred_joint_configuration() {
  if (!_internal_has_preferred_joint_configuration()) {
    clear_joint_configuration();
    set_has_preferred_joint_configuration();
    _impl_.joint_configuration_.preferred_joint_configuration_ = CreateMaybeMessage< ::bosdyn::api::ArmJointPosition >(GetArenaForAllocation());
  }
  return _impl_.joint_configuration_.preferred_joint_configuration_;
}
inline ::bosdyn::api::ArmJointPosition* ArmCartesianCommand_Request::mutable_preferred_joint_configuration() {
  ::bosdyn::api::ArmJointPosition* _msg = _internal_mutable_preferred_joint_configuration();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmCartesianCommand.Request.preferred_joint_configuration)
  return _msg;
}

// .bosdyn.api.ArmCartesianCommand.Request.AxisMode x_axis = 8;
inline void ArmCartesianCommand_Request::clear_x_axis() {
  _impl_.x_axis_ = 0;
}
inline ::bosdyn::api::ArmCartesianCommand_Request_AxisMode ArmCartesianCommand_Request::_internal_x_axis() const {
  return static_cast< ::bosdyn::api::ArmCartesianCommand_Request_AxisMode >(_impl_.x_axis_);
}
inline ::bosdyn::api::ArmCartesianCommand_Request_AxisMode ArmCartesianCommand_Request::x_axis() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCartesianCommand.Request.x_axis)
  return _internal_x_axis();
}
inline void ArmCartesianCommand_Request::_internal_set_x_axis(::bosdyn::api::ArmCartesianCommand_Request_AxisMode value) {
  
  _impl_.x_axis_ = value;
}
inline void ArmCartesianCommand_Request::set_x_axis(::bosdyn::api::ArmCartesianCommand_Request_AxisMode value) {
  _internal_set_x_axis(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.ArmCartesianCommand.Request.x_axis)
}

// .bosdyn.api.ArmCartesianCommand.Request.AxisMode y_axis = 9;
inline void ArmCartesianCommand_Request::clear_y_axis() {
  _impl_.y_axis_ = 0;
}
inline ::bosdyn::api::ArmCartesianCommand_Request_AxisMode ArmCartesianCommand_Request::_internal_y_axis() const {
  return static_cast< ::bosdyn::api::ArmCartesianCommand_Request_AxisMode >(_impl_.y_axis_);
}
inline ::bosdyn::api::ArmCartesianCommand_Request_AxisMode ArmCartesianCommand_Request::y_axis() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCartesianCommand.Request.y_axis)
  return _internal_y_axis();
}
inline void ArmCartesianCommand_Request::_internal_set_y_axis(::bosdyn::api::ArmCartesianCommand_Request_AxisMode value) {
  
  _impl_.y_axis_ = value;
}
inline void ArmCartesianCommand_Request::set_y_axis(::bosdyn::api::ArmCartesianCommand_Request_AxisMode value) {
  _internal_set_y_axis(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.ArmCartesianCommand.Request.y_axis)
}

// .bosdyn.api.ArmCartesianCommand.Request.AxisMode z_axis = 10;
inline void ArmCartesianCommand_Request::clear_z_axis() {
  _impl_.z_axis_ = 0;
}
inline ::bosdyn::api::ArmCartesianCommand_Request_AxisMode ArmCartesianCommand_Request::_internal_z_axis() const {
  return static_cast< ::bosdyn::api::ArmCartesianCommand_Request_AxisMode >(_impl_.z_axis_);
}
inline ::bosdyn::api::ArmCartesianCommand_Request_AxisMode ArmCartesianCommand_Request::z_axis() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCartesianCommand.Request.z_axis)
  return _internal_z_axis();
}
inline void ArmCartesianCommand_Request::_internal_set_z_axis(::bosdyn::api::ArmCartesianCommand_Request_AxisMode value) {
  
  _impl_.z_axis_ = value;
}
inline void ArmCartesianCommand_Request::set_z_axis(::bosdyn::api::ArmCartesianCommand_Request_AxisMode value) {
  _internal_set_z_axis(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.ArmCartesianCommand.Request.z_axis)
}

// .bosdyn.api.ArmCartesianCommand.Request.AxisMode rx_axis = 11;
inline void ArmCartesianCommand_Request::clear_rx_axis() {
  _impl_.rx_axis_ = 0;
}
inline ::bosdyn::api::ArmCartesianCommand_Request_AxisMode ArmCartesianCommand_Request::_internal_rx_axis() const {
  return static_cast< ::bosdyn::api::ArmCartesianCommand_Request_AxisMode >(_impl_.rx_axis_);
}
inline ::bosdyn::api::ArmCartesianCommand_Request_AxisMode ArmCartesianCommand_Request::rx_axis() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCartesianCommand.Request.rx_axis)
  return _internal_rx_axis();
}
inline void ArmCartesianCommand_Request::_internal_set_rx_axis(::bosdyn::api::ArmCartesianCommand_Request_AxisMode value) {
  
  _impl_.rx_axis_ = value;
}
inline void ArmCartesianCommand_Request::set_rx_axis(::bosdyn::api::ArmCartesianCommand_Request_AxisMode value) {
  _internal_set_rx_axis(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.ArmCartesianCommand.Request.rx_axis)
}

// .bosdyn.api.ArmCartesianCommand.Request.AxisMode ry_axis = 12;
inline void ArmCartesianCommand_Request::clear_ry_axis() {
  _impl_.ry_axis_ = 0;
}
inline ::bosdyn::api::ArmCartesianCommand_Request_AxisMode ArmCartesianCommand_Request::_internal_ry_axis() const {
  return static_cast< ::bosdyn::api::ArmCartesianCommand_Request_AxisMode >(_impl_.ry_axis_);
}
inline ::bosdyn::api::ArmCartesianCommand_Request_AxisMode ArmCartesianCommand_Request::ry_axis() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCartesianCommand.Request.ry_axis)
  return _internal_ry_axis();
}
inline void ArmCartesianCommand_Request::_internal_set_ry_axis(::bosdyn::api::ArmCartesianCommand_Request_AxisMode value) {
  
  _impl_.ry_axis_ = value;
}
inline void ArmCartesianCommand_Request::set_ry_axis(::bosdyn::api::ArmCartesianCommand_Request_AxisMode value) {
  _internal_set_ry_axis(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.ArmCartesianCommand.Request.ry_axis)
}

// .bosdyn.api.ArmCartesianCommand.Request.AxisMode rz_axis = 13;
inline void ArmCartesianCommand_Request::clear_rz_axis() {
  _impl_.rz_axis_ = 0;
}
inline ::bosdyn::api::ArmCartesianCommand_Request_AxisMode ArmCartesianCommand_Request::_internal_rz_axis() const {
  return static_cast< ::bosdyn::api::ArmCartesianCommand_Request_AxisMode >(_impl_.rz_axis_);
}
inline ::bosdyn::api::ArmCartesianCommand_Request_AxisMode ArmCartesianCommand_Request::rz_axis() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCartesianCommand.Request.rz_axis)
  return _internal_rz_axis();
}
inline void ArmCartesianCommand_Request::_internal_set_rz_axis(::bosdyn::api::ArmCartesianCommand_Request_AxisMode value) {
  
  _impl_.rz_axis_ = value;
}
inline void ArmCartesianCommand_Request::set_rz_axis(::bosdyn::api::ArmCartesianCommand_Request_AxisMode value) {
  _internal_set_rz_axis(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.ArmCartesianCommand.Request.rz_axis)
}

// .bosdyn.api.WrenchTrajectory wrench_trajectory_in_task = 14;
inline bool ArmCartesianCommand_Request::_internal_has_wrench_trajectory_in_task() const {
  return this != internal_default_instance() && _impl_.wrench_trajectory_in_task_ != nullptr;
}
inline bool ArmCartesianCommand_Request::has_wrench_trajectory_in_task() const {
  return _internal_has_wrench_trajectory_in_task();
}
inline const ::bosdyn::api::WrenchTrajectory& ArmCartesianCommand_Request::_internal_wrench_trajectory_in_task() const {
  const ::bosdyn::api::WrenchTrajectory* p = _impl_.wrench_trajectory_in_task_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::WrenchTrajectory&>(
      ::bosdyn::api::_WrenchTrajectory_default_instance_);
}
inline const ::bosdyn::api::WrenchTrajectory& ArmCartesianCommand_Request::wrench_trajectory_in_task() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCartesianCommand.Request.wrench_trajectory_in_task)
  return _internal_wrench_trajectory_in_task();
}
inline void ArmCartesianCommand_Request::unsafe_arena_set_allocated_wrench_trajectory_in_task(
    ::bosdyn::api::WrenchTrajectory* wrench_trajectory_in_task) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wrench_trajectory_in_task_);
  }
  _impl_.wrench_trajectory_in_task_ = wrench_trajectory_in_task;
  if (wrench_trajectory_in_task) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmCartesianCommand.Request.wrench_trajectory_in_task)
}
inline ::bosdyn::api::WrenchTrajectory* ArmCartesianCommand_Request::release_wrench_trajectory_in_task() {
  
  ::bosdyn::api::WrenchTrajectory* temp = _impl_.wrench_trajectory_in_task_;
  _impl_.wrench_trajectory_in_task_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::WrenchTrajectory* ArmCartesianCommand_Request::unsafe_arena_release_wrench_trajectory_in_task() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmCartesianCommand.Request.wrench_trajectory_in_task)
  
  ::bosdyn::api::WrenchTrajectory* temp = _impl_.wrench_trajectory_in_task_;
  _impl_.wrench_trajectory_in_task_ = nullptr;
  return temp;
}
inline ::bosdyn::api::WrenchTrajectory* ArmCartesianCommand_Request::_internal_mutable_wrench_trajectory_in_task() {
  
  if (_impl_.wrench_trajectory_in_task_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::WrenchTrajectory>(GetArenaForAllocation());
    _impl_.wrench_trajectory_in_task_ = p;
  }
  return _impl_.wrench_trajectory_in_task_;
}
inline ::bosdyn::api::WrenchTrajectory* ArmCartesianCommand_Request::mutable_wrench_trajectory_in_task() {
  ::bosdyn::api::WrenchTrajectory* _msg = _internal_mutable_wrench_trajectory_in_task();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmCartesianCommand.Request.wrench_trajectory_in_task)
  return _msg;
}
inline void ArmCartesianCommand_Request::set_allocated_wrench_trajectory_in_task(::bosdyn::api::WrenchTrajectory* wrench_trajectory_in_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wrench_trajectory_in_task_);
  }
  if (wrench_trajectory_in_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wrench_trajectory_in_task));
    if (message_arena != submessage_arena) {
      wrench_trajectory_in_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wrench_trajectory_in_task, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.wrench_trajectory_in_task_ = wrench_trajectory_in_task;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmCartesianCommand.Request.wrench_trajectory_in_task)
}

inline bool ArmCartesianCommand_Request::has_joint_configuration() const {
  return joint_configuration_case() != JOINT_CONFIGURATION_NOT_SET;
}
inline void ArmCartesianCommand_Request::clear_has_joint_configuration() {
  _impl_._oneof_case_[0] = JOINT_CONFIGURATION_NOT_SET;
}
inline ArmCartesianCommand_Request::JointConfigurationCase ArmCartesianCommand_Request::joint_configuration_case() const {
  return ArmCartesianCommand_Request::JointConfigurationCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ArmCartesianCommand_Feedback

// .bosdyn.api.ArmCartesianCommand.Feedback.Status status = 1;
inline void ArmCartesianCommand_Feedback::clear_status() {
  _impl_.status_ = 0;
}
inline ::bosdyn::api::ArmCartesianCommand_Feedback_Status ArmCartesianCommand_Feedback::_internal_status() const {
  return static_cast< ::bosdyn::api::ArmCartesianCommand_Feedback_Status >(_impl_.status_);
}
inline ::bosdyn::api::ArmCartesianCommand_Feedback_Status ArmCartesianCommand_Feedback::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCartesianCommand.Feedback.status)
  return _internal_status();
}
inline void ArmCartesianCommand_Feedback::_internal_set_status(::bosdyn::api::ArmCartesianCommand_Feedback_Status value) {
  
  _impl_.status_ = value;
}
inline void ArmCartesianCommand_Feedback::set_status(::bosdyn::api::ArmCartesianCommand_Feedback_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.ArmCartesianCommand.Feedback.status)
}

// double measured_pos_tracking_error = 2;
inline void ArmCartesianCommand_Feedback::clear_measured_pos_tracking_error() {
  _impl_.measured_pos_tracking_error_ = 0;
}
inline double ArmCartesianCommand_Feedback::_internal_measured_pos_tracking_error() const {
  return _impl_.measured_pos_tracking_error_;
}
inline double ArmCartesianCommand_Feedback::measured_pos_tracking_error() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCartesianCommand.Feedback.measured_pos_tracking_error)
  return _internal_measured_pos_tracking_error();
}
inline void ArmCartesianCommand_Feedback::_internal_set_measured_pos_tracking_error(double value) {
  
  _impl_.measured_pos_tracking_error_ = value;
}
inline void ArmCartesianCommand_Feedback::set_measured_pos_tracking_error(double value) {
  _internal_set_measured_pos_tracking_error(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.ArmCartesianCommand.Feedback.measured_pos_tracking_error)
}

// double measured_rot_tracking_error = 3;
inline void ArmCartesianCommand_Feedback::clear_measured_rot_tracking_error() {
  _impl_.measured_rot_tracking_error_ = 0;
}
inline double ArmCartesianCommand_Feedback::_internal_measured_rot_tracking_error() const {
  return _impl_.measured_rot_tracking_error_;
}
inline double ArmCartesianCommand_Feedback::measured_rot_tracking_error() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCartesianCommand.Feedback.measured_rot_tracking_error)
  return _internal_measured_rot_tracking_error();
}
inline void ArmCartesianCommand_Feedback::_internal_set_measured_rot_tracking_error(double value) {
  
  _impl_.measured_rot_tracking_error_ = value;
}
inline void ArmCartesianCommand_Feedback::set_measured_rot_tracking_error(double value) {
  _internal_set_measured_rot_tracking_error(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.ArmCartesianCommand.Feedback.measured_rot_tracking_error)
}

// double measured_pos_distance_to_goal = 4;
inline void ArmCartesianCommand_Feedback::clear_measured_pos_distance_to_goal() {
  _impl_.measured_pos_distance_to_goal_ = 0;
}
inline double ArmCartesianCommand_Feedback::_internal_measured_pos_distance_to_goal() const {
  return _impl_.measured_pos_distance_to_goal_;
}
inline double ArmCartesianCommand_Feedback::measured_pos_distance_to_goal() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCartesianCommand.Feedback.measured_pos_distance_to_goal)
  return _internal_measured_pos_distance_to_goal();
}
inline void ArmCartesianCommand_Feedback::_internal_set_measured_pos_distance_to_goal(double value) {
  
  _impl_.measured_pos_distance_to_goal_ = value;
}
inline void ArmCartesianCommand_Feedback::set_measured_pos_distance_to_goal(double value) {
  _internal_set_measured_pos_distance_to_goal(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.ArmCartesianCommand.Feedback.measured_pos_distance_to_goal)
}

// double measured_rot_distance_to_goal = 5;
inline void ArmCartesianCommand_Feedback::clear_measured_rot_distance_to_goal() {
  _impl_.measured_rot_distance_to_goal_ = 0;
}
inline double ArmCartesianCommand_Feedback::_internal_measured_rot_distance_to_goal() const {
  return _impl_.measured_rot_distance_to_goal_;
}
inline double ArmCartesianCommand_Feedback::measured_rot_distance_to_goal() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmCartesianCommand.Feedback.measured_rot_distance_to_goal)
  return _internal_measured_rot_distance_to_goal();
}
inline void ArmCartesianCommand_Feedback::_internal_set_measured_rot_distance_to_goal(double value) {
  
  _impl_.measured_rot_distance_to_goal_ = value;
}
inline void ArmCartesianCommand_Feedback::set_measured_rot_distance_to_goal(double value) {
  _internal_set_measured_rot_distance_to_goal(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.ArmCartesianCommand.Feedback.measured_rot_distance_to_goal)
}

// -------------------------------------------------------------------

// ArmCartesianCommand

// -------------------------------------------------------------------

// ArmJointMoveCommand_Request

// .bosdyn.api.ArmJointTrajectory trajectory = 1;
inline bool ArmJointMoveCommand_Request::_internal_has_trajectory() const {
  return this != internal_default_instance() && _impl_.trajectory_ != nullptr;
}
inline bool ArmJointMoveCommand_Request::has_trajectory() const {
  return _internal_has_trajectory();
}
inline void ArmJointMoveCommand_Request::clear_trajectory() {
  if (GetArenaForAllocation() == nullptr && _impl_.trajectory_ != nullptr) {
    delete _impl_.trajectory_;
  }
  _impl_.trajectory_ = nullptr;
}
inline const ::bosdyn::api::ArmJointTrajectory& ArmJointMoveCommand_Request::_internal_trajectory() const {
  const ::bosdyn::api::ArmJointTrajectory* p = _impl_.trajectory_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ArmJointTrajectory&>(
      ::bosdyn::api::_ArmJointTrajectory_default_instance_);
}
inline const ::bosdyn::api::ArmJointTrajectory& ArmJointMoveCommand_Request::trajectory() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmJointMoveCommand.Request.trajectory)
  return _internal_trajectory();
}
inline void ArmJointMoveCommand_Request::unsafe_arena_set_allocated_trajectory(
    ::bosdyn::api::ArmJointTrajectory* trajectory) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trajectory_);
  }
  _impl_.trajectory_ = trajectory;
  if (trajectory) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmJointMoveCommand.Request.trajectory)
}
inline ::bosdyn::api::ArmJointTrajectory* ArmJointMoveCommand_Request::release_trajectory() {
  
  ::bosdyn::api::ArmJointTrajectory* temp = _impl_.trajectory_;
  _impl_.trajectory_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ArmJointTrajectory* ArmJointMoveCommand_Request::unsafe_arena_release_trajectory() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmJointMoveCommand.Request.trajectory)
  
  ::bosdyn::api::ArmJointTrajectory* temp = _impl_.trajectory_;
  _impl_.trajectory_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ArmJointTrajectory* ArmJointMoveCommand_Request::_internal_mutable_trajectory() {
  
  if (_impl_.trajectory_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ArmJointTrajectory>(GetArenaForAllocation());
    _impl_.trajectory_ = p;
  }
  return _impl_.trajectory_;
}
inline ::bosdyn::api::ArmJointTrajectory* ArmJointMoveCommand_Request::mutable_trajectory() {
  ::bosdyn::api::ArmJointTrajectory* _msg = _internal_mutable_trajectory();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmJointMoveCommand.Request.trajectory)
  return _msg;
}
inline void ArmJointMoveCommand_Request::set_allocated_trajectory(::bosdyn::api::ArmJointTrajectory* trajectory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.trajectory_;
  }
  if (trajectory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(trajectory);
    if (message_arena != submessage_arena) {
      trajectory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trajectory, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.trajectory_ = trajectory;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmJointMoveCommand.Request.trajectory)
}

// -------------------------------------------------------------------

// ArmJointMoveCommand_Feedback

// .bosdyn.api.ArmJointMoveCommand.Feedback.Status status = 1;
inline void ArmJointMoveCommand_Feedback::clear_status() {
  _impl_.status_ = 0;
}
inline ::bosdyn::api::ArmJointMoveCommand_Feedback_Status ArmJointMoveCommand_Feedback::_internal_status() const {
  return static_cast< ::bosdyn::api::ArmJointMoveCommand_Feedback_Status >(_impl_.status_);
}
inline ::bosdyn::api::ArmJointMoveCommand_Feedback_Status ArmJointMoveCommand_Feedback::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmJointMoveCommand.Feedback.status)
  return _internal_status();
}
inline void ArmJointMoveCommand_Feedback::_internal_set_status(::bosdyn::api::ArmJointMoveCommand_Feedback_Status value) {
  
  _impl_.status_ = value;
}
inline void ArmJointMoveCommand_Feedback::set_status(::bosdyn::api::ArmJointMoveCommand_Feedback_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.ArmJointMoveCommand.Feedback.status)
}

// .bosdyn.api.ArmJointMoveCommand.Feedback.PlannerStatus planner_status = 2;
inline void ArmJointMoveCommand_Feedback::clear_planner_status() {
  _impl_.planner_status_ = 0;
}
inline ::bosdyn::api::ArmJointMoveCommand_Feedback_PlannerStatus ArmJointMoveCommand_Feedback::_internal_planner_status() const {
  return static_cast< ::bosdyn::api::ArmJointMoveCommand_Feedback_PlannerStatus >(_impl_.planner_status_);
}
inline ::bosdyn::api::ArmJointMoveCommand_Feedback_PlannerStatus ArmJointMoveCommand_Feedback::planner_status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmJointMoveCommand.Feedback.planner_status)
  return _internal_planner_status();
}
inline void ArmJointMoveCommand_Feedback::_internal_set_planner_status(::bosdyn::api::ArmJointMoveCommand_Feedback_PlannerStatus value) {
  
  _impl_.planner_status_ = value;
}
inline void ArmJointMoveCommand_Feedback::set_planner_status(::bosdyn::api::ArmJointMoveCommand_Feedback_PlannerStatus value) {
  _internal_set_planner_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.ArmJointMoveCommand.Feedback.planner_status)
}

// repeated .bosdyn.api.ArmJointTrajectoryPoint planned_points = 3;
inline int ArmJointMoveCommand_Feedback::_internal_planned_points_size() const {
  return _impl_.planned_points_.size();
}
inline int ArmJointMoveCommand_Feedback::planned_points_size() const {
  return _internal_planned_points_size();
}
inline void ArmJointMoveCommand_Feedback::clear_planned_points() {
  _impl_.planned_points_.Clear();
}
inline ::bosdyn::api::ArmJointTrajectoryPoint* ArmJointMoveCommand_Feedback::mutable_planned_points(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmJointMoveCommand.Feedback.planned_points)
  return _impl_.planned_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::ArmJointTrajectoryPoint >*
ArmJointMoveCommand_Feedback::mutable_planned_points() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.ArmJointMoveCommand.Feedback.planned_points)
  return &_impl_.planned_points_;
}
inline const ::bosdyn::api::ArmJointTrajectoryPoint& ArmJointMoveCommand_Feedback::_internal_planned_points(int index) const {
  return _impl_.planned_points_.Get(index);
}
inline const ::bosdyn::api::ArmJointTrajectoryPoint& ArmJointMoveCommand_Feedback::planned_points(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmJointMoveCommand.Feedback.planned_points)
  return _internal_planned_points(index);
}
inline ::bosdyn::api::ArmJointTrajectoryPoint* ArmJointMoveCommand_Feedback::_internal_add_planned_points() {
  return _impl_.planned_points_.Add();
}
inline ::bosdyn::api::ArmJointTrajectoryPoint* ArmJointMoveCommand_Feedback::add_planned_points() {
  ::bosdyn::api::ArmJointTrajectoryPoint* _add = _internal_add_planned_points();
  // @@protoc_insertion_point(field_add:bosdyn.api.ArmJointMoveCommand.Feedback.planned_points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::ArmJointTrajectoryPoint >&
ArmJointMoveCommand_Feedback::planned_points() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.ArmJointMoveCommand.Feedback.planned_points)
  return _impl_.planned_points_;
}

// .google.protobuf.Duration time_to_goal = 4;
inline bool ArmJointMoveCommand_Feedback::_internal_has_time_to_goal() const {
  return this != internal_default_instance() && _impl_.time_to_goal_ != nullptr;
}
inline bool ArmJointMoveCommand_Feedback::has_time_to_goal() const {
  return _internal_has_time_to_goal();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ArmJointMoveCommand_Feedback::_internal_time_to_goal() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.time_to_goal_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ArmJointMoveCommand_Feedback::time_to_goal() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmJointMoveCommand.Feedback.time_to_goal)
  return _internal_time_to_goal();
}
inline void ArmJointMoveCommand_Feedback::unsafe_arena_set_allocated_time_to_goal(
    ::PROTOBUF_NAMESPACE_ID::Duration* time_to_goal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_to_goal_);
  }
  _impl_.time_to_goal_ = time_to_goal;
  if (time_to_goal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmJointMoveCommand.Feedback.time_to_goal)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ArmJointMoveCommand_Feedback::release_time_to_goal() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.time_to_goal_;
  _impl_.time_to_goal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ArmJointMoveCommand_Feedback::unsafe_arena_release_time_to_goal() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmJointMoveCommand.Feedback.time_to_goal)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.time_to_goal_;
  _impl_.time_to_goal_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ArmJointMoveCommand_Feedback::_internal_mutable_time_to_goal() {
  
  if (_impl_.time_to_goal_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.time_to_goal_ = p;
  }
  return _impl_.time_to_goal_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ArmJointMoveCommand_Feedback::mutable_time_to_goal() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_time_to_goal();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmJointMoveCommand.Feedback.time_to_goal)
  return _msg;
}
inline void ArmJointMoveCommand_Feedback::set_allocated_time_to_goal(::PROTOBUF_NAMESPACE_ID::Duration* time_to_goal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_to_goal_);
  }
  if (time_to_goal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_to_goal));
    if (message_arena != submessage_arena) {
      time_to_goal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_to_goal, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_to_goal_ = time_to_goal;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmJointMoveCommand.Feedback.time_to_goal)
}

// -------------------------------------------------------------------

// ArmJointMoveCommand

// -------------------------------------------------------------------

// ArmJointPosition

// .google.protobuf.DoubleValue sh0 = 1;
inline bool ArmJointPosition::_internal_has_sh0() const {
  return this != internal_default_instance() && _impl_.sh0_ != nullptr;
}
inline bool ArmJointPosition::has_sh0() const {
  return _internal_has_sh0();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmJointPosition::_internal_sh0() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.sh0_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmJointPosition::sh0() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmJointPosition.sh0)
  return _internal_sh0();
}
inline void ArmJointPosition::unsafe_arena_set_allocated_sh0(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* sh0) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sh0_);
  }
  _impl_.sh0_ = sh0;
  if (sh0) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmJointPosition.sh0)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointPosition::release_sh0() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.sh0_;
  _impl_.sh0_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointPosition::unsafe_arena_release_sh0() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmJointPosition.sh0)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.sh0_;
  _impl_.sh0_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointPosition::_internal_mutable_sh0() {
  
  if (_impl_.sh0_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.sh0_ = p;
  }
  return _impl_.sh0_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointPosition::mutable_sh0() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_sh0();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmJointPosition.sh0)
  return _msg;
}
inline void ArmJointPosition::set_allocated_sh0(::PROTOBUF_NAMESPACE_ID::DoubleValue* sh0) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sh0_);
  }
  if (sh0) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sh0));
    if (message_arena != submessage_arena) {
      sh0 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sh0, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sh0_ = sh0;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmJointPosition.sh0)
}

// .google.protobuf.DoubleValue sh1 = 2;
inline bool ArmJointPosition::_internal_has_sh1() const {
  return this != internal_default_instance() && _impl_.sh1_ != nullptr;
}
inline bool ArmJointPosition::has_sh1() const {
  return _internal_has_sh1();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmJointPosition::_internal_sh1() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.sh1_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmJointPosition::sh1() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmJointPosition.sh1)
  return _internal_sh1();
}
inline void ArmJointPosition::unsafe_arena_set_allocated_sh1(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* sh1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sh1_);
  }
  _impl_.sh1_ = sh1;
  if (sh1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmJointPosition.sh1)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointPosition::release_sh1() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.sh1_;
  _impl_.sh1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointPosition::unsafe_arena_release_sh1() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmJointPosition.sh1)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.sh1_;
  _impl_.sh1_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointPosition::_internal_mutable_sh1() {
  
  if (_impl_.sh1_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.sh1_ = p;
  }
  return _impl_.sh1_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointPosition::mutable_sh1() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_sh1();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmJointPosition.sh1)
  return _msg;
}
inline void ArmJointPosition::set_allocated_sh1(::PROTOBUF_NAMESPACE_ID::DoubleValue* sh1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sh1_);
  }
  if (sh1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sh1));
    if (message_arena != submessage_arena) {
      sh1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sh1, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sh1_ = sh1;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmJointPosition.sh1)
}

// .google.protobuf.DoubleValue el0 = 3;
inline bool ArmJointPosition::_internal_has_el0() const {
  return this != internal_default_instance() && _impl_.el0_ != nullptr;
}
inline bool ArmJointPosition::has_el0() const {
  return _internal_has_el0();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmJointPosition::_internal_el0() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.el0_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmJointPosition::el0() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmJointPosition.el0)
  return _internal_el0();
}
inline void ArmJointPosition::unsafe_arena_set_allocated_el0(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* el0) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.el0_);
  }
  _impl_.el0_ = el0;
  if (el0) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmJointPosition.el0)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointPosition::release_el0() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.el0_;
  _impl_.el0_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointPosition::unsafe_arena_release_el0() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmJointPosition.el0)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.el0_;
  _impl_.el0_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointPosition::_internal_mutable_el0() {
  
  if (_impl_.el0_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.el0_ = p;
  }
  return _impl_.el0_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointPosition::mutable_el0() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_el0();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmJointPosition.el0)
  return _msg;
}
inline void ArmJointPosition::set_allocated_el0(::PROTOBUF_NAMESPACE_ID::DoubleValue* el0) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.el0_);
  }
  if (el0) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(el0));
    if (message_arena != submessage_arena) {
      el0 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, el0, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.el0_ = el0;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmJointPosition.el0)
}

// .google.protobuf.DoubleValue el1 = 4;
inline bool ArmJointPosition::_internal_has_el1() const {
  return this != internal_default_instance() && _impl_.el1_ != nullptr;
}
inline bool ArmJointPosition::has_el1() const {
  return _internal_has_el1();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmJointPosition::_internal_el1() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.el1_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmJointPosition::el1() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmJointPosition.el1)
  return _internal_el1();
}
inline void ArmJointPosition::unsafe_arena_set_allocated_el1(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* el1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.el1_);
  }
  _impl_.el1_ = el1;
  if (el1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmJointPosition.el1)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointPosition::release_el1() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.el1_;
  _impl_.el1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointPosition::unsafe_arena_release_el1() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmJointPosition.el1)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.el1_;
  _impl_.el1_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointPosition::_internal_mutable_el1() {
  
  if (_impl_.el1_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.el1_ = p;
  }
  return _impl_.el1_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointPosition::mutable_el1() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_el1();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmJointPosition.el1)
  return _msg;
}
inline void ArmJointPosition::set_allocated_el1(::PROTOBUF_NAMESPACE_ID::DoubleValue* el1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.el1_);
  }
  if (el1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(el1));
    if (message_arena != submessage_arena) {
      el1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, el1, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.el1_ = el1;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmJointPosition.el1)
}

// .google.protobuf.DoubleValue wr0 = 5;
inline bool ArmJointPosition::_internal_has_wr0() const {
  return this != internal_default_instance() && _impl_.wr0_ != nullptr;
}
inline bool ArmJointPosition::has_wr0() const {
  return _internal_has_wr0();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmJointPosition::_internal_wr0() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.wr0_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmJointPosition::wr0() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmJointPosition.wr0)
  return _internal_wr0();
}
inline void ArmJointPosition::unsafe_arena_set_allocated_wr0(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* wr0) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wr0_);
  }
  _impl_.wr0_ = wr0;
  if (wr0) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmJointPosition.wr0)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointPosition::release_wr0() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.wr0_;
  _impl_.wr0_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointPosition::unsafe_arena_release_wr0() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmJointPosition.wr0)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.wr0_;
  _impl_.wr0_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointPosition::_internal_mutable_wr0() {
  
  if (_impl_.wr0_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.wr0_ = p;
  }
  return _impl_.wr0_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointPosition::mutable_wr0() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_wr0();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmJointPosition.wr0)
  return _msg;
}
inline void ArmJointPosition::set_allocated_wr0(::PROTOBUF_NAMESPACE_ID::DoubleValue* wr0) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wr0_);
  }
  if (wr0) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wr0));
    if (message_arena != submessage_arena) {
      wr0 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wr0, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.wr0_ = wr0;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmJointPosition.wr0)
}

// .google.protobuf.DoubleValue wr1 = 6;
inline bool ArmJointPosition::_internal_has_wr1() const {
  return this != internal_default_instance() && _impl_.wr1_ != nullptr;
}
inline bool ArmJointPosition::has_wr1() const {
  return _internal_has_wr1();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmJointPosition::_internal_wr1() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.wr1_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmJointPosition::wr1() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmJointPosition.wr1)
  return _internal_wr1();
}
inline void ArmJointPosition::unsafe_arena_set_allocated_wr1(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* wr1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wr1_);
  }
  _impl_.wr1_ = wr1;
  if (wr1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmJointPosition.wr1)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointPosition::release_wr1() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.wr1_;
  _impl_.wr1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointPosition::unsafe_arena_release_wr1() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmJointPosition.wr1)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.wr1_;
  _impl_.wr1_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointPosition::_internal_mutable_wr1() {
  
  if (_impl_.wr1_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.wr1_ = p;
  }
  return _impl_.wr1_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointPosition::mutable_wr1() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_wr1();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmJointPosition.wr1)
  return _msg;
}
inline void ArmJointPosition::set_allocated_wr1(::PROTOBUF_NAMESPACE_ID::DoubleValue* wr1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wr1_);
  }
  if (wr1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wr1));
    if (message_arena != submessage_arena) {
      wr1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wr1, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.wr1_ = wr1;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmJointPosition.wr1)
}

// -------------------------------------------------------------------

// ArmJointVelocity

// .google.protobuf.DoubleValue sh0 = 1;
inline bool ArmJointVelocity::_internal_has_sh0() const {
  return this != internal_default_instance() && _impl_.sh0_ != nullptr;
}
inline bool ArmJointVelocity::has_sh0() const {
  return _internal_has_sh0();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmJointVelocity::_internal_sh0() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.sh0_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmJointVelocity::sh0() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmJointVelocity.sh0)
  return _internal_sh0();
}
inline void ArmJointVelocity::unsafe_arena_set_allocated_sh0(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* sh0) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sh0_);
  }
  _impl_.sh0_ = sh0;
  if (sh0) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmJointVelocity.sh0)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointVelocity::release_sh0() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.sh0_;
  _impl_.sh0_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointVelocity::unsafe_arena_release_sh0() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmJointVelocity.sh0)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.sh0_;
  _impl_.sh0_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointVelocity::_internal_mutable_sh0() {
  
  if (_impl_.sh0_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.sh0_ = p;
  }
  return _impl_.sh0_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointVelocity::mutable_sh0() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_sh0();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmJointVelocity.sh0)
  return _msg;
}
inline void ArmJointVelocity::set_allocated_sh0(::PROTOBUF_NAMESPACE_ID::DoubleValue* sh0) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sh0_);
  }
  if (sh0) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sh0));
    if (message_arena != submessage_arena) {
      sh0 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sh0, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sh0_ = sh0;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmJointVelocity.sh0)
}

// .google.protobuf.DoubleValue sh1 = 2;
inline bool ArmJointVelocity::_internal_has_sh1() const {
  return this != internal_default_instance() && _impl_.sh1_ != nullptr;
}
inline bool ArmJointVelocity::has_sh1() const {
  return _internal_has_sh1();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmJointVelocity::_internal_sh1() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.sh1_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmJointVelocity::sh1() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmJointVelocity.sh1)
  return _internal_sh1();
}
inline void ArmJointVelocity::unsafe_arena_set_allocated_sh1(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* sh1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sh1_);
  }
  _impl_.sh1_ = sh1;
  if (sh1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmJointVelocity.sh1)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointVelocity::release_sh1() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.sh1_;
  _impl_.sh1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointVelocity::unsafe_arena_release_sh1() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmJointVelocity.sh1)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.sh1_;
  _impl_.sh1_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointVelocity::_internal_mutable_sh1() {
  
  if (_impl_.sh1_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.sh1_ = p;
  }
  return _impl_.sh1_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointVelocity::mutable_sh1() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_sh1();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmJointVelocity.sh1)
  return _msg;
}
inline void ArmJointVelocity::set_allocated_sh1(::PROTOBUF_NAMESPACE_ID::DoubleValue* sh1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sh1_);
  }
  if (sh1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sh1));
    if (message_arena != submessage_arena) {
      sh1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sh1, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sh1_ = sh1;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmJointVelocity.sh1)
}

// .google.protobuf.DoubleValue el0 = 3;
inline bool ArmJointVelocity::_internal_has_el0() const {
  return this != internal_default_instance() && _impl_.el0_ != nullptr;
}
inline bool ArmJointVelocity::has_el0() const {
  return _internal_has_el0();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmJointVelocity::_internal_el0() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.el0_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmJointVelocity::el0() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmJointVelocity.el0)
  return _internal_el0();
}
inline void ArmJointVelocity::unsafe_arena_set_allocated_el0(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* el0) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.el0_);
  }
  _impl_.el0_ = el0;
  if (el0) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmJointVelocity.el0)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointVelocity::release_el0() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.el0_;
  _impl_.el0_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointVelocity::unsafe_arena_release_el0() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmJointVelocity.el0)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.el0_;
  _impl_.el0_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointVelocity::_internal_mutable_el0() {
  
  if (_impl_.el0_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.el0_ = p;
  }
  return _impl_.el0_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointVelocity::mutable_el0() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_el0();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmJointVelocity.el0)
  return _msg;
}
inline void ArmJointVelocity::set_allocated_el0(::PROTOBUF_NAMESPACE_ID::DoubleValue* el0) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.el0_);
  }
  if (el0) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(el0));
    if (message_arena != submessage_arena) {
      el0 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, el0, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.el0_ = el0;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmJointVelocity.el0)
}

// .google.protobuf.DoubleValue el1 = 4;
inline bool ArmJointVelocity::_internal_has_el1() const {
  return this != internal_default_instance() && _impl_.el1_ != nullptr;
}
inline bool ArmJointVelocity::has_el1() const {
  return _internal_has_el1();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmJointVelocity::_internal_el1() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.el1_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmJointVelocity::el1() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmJointVelocity.el1)
  return _internal_el1();
}
inline void ArmJointVelocity::unsafe_arena_set_allocated_el1(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* el1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.el1_);
  }
  _impl_.el1_ = el1;
  if (el1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmJointVelocity.el1)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointVelocity::release_el1() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.el1_;
  _impl_.el1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointVelocity::unsafe_arena_release_el1() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmJointVelocity.el1)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.el1_;
  _impl_.el1_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointVelocity::_internal_mutable_el1() {
  
  if (_impl_.el1_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.el1_ = p;
  }
  return _impl_.el1_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointVelocity::mutable_el1() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_el1();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmJointVelocity.el1)
  return _msg;
}
inline void ArmJointVelocity::set_allocated_el1(::PROTOBUF_NAMESPACE_ID::DoubleValue* el1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.el1_);
  }
  if (el1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(el1));
    if (message_arena != submessage_arena) {
      el1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, el1, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.el1_ = el1;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmJointVelocity.el1)
}

// .google.protobuf.DoubleValue wr0 = 5;
inline bool ArmJointVelocity::_internal_has_wr0() const {
  return this != internal_default_instance() && _impl_.wr0_ != nullptr;
}
inline bool ArmJointVelocity::has_wr0() const {
  return _internal_has_wr0();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmJointVelocity::_internal_wr0() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.wr0_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmJointVelocity::wr0() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmJointVelocity.wr0)
  return _internal_wr0();
}
inline void ArmJointVelocity::unsafe_arena_set_allocated_wr0(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* wr0) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wr0_);
  }
  _impl_.wr0_ = wr0;
  if (wr0) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmJointVelocity.wr0)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointVelocity::release_wr0() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.wr0_;
  _impl_.wr0_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointVelocity::unsafe_arena_release_wr0() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmJointVelocity.wr0)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.wr0_;
  _impl_.wr0_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointVelocity::_internal_mutable_wr0() {
  
  if (_impl_.wr0_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.wr0_ = p;
  }
  return _impl_.wr0_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointVelocity::mutable_wr0() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_wr0();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmJointVelocity.wr0)
  return _msg;
}
inline void ArmJointVelocity::set_allocated_wr0(::PROTOBUF_NAMESPACE_ID::DoubleValue* wr0) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wr0_);
  }
  if (wr0) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wr0));
    if (message_arena != submessage_arena) {
      wr0 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wr0, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.wr0_ = wr0;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmJointVelocity.wr0)
}

// .google.protobuf.DoubleValue wr1 = 6;
inline bool ArmJointVelocity::_internal_has_wr1() const {
  return this != internal_default_instance() && _impl_.wr1_ != nullptr;
}
inline bool ArmJointVelocity::has_wr1() const {
  return _internal_has_wr1();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmJointVelocity::_internal_wr1() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.wr1_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmJointVelocity::wr1() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmJointVelocity.wr1)
  return _internal_wr1();
}
inline void ArmJointVelocity::unsafe_arena_set_allocated_wr1(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* wr1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wr1_);
  }
  _impl_.wr1_ = wr1;
  if (wr1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmJointVelocity.wr1)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointVelocity::release_wr1() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.wr1_;
  _impl_.wr1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointVelocity::unsafe_arena_release_wr1() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmJointVelocity.wr1)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.wr1_;
  _impl_.wr1_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointVelocity::_internal_mutable_wr1() {
  
  if (_impl_.wr1_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.wr1_ = p;
  }
  return _impl_.wr1_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointVelocity::mutable_wr1() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_wr1();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmJointVelocity.wr1)
  return _msg;
}
inline void ArmJointVelocity::set_allocated_wr1(::PROTOBUF_NAMESPACE_ID::DoubleValue* wr1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wr1_);
  }
  if (wr1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wr1));
    if (message_arena != submessage_arena) {
      wr1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wr1, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.wr1_ = wr1;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmJointVelocity.wr1)
}

// -------------------------------------------------------------------

// ArmJointTrajectoryPoint

// .bosdyn.api.ArmJointPosition position = 1;
inline bool ArmJointTrajectoryPoint::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool ArmJointTrajectoryPoint::has_position() const {
  return _internal_has_position();
}
inline void ArmJointTrajectoryPoint::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::bosdyn::api::ArmJointPosition& ArmJointTrajectoryPoint::_internal_position() const {
  const ::bosdyn::api::ArmJointPosition* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ArmJointPosition&>(
      ::bosdyn::api::_ArmJointPosition_default_instance_);
}
inline const ::bosdyn::api::ArmJointPosition& ArmJointTrajectoryPoint::position() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmJointTrajectoryPoint.position)
  return _internal_position();
}
inline void ArmJointTrajectoryPoint::unsafe_arena_set_allocated_position(
    ::bosdyn::api::ArmJointPosition* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmJointTrajectoryPoint.position)
}
inline ::bosdyn::api::ArmJointPosition* ArmJointTrajectoryPoint::release_position() {
  
  ::bosdyn::api::ArmJointPosition* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ArmJointPosition* ArmJointTrajectoryPoint::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmJointTrajectoryPoint.position)
  
  ::bosdyn::api::ArmJointPosition* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ArmJointPosition* ArmJointTrajectoryPoint::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ArmJointPosition>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::bosdyn::api::ArmJointPosition* ArmJointTrajectoryPoint::mutable_position() {
  ::bosdyn::api::ArmJointPosition* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmJointTrajectoryPoint.position)
  return _msg;
}
inline void ArmJointTrajectoryPoint::set_allocated_position(::bosdyn::api::ArmJointPosition* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmJointTrajectoryPoint.position)
}

// .bosdyn.api.ArmJointVelocity velocity = 2;
inline bool ArmJointTrajectoryPoint::_internal_has_velocity() const {
  return this != internal_default_instance() && _impl_.velocity_ != nullptr;
}
inline bool ArmJointTrajectoryPoint::has_velocity() const {
  return _internal_has_velocity();
}
inline void ArmJointTrajectoryPoint::clear_velocity() {
  if (GetArenaForAllocation() == nullptr && _impl_.velocity_ != nullptr) {
    delete _impl_.velocity_;
  }
  _impl_.velocity_ = nullptr;
}
inline const ::bosdyn::api::ArmJointVelocity& ArmJointTrajectoryPoint::_internal_velocity() const {
  const ::bosdyn::api::ArmJointVelocity* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ArmJointVelocity&>(
      ::bosdyn::api::_ArmJointVelocity_default_instance_);
}
inline const ::bosdyn::api::ArmJointVelocity& ArmJointTrajectoryPoint::velocity() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmJointTrajectoryPoint.velocity)
  return _internal_velocity();
}
inline void ArmJointTrajectoryPoint::unsafe_arena_set_allocated_velocity(
    ::bosdyn::api::ArmJointVelocity* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmJointTrajectoryPoint.velocity)
}
inline ::bosdyn::api::ArmJointVelocity* ArmJointTrajectoryPoint::release_velocity() {
  
  ::bosdyn::api::ArmJointVelocity* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ArmJointVelocity* ArmJointTrajectoryPoint::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmJointTrajectoryPoint.velocity)
  
  ::bosdyn::api::ArmJointVelocity* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ArmJointVelocity* ArmJointTrajectoryPoint::_internal_mutable_velocity() {
  
  if (_impl_.velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ArmJointVelocity>(GetArenaForAllocation());
    _impl_.velocity_ = p;
  }
  return _impl_.velocity_;
}
inline ::bosdyn::api::ArmJointVelocity* ArmJointTrajectoryPoint::mutable_velocity() {
  ::bosdyn::api::ArmJointVelocity* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmJointTrajectoryPoint.velocity)
  return _msg;
}
inline void ArmJointTrajectoryPoint::set_allocated_velocity(::bosdyn::api::ArmJointVelocity* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmJointTrajectoryPoint.velocity)
}

// .google.protobuf.Duration time_since_reference = 3;
inline bool ArmJointTrajectoryPoint::_internal_has_time_since_reference() const {
  return this != internal_default_instance() && _impl_.time_since_reference_ != nullptr;
}
inline bool ArmJointTrajectoryPoint::has_time_since_reference() const {
  return _internal_has_time_since_reference();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ArmJointTrajectoryPoint::_internal_time_since_reference() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.time_since_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ArmJointTrajectoryPoint::time_since_reference() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmJointTrajectoryPoint.time_since_reference)
  return _internal_time_since_reference();
}
inline void ArmJointTrajectoryPoint::unsafe_arena_set_allocated_time_since_reference(
    ::PROTOBUF_NAMESPACE_ID::Duration* time_since_reference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_since_reference_);
  }
  _impl_.time_since_reference_ = time_since_reference;
  if (time_since_reference) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmJointTrajectoryPoint.time_since_reference)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ArmJointTrajectoryPoint::release_time_since_reference() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.time_since_reference_;
  _impl_.time_since_reference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ArmJointTrajectoryPoint::unsafe_arena_release_time_since_reference() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmJointTrajectoryPoint.time_since_reference)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.time_since_reference_;
  _impl_.time_since_reference_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ArmJointTrajectoryPoint::_internal_mutable_time_since_reference() {
  
  if (_impl_.time_since_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.time_since_reference_ = p;
  }
  return _impl_.time_since_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ArmJointTrajectoryPoint::mutable_time_since_reference() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_time_since_reference();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmJointTrajectoryPoint.time_since_reference)
  return _msg;
}
inline void ArmJointTrajectoryPoint::set_allocated_time_since_reference(::PROTOBUF_NAMESPACE_ID::Duration* time_since_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_since_reference_);
  }
  if (time_since_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_since_reference));
    if (message_arena != submessage_arena) {
      time_since_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_since_reference, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_since_reference_ = time_since_reference;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmJointTrajectoryPoint.time_since_reference)
}

// -------------------------------------------------------------------

// ArmJointTrajectory

// repeated .bosdyn.api.ArmJointTrajectoryPoint points = 1;
inline int ArmJointTrajectory::_internal_points_size() const {
  return _impl_.points_.size();
}
inline int ArmJointTrajectory::points_size() const {
  return _internal_points_size();
}
inline void ArmJointTrajectory::clear_points() {
  _impl_.points_.Clear();
}
inline ::bosdyn::api::ArmJointTrajectoryPoint* ArmJointTrajectory::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmJointTrajectory.points)
  return _impl_.points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::ArmJointTrajectoryPoint >*
ArmJointTrajectory::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.ArmJointTrajectory.points)
  return &_impl_.points_;
}
inline const ::bosdyn::api::ArmJointTrajectoryPoint& ArmJointTrajectory::_internal_points(int index) const {
  return _impl_.points_.Get(index);
}
inline const ::bosdyn::api::ArmJointTrajectoryPoint& ArmJointTrajectory::points(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmJointTrajectory.points)
  return _internal_points(index);
}
inline ::bosdyn::api::ArmJointTrajectoryPoint* ArmJointTrajectory::_internal_add_points() {
  return _impl_.points_.Add();
}
inline ::bosdyn::api::ArmJointTrajectoryPoint* ArmJointTrajectory::add_points() {
  ::bosdyn::api::ArmJointTrajectoryPoint* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:bosdyn.api.ArmJointTrajectory.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::ArmJointTrajectoryPoint >&
ArmJointTrajectory::points() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.ArmJointTrajectory.points)
  return _impl_.points_;
}

// .google.protobuf.Timestamp reference_time = 2;
inline bool ArmJointTrajectory::_internal_has_reference_time() const {
  return this != internal_default_instance() && _impl_.reference_time_ != nullptr;
}
inline bool ArmJointTrajectory::has_reference_time() const {
  return _internal_has_reference_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ArmJointTrajectory::_internal_reference_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.reference_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ArmJointTrajectory::reference_time() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmJointTrajectory.reference_time)
  return _internal_reference_time();
}
inline void ArmJointTrajectory::unsafe_arena_set_allocated_reference_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* reference_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reference_time_);
  }
  _impl_.reference_time_ = reference_time;
  if (reference_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmJointTrajectory.reference_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ArmJointTrajectory::release_reference_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.reference_time_;
  _impl_.reference_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ArmJointTrajectory::unsafe_arena_release_reference_time() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmJointTrajectory.reference_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.reference_time_;
  _impl_.reference_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ArmJointTrajectory::_internal_mutable_reference_time() {
  
  if (_impl_.reference_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.reference_time_ = p;
  }
  return _impl_.reference_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ArmJointTrajectory::mutable_reference_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_reference_time();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmJointTrajectory.reference_time)
  return _msg;
}
inline void ArmJointTrajectory::set_allocated_reference_time(::PROTOBUF_NAMESPACE_ID::Timestamp* reference_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reference_time_);
  }
  if (reference_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_time));
    if (message_arena != submessage_arena) {
      reference_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reference_time_ = reference_time;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmJointTrajectory.reference_time)
}

// .google.protobuf.DoubleValue maximum_velocity = 3;
inline bool ArmJointTrajectory::_internal_has_maximum_velocity() const {
  return this != internal_default_instance() && _impl_.maximum_velocity_ != nullptr;
}
inline bool ArmJointTrajectory::has_maximum_velocity() const {
  return _internal_has_maximum_velocity();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmJointTrajectory::_internal_maximum_velocity() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.maximum_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmJointTrajectory::maximum_velocity() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmJointTrajectory.maximum_velocity)
  return _internal_maximum_velocity();
}
inline void ArmJointTrajectory::unsafe_arena_set_allocated_maximum_velocity(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maximum_velocity_);
  }
  _impl_.maximum_velocity_ = maximum_velocity;
  if (maximum_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmJointTrajectory.maximum_velocity)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointTrajectory::release_maximum_velocity() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.maximum_velocity_;
  _impl_.maximum_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointTrajectory::unsafe_arena_release_maximum_velocity() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmJointTrajectory.maximum_velocity)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.maximum_velocity_;
  _impl_.maximum_velocity_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointTrajectory::_internal_mutable_maximum_velocity() {
  
  if (_impl_.maximum_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.maximum_velocity_ = p;
  }
  return _impl_.maximum_velocity_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointTrajectory::mutable_maximum_velocity() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_maximum_velocity();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmJointTrajectory.maximum_velocity)
  return _msg;
}
inline void ArmJointTrajectory::set_allocated_maximum_velocity(::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maximum_velocity_);
  }
  if (maximum_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maximum_velocity));
    if (message_arena != submessage_arena) {
      maximum_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maximum_velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.maximum_velocity_ = maximum_velocity;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmJointTrajectory.maximum_velocity)
}

// .google.protobuf.DoubleValue maximum_acceleration = 4;
inline bool ArmJointTrajectory::_internal_has_maximum_acceleration() const {
  return this != internal_default_instance() && _impl_.maximum_acceleration_ != nullptr;
}
inline bool ArmJointTrajectory::has_maximum_acceleration() const {
  return _internal_has_maximum_acceleration();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmJointTrajectory::_internal_maximum_acceleration() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.maximum_acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmJointTrajectory::maximum_acceleration() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmJointTrajectory.maximum_acceleration)
  return _internal_maximum_acceleration();
}
inline void ArmJointTrajectory::unsafe_arena_set_allocated_maximum_acceleration(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_acceleration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maximum_acceleration_);
  }
  _impl_.maximum_acceleration_ = maximum_acceleration;
  if (maximum_acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmJointTrajectory.maximum_acceleration)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointTrajectory::release_maximum_acceleration() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.maximum_acceleration_;
  _impl_.maximum_acceleration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointTrajectory::unsafe_arena_release_maximum_acceleration() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmJointTrajectory.maximum_acceleration)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.maximum_acceleration_;
  _impl_.maximum_acceleration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointTrajectory::_internal_mutable_maximum_acceleration() {
  
  if (_impl_.maximum_acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.maximum_acceleration_ = p;
  }
  return _impl_.maximum_acceleration_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmJointTrajectory::mutable_maximum_acceleration() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_maximum_acceleration();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmJointTrajectory.maximum_acceleration)
  return _msg;
}
inline void ArmJointTrajectory::set_allocated_maximum_acceleration(::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maximum_acceleration_);
  }
  if (maximum_acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maximum_acceleration));
    if (message_arena != submessage_arena) {
      maximum_acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maximum_acceleration, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.maximum_acceleration_ = maximum_acceleration;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmJointTrajectory.maximum_acceleration)
}

// -------------------------------------------------------------------

// GazeCommand_Request

// .bosdyn.api.Vec3Trajectory target_trajectory_in_frame1 = 1;
inline bool GazeCommand_Request::_internal_has_target_trajectory_in_frame1() const {
  return this != internal_default_instance() && _impl_.target_trajectory_in_frame1_ != nullptr;
}
inline bool GazeCommand_Request::has_target_trajectory_in_frame1() const {
  return _internal_has_target_trajectory_in_frame1();
}
inline const ::bosdyn::api::Vec3Trajectory& GazeCommand_Request::_internal_target_trajectory_in_frame1() const {
  const ::bosdyn::api::Vec3Trajectory* p = _impl_.target_trajectory_in_frame1_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec3Trajectory&>(
      ::bosdyn::api::_Vec3Trajectory_default_instance_);
}
inline const ::bosdyn::api::Vec3Trajectory& GazeCommand_Request::target_trajectory_in_frame1() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GazeCommand.Request.target_trajectory_in_frame1)
  return _internal_target_trajectory_in_frame1();
}
inline void GazeCommand_Request::unsafe_arena_set_allocated_target_trajectory_in_frame1(
    ::bosdyn::api::Vec3Trajectory* target_trajectory_in_frame1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_trajectory_in_frame1_);
  }
  _impl_.target_trajectory_in_frame1_ = target_trajectory_in_frame1;
  if (target_trajectory_in_frame1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GazeCommand.Request.target_trajectory_in_frame1)
}
inline ::bosdyn::api::Vec3Trajectory* GazeCommand_Request::release_target_trajectory_in_frame1() {
  
  ::bosdyn::api::Vec3Trajectory* temp = _impl_.target_trajectory_in_frame1_;
  _impl_.target_trajectory_in_frame1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec3Trajectory* GazeCommand_Request::unsafe_arena_release_target_trajectory_in_frame1() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GazeCommand.Request.target_trajectory_in_frame1)
  
  ::bosdyn::api::Vec3Trajectory* temp = _impl_.target_trajectory_in_frame1_;
  _impl_.target_trajectory_in_frame1_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec3Trajectory* GazeCommand_Request::_internal_mutable_target_trajectory_in_frame1() {
  
  if (_impl_.target_trajectory_in_frame1_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec3Trajectory>(GetArenaForAllocation());
    _impl_.target_trajectory_in_frame1_ = p;
  }
  return _impl_.target_trajectory_in_frame1_;
}
inline ::bosdyn::api::Vec3Trajectory* GazeCommand_Request::mutable_target_trajectory_in_frame1() {
  ::bosdyn::api::Vec3Trajectory* _msg = _internal_mutable_target_trajectory_in_frame1();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GazeCommand.Request.target_trajectory_in_frame1)
  return _msg;
}
inline void GazeCommand_Request::set_allocated_target_trajectory_in_frame1(::bosdyn::api::Vec3Trajectory* target_trajectory_in_frame1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_trajectory_in_frame1_);
  }
  if (target_trajectory_in_frame1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_trajectory_in_frame1));
    if (message_arena != submessage_arena) {
      target_trajectory_in_frame1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_trajectory_in_frame1, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.target_trajectory_in_frame1_ = target_trajectory_in_frame1;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GazeCommand.Request.target_trajectory_in_frame1)
}

// string frame1_name = 2;
inline void GazeCommand_Request::clear_frame1_name() {
  _impl_.frame1_name_.ClearToEmpty();
}
inline const std::string& GazeCommand_Request::frame1_name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GazeCommand.Request.frame1_name)
  return _internal_frame1_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GazeCommand_Request::set_frame1_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.frame1_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.GazeCommand.Request.frame1_name)
}
inline std::string* GazeCommand_Request::mutable_frame1_name() {
  std::string* _s = _internal_mutable_frame1_name();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GazeCommand.Request.frame1_name)
  return _s;
}
inline const std::string& GazeCommand_Request::_internal_frame1_name() const {
  return _impl_.frame1_name_.Get();
}
inline void GazeCommand_Request::_internal_set_frame1_name(const std::string& value) {
  
  _impl_.frame1_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GazeCommand_Request::_internal_mutable_frame1_name() {
  
  return _impl_.frame1_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GazeCommand_Request::release_frame1_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GazeCommand.Request.frame1_name)
  return _impl_.frame1_name_.Release();
}
inline void GazeCommand_Request::set_allocated_frame1_name(std::string* frame1_name) {
  if (frame1_name != nullptr) {
    
  } else {
    
  }
  _impl_.frame1_name_.SetAllocated(frame1_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.frame1_name_.IsDefault()) {
    _impl_.frame1_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GazeCommand.Request.frame1_name)
}

// .bosdyn.api.SE3Trajectory tool_trajectory_in_frame2 = 10;
inline bool GazeCommand_Request::_internal_has_tool_trajectory_in_frame2() const {
  return this != internal_default_instance() && _impl_.tool_trajectory_in_frame2_ != nullptr;
}
inline bool GazeCommand_Request::has_tool_trajectory_in_frame2() const {
  return _internal_has_tool_trajectory_in_frame2();
}
inline const ::bosdyn::api::SE3Trajectory& GazeCommand_Request::_internal_tool_trajectory_in_frame2() const {
  const ::bosdyn::api::SE3Trajectory* p = _impl_.tool_trajectory_in_frame2_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::SE3Trajectory&>(
      ::bosdyn::api::_SE3Trajectory_default_instance_);
}
inline const ::bosdyn::api::SE3Trajectory& GazeCommand_Request::tool_trajectory_in_frame2() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GazeCommand.Request.tool_trajectory_in_frame2)
  return _internal_tool_trajectory_in_frame2();
}
inline void GazeCommand_Request::unsafe_arena_set_allocated_tool_trajectory_in_frame2(
    ::bosdyn::api::SE3Trajectory* tool_trajectory_in_frame2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tool_trajectory_in_frame2_);
  }
  _impl_.tool_trajectory_in_frame2_ = tool_trajectory_in_frame2;
  if (tool_trajectory_in_frame2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GazeCommand.Request.tool_trajectory_in_frame2)
}
inline ::bosdyn::api::SE3Trajectory* GazeCommand_Request::release_tool_trajectory_in_frame2() {
  
  ::bosdyn::api::SE3Trajectory* temp = _impl_.tool_trajectory_in_frame2_;
  _impl_.tool_trajectory_in_frame2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::SE3Trajectory* GazeCommand_Request::unsafe_arena_release_tool_trajectory_in_frame2() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GazeCommand.Request.tool_trajectory_in_frame2)
  
  ::bosdyn::api::SE3Trajectory* temp = _impl_.tool_trajectory_in_frame2_;
  _impl_.tool_trajectory_in_frame2_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Trajectory* GazeCommand_Request::_internal_mutable_tool_trajectory_in_frame2() {
  
  if (_impl_.tool_trajectory_in_frame2_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Trajectory>(GetArenaForAllocation());
    _impl_.tool_trajectory_in_frame2_ = p;
  }
  return _impl_.tool_trajectory_in_frame2_;
}
inline ::bosdyn::api::SE3Trajectory* GazeCommand_Request::mutable_tool_trajectory_in_frame2() {
  ::bosdyn::api::SE3Trajectory* _msg = _internal_mutable_tool_trajectory_in_frame2();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GazeCommand.Request.tool_trajectory_in_frame2)
  return _msg;
}
inline void GazeCommand_Request::set_allocated_tool_trajectory_in_frame2(::bosdyn::api::SE3Trajectory* tool_trajectory_in_frame2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tool_trajectory_in_frame2_);
  }
  if (tool_trajectory_in_frame2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tool_trajectory_in_frame2));
    if (message_arena != submessage_arena) {
      tool_trajectory_in_frame2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tool_trajectory_in_frame2, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tool_trajectory_in_frame2_ = tool_trajectory_in_frame2;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GazeCommand.Request.tool_trajectory_in_frame2)
}

// string frame2_name = 11;
inline void GazeCommand_Request::clear_frame2_name() {
  _impl_.frame2_name_.ClearToEmpty();
}
inline const std::string& GazeCommand_Request::frame2_name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GazeCommand.Request.frame2_name)
  return _internal_frame2_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GazeCommand_Request::set_frame2_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.frame2_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.GazeCommand.Request.frame2_name)
}
inline std::string* GazeCommand_Request::mutable_frame2_name() {
  std::string* _s = _internal_mutable_frame2_name();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GazeCommand.Request.frame2_name)
  return _s;
}
inline const std::string& GazeCommand_Request::_internal_frame2_name() const {
  return _impl_.frame2_name_.Get();
}
inline void GazeCommand_Request::_internal_set_frame2_name(const std::string& value) {
  
  _impl_.frame2_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GazeCommand_Request::_internal_mutable_frame2_name() {
  
  return _impl_.frame2_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GazeCommand_Request::release_frame2_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GazeCommand.Request.frame2_name)
  return _impl_.frame2_name_.Release();
}
inline void GazeCommand_Request::set_allocated_frame2_name(std::string* frame2_name) {
  if (frame2_name != nullptr) {
    
  } else {
    
  }
  _impl_.frame2_name_.SetAllocated(frame2_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.frame2_name_.IsDefault()) {
    _impl_.frame2_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GazeCommand.Request.frame2_name)
}

// .bosdyn.api.SE3Pose wrist_tform_tool = 9;
inline bool GazeCommand_Request::_internal_has_wrist_tform_tool() const {
  return this != internal_default_instance() && _impl_.wrist_tform_tool_ != nullptr;
}
inline bool GazeCommand_Request::has_wrist_tform_tool() const {
  return _internal_has_wrist_tform_tool();
}
inline const ::bosdyn::api::SE3Pose& GazeCommand_Request::_internal_wrist_tform_tool() const {
  const ::bosdyn::api::SE3Pose* p = _impl_.wrist_tform_tool_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::SE3Pose&>(
      ::bosdyn::api::_SE3Pose_default_instance_);
}
inline const ::bosdyn::api::SE3Pose& GazeCommand_Request::wrist_tform_tool() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GazeCommand.Request.wrist_tform_tool)
  return _internal_wrist_tform_tool();
}
inline void GazeCommand_Request::unsafe_arena_set_allocated_wrist_tform_tool(
    ::bosdyn::api::SE3Pose* wrist_tform_tool) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wrist_tform_tool_);
  }
  _impl_.wrist_tform_tool_ = wrist_tform_tool;
  if (wrist_tform_tool) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GazeCommand.Request.wrist_tform_tool)
}
inline ::bosdyn::api::SE3Pose* GazeCommand_Request::release_wrist_tform_tool() {
  
  ::bosdyn::api::SE3Pose* temp = _impl_.wrist_tform_tool_;
  _impl_.wrist_tform_tool_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::SE3Pose* GazeCommand_Request::unsafe_arena_release_wrist_tform_tool() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GazeCommand.Request.wrist_tform_tool)
  
  ::bosdyn::api::SE3Pose* temp = _impl_.wrist_tform_tool_;
  _impl_.wrist_tform_tool_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Pose* GazeCommand_Request::_internal_mutable_wrist_tform_tool() {
  
  if (_impl_.wrist_tform_tool_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Pose>(GetArenaForAllocation());
    _impl_.wrist_tform_tool_ = p;
  }
  return _impl_.wrist_tform_tool_;
}
inline ::bosdyn::api::SE3Pose* GazeCommand_Request::mutable_wrist_tform_tool() {
  ::bosdyn::api::SE3Pose* _msg = _internal_mutable_wrist_tform_tool();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GazeCommand.Request.wrist_tform_tool)
  return _msg;
}
inline void GazeCommand_Request::set_allocated_wrist_tform_tool(::bosdyn::api::SE3Pose* wrist_tform_tool) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wrist_tform_tool_);
  }
  if (wrist_tform_tool) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wrist_tform_tool));
    if (message_arena != submessage_arena) {
      wrist_tform_tool = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wrist_tform_tool, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.wrist_tform_tool_ = wrist_tform_tool;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GazeCommand.Request.wrist_tform_tool)
}

// .google.protobuf.DoubleValue target_trajectory_initial_velocity = 5;
inline bool GazeCommand_Request::_internal_has_target_trajectory_initial_velocity() const {
  return this != internal_default_instance() && _impl_.target_trajectory_initial_velocity_ != nullptr;
}
inline bool GazeCommand_Request::has_target_trajectory_initial_velocity() const {
  return _internal_has_target_trajectory_initial_velocity();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& GazeCommand_Request::_internal_target_trajectory_initial_velocity() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.target_trajectory_initial_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& GazeCommand_Request::target_trajectory_initial_velocity() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GazeCommand.Request.target_trajectory_initial_velocity)
  return _internal_target_trajectory_initial_velocity();
}
inline void GazeCommand_Request::unsafe_arena_set_allocated_target_trajectory_initial_velocity(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* target_trajectory_initial_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_trajectory_initial_velocity_);
  }
  _impl_.target_trajectory_initial_velocity_ = target_trajectory_initial_velocity;
  if (target_trajectory_initial_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GazeCommand.Request.target_trajectory_initial_velocity)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GazeCommand_Request::release_target_trajectory_initial_velocity() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.target_trajectory_initial_velocity_;
  _impl_.target_trajectory_initial_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GazeCommand_Request::unsafe_arena_release_target_trajectory_initial_velocity() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GazeCommand.Request.target_trajectory_initial_velocity)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.target_trajectory_initial_velocity_;
  _impl_.target_trajectory_initial_velocity_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GazeCommand_Request::_internal_mutable_target_trajectory_initial_velocity() {
  
  if (_impl_.target_trajectory_initial_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.target_trajectory_initial_velocity_ = p;
  }
  return _impl_.target_trajectory_initial_velocity_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GazeCommand_Request::mutable_target_trajectory_initial_velocity() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_target_trajectory_initial_velocity();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GazeCommand.Request.target_trajectory_initial_velocity)
  return _msg;
}
inline void GazeCommand_Request::set_allocated_target_trajectory_initial_velocity(::PROTOBUF_NAMESPACE_ID::DoubleValue* target_trajectory_initial_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_trajectory_initial_velocity_);
  }
  if (target_trajectory_initial_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_trajectory_initial_velocity));
    if (message_arena != submessage_arena) {
      target_trajectory_initial_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_trajectory_initial_velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.target_trajectory_initial_velocity_ = target_trajectory_initial_velocity;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GazeCommand.Request.target_trajectory_initial_velocity)
}

// .google.protobuf.DoubleValue maximum_acceleration = 6;
inline bool GazeCommand_Request::_internal_has_maximum_acceleration() const {
  return this != internal_default_instance() && _impl_.maximum_acceleration_ != nullptr;
}
inline bool GazeCommand_Request::has_maximum_acceleration() const {
  return _internal_has_maximum_acceleration();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& GazeCommand_Request::_internal_maximum_acceleration() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.maximum_acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& GazeCommand_Request::maximum_acceleration() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GazeCommand.Request.maximum_acceleration)
  return _internal_maximum_acceleration();
}
inline void GazeCommand_Request::unsafe_arena_set_allocated_maximum_acceleration(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_acceleration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maximum_acceleration_);
  }
  _impl_.maximum_acceleration_ = maximum_acceleration;
  if (maximum_acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GazeCommand.Request.maximum_acceleration)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GazeCommand_Request::release_maximum_acceleration() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.maximum_acceleration_;
  _impl_.maximum_acceleration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GazeCommand_Request::unsafe_arena_release_maximum_acceleration() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GazeCommand.Request.maximum_acceleration)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.maximum_acceleration_;
  _impl_.maximum_acceleration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GazeCommand_Request::_internal_mutable_maximum_acceleration() {
  
  if (_impl_.maximum_acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.maximum_acceleration_ = p;
  }
  return _impl_.maximum_acceleration_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GazeCommand_Request::mutable_maximum_acceleration() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_maximum_acceleration();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GazeCommand.Request.maximum_acceleration)
  return _msg;
}
inline void GazeCommand_Request::set_allocated_maximum_acceleration(::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maximum_acceleration_);
  }
  if (maximum_acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maximum_acceleration));
    if (message_arena != submessage_arena) {
      maximum_acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maximum_acceleration, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.maximum_acceleration_ = maximum_acceleration;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GazeCommand.Request.maximum_acceleration)
}

// .google.protobuf.DoubleValue max_linear_velocity = 7;
inline bool GazeCommand_Request::_internal_has_max_linear_velocity() const {
  return this != internal_default_instance() && _impl_.max_linear_velocity_ != nullptr;
}
inline bool GazeCommand_Request::has_max_linear_velocity() const {
  return _internal_has_max_linear_velocity();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& GazeCommand_Request::_internal_max_linear_velocity() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.max_linear_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& GazeCommand_Request::max_linear_velocity() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GazeCommand.Request.max_linear_velocity)
  return _internal_max_linear_velocity();
}
inline void GazeCommand_Request::unsafe_arena_set_allocated_max_linear_velocity(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_linear_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_linear_velocity_);
  }
  _impl_.max_linear_velocity_ = max_linear_velocity;
  if (max_linear_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GazeCommand.Request.max_linear_velocity)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GazeCommand_Request::release_max_linear_velocity() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_linear_velocity_;
  _impl_.max_linear_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GazeCommand_Request::unsafe_arena_release_max_linear_velocity() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GazeCommand.Request.max_linear_velocity)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_linear_velocity_;
  _impl_.max_linear_velocity_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GazeCommand_Request::_internal_mutable_max_linear_velocity() {
  
  if (_impl_.max_linear_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.max_linear_velocity_ = p;
  }
  return _impl_.max_linear_velocity_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GazeCommand_Request::mutable_max_linear_velocity() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_max_linear_velocity();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GazeCommand.Request.max_linear_velocity)
  return _msg;
}
inline void GazeCommand_Request::set_allocated_max_linear_velocity(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_linear_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_linear_velocity_);
  }
  if (max_linear_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_linear_velocity));
    if (message_arena != submessage_arena) {
      max_linear_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_linear_velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_linear_velocity_ = max_linear_velocity;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GazeCommand.Request.max_linear_velocity)
}

// .google.protobuf.DoubleValue max_angular_velocity = 8;
inline bool GazeCommand_Request::_internal_has_max_angular_velocity() const {
  return this != internal_default_instance() && _impl_.max_angular_velocity_ != nullptr;
}
inline bool GazeCommand_Request::has_max_angular_velocity() const {
  return _internal_has_max_angular_velocity();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& GazeCommand_Request::_internal_max_angular_velocity() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.max_angular_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& GazeCommand_Request::max_angular_velocity() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GazeCommand.Request.max_angular_velocity)
  return _internal_max_angular_velocity();
}
inline void GazeCommand_Request::unsafe_arena_set_allocated_max_angular_velocity(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_angular_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_angular_velocity_);
  }
  _impl_.max_angular_velocity_ = max_angular_velocity;
  if (max_angular_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GazeCommand.Request.max_angular_velocity)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GazeCommand_Request::release_max_angular_velocity() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_angular_velocity_;
  _impl_.max_angular_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GazeCommand_Request::unsafe_arena_release_max_angular_velocity() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GazeCommand.Request.max_angular_velocity)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_angular_velocity_;
  _impl_.max_angular_velocity_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GazeCommand_Request::_internal_mutable_max_angular_velocity() {
  
  if (_impl_.max_angular_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.max_angular_velocity_ = p;
  }
  return _impl_.max_angular_velocity_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GazeCommand_Request::mutable_max_angular_velocity() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_max_angular_velocity();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GazeCommand.Request.max_angular_velocity)
  return _msg;
}
inline void GazeCommand_Request::set_allocated_max_angular_velocity(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_angular_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_angular_velocity_);
  }
  if (max_angular_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_angular_velocity));
    if (message_arena != submessage_arena) {
      max_angular_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_angular_velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_angular_velocity_ = max_angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GazeCommand.Request.max_angular_velocity)
}

// -------------------------------------------------------------------

// GazeCommand_Feedback

// .bosdyn.api.GazeCommand.Feedback.Status status = 1;
inline void GazeCommand_Feedback::clear_status() {
  _impl_.status_ = 0;
}
inline ::bosdyn::api::GazeCommand_Feedback_Status GazeCommand_Feedback::_internal_status() const {
  return static_cast< ::bosdyn::api::GazeCommand_Feedback_Status >(_impl_.status_);
}
inline ::bosdyn::api::GazeCommand_Feedback_Status GazeCommand_Feedback::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GazeCommand.Feedback.status)
  return _internal_status();
}
inline void GazeCommand_Feedback::_internal_set_status(::bosdyn::api::GazeCommand_Feedback_Status value) {
  
  _impl_.status_ = value;
}
inline void GazeCommand_Feedback::set_status(::bosdyn::api::GazeCommand_Feedback_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.GazeCommand.Feedback.status)
}

// bool gazing_at_target = 2;
inline void GazeCommand_Feedback::clear_gazing_at_target() {
  _impl_.gazing_at_target_ = false;
}
inline bool GazeCommand_Feedback::_internal_gazing_at_target() const {
  return _impl_.gazing_at_target_;
}
inline bool GazeCommand_Feedback::gazing_at_target() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GazeCommand.Feedback.gazing_at_target)
  return _internal_gazing_at_target();
}
inline void GazeCommand_Feedback::_internal_set_gazing_at_target(bool value) {
  
  _impl_.gazing_at_target_ = value;
}
inline void GazeCommand_Feedback::set_gazing_at_target(bool value) {
  _internal_set_gazing_at_target(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.GazeCommand.Feedback.gazing_at_target)
}

// float gaze_to_target_rotation_measured = 5;
inline void GazeCommand_Feedback::clear_gaze_to_target_rotation_measured() {
  _impl_.gaze_to_target_rotation_measured_ = 0;
}
inline float GazeCommand_Feedback::_internal_gaze_to_target_rotation_measured() const {
  return _impl_.gaze_to_target_rotation_measured_;
}
inline float GazeCommand_Feedback::gaze_to_target_rotation_measured() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GazeCommand.Feedback.gaze_to_target_rotation_measured)
  return _internal_gaze_to_target_rotation_measured();
}
inline void GazeCommand_Feedback::_internal_set_gaze_to_target_rotation_measured(float value) {
  
  _impl_.gaze_to_target_rotation_measured_ = value;
}
inline void GazeCommand_Feedback::set_gaze_to_target_rotation_measured(float value) {
  _internal_set_gaze_to_target_rotation_measured(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.GazeCommand.Feedback.gaze_to_target_rotation_measured)
}

// bool hand_position_at_goal = 3;
inline void GazeCommand_Feedback::clear_hand_position_at_goal() {
  _impl_.hand_position_at_goal_ = false;
}
inline bool GazeCommand_Feedback::_internal_hand_position_at_goal() const {
  return _impl_.hand_position_at_goal_;
}
inline bool GazeCommand_Feedback::hand_position_at_goal() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GazeCommand.Feedback.hand_position_at_goal)
  return _internal_hand_position_at_goal();
}
inline void GazeCommand_Feedback::_internal_set_hand_position_at_goal(bool value) {
  
  _impl_.hand_position_at_goal_ = value;
}
inline void GazeCommand_Feedback::set_hand_position_at_goal(bool value) {
  _internal_set_hand_position_at_goal(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.GazeCommand.Feedback.hand_position_at_goal)
}

// float hand_distance_to_goal_measured = 6;
inline void GazeCommand_Feedback::clear_hand_distance_to_goal_measured() {
  _impl_.hand_distance_to_goal_measured_ = 0;
}
inline float GazeCommand_Feedback::_internal_hand_distance_to_goal_measured() const {
  return _impl_.hand_distance_to_goal_measured_;
}
inline float GazeCommand_Feedback::hand_distance_to_goal_measured() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GazeCommand.Feedback.hand_distance_to_goal_measured)
  return _internal_hand_distance_to_goal_measured();
}
inline void GazeCommand_Feedback::_internal_set_hand_distance_to_goal_measured(float value) {
  
  _impl_.hand_distance_to_goal_measured_ = value;
}
inline void GazeCommand_Feedback::set_hand_distance_to_goal_measured(float value) {
  _internal_set_hand_distance_to_goal_measured(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.GazeCommand.Feedback.hand_distance_to_goal_measured)
}

// bool hand_roll_at_goal = 4;
inline void GazeCommand_Feedback::clear_hand_roll_at_goal() {
  _impl_.hand_roll_at_goal_ = false;
}
inline bool GazeCommand_Feedback::_internal_hand_roll_at_goal() const {
  return _impl_.hand_roll_at_goal_;
}
inline bool GazeCommand_Feedback::hand_roll_at_goal() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GazeCommand.Feedback.hand_roll_at_goal)
  return _internal_hand_roll_at_goal();
}
inline void GazeCommand_Feedback::_internal_set_hand_roll_at_goal(bool value) {
  
  _impl_.hand_roll_at_goal_ = value;
}
inline void GazeCommand_Feedback::set_hand_roll_at_goal(bool value) {
  _internal_set_hand_roll_at_goal(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.GazeCommand.Feedback.hand_roll_at_goal)
}

// float hand_roll_to_target_roll_measured = 7;
inline void GazeCommand_Feedback::clear_hand_roll_to_target_roll_measured() {
  _impl_.hand_roll_to_target_roll_measured_ = 0;
}
inline float GazeCommand_Feedback::_internal_hand_roll_to_target_roll_measured() const {
  return _impl_.hand_roll_to_target_roll_measured_;
}
inline float GazeCommand_Feedback::hand_roll_to_target_roll_measured() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GazeCommand.Feedback.hand_roll_to_target_roll_measured)
  return _internal_hand_roll_to_target_roll_measured();
}
inline void GazeCommand_Feedback::_internal_set_hand_roll_to_target_roll_measured(float value) {
  
  _impl_.hand_roll_to_target_roll_measured_ = value;
}
inline void GazeCommand_Feedback::set_hand_roll_to_target_roll_measured(float value) {
  _internal_set_hand_roll_to_target_roll_measured(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.GazeCommand.Feedback.hand_roll_to_target_roll_measured)
}

// -------------------------------------------------------------------

// GazeCommand

// -------------------------------------------------------------------

// ArmStopCommand_Request

// -------------------------------------------------------------------

// ArmStopCommand_Feedback

// -------------------------------------------------------------------

// ArmStopCommand

// -------------------------------------------------------------------

// ArmImpedanceCommand_Request

// string root_frame_name = 1;
inline void ArmImpedanceCommand_Request::clear_root_frame_name() {
  _impl_.root_frame_name_.ClearToEmpty();
}
inline const std::string& ArmImpedanceCommand_Request::root_frame_name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmImpedanceCommand.Request.root_frame_name)
  return _internal_root_frame_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ArmImpedanceCommand_Request::set_root_frame_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.root_frame_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.ArmImpedanceCommand.Request.root_frame_name)
}
inline std::string* ArmImpedanceCommand_Request::mutable_root_frame_name() {
  std::string* _s = _internal_mutable_root_frame_name();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmImpedanceCommand.Request.root_frame_name)
  return _s;
}
inline const std::string& ArmImpedanceCommand_Request::_internal_root_frame_name() const {
  return _impl_.root_frame_name_.Get();
}
inline void ArmImpedanceCommand_Request::_internal_set_root_frame_name(const std::string& value) {
  
  _impl_.root_frame_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ArmImpedanceCommand_Request::_internal_mutable_root_frame_name() {
  
  return _impl_.root_frame_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ArmImpedanceCommand_Request::release_root_frame_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmImpedanceCommand.Request.root_frame_name)
  return _impl_.root_frame_name_.Release();
}
inline void ArmImpedanceCommand_Request::set_allocated_root_frame_name(std::string* root_frame_name) {
  if (root_frame_name != nullptr) {
    
  } else {
    
  }
  _impl_.root_frame_name_.SetAllocated(root_frame_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.root_frame_name_.IsDefault()) {
    _impl_.root_frame_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmImpedanceCommand.Request.root_frame_name)
}

// .bosdyn.api.SE3Pose root_tform_task = 2;
inline bool ArmImpedanceCommand_Request::_internal_has_root_tform_task() const {
  return this != internal_default_instance() && _impl_.root_tform_task_ != nullptr;
}
inline bool ArmImpedanceCommand_Request::has_root_tform_task() const {
  return _internal_has_root_tform_task();
}
inline const ::bosdyn::api::SE3Pose& ArmImpedanceCommand_Request::_internal_root_tform_task() const {
  const ::bosdyn::api::SE3Pose* p = _impl_.root_tform_task_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::SE3Pose&>(
      ::bosdyn::api::_SE3Pose_default_instance_);
}
inline const ::bosdyn::api::SE3Pose& ArmImpedanceCommand_Request::root_tform_task() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmImpedanceCommand.Request.root_tform_task)
  return _internal_root_tform_task();
}
inline void ArmImpedanceCommand_Request::unsafe_arena_set_allocated_root_tform_task(
    ::bosdyn::api::SE3Pose* root_tform_task) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.root_tform_task_);
  }
  _impl_.root_tform_task_ = root_tform_task;
  if (root_tform_task) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmImpedanceCommand.Request.root_tform_task)
}
inline ::bosdyn::api::SE3Pose* ArmImpedanceCommand_Request::release_root_tform_task() {
  
  ::bosdyn::api::SE3Pose* temp = _impl_.root_tform_task_;
  _impl_.root_tform_task_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::SE3Pose* ArmImpedanceCommand_Request::unsafe_arena_release_root_tform_task() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmImpedanceCommand.Request.root_tform_task)
  
  ::bosdyn::api::SE3Pose* temp = _impl_.root_tform_task_;
  _impl_.root_tform_task_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Pose* ArmImpedanceCommand_Request::_internal_mutable_root_tform_task() {
  
  if (_impl_.root_tform_task_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Pose>(GetArenaForAllocation());
    _impl_.root_tform_task_ = p;
  }
  return _impl_.root_tform_task_;
}
inline ::bosdyn::api::SE3Pose* ArmImpedanceCommand_Request::mutable_root_tform_task() {
  ::bosdyn::api::SE3Pose* _msg = _internal_mutable_root_tform_task();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmImpedanceCommand.Request.root_tform_task)
  return _msg;
}
inline void ArmImpedanceCommand_Request::set_allocated_root_tform_task(::bosdyn::api::SE3Pose* root_tform_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.root_tform_task_);
  }
  if (root_tform_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(root_tform_task));
    if (message_arena != submessage_arena) {
      root_tform_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root_tform_task, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.root_tform_task_ = root_tform_task;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmImpedanceCommand.Request.root_tform_task)
}

// .bosdyn.api.SE3Pose wrist_tform_tool = 3;
inline bool ArmImpedanceCommand_Request::_internal_has_wrist_tform_tool() const {
  return this != internal_default_instance() && _impl_.wrist_tform_tool_ != nullptr;
}
inline bool ArmImpedanceCommand_Request::has_wrist_tform_tool() const {
  return _internal_has_wrist_tform_tool();
}
inline const ::bosdyn::api::SE3Pose& ArmImpedanceCommand_Request::_internal_wrist_tform_tool() const {
  const ::bosdyn::api::SE3Pose* p = _impl_.wrist_tform_tool_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::SE3Pose&>(
      ::bosdyn::api::_SE3Pose_default_instance_);
}
inline const ::bosdyn::api::SE3Pose& ArmImpedanceCommand_Request::wrist_tform_tool() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmImpedanceCommand.Request.wrist_tform_tool)
  return _internal_wrist_tform_tool();
}
inline void ArmImpedanceCommand_Request::unsafe_arena_set_allocated_wrist_tform_tool(
    ::bosdyn::api::SE3Pose* wrist_tform_tool) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wrist_tform_tool_);
  }
  _impl_.wrist_tform_tool_ = wrist_tform_tool;
  if (wrist_tform_tool) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmImpedanceCommand.Request.wrist_tform_tool)
}
inline ::bosdyn::api::SE3Pose* ArmImpedanceCommand_Request::release_wrist_tform_tool() {
  
  ::bosdyn::api::SE3Pose* temp = _impl_.wrist_tform_tool_;
  _impl_.wrist_tform_tool_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::SE3Pose* ArmImpedanceCommand_Request::unsafe_arena_release_wrist_tform_tool() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmImpedanceCommand.Request.wrist_tform_tool)
  
  ::bosdyn::api::SE3Pose* temp = _impl_.wrist_tform_tool_;
  _impl_.wrist_tform_tool_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Pose* ArmImpedanceCommand_Request::_internal_mutable_wrist_tform_tool() {
  
  if (_impl_.wrist_tform_tool_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Pose>(GetArenaForAllocation());
    _impl_.wrist_tform_tool_ = p;
  }
  return _impl_.wrist_tform_tool_;
}
inline ::bosdyn::api::SE3Pose* ArmImpedanceCommand_Request::mutable_wrist_tform_tool() {
  ::bosdyn::api::SE3Pose* _msg = _internal_mutable_wrist_tform_tool();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmImpedanceCommand.Request.wrist_tform_tool)
  return _msg;
}
inline void ArmImpedanceCommand_Request::set_allocated_wrist_tform_tool(::bosdyn::api::SE3Pose* wrist_tform_tool) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wrist_tform_tool_);
  }
  if (wrist_tform_tool) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wrist_tform_tool));
    if (message_arena != submessage_arena) {
      wrist_tform_tool = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wrist_tform_tool, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.wrist_tform_tool_ = wrist_tform_tool;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmImpedanceCommand.Request.wrist_tform_tool)
}

// .bosdyn.api.SE3Trajectory task_tform_desired_tool = 4;
inline bool ArmImpedanceCommand_Request::_internal_has_task_tform_desired_tool() const {
  return this != internal_default_instance() && _impl_.task_tform_desired_tool_ != nullptr;
}
inline bool ArmImpedanceCommand_Request::has_task_tform_desired_tool() const {
  return _internal_has_task_tform_desired_tool();
}
inline const ::bosdyn::api::SE3Trajectory& ArmImpedanceCommand_Request::_internal_task_tform_desired_tool() const {
  const ::bosdyn::api::SE3Trajectory* p = _impl_.task_tform_desired_tool_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::SE3Trajectory&>(
      ::bosdyn::api::_SE3Trajectory_default_instance_);
}
inline const ::bosdyn::api::SE3Trajectory& ArmImpedanceCommand_Request::task_tform_desired_tool() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmImpedanceCommand.Request.task_tform_desired_tool)
  return _internal_task_tform_desired_tool();
}
inline void ArmImpedanceCommand_Request::unsafe_arena_set_allocated_task_tform_desired_tool(
    ::bosdyn::api::SE3Trajectory* task_tform_desired_tool) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.task_tform_desired_tool_);
  }
  _impl_.task_tform_desired_tool_ = task_tform_desired_tool;
  if (task_tform_desired_tool) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmImpedanceCommand.Request.task_tform_desired_tool)
}
inline ::bosdyn::api::SE3Trajectory* ArmImpedanceCommand_Request::release_task_tform_desired_tool() {
  
  ::bosdyn::api::SE3Trajectory* temp = _impl_.task_tform_desired_tool_;
  _impl_.task_tform_desired_tool_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::SE3Trajectory* ArmImpedanceCommand_Request::unsafe_arena_release_task_tform_desired_tool() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmImpedanceCommand.Request.task_tform_desired_tool)
  
  ::bosdyn::api::SE3Trajectory* temp = _impl_.task_tform_desired_tool_;
  _impl_.task_tform_desired_tool_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Trajectory* ArmImpedanceCommand_Request::_internal_mutable_task_tform_desired_tool() {
  
  if (_impl_.task_tform_desired_tool_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Trajectory>(GetArenaForAllocation());
    _impl_.task_tform_desired_tool_ = p;
  }
  return _impl_.task_tform_desired_tool_;
}
inline ::bosdyn::api::SE3Trajectory* ArmImpedanceCommand_Request::mutable_task_tform_desired_tool() {
  ::bosdyn::api::SE3Trajectory* _msg = _internal_mutable_task_tform_desired_tool();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmImpedanceCommand.Request.task_tform_desired_tool)
  return _msg;
}
inline void ArmImpedanceCommand_Request::set_allocated_task_tform_desired_tool(::bosdyn::api::SE3Trajectory* task_tform_desired_tool) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.task_tform_desired_tool_);
  }
  if (task_tform_desired_tool) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_tform_desired_tool));
    if (message_arena != submessage_arena) {
      task_tform_desired_tool = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_tform_desired_tool, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.task_tform_desired_tool_ = task_tform_desired_tool;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmImpedanceCommand.Request.task_tform_desired_tool)
}

// .bosdyn.api.Wrench feed_forward_wrench_at_tool_in_desired_tool = 5;
inline bool ArmImpedanceCommand_Request::_internal_has_feed_forward_wrench_at_tool_in_desired_tool() const {
  return this != internal_default_instance() && _impl_.feed_forward_wrench_at_tool_in_desired_tool_ != nullptr;
}
inline bool ArmImpedanceCommand_Request::has_feed_forward_wrench_at_tool_in_desired_tool() const {
  return _internal_has_feed_forward_wrench_at_tool_in_desired_tool();
}
inline const ::bosdyn::api::Wrench& ArmImpedanceCommand_Request::_internal_feed_forward_wrench_at_tool_in_desired_tool() const {
  const ::bosdyn::api::Wrench* p = _impl_.feed_forward_wrench_at_tool_in_desired_tool_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Wrench&>(
      ::bosdyn::api::_Wrench_default_instance_);
}
inline const ::bosdyn::api::Wrench& ArmImpedanceCommand_Request::feed_forward_wrench_at_tool_in_desired_tool() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmImpedanceCommand.Request.feed_forward_wrench_at_tool_in_desired_tool)
  return _internal_feed_forward_wrench_at_tool_in_desired_tool();
}
inline void ArmImpedanceCommand_Request::unsafe_arena_set_allocated_feed_forward_wrench_at_tool_in_desired_tool(
    ::bosdyn::api::Wrench* feed_forward_wrench_at_tool_in_desired_tool) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.feed_forward_wrench_at_tool_in_desired_tool_);
  }
  _impl_.feed_forward_wrench_at_tool_in_desired_tool_ = feed_forward_wrench_at_tool_in_desired_tool;
  if (feed_forward_wrench_at_tool_in_desired_tool) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmImpedanceCommand.Request.feed_forward_wrench_at_tool_in_desired_tool)
}
inline ::bosdyn::api::Wrench* ArmImpedanceCommand_Request::release_feed_forward_wrench_at_tool_in_desired_tool() {
  
  ::bosdyn::api::Wrench* temp = _impl_.feed_forward_wrench_at_tool_in_desired_tool_;
  _impl_.feed_forward_wrench_at_tool_in_desired_tool_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Wrench* ArmImpedanceCommand_Request::unsafe_arena_release_feed_forward_wrench_at_tool_in_desired_tool() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmImpedanceCommand.Request.feed_forward_wrench_at_tool_in_desired_tool)
  
  ::bosdyn::api::Wrench* temp = _impl_.feed_forward_wrench_at_tool_in_desired_tool_;
  _impl_.feed_forward_wrench_at_tool_in_desired_tool_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Wrench* ArmImpedanceCommand_Request::_internal_mutable_feed_forward_wrench_at_tool_in_desired_tool() {
  
  if (_impl_.feed_forward_wrench_at_tool_in_desired_tool_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Wrench>(GetArenaForAllocation());
    _impl_.feed_forward_wrench_at_tool_in_desired_tool_ = p;
  }
  return _impl_.feed_forward_wrench_at_tool_in_desired_tool_;
}
inline ::bosdyn::api::Wrench* ArmImpedanceCommand_Request::mutable_feed_forward_wrench_at_tool_in_desired_tool() {
  ::bosdyn::api::Wrench* _msg = _internal_mutable_feed_forward_wrench_at_tool_in_desired_tool();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmImpedanceCommand.Request.feed_forward_wrench_at_tool_in_desired_tool)
  return _msg;
}
inline void ArmImpedanceCommand_Request::set_allocated_feed_forward_wrench_at_tool_in_desired_tool(::bosdyn::api::Wrench* feed_forward_wrench_at_tool_in_desired_tool) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.feed_forward_wrench_at_tool_in_desired_tool_);
  }
  if (feed_forward_wrench_at_tool_in_desired_tool) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(feed_forward_wrench_at_tool_in_desired_tool));
    if (message_arena != submessage_arena) {
      feed_forward_wrench_at_tool_in_desired_tool = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feed_forward_wrench_at_tool_in_desired_tool, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.feed_forward_wrench_at_tool_in_desired_tool_ = feed_forward_wrench_at_tool_in_desired_tool;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmImpedanceCommand.Request.feed_forward_wrench_at_tool_in_desired_tool)
}

// .bosdyn.api.Vector diagonal_stiffness_matrix = 6;
inline bool ArmImpedanceCommand_Request::_internal_has_diagonal_stiffness_matrix() const {
  return this != internal_default_instance() && _impl_.diagonal_stiffness_matrix_ != nullptr;
}
inline bool ArmImpedanceCommand_Request::has_diagonal_stiffness_matrix() const {
  return _internal_has_diagonal_stiffness_matrix();
}
inline const ::bosdyn::api::Vector& ArmImpedanceCommand_Request::_internal_diagonal_stiffness_matrix() const {
  const ::bosdyn::api::Vector* p = _impl_.diagonal_stiffness_matrix_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vector&>(
      ::bosdyn::api::_Vector_default_instance_);
}
inline const ::bosdyn::api::Vector& ArmImpedanceCommand_Request::diagonal_stiffness_matrix() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmImpedanceCommand.Request.diagonal_stiffness_matrix)
  return _internal_diagonal_stiffness_matrix();
}
inline void ArmImpedanceCommand_Request::unsafe_arena_set_allocated_diagonal_stiffness_matrix(
    ::bosdyn::api::Vector* diagonal_stiffness_matrix) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.diagonal_stiffness_matrix_);
  }
  _impl_.diagonal_stiffness_matrix_ = diagonal_stiffness_matrix;
  if (diagonal_stiffness_matrix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmImpedanceCommand.Request.diagonal_stiffness_matrix)
}
inline ::bosdyn::api::Vector* ArmImpedanceCommand_Request::release_diagonal_stiffness_matrix() {
  
  ::bosdyn::api::Vector* temp = _impl_.diagonal_stiffness_matrix_;
  _impl_.diagonal_stiffness_matrix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vector* ArmImpedanceCommand_Request::unsafe_arena_release_diagonal_stiffness_matrix() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmImpedanceCommand.Request.diagonal_stiffness_matrix)
  
  ::bosdyn::api::Vector* temp = _impl_.diagonal_stiffness_matrix_;
  _impl_.diagonal_stiffness_matrix_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vector* ArmImpedanceCommand_Request::_internal_mutable_diagonal_stiffness_matrix() {
  
  if (_impl_.diagonal_stiffness_matrix_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vector>(GetArenaForAllocation());
    _impl_.diagonal_stiffness_matrix_ = p;
  }
  return _impl_.diagonal_stiffness_matrix_;
}
inline ::bosdyn::api::Vector* ArmImpedanceCommand_Request::mutable_diagonal_stiffness_matrix() {
  ::bosdyn::api::Vector* _msg = _internal_mutable_diagonal_stiffness_matrix();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmImpedanceCommand.Request.diagonal_stiffness_matrix)
  return _msg;
}
inline void ArmImpedanceCommand_Request::set_allocated_diagonal_stiffness_matrix(::bosdyn::api::Vector* diagonal_stiffness_matrix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.diagonal_stiffness_matrix_);
  }
  if (diagonal_stiffness_matrix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diagonal_stiffness_matrix));
    if (message_arena != submessage_arena) {
      diagonal_stiffness_matrix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diagonal_stiffness_matrix, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.diagonal_stiffness_matrix_ = diagonal_stiffness_matrix;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmImpedanceCommand.Request.diagonal_stiffness_matrix)
}

// .bosdyn.api.Vector diagonal_damping_matrix = 7;
inline bool ArmImpedanceCommand_Request::_internal_has_diagonal_damping_matrix() const {
  return this != internal_default_instance() && _impl_.diagonal_damping_matrix_ != nullptr;
}
inline bool ArmImpedanceCommand_Request::has_diagonal_damping_matrix() const {
  return _internal_has_diagonal_damping_matrix();
}
inline const ::bosdyn::api::Vector& ArmImpedanceCommand_Request::_internal_diagonal_damping_matrix() const {
  const ::bosdyn::api::Vector* p = _impl_.diagonal_damping_matrix_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vector&>(
      ::bosdyn::api::_Vector_default_instance_);
}
inline const ::bosdyn::api::Vector& ArmImpedanceCommand_Request::diagonal_damping_matrix() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmImpedanceCommand.Request.diagonal_damping_matrix)
  return _internal_diagonal_damping_matrix();
}
inline void ArmImpedanceCommand_Request::unsafe_arena_set_allocated_diagonal_damping_matrix(
    ::bosdyn::api::Vector* diagonal_damping_matrix) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.diagonal_damping_matrix_);
  }
  _impl_.diagonal_damping_matrix_ = diagonal_damping_matrix;
  if (diagonal_damping_matrix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmImpedanceCommand.Request.diagonal_damping_matrix)
}
inline ::bosdyn::api::Vector* ArmImpedanceCommand_Request::release_diagonal_damping_matrix() {
  
  ::bosdyn::api::Vector* temp = _impl_.diagonal_damping_matrix_;
  _impl_.diagonal_damping_matrix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vector* ArmImpedanceCommand_Request::unsafe_arena_release_diagonal_damping_matrix() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmImpedanceCommand.Request.diagonal_damping_matrix)
  
  ::bosdyn::api::Vector* temp = _impl_.diagonal_damping_matrix_;
  _impl_.diagonal_damping_matrix_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vector* ArmImpedanceCommand_Request::_internal_mutable_diagonal_damping_matrix() {
  
  if (_impl_.diagonal_damping_matrix_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vector>(GetArenaForAllocation());
    _impl_.diagonal_damping_matrix_ = p;
  }
  return _impl_.diagonal_damping_matrix_;
}
inline ::bosdyn::api::Vector* ArmImpedanceCommand_Request::mutable_diagonal_damping_matrix() {
  ::bosdyn::api::Vector* _msg = _internal_mutable_diagonal_damping_matrix();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmImpedanceCommand.Request.diagonal_damping_matrix)
  return _msg;
}
inline void ArmImpedanceCommand_Request::set_allocated_diagonal_damping_matrix(::bosdyn::api::Vector* diagonal_damping_matrix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.diagonal_damping_matrix_);
  }
  if (diagonal_damping_matrix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diagonal_damping_matrix));
    if (message_arena != submessage_arena) {
      diagonal_damping_matrix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diagonal_damping_matrix, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.diagonal_damping_matrix_ = diagonal_damping_matrix;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmImpedanceCommand.Request.diagonal_damping_matrix)
}

// .google.protobuf.DoubleValue max_force_mag = 8;
inline bool ArmImpedanceCommand_Request::_internal_has_max_force_mag() const {
  return this != internal_default_instance() && _impl_.max_force_mag_ != nullptr;
}
inline bool ArmImpedanceCommand_Request::has_max_force_mag() const {
  return _internal_has_max_force_mag();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmImpedanceCommand_Request::_internal_max_force_mag() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.max_force_mag_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmImpedanceCommand_Request::max_force_mag() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmImpedanceCommand.Request.max_force_mag)
  return _internal_max_force_mag();
}
inline void ArmImpedanceCommand_Request::unsafe_arena_set_allocated_max_force_mag(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_force_mag) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_force_mag_);
  }
  _impl_.max_force_mag_ = max_force_mag;
  if (max_force_mag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmImpedanceCommand.Request.max_force_mag)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmImpedanceCommand_Request::release_max_force_mag() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_force_mag_;
  _impl_.max_force_mag_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmImpedanceCommand_Request::unsafe_arena_release_max_force_mag() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmImpedanceCommand.Request.max_force_mag)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_force_mag_;
  _impl_.max_force_mag_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmImpedanceCommand_Request::_internal_mutable_max_force_mag() {
  
  if (_impl_.max_force_mag_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.max_force_mag_ = p;
  }
  return _impl_.max_force_mag_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmImpedanceCommand_Request::mutable_max_force_mag() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_max_force_mag();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmImpedanceCommand.Request.max_force_mag)
  return _msg;
}
inline void ArmImpedanceCommand_Request::set_allocated_max_force_mag(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_force_mag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_force_mag_);
  }
  if (max_force_mag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_force_mag));
    if (message_arena != submessage_arena) {
      max_force_mag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_force_mag, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_force_mag_ = max_force_mag;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmImpedanceCommand.Request.max_force_mag)
}

// .google.protobuf.DoubleValue max_torque_mag = 9;
inline bool ArmImpedanceCommand_Request::_internal_has_max_torque_mag() const {
  return this != internal_default_instance() && _impl_.max_torque_mag_ != nullptr;
}
inline bool ArmImpedanceCommand_Request::has_max_torque_mag() const {
  return _internal_has_max_torque_mag();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmImpedanceCommand_Request::_internal_max_torque_mag() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.max_torque_mag_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmImpedanceCommand_Request::max_torque_mag() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmImpedanceCommand.Request.max_torque_mag)
  return _internal_max_torque_mag();
}
inline void ArmImpedanceCommand_Request::unsafe_arena_set_allocated_max_torque_mag(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_torque_mag) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_torque_mag_);
  }
  _impl_.max_torque_mag_ = max_torque_mag;
  if (max_torque_mag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmImpedanceCommand.Request.max_torque_mag)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmImpedanceCommand_Request::release_max_torque_mag() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_torque_mag_;
  _impl_.max_torque_mag_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmImpedanceCommand_Request::unsafe_arena_release_max_torque_mag() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmImpedanceCommand.Request.max_torque_mag)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_torque_mag_;
  _impl_.max_torque_mag_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmImpedanceCommand_Request::_internal_mutable_max_torque_mag() {
  
  if (_impl_.max_torque_mag_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.max_torque_mag_ = p;
  }
  return _impl_.max_torque_mag_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmImpedanceCommand_Request::mutable_max_torque_mag() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_max_torque_mag();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmImpedanceCommand.Request.max_torque_mag)
  return _msg;
}
inline void ArmImpedanceCommand_Request::set_allocated_max_torque_mag(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_torque_mag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_torque_mag_);
  }
  if (max_torque_mag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_torque_mag));
    if (message_arena != submessage_arena) {
      max_torque_mag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_torque_mag, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_torque_mag_ = max_torque_mag;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmImpedanceCommand.Request.max_torque_mag)
}

// -------------------------------------------------------------------

// ArmImpedanceCommand_Feedback

// -------------------------------------------------------------------

// ArmImpedanceCommand

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::NamedArmPositionsCommand_Feedback_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::NamedArmPositionsCommand_Feedback_Status>() {
  return ::bosdyn::api::NamedArmPositionsCommand_Feedback_Status_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::NamedArmPositionsCommand_Positions> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::NamedArmPositionsCommand_Positions>() {
  return ::bosdyn::api::NamedArmPositionsCommand_Positions_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::ArmCartesianCommand_Request_AxisMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::ArmCartesianCommand_Request_AxisMode>() {
  return ::bosdyn::api::ArmCartesianCommand_Request_AxisMode_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::ArmCartesianCommand_Feedback_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::ArmCartesianCommand_Feedback_Status>() {
  return ::bosdyn::api::ArmCartesianCommand_Feedback_Status_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::ArmJointMoveCommand_Feedback_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::ArmJointMoveCommand_Feedback_Status>() {
  return ::bosdyn::api::ArmJointMoveCommand_Feedback_Status_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::ArmJointMoveCommand_Feedback_PlannerStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::ArmJointMoveCommand_Feedback_PlannerStatus>() {
  return ::bosdyn::api::ArmJointMoveCommand_Feedback_PlannerStatus_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::GazeCommand_Feedback_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::GazeCommand_Feedback_Status>() {
  return ::bosdyn::api::GazeCommand_Feedback_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2farm_5fcommand_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/local_grid.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2flocal_5fgrid_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2flocal_5fgrid_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/geometry.pb.h"
#include "bosdyn/api/header.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2flocal_5fgrid_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2flocal_5fgrid_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2flocal_5fgrid_2eproto;
namespace bosdyn {
namespace api {
class GetLocalGridTypesRequest;
struct GetLocalGridTypesRequestDefaultTypeInternal;
extern GetLocalGridTypesRequestDefaultTypeInternal _GetLocalGridTypesRequest_default_instance_;
class GetLocalGridTypesResponse;
struct GetLocalGridTypesResponseDefaultTypeInternal;
extern GetLocalGridTypesResponseDefaultTypeInternal _GetLocalGridTypesResponse_default_instance_;
class GetLocalGridsRequest;
struct GetLocalGridsRequestDefaultTypeInternal;
extern GetLocalGridsRequestDefaultTypeInternal _GetLocalGridsRequest_default_instance_;
class GetLocalGridsResponse;
struct GetLocalGridsResponseDefaultTypeInternal;
extern GetLocalGridsResponseDefaultTypeInternal _GetLocalGridsResponse_default_instance_;
class LocalGrid;
struct LocalGridDefaultTypeInternal;
extern LocalGridDefaultTypeInternal _LocalGrid_default_instance_;
class LocalGridExtent;
struct LocalGridExtentDefaultTypeInternal;
extern LocalGridExtentDefaultTypeInternal _LocalGridExtent_default_instance_;
class LocalGridRequest;
struct LocalGridRequestDefaultTypeInternal;
extern LocalGridRequestDefaultTypeInternal _LocalGridRequest_default_instance_;
class LocalGridResponse;
struct LocalGridResponseDefaultTypeInternal;
extern LocalGridResponseDefaultTypeInternal _LocalGridResponse_default_instance_;
class LocalGridType;
struct LocalGridTypeDefaultTypeInternal;
extern LocalGridTypeDefaultTypeInternal _LocalGridType_default_instance_;
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::GetLocalGridTypesRequest* Arena::CreateMaybeMessage<::bosdyn::api::GetLocalGridTypesRequest>(Arena*);
template<> ::bosdyn::api::GetLocalGridTypesResponse* Arena::CreateMaybeMessage<::bosdyn::api::GetLocalGridTypesResponse>(Arena*);
template<> ::bosdyn::api::GetLocalGridsRequest* Arena::CreateMaybeMessage<::bosdyn::api::GetLocalGridsRequest>(Arena*);
template<> ::bosdyn::api::GetLocalGridsResponse* Arena::CreateMaybeMessage<::bosdyn::api::GetLocalGridsResponse>(Arena*);
template<> ::bosdyn::api::LocalGrid* Arena::CreateMaybeMessage<::bosdyn::api::LocalGrid>(Arena*);
template<> ::bosdyn::api::LocalGridExtent* Arena::CreateMaybeMessage<::bosdyn::api::LocalGridExtent>(Arena*);
template<> ::bosdyn::api::LocalGridRequest* Arena::CreateMaybeMessage<::bosdyn::api::LocalGridRequest>(Arena*);
template<> ::bosdyn::api::LocalGridResponse* Arena::CreateMaybeMessage<::bosdyn::api::LocalGridResponse>(Arena*);
template<> ::bosdyn::api::LocalGridType* Arena::CreateMaybeMessage<::bosdyn::api::LocalGridType>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {

enum LocalGrid_CellFormat : int {
  LocalGrid_CellFormat_CELL_FORMAT_UNKNOWN = 0,
  LocalGrid_CellFormat_CELL_FORMAT_FLOAT32 = 1,
  LocalGrid_CellFormat_CELL_FORMAT_FLOAT64 = 2,
  LocalGrid_CellFormat_CELL_FORMAT_INT8 = 3,
  LocalGrid_CellFormat_CELL_FORMAT_UINT8 = 4,
  LocalGrid_CellFormat_CELL_FORMAT_INT16 = 5,
  LocalGrid_CellFormat_CELL_FORMAT_UINT16 = 6,
  LocalGrid_CellFormat_LocalGrid_CellFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LocalGrid_CellFormat_LocalGrid_CellFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LocalGrid_CellFormat_IsValid(int value);
constexpr LocalGrid_CellFormat LocalGrid_CellFormat_CellFormat_MIN = LocalGrid_CellFormat_CELL_FORMAT_UNKNOWN;
constexpr LocalGrid_CellFormat LocalGrid_CellFormat_CellFormat_MAX = LocalGrid_CellFormat_CELL_FORMAT_UINT16;
constexpr int LocalGrid_CellFormat_CellFormat_ARRAYSIZE = LocalGrid_CellFormat_CellFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocalGrid_CellFormat_descriptor();
template<typename T>
inline const std::string& LocalGrid_CellFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LocalGrid_CellFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LocalGrid_CellFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LocalGrid_CellFormat_descriptor(), enum_t_value);
}
inline bool LocalGrid_CellFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LocalGrid_CellFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LocalGrid_CellFormat>(
    LocalGrid_CellFormat_descriptor(), name, value);
}
enum LocalGrid_Encoding : int {
  LocalGrid_Encoding_ENCODING_UNKNOWN = 0,
  LocalGrid_Encoding_ENCODING_RAW = 1,
  LocalGrid_Encoding_ENCODING_RLE = 2,
  LocalGrid_Encoding_LocalGrid_Encoding_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LocalGrid_Encoding_LocalGrid_Encoding_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LocalGrid_Encoding_IsValid(int value);
constexpr LocalGrid_Encoding LocalGrid_Encoding_Encoding_MIN = LocalGrid_Encoding_ENCODING_UNKNOWN;
constexpr LocalGrid_Encoding LocalGrid_Encoding_Encoding_MAX = LocalGrid_Encoding_ENCODING_RLE;
constexpr int LocalGrid_Encoding_Encoding_ARRAYSIZE = LocalGrid_Encoding_Encoding_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocalGrid_Encoding_descriptor();
template<typename T>
inline const std::string& LocalGrid_Encoding_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LocalGrid_Encoding>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LocalGrid_Encoding_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LocalGrid_Encoding_descriptor(), enum_t_value);
}
inline bool LocalGrid_Encoding_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LocalGrid_Encoding* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LocalGrid_Encoding>(
    LocalGrid_Encoding_descriptor(), name, value);
}
enum LocalGridResponse_Status : int {
  LocalGridResponse_Status_STATUS_UNKNOWN = 0,
  LocalGridResponse_Status_STATUS_OK = 1,
  LocalGridResponse_Status_STATUS_NO_SUCH_GRID = 2,
  LocalGridResponse_Status_STATUS_DATA_UNAVAILABLE = 3,
  LocalGridResponse_Status_STATUS_DATA_INVALID = 4,
  LocalGridResponse_Status_LocalGridResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LocalGridResponse_Status_LocalGridResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LocalGridResponse_Status_IsValid(int value);
constexpr LocalGridResponse_Status LocalGridResponse_Status_Status_MIN = LocalGridResponse_Status_STATUS_UNKNOWN;
constexpr LocalGridResponse_Status LocalGridResponse_Status_Status_MAX = LocalGridResponse_Status_STATUS_DATA_INVALID;
constexpr int LocalGridResponse_Status_Status_ARRAYSIZE = LocalGridResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocalGridResponse_Status_descriptor();
template<typename T>
inline const std::string& LocalGridResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LocalGridResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LocalGridResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LocalGridResponse_Status_descriptor(), enum_t_value);
}
inline bool LocalGridResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LocalGridResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LocalGridResponse_Status>(
    LocalGridResponse_Status_descriptor(), name, value);
}
// ===================================================================

class LocalGridType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.LocalGridType) */ {
 public:
  inline LocalGridType() : LocalGridType(nullptr) {}
  ~LocalGridType() override;
  explicit PROTOBUF_CONSTEXPR LocalGridType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalGridType(const LocalGridType& from);
  LocalGridType(LocalGridType&& from) noexcept
    : LocalGridType() {
    *this = ::std::move(from);
  }

  inline LocalGridType& operator=(const LocalGridType& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalGridType& operator=(LocalGridType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocalGridType& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalGridType* internal_default_instance() {
    return reinterpret_cast<const LocalGridType*>(
               &_LocalGridType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LocalGridType& a, LocalGridType& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalGridType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalGridType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalGridType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalGridType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocalGridType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LocalGridType& from) {
    LocalGridType::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalGridType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.LocalGridType";
  }
  protected:
  explicit LocalGridType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.LocalGridType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2flocal_5fgrid_2eproto;
};
// -------------------------------------------------------------------

class LocalGridRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.LocalGridRequest) */ {
 public:
  inline LocalGridRequest() : LocalGridRequest(nullptr) {}
  ~LocalGridRequest() override;
  explicit PROTOBUF_CONSTEXPR LocalGridRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalGridRequest(const LocalGridRequest& from);
  LocalGridRequest(LocalGridRequest&& from) noexcept
    : LocalGridRequest() {
    *this = ::std::move(from);
  }

  inline LocalGridRequest& operator=(const LocalGridRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalGridRequest& operator=(LocalGridRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocalGridRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalGridRequest* internal_default_instance() {
    return reinterpret_cast<const LocalGridRequest*>(
               &_LocalGridRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LocalGridRequest& a, LocalGridRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalGridRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalGridRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalGridRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalGridRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocalGridRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LocalGridRequest& from) {
    LocalGridRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalGridRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.LocalGridRequest";
  }
  protected:
  explicit LocalGridRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalGridTypeNameFieldNumber = 1,
  };
  // string local_grid_type_name = 1;
  void clear_local_grid_type_name();
  const std::string& local_grid_type_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_local_grid_type_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_local_grid_type_name();
  PROTOBUF_NODISCARD std::string* release_local_grid_type_name();
  void set_allocated_local_grid_type_name(std::string* local_grid_type_name);
  private:
  const std::string& _internal_local_grid_type_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_local_grid_type_name(const std::string& value);
  std::string* _internal_mutable_local_grid_type_name();
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.LocalGridRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_grid_type_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2flocal_5fgrid_2eproto;
};
// -------------------------------------------------------------------

class LocalGridExtent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.LocalGridExtent) */ {
 public:
  inline LocalGridExtent() : LocalGridExtent(nullptr) {}
  ~LocalGridExtent() override;
  explicit PROTOBUF_CONSTEXPR LocalGridExtent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalGridExtent(const LocalGridExtent& from);
  LocalGridExtent(LocalGridExtent&& from) noexcept
    : LocalGridExtent() {
    *this = ::std::move(from);
  }

  inline LocalGridExtent& operator=(const LocalGridExtent& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalGridExtent& operator=(LocalGridExtent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocalGridExtent& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalGridExtent* internal_default_instance() {
    return reinterpret_cast<const LocalGridExtent*>(
               &_LocalGridExtent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LocalGridExtent& a, LocalGridExtent& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalGridExtent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalGridExtent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalGridExtent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalGridExtent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocalGridExtent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LocalGridExtent& from) {
    LocalGridExtent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalGridExtent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.LocalGridExtent";
  }
  protected:
  explicit LocalGridExtent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellSizeFieldNumber = 2,
    kNumCellsXFieldNumber = 3,
    kNumCellsYFieldNumber = 4,
  };
  // double cell_size = 2;
  void clear_cell_size();
  double cell_size() const;
  void set_cell_size(double value);
  private:
  double _internal_cell_size() const;
  void _internal_set_cell_size(double value);
  public:

  // int32 num_cells_x = 3;
  void clear_num_cells_x();
  int32_t num_cells_x() const;
  void set_num_cells_x(int32_t value);
  private:
  int32_t _internal_num_cells_x() const;
  void _internal_set_num_cells_x(int32_t value);
  public:

  // int32 num_cells_y = 4;
  void clear_num_cells_y();
  int32_t num_cells_y() const;
  void set_num_cells_y(int32_t value);
  private:
  int32_t _internal_num_cells_y() const;
  void _internal_set_num_cells_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.LocalGridExtent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double cell_size_;
    int32_t num_cells_x_;
    int32_t num_cells_y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2flocal_5fgrid_2eproto;
};
// -------------------------------------------------------------------

class LocalGrid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.LocalGrid) */ {
 public:
  inline LocalGrid() : LocalGrid(nullptr) {}
  ~LocalGrid() override;
  explicit PROTOBUF_CONSTEXPR LocalGrid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalGrid(const LocalGrid& from);
  LocalGrid(LocalGrid&& from) noexcept
    : LocalGrid() {
    *this = ::std::move(from);
  }

  inline LocalGrid& operator=(const LocalGrid& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalGrid& operator=(LocalGrid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocalGrid& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalGrid* internal_default_instance() {
    return reinterpret_cast<const LocalGrid*>(
               &_LocalGrid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LocalGrid& a, LocalGrid& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalGrid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalGrid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalGrid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalGrid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocalGrid& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LocalGrid& from) {
    LocalGrid::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalGrid* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.LocalGrid";
  }
  protected:
  explicit LocalGrid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LocalGrid_CellFormat CellFormat;
  static constexpr CellFormat CELL_FORMAT_UNKNOWN =
    LocalGrid_CellFormat_CELL_FORMAT_UNKNOWN;
  static constexpr CellFormat CELL_FORMAT_FLOAT32 =
    LocalGrid_CellFormat_CELL_FORMAT_FLOAT32;
  static constexpr CellFormat CELL_FORMAT_FLOAT64 =
    LocalGrid_CellFormat_CELL_FORMAT_FLOAT64;
  static constexpr CellFormat CELL_FORMAT_INT8 =
    LocalGrid_CellFormat_CELL_FORMAT_INT8;
  static constexpr CellFormat CELL_FORMAT_UINT8 =
    LocalGrid_CellFormat_CELL_FORMAT_UINT8;
  static constexpr CellFormat CELL_FORMAT_INT16 =
    LocalGrid_CellFormat_CELL_FORMAT_INT16;
  static constexpr CellFormat CELL_FORMAT_UINT16 =
    LocalGrid_CellFormat_CELL_FORMAT_UINT16;
  static inline bool CellFormat_IsValid(int value) {
    return LocalGrid_CellFormat_IsValid(value);
  }
  static constexpr CellFormat CellFormat_MIN =
    LocalGrid_CellFormat_CellFormat_MIN;
  static constexpr CellFormat CellFormat_MAX =
    LocalGrid_CellFormat_CellFormat_MAX;
  static constexpr int CellFormat_ARRAYSIZE =
    LocalGrid_CellFormat_CellFormat_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CellFormat_descriptor() {
    return LocalGrid_CellFormat_descriptor();
  }
  template<typename T>
  static inline const std::string& CellFormat_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CellFormat>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CellFormat_Name.");
    return LocalGrid_CellFormat_Name(enum_t_value);
  }
  static inline bool CellFormat_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CellFormat* value) {
    return LocalGrid_CellFormat_Parse(name, value);
  }

  typedef LocalGrid_Encoding Encoding;
  static constexpr Encoding ENCODING_UNKNOWN =
    LocalGrid_Encoding_ENCODING_UNKNOWN;
  static constexpr Encoding ENCODING_RAW =
    LocalGrid_Encoding_ENCODING_RAW;
  static constexpr Encoding ENCODING_RLE =
    LocalGrid_Encoding_ENCODING_RLE;
  static inline bool Encoding_IsValid(int value) {
    return LocalGrid_Encoding_IsValid(value);
  }
  static constexpr Encoding Encoding_MIN =
    LocalGrid_Encoding_Encoding_MIN;
  static constexpr Encoding Encoding_MAX =
    LocalGrid_Encoding_Encoding_MAX;
  static constexpr int Encoding_ARRAYSIZE =
    LocalGrid_Encoding_Encoding_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Encoding_descriptor() {
    return LocalGrid_Encoding_descriptor();
  }
  template<typename T>
  static inline const std::string& Encoding_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Encoding>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Encoding_Name.");
    return LocalGrid_Encoding_Name(enum_t_value);
  }
  static inline bool Encoding_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Encoding* value) {
    return LocalGrid_Encoding_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRleCountsFieldNumber = 7,
    kLocalGridTypeNameFieldNumber = 1,
    kDataFieldNumber = 6,
    kFrameNameLocalGridDataFieldNumber = 11,
    kExtentFieldNumber = 3,
    kAcquisitionTimeFieldNumber = 30,
    kTransformsSnapshotFieldNumber = 31,
    kCellFormatFieldNumber = 4,
    kEncodingFieldNumber = 5,
    kCellValueScaleFieldNumber = 8,
    kCellValueOffsetFieldNumber = 9,
  };
  // repeated int32 rle_counts = 7;
  int rle_counts_size() const;
  private:
  int _internal_rle_counts_size() const;
  public:
  void clear_rle_counts();
  private:
  int32_t _internal_rle_counts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_rle_counts() const;
  void _internal_add_rle_counts(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_rle_counts();
  public:
  int32_t rle_counts(int index) const;
  void set_rle_counts(int index, int32_t value);
  void add_rle_counts(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      rle_counts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_rle_counts();

  // string local_grid_type_name = 1;
  void clear_local_grid_type_name();
  const std::string& local_grid_type_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_local_grid_type_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_local_grid_type_name();
  PROTOBUF_NODISCARD std::string* release_local_grid_type_name();
  void set_allocated_local_grid_type_name(std::string* local_grid_type_name);
  private:
  const std::string& _internal_local_grid_type_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_local_grid_type_name(const std::string& value);
  std::string* _internal_mutable_local_grid_type_name();
  public:

  // bytes data = 6;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string frame_name_local_grid_data = 11;
  void clear_frame_name_local_grid_data();
  const std::string& frame_name_local_grid_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frame_name_local_grid_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frame_name_local_grid_data();
  PROTOBUF_NODISCARD std::string* release_frame_name_local_grid_data();
  void set_allocated_frame_name_local_grid_data(std::string* frame_name_local_grid_data);
  private:
  const std::string& _internal_frame_name_local_grid_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame_name_local_grid_data(const std::string& value);
  std::string* _internal_mutable_frame_name_local_grid_data();
  public:

  // .bosdyn.api.LocalGridExtent extent = 3;
  bool has_extent() const;
  private:
  bool _internal_has_extent() const;
  public:
  void clear_extent();
  const ::bosdyn::api::LocalGridExtent& extent() const;
  PROTOBUF_NODISCARD ::bosdyn::api::LocalGridExtent* release_extent();
  ::bosdyn::api::LocalGridExtent* mutable_extent();
  void set_allocated_extent(::bosdyn::api::LocalGridExtent* extent);
  private:
  const ::bosdyn::api::LocalGridExtent& _internal_extent() const;
  ::bosdyn::api::LocalGridExtent* _internal_mutable_extent();
  public:
  void unsafe_arena_set_allocated_extent(
      ::bosdyn::api::LocalGridExtent* extent);
  ::bosdyn::api::LocalGridExtent* unsafe_arena_release_extent();

  // .google.protobuf.Timestamp acquisition_time = 30;
  bool has_acquisition_time() const;
  private:
  bool _internal_has_acquisition_time() const;
  public:
  void clear_acquisition_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& acquisition_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_acquisition_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_acquisition_time();
  void set_allocated_acquisition_time(::PROTOBUF_NAMESPACE_ID::Timestamp* acquisition_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_acquisition_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_acquisition_time();
  public:
  void unsafe_arena_set_allocated_acquisition_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* acquisition_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_acquisition_time();

  // .bosdyn.api.FrameTreeSnapshot transforms_snapshot = 31;
  bool has_transforms_snapshot() const;
  private:
  bool _internal_has_transforms_snapshot() const;
  public:
  void clear_transforms_snapshot();
  const ::bosdyn::api::FrameTreeSnapshot& transforms_snapshot() const;
  PROTOBUF_NODISCARD ::bosdyn::api::FrameTreeSnapshot* release_transforms_snapshot();
  ::bosdyn::api::FrameTreeSnapshot* mutable_transforms_snapshot();
  void set_allocated_transforms_snapshot(::bosdyn::api::FrameTreeSnapshot* transforms_snapshot);
  private:
  const ::bosdyn::api::FrameTreeSnapshot& _internal_transforms_snapshot() const;
  ::bosdyn::api::FrameTreeSnapshot* _internal_mutable_transforms_snapshot();
  public:
  void unsafe_arena_set_allocated_transforms_snapshot(
      ::bosdyn::api::FrameTreeSnapshot* transforms_snapshot);
  ::bosdyn::api::FrameTreeSnapshot* unsafe_arena_release_transforms_snapshot();

  // .bosdyn.api.LocalGrid.CellFormat cell_format = 4;
  void clear_cell_format();
  ::bosdyn::api::LocalGrid_CellFormat cell_format() const;
  void set_cell_format(::bosdyn::api::LocalGrid_CellFormat value);
  private:
  ::bosdyn::api::LocalGrid_CellFormat _internal_cell_format() const;
  void _internal_set_cell_format(::bosdyn::api::LocalGrid_CellFormat value);
  public:

  // .bosdyn.api.LocalGrid.Encoding encoding = 5;
  void clear_encoding();
  ::bosdyn::api::LocalGrid_Encoding encoding() const;
  void set_encoding(::bosdyn::api::LocalGrid_Encoding value);
  private:
  ::bosdyn::api::LocalGrid_Encoding _internal_encoding() const;
  void _internal_set_encoding(::bosdyn::api::LocalGrid_Encoding value);
  public:

  // double cell_value_scale = 8;
  void clear_cell_value_scale();
  double cell_value_scale() const;
  void set_cell_value_scale(double value);
  private:
  double _internal_cell_value_scale() const;
  void _internal_set_cell_value_scale(double value);
  public:

  // double cell_value_offset = 9;
  void clear_cell_value_offset();
  double cell_value_offset() const;
  void set_cell_value_offset(double value);
  private:
  double _internal_cell_value_offset() const;
  void _internal_set_cell_value_offset(double value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.LocalGrid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > rle_counts_;
    mutable std::atomic<int> _rle_counts_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_grid_type_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_name_local_grid_data_;
    ::bosdyn::api::LocalGridExtent* extent_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* acquisition_time_;
    ::bosdyn::api::FrameTreeSnapshot* transforms_snapshot_;
    int cell_format_;
    int encoding_;
    double cell_value_scale_;
    double cell_value_offset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2flocal_5fgrid_2eproto;
};
// -------------------------------------------------------------------

class LocalGridResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.LocalGridResponse) */ {
 public:
  inline LocalGridResponse() : LocalGridResponse(nullptr) {}
  ~LocalGridResponse() override;
  explicit PROTOBUF_CONSTEXPR LocalGridResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalGridResponse(const LocalGridResponse& from);
  LocalGridResponse(LocalGridResponse&& from) noexcept
    : LocalGridResponse() {
    *this = ::std::move(from);
  }

  inline LocalGridResponse& operator=(const LocalGridResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalGridResponse& operator=(LocalGridResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocalGridResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalGridResponse* internal_default_instance() {
    return reinterpret_cast<const LocalGridResponse*>(
               &_LocalGridResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LocalGridResponse& a, LocalGridResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalGridResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalGridResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalGridResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalGridResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocalGridResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LocalGridResponse& from) {
    LocalGridResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalGridResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.LocalGridResponse";
  }
  protected:
  explicit LocalGridResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LocalGridResponse_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    LocalGridResponse_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_OK =
    LocalGridResponse_Status_STATUS_OK;
  static constexpr Status STATUS_NO_SUCH_GRID =
    LocalGridResponse_Status_STATUS_NO_SUCH_GRID;
  static constexpr Status STATUS_DATA_UNAVAILABLE =
    LocalGridResponse_Status_STATUS_DATA_UNAVAILABLE;
  static constexpr Status STATUS_DATA_INVALID =
    LocalGridResponse_Status_STATUS_DATA_INVALID;
  static inline bool Status_IsValid(int value) {
    return LocalGridResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    LocalGridResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    LocalGridResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    LocalGridResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return LocalGridResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return LocalGridResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return LocalGridResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLocalGridTypeNameFieldNumber = 1,
    kLocalGridFieldNumber = 3,
    kStatusFieldNumber = 2,
  };
  // string local_grid_type_name = 1;
  void clear_local_grid_type_name();
  const std::string& local_grid_type_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_local_grid_type_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_local_grid_type_name();
  PROTOBUF_NODISCARD std::string* release_local_grid_type_name();
  void set_allocated_local_grid_type_name(std::string* local_grid_type_name);
  private:
  const std::string& _internal_local_grid_type_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_local_grid_type_name(const std::string& value);
  std::string* _internal_mutable_local_grid_type_name();
  public:

  // .bosdyn.api.LocalGrid local_grid = 3;
  bool has_local_grid() const;
  private:
  bool _internal_has_local_grid() const;
  public:
  void clear_local_grid();
  const ::bosdyn::api::LocalGrid& local_grid() const;
  PROTOBUF_NODISCARD ::bosdyn::api::LocalGrid* release_local_grid();
  ::bosdyn::api::LocalGrid* mutable_local_grid();
  void set_allocated_local_grid(::bosdyn::api::LocalGrid* local_grid);
  private:
  const ::bosdyn::api::LocalGrid& _internal_local_grid() const;
  ::bosdyn::api::LocalGrid* _internal_mutable_local_grid();
  public:
  void unsafe_arena_set_allocated_local_grid(
      ::bosdyn::api::LocalGrid* local_grid);
  ::bosdyn::api::LocalGrid* unsafe_arena_release_local_grid();

  // .bosdyn.api.LocalGridResponse.Status status = 2;
  void clear_status();
  ::bosdyn::api::LocalGridResponse_Status status() const;
  void set_status(::bosdyn::api::LocalGridResponse_Status value);
  private:
  ::bosdyn::api::LocalGridResponse_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::LocalGridResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.LocalGridResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_grid_type_name_;
    ::bosdyn::api::LocalGrid* local_grid_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2flocal_5fgrid_2eproto;
};
// -------------------------------------------------------------------

class GetLocalGridTypesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.GetLocalGridTypesRequest) */ {
 public:
  inline GetLocalGridTypesRequest() : GetLocalGridTypesRequest(nullptr) {}
  ~GetLocalGridTypesRequest() override;
  explicit PROTOBUF_CONSTEXPR GetLocalGridTypesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLocalGridTypesRequest(const GetLocalGridTypesRequest& from);
  GetLocalGridTypesRequest(GetLocalGridTypesRequest&& from) noexcept
    : GetLocalGridTypesRequest() {
    *this = ::std::move(from);
  }

  inline GetLocalGridTypesRequest& operator=(const GetLocalGridTypesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLocalGridTypesRequest& operator=(GetLocalGridTypesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLocalGridTypesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLocalGridTypesRequest* internal_default_instance() {
    return reinterpret_cast<const GetLocalGridTypesRequest*>(
               &_GetLocalGridTypesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetLocalGridTypesRequest& a, GetLocalGridTypesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLocalGridTypesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLocalGridTypesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLocalGridTypesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLocalGridTypesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLocalGridTypesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetLocalGridTypesRequest& from) {
    GetLocalGridTypesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLocalGridTypesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.GetLocalGridTypesRequest";
  }
  protected:
  explicit GetLocalGridTypesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.GetLocalGridTypesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::RequestHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2flocal_5fgrid_2eproto;
};
// -------------------------------------------------------------------

class GetLocalGridTypesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.GetLocalGridTypesResponse) */ {
 public:
  inline GetLocalGridTypesResponse() : GetLocalGridTypesResponse(nullptr) {}
  ~GetLocalGridTypesResponse() override;
  explicit PROTOBUF_CONSTEXPR GetLocalGridTypesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLocalGridTypesResponse(const GetLocalGridTypesResponse& from);
  GetLocalGridTypesResponse(GetLocalGridTypesResponse&& from) noexcept
    : GetLocalGridTypesResponse() {
    *this = ::std::move(from);
  }

  inline GetLocalGridTypesResponse& operator=(const GetLocalGridTypesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLocalGridTypesResponse& operator=(GetLocalGridTypesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLocalGridTypesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLocalGridTypesResponse* internal_default_instance() {
    return reinterpret_cast<const GetLocalGridTypesResponse*>(
               &_GetLocalGridTypesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetLocalGridTypesResponse& a, GetLocalGridTypesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLocalGridTypesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLocalGridTypesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLocalGridTypesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLocalGridTypesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLocalGridTypesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetLocalGridTypesResponse& from) {
    GetLocalGridTypesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLocalGridTypesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.GetLocalGridTypesResponse";
  }
  protected:
  explicit GetLocalGridTypesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalGridTypeFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .bosdyn.api.LocalGridType local_grid_type = 2;
  int local_grid_type_size() const;
  private:
  int _internal_local_grid_type_size() const;
  public:
  void clear_local_grid_type();
  ::bosdyn::api::LocalGridType* mutable_local_grid_type(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LocalGridType >*
      mutable_local_grid_type();
  private:
  const ::bosdyn::api::LocalGridType& _internal_local_grid_type(int index) const;
  ::bosdyn::api::LocalGridType* _internal_add_local_grid_type();
  public:
  const ::bosdyn::api::LocalGridType& local_grid_type(int index) const;
  ::bosdyn::api::LocalGridType* add_local_grid_type();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LocalGridType >&
      local_grid_type() const;

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.GetLocalGridTypesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LocalGridType > local_grid_type_;
    ::bosdyn::api::ResponseHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2flocal_5fgrid_2eproto;
};
// -------------------------------------------------------------------

class GetLocalGridsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.GetLocalGridsRequest) */ {
 public:
  inline GetLocalGridsRequest() : GetLocalGridsRequest(nullptr) {}
  ~GetLocalGridsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetLocalGridsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLocalGridsRequest(const GetLocalGridsRequest& from);
  GetLocalGridsRequest(GetLocalGridsRequest&& from) noexcept
    : GetLocalGridsRequest() {
    *this = ::std::move(from);
  }

  inline GetLocalGridsRequest& operator=(const GetLocalGridsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLocalGridsRequest& operator=(GetLocalGridsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLocalGridsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLocalGridsRequest* internal_default_instance() {
    return reinterpret_cast<const GetLocalGridsRequest*>(
               &_GetLocalGridsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetLocalGridsRequest& a, GetLocalGridsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLocalGridsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLocalGridsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLocalGridsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLocalGridsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLocalGridsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetLocalGridsRequest& from) {
    GetLocalGridsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLocalGridsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.GetLocalGridsRequest";
  }
  protected:
  explicit GetLocalGridsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalGridRequestsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .bosdyn.api.LocalGridRequest local_grid_requests = 2;
  int local_grid_requests_size() const;
  private:
  int _internal_local_grid_requests_size() const;
  public:
  void clear_local_grid_requests();
  ::bosdyn::api::LocalGridRequest* mutable_local_grid_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LocalGridRequest >*
      mutable_local_grid_requests();
  private:
  const ::bosdyn::api::LocalGridRequest& _internal_local_grid_requests(int index) const;
  ::bosdyn::api::LocalGridRequest* _internal_add_local_grid_requests();
  public:
  const ::bosdyn::api::LocalGridRequest& local_grid_requests(int index) const;
  ::bosdyn::api::LocalGridRequest* add_local_grid_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LocalGridRequest >&
      local_grid_requests() const;

  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.GetLocalGridsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LocalGridRequest > local_grid_requests_;
    ::bosdyn::api::RequestHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2flocal_5fgrid_2eproto;
};
// -------------------------------------------------------------------

class GetLocalGridsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.GetLocalGridsResponse) */ {
 public:
  inline GetLocalGridsResponse() : GetLocalGridsResponse(nullptr) {}
  ~GetLocalGridsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetLocalGridsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLocalGridsResponse(const GetLocalGridsResponse& from);
  GetLocalGridsResponse(GetLocalGridsResponse&& from) noexcept
    : GetLocalGridsResponse() {
    *this = ::std::move(from);
  }

  inline GetLocalGridsResponse& operator=(const GetLocalGridsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLocalGridsResponse& operator=(GetLocalGridsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLocalGridsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLocalGridsResponse* internal_default_instance() {
    return reinterpret_cast<const GetLocalGridsResponse*>(
               &_GetLocalGridsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetLocalGridsResponse& a, GetLocalGridsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLocalGridsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLocalGridsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLocalGridsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLocalGridsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLocalGridsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetLocalGridsResponse& from) {
    GetLocalGridsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLocalGridsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.GetLocalGridsResponse";
  }
  protected:
  explicit GetLocalGridsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalGridResponsesFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kNumLocalGridErrorsFieldNumber = 3,
  };
  // repeated .bosdyn.api.LocalGridResponse local_grid_responses = 2;
  int local_grid_responses_size() const;
  private:
  int _internal_local_grid_responses_size() const;
  public:
  void clear_local_grid_responses();
  ::bosdyn::api::LocalGridResponse* mutable_local_grid_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LocalGridResponse >*
      mutable_local_grid_responses();
  private:
  const ::bosdyn::api::LocalGridResponse& _internal_local_grid_responses(int index) const;
  ::bosdyn::api::LocalGridResponse* _internal_add_local_grid_responses();
  public:
  const ::bosdyn::api::LocalGridResponse& local_grid_responses(int index) const;
  ::bosdyn::api::LocalGridResponse* add_local_grid_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LocalGridResponse >&
      local_grid_responses() const;

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // int32 num_local_grid_errors = 3;
  void clear_num_local_grid_errors();
  int32_t num_local_grid_errors() const;
  void set_num_local_grid_errors(int32_t value);
  private:
  int32_t _internal_num_local_grid_errors() const;
  void _internal_set_num_local_grid_errors(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.GetLocalGridsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LocalGridResponse > local_grid_responses_;
    ::bosdyn::api::ResponseHeader* header_;
    int32_t num_local_grid_errors_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2flocal_5fgrid_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LocalGridType

// string name = 1;
inline void LocalGridType::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& LocalGridType::name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LocalGridType.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocalGridType::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.LocalGridType.name)
}
inline std::string* LocalGridType::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.LocalGridType.name)
  return _s;
}
inline const std::string& LocalGridType::_internal_name() const {
  return _impl_.name_.Get();
}
inline void LocalGridType::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* LocalGridType::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* LocalGridType::release_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.LocalGridType.name)
  return _impl_.name_.Release();
}
inline void LocalGridType::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.LocalGridType.name)
}

// -------------------------------------------------------------------

// LocalGridRequest

// string local_grid_type_name = 1;
inline void LocalGridRequest::clear_local_grid_type_name() {
  _impl_.local_grid_type_name_.ClearToEmpty();
}
inline const std::string& LocalGridRequest::local_grid_type_name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LocalGridRequest.local_grid_type_name)
  return _internal_local_grid_type_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocalGridRequest::set_local_grid_type_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.local_grid_type_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.LocalGridRequest.local_grid_type_name)
}
inline std::string* LocalGridRequest::mutable_local_grid_type_name() {
  std::string* _s = _internal_mutable_local_grid_type_name();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.LocalGridRequest.local_grid_type_name)
  return _s;
}
inline const std::string& LocalGridRequest::_internal_local_grid_type_name() const {
  return _impl_.local_grid_type_name_.Get();
}
inline void LocalGridRequest::_internal_set_local_grid_type_name(const std::string& value) {
  
  _impl_.local_grid_type_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LocalGridRequest::_internal_mutable_local_grid_type_name() {
  
  return _impl_.local_grid_type_name_.Mutable(GetArenaForAllocation());
}
inline std::string* LocalGridRequest::release_local_grid_type_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.LocalGridRequest.local_grid_type_name)
  return _impl_.local_grid_type_name_.Release();
}
inline void LocalGridRequest::set_allocated_local_grid_type_name(std::string* local_grid_type_name) {
  if (local_grid_type_name != nullptr) {
    
  } else {
    
  }
  _impl_.local_grid_type_name_.SetAllocated(local_grid_type_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.local_grid_type_name_.IsDefault()) {
    _impl_.local_grid_type_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.LocalGridRequest.local_grid_type_name)
}

// -------------------------------------------------------------------

// LocalGridExtent

// double cell_size = 2;
inline void LocalGridExtent::clear_cell_size() {
  _impl_.cell_size_ = 0;
}
inline double LocalGridExtent::_internal_cell_size() const {
  return _impl_.cell_size_;
}
inline double LocalGridExtent::cell_size() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LocalGridExtent.cell_size)
  return _internal_cell_size();
}
inline void LocalGridExtent::_internal_set_cell_size(double value) {
  
  _impl_.cell_size_ = value;
}
inline void LocalGridExtent::set_cell_size(double value) {
  _internal_set_cell_size(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.LocalGridExtent.cell_size)
}

// int32 num_cells_x = 3;
inline void LocalGridExtent::clear_num_cells_x() {
  _impl_.num_cells_x_ = 0;
}
inline int32_t LocalGridExtent::_internal_num_cells_x() const {
  return _impl_.num_cells_x_;
}
inline int32_t LocalGridExtent::num_cells_x() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LocalGridExtent.num_cells_x)
  return _internal_num_cells_x();
}
inline void LocalGridExtent::_internal_set_num_cells_x(int32_t value) {
  
  _impl_.num_cells_x_ = value;
}
inline void LocalGridExtent::set_num_cells_x(int32_t value) {
  _internal_set_num_cells_x(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.LocalGridExtent.num_cells_x)
}

// int32 num_cells_y = 4;
inline void LocalGridExtent::clear_num_cells_y() {
  _impl_.num_cells_y_ = 0;
}
inline int32_t LocalGridExtent::_internal_num_cells_y() const {
  return _impl_.num_cells_y_;
}
inline int32_t LocalGridExtent::num_cells_y() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LocalGridExtent.num_cells_y)
  return _internal_num_cells_y();
}
inline void LocalGridExtent::_internal_set_num_cells_y(int32_t value) {
  
  _impl_.num_cells_y_ = value;
}
inline void LocalGridExtent::set_num_cells_y(int32_t value) {
  _internal_set_num_cells_y(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.LocalGridExtent.num_cells_y)
}

// -------------------------------------------------------------------

// LocalGrid

// string local_grid_type_name = 1;
inline void LocalGrid::clear_local_grid_type_name() {
  _impl_.local_grid_type_name_.ClearToEmpty();
}
inline const std::string& LocalGrid::local_grid_type_name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LocalGrid.local_grid_type_name)
  return _internal_local_grid_type_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocalGrid::set_local_grid_type_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.local_grid_type_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.LocalGrid.local_grid_type_name)
}
inline std::string* LocalGrid::mutable_local_grid_type_name() {
  std::string* _s = _internal_mutable_local_grid_type_name();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.LocalGrid.local_grid_type_name)
  return _s;
}
inline const std::string& LocalGrid::_internal_local_grid_type_name() const {
  return _impl_.local_grid_type_name_.Get();
}
inline void LocalGrid::_internal_set_local_grid_type_name(const std::string& value) {
  
  _impl_.local_grid_type_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LocalGrid::_internal_mutable_local_grid_type_name() {
  
  return _impl_.local_grid_type_name_.Mutable(GetArenaForAllocation());
}
inline std::string* LocalGrid::release_local_grid_type_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.LocalGrid.local_grid_type_name)
  return _impl_.local_grid_type_name_.Release();
}
inline void LocalGrid::set_allocated_local_grid_type_name(std::string* local_grid_type_name) {
  if (local_grid_type_name != nullptr) {
    
  } else {
    
  }
  _impl_.local_grid_type_name_.SetAllocated(local_grid_type_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.local_grid_type_name_.IsDefault()) {
    _impl_.local_grid_type_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.LocalGrid.local_grid_type_name)
}

// .google.protobuf.Timestamp acquisition_time = 30;
inline bool LocalGrid::_internal_has_acquisition_time() const {
  return this != internal_default_instance() && _impl_.acquisition_time_ != nullptr;
}
inline bool LocalGrid::has_acquisition_time() const {
  return _internal_has_acquisition_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LocalGrid::_internal_acquisition_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.acquisition_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LocalGrid::acquisition_time() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LocalGrid.acquisition_time)
  return _internal_acquisition_time();
}
inline void LocalGrid::unsafe_arena_set_allocated_acquisition_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* acquisition_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.acquisition_time_);
  }
  _impl_.acquisition_time_ = acquisition_time;
  if (acquisition_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.LocalGrid.acquisition_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LocalGrid::release_acquisition_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.acquisition_time_;
  _impl_.acquisition_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LocalGrid::unsafe_arena_release_acquisition_time() {
  // @@protoc_insertion_point(field_release:bosdyn.api.LocalGrid.acquisition_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.acquisition_time_;
  _impl_.acquisition_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LocalGrid::_internal_mutable_acquisition_time() {
  
  if (_impl_.acquisition_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.acquisition_time_ = p;
  }
  return _impl_.acquisition_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LocalGrid::mutable_acquisition_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_acquisition_time();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.LocalGrid.acquisition_time)
  return _msg;
}
inline void LocalGrid::set_allocated_acquisition_time(::PROTOBUF_NAMESPACE_ID::Timestamp* acquisition_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.acquisition_time_);
  }
  if (acquisition_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acquisition_time));
    if (message_arena != submessage_arena) {
      acquisition_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acquisition_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.acquisition_time_ = acquisition_time;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.LocalGrid.acquisition_time)
}

// .bosdyn.api.FrameTreeSnapshot transforms_snapshot = 31;
inline bool LocalGrid::_internal_has_transforms_snapshot() const {
  return this != internal_default_instance() && _impl_.transforms_snapshot_ != nullptr;
}
inline bool LocalGrid::has_transforms_snapshot() const {
  return _internal_has_transforms_snapshot();
}
inline const ::bosdyn::api::FrameTreeSnapshot& LocalGrid::_internal_transforms_snapshot() const {
  const ::bosdyn::api::FrameTreeSnapshot* p = _impl_.transforms_snapshot_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::FrameTreeSnapshot&>(
      ::bosdyn::api::_FrameTreeSnapshot_default_instance_);
}
inline const ::bosdyn::api::FrameTreeSnapshot& LocalGrid::transforms_snapshot() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LocalGrid.transforms_snapshot)
  return _internal_transforms_snapshot();
}
inline void LocalGrid::unsafe_arena_set_allocated_transforms_snapshot(
    ::bosdyn::api::FrameTreeSnapshot* transforms_snapshot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transforms_snapshot_);
  }
  _impl_.transforms_snapshot_ = transforms_snapshot;
  if (transforms_snapshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.LocalGrid.transforms_snapshot)
}
inline ::bosdyn::api::FrameTreeSnapshot* LocalGrid::release_transforms_snapshot() {
  
  ::bosdyn::api::FrameTreeSnapshot* temp = _impl_.transforms_snapshot_;
  _impl_.transforms_snapshot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::FrameTreeSnapshot* LocalGrid::unsafe_arena_release_transforms_snapshot() {
  // @@protoc_insertion_point(field_release:bosdyn.api.LocalGrid.transforms_snapshot)
  
  ::bosdyn::api::FrameTreeSnapshot* temp = _impl_.transforms_snapshot_;
  _impl_.transforms_snapshot_ = nullptr;
  return temp;
}
inline ::bosdyn::api::FrameTreeSnapshot* LocalGrid::_internal_mutable_transforms_snapshot() {
  
  if (_impl_.transforms_snapshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::FrameTreeSnapshot>(GetArenaForAllocation());
    _impl_.transforms_snapshot_ = p;
  }
  return _impl_.transforms_snapshot_;
}
inline ::bosdyn::api::FrameTreeSnapshot* LocalGrid::mutable_transforms_snapshot() {
  ::bosdyn::api::FrameTreeSnapshot* _msg = _internal_mutable_transforms_snapshot();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.LocalGrid.transforms_snapshot)
  return _msg;
}
inline void LocalGrid::set_allocated_transforms_snapshot(::bosdyn::api::FrameTreeSnapshot* transforms_snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transforms_snapshot_);
  }
  if (transforms_snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transforms_snapshot));
    if (message_arena != submessage_arena) {
      transforms_snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transforms_snapshot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transforms_snapshot_ = transforms_snapshot;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.LocalGrid.transforms_snapshot)
}

// string frame_name_local_grid_data = 11;
inline void LocalGrid::clear_frame_name_local_grid_data() {
  _impl_.frame_name_local_grid_data_.ClearToEmpty();
}
inline const std::string& LocalGrid::frame_name_local_grid_data() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LocalGrid.frame_name_local_grid_data)
  return _internal_frame_name_local_grid_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocalGrid::set_frame_name_local_grid_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.frame_name_local_grid_data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.LocalGrid.frame_name_local_grid_data)
}
inline std::string* LocalGrid::mutable_frame_name_local_grid_data() {
  std::string* _s = _internal_mutable_frame_name_local_grid_data();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.LocalGrid.frame_name_local_grid_data)
  return _s;
}
inline const std::string& LocalGrid::_internal_frame_name_local_grid_data() const {
  return _impl_.frame_name_local_grid_data_.Get();
}
inline void LocalGrid::_internal_set_frame_name_local_grid_data(const std::string& value) {
  
  _impl_.frame_name_local_grid_data_.Set(value, GetArenaForAllocation());
}
inline std::string* LocalGrid::_internal_mutable_frame_name_local_grid_data() {
  
  return _impl_.frame_name_local_grid_data_.Mutable(GetArenaForAllocation());
}
inline std::string* LocalGrid::release_frame_name_local_grid_data() {
  // @@protoc_insertion_point(field_release:bosdyn.api.LocalGrid.frame_name_local_grid_data)
  return _impl_.frame_name_local_grid_data_.Release();
}
inline void LocalGrid::set_allocated_frame_name_local_grid_data(std::string* frame_name_local_grid_data) {
  if (frame_name_local_grid_data != nullptr) {
    
  } else {
    
  }
  _impl_.frame_name_local_grid_data_.SetAllocated(frame_name_local_grid_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.frame_name_local_grid_data_.IsDefault()) {
    _impl_.frame_name_local_grid_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.LocalGrid.frame_name_local_grid_data)
}

// .bosdyn.api.LocalGridExtent extent = 3;
inline bool LocalGrid::_internal_has_extent() const {
  return this != internal_default_instance() && _impl_.extent_ != nullptr;
}
inline bool LocalGrid::has_extent() const {
  return _internal_has_extent();
}
inline void LocalGrid::clear_extent() {
  if (GetArenaForAllocation() == nullptr && _impl_.extent_ != nullptr) {
    delete _impl_.extent_;
  }
  _impl_.extent_ = nullptr;
}
inline const ::bosdyn::api::LocalGridExtent& LocalGrid::_internal_extent() const {
  const ::bosdyn::api::LocalGridExtent* p = _impl_.extent_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::LocalGridExtent&>(
      ::bosdyn::api::_LocalGridExtent_default_instance_);
}
inline const ::bosdyn::api::LocalGridExtent& LocalGrid::extent() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LocalGrid.extent)
  return _internal_extent();
}
inline void LocalGrid::unsafe_arena_set_allocated_extent(
    ::bosdyn::api::LocalGridExtent* extent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extent_);
  }
  _impl_.extent_ = extent;
  if (extent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.LocalGrid.extent)
}
inline ::bosdyn::api::LocalGridExtent* LocalGrid::release_extent() {
  
  ::bosdyn::api::LocalGridExtent* temp = _impl_.extent_;
  _impl_.extent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::LocalGridExtent* LocalGrid::unsafe_arena_release_extent() {
  // @@protoc_insertion_point(field_release:bosdyn.api.LocalGrid.extent)
  
  ::bosdyn::api::LocalGridExtent* temp = _impl_.extent_;
  _impl_.extent_ = nullptr;
  return temp;
}
inline ::bosdyn::api::LocalGridExtent* LocalGrid::_internal_mutable_extent() {
  
  if (_impl_.extent_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::LocalGridExtent>(GetArenaForAllocation());
    _impl_.extent_ = p;
  }
  return _impl_.extent_;
}
inline ::bosdyn::api::LocalGridExtent* LocalGrid::mutable_extent() {
  ::bosdyn::api::LocalGridExtent* _msg = _internal_mutable_extent();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.LocalGrid.extent)
  return _msg;
}
inline void LocalGrid::set_allocated_extent(::bosdyn::api::LocalGridExtent* extent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.extent_;
  }
  if (extent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(extent);
    if (message_arena != submessage_arena) {
      extent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extent, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.extent_ = extent;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.LocalGrid.extent)
}

// .bosdyn.api.LocalGrid.CellFormat cell_format = 4;
inline void LocalGrid::clear_cell_format() {
  _impl_.cell_format_ = 0;
}
inline ::bosdyn::api::LocalGrid_CellFormat LocalGrid::_internal_cell_format() const {
  return static_cast< ::bosdyn::api::LocalGrid_CellFormat >(_impl_.cell_format_);
}
inline ::bosdyn::api::LocalGrid_CellFormat LocalGrid::cell_format() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LocalGrid.cell_format)
  return _internal_cell_format();
}
inline void LocalGrid::_internal_set_cell_format(::bosdyn::api::LocalGrid_CellFormat value) {
  
  _impl_.cell_format_ = value;
}
inline void LocalGrid::set_cell_format(::bosdyn::api::LocalGrid_CellFormat value) {
  _internal_set_cell_format(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.LocalGrid.cell_format)
}

// .bosdyn.api.LocalGrid.Encoding encoding = 5;
inline void LocalGrid::clear_encoding() {
  _impl_.encoding_ = 0;
}
inline ::bosdyn::api::LocalGrid_Encoding LocalGrid::_internal_encoding() const {
  return static_cast< ::bosdyn::api::LocalGrid_Encoding >(_impl_.encoding_);
}
inline ::bosdyn::api::LocalGrid_Encoding LocalGrid::encoding() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LocalGrid.encoding)
  return _internal_encoding();
}
inline void LocalGrid::_internal_set_encoding(::bosdyn::api::LocalGrid_Encoding value) {
  
  _impl_.encoding_ = value;
}
inline void LocalGrid::set_encoding(::bosdyn::api::LocalGrid_Encoding value) {
  _internal_set_encoding(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.LocalGrid.encoding)
}

// bytes data = 6;
inline void LocalGrid::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& LocalGrid::data() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LocalGrid.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocalGrid::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.LocalGrid.data)
}
inline std::string* LocalGrid::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.LocalGrid.data)
  return _s;
}
inline const std::string& LocalGrid::_internal_data() const {
  return _impl_.data_.Get();
}
inline void LocalGrid::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* LocalGrid::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* LocalGrid::release_data() {
  // @@protoc_insertion_point(field_release:bosdyn.api.LocalGrid.data)
  return _impl_.data_.Release();
}
inline void LocalGrid::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.LocalGrid.data)
}

// repeated int32 rle_counts = 7;
inline int LocalGrid::_internal_rle_counts_size() const {
  return _impl_.rle_counts_.size();
}
inline int LocalGrid::rle_counts_size() const {
  return _internal_rle_counts_size();
}
inline void LocalGrid::clear_rle_counts() {
  _impl_.rle_counts_.Clear();
}
inline int32_t LocalGrid::_internal_rle_counts(int index) const {
  return _impl_.rle_counts_.Get(index);
}
inline int32_t LocalGrid::rle_counts(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LocalGrid.rle_counts)
  return _internal_rle_counts(index);
}
inline void LocalGrid::set_rle_counts(int index, int32_t value) {
  _impl_.rle_counts_.Set(index, value);
  // @@protoc_insertion_point(field_set:bosdyn.api.LocalGrid.rle_counts)
}
inline void LocalGrid::_internal_add_rle_counts(int32_t value) {
  _impl_.rle_counts_.Add(value);
}
inline void LocalGrid::add_rle_counts(int32_t value) {
  _internal_add_rle_counts(value);
  // @@protoc_insertion_point(field_add:bosdyn.api.LocalGrid.rle_counts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
LocalGrid::_internal_rle_counts() const {
  return _impl_.rle_counts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
LocalGrid::rle_counts() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.LocalGrid.rle_counts)
  return _internal_rle_counts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
LocalGrid::_internal_mutable_rle_counts() {
  return &_impl_.rle_counts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
LocalGrid::mutable_rle_counts() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.LocalGrid.rle_counts)
  return _internal_mutable_rle_counts();
}

// double cell_value_scale = 8;
inline void LocalGrid::clear_cell_value_scale() {
  _impl_.cell_value_scale_ = 0;
}
inline double LocalGrid::_internal_cell_value_scale() const {
  return _impl_.cell_value_scale_;
}
inline double LocalGrid::cell_value_scale() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LocalGrid.cell_value_scale)
  return _internal_cell_value_scale();
}
inline void LocalGrid::_internal_set_cell_value_scale(double value) {
  
  _impl_.cell_value_scale_ = value;
}
inline void LocalGrid::set_cell_value_scale(double value) {
  _internal_set_cell_value_scale(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.LocalGrid.cell_value_scale)
}

// double cell_value_offset = 9;
inline void LocalGrid::clear_cell_value_offset() {
  _impl_.cell_value_offset_ = 0;
}
inline double LocalGrid::_internal_cell_value_offset() const {
  return _impl_.cell_value_offset_;
}
inline double LocalGrid::cell_value_offset() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LocalGrid.cell_value_offset)
  return _internal_cell_value_offset();
}
inline void LocalGrid::_internal_set_cell_value_offset(double value) {
  
  _impl_.cell_value_offset_ = value;
}
inline void LocalGrid::set_cell_value_offset(double value) {
  _internal_set_cell_value_offset(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.LocalGrid.cell_value_offset)
}

// -------------------------------------------------------------------

// LocalGridResponse

// string local_grid_type_name = 1;
inline void LocalGridResponse::clear_local_grid_type_name() {
  _impl_.local_grid_type_name_.ClearToEmpty();
}
inline const std::string& LocalGridResponse::local_grid_type_name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LocalGridResponse.local_grid_type_name)
  return _internal_local_grid_type_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocalGridResponse::set_local_grid_type_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.local_grid_type_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.LocalGridResponse.local_grid_type_name)
}
inline std::string* LocalGridResponse::mutable_local_grid_type_name() {
  std::string* _s = _internal_mutable_local_grid_type_name();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.LocalGridResponse.local_grid_type_name)
  return _s;
}
inline const std::string& LocalGridResponse::_internal_local_grid_type_name() const {
  return _impl_.local_grid_type_name_.Get();
}
inline void LocalGridResponse::_internal_set_local_grid_type_name(const std::string& value) {
  
  _impl_.local_grid_type_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LocalGridResponse::_internal_mutable_local_grid_type_name() {
  
  return _impl_.local_grid_type_name_.Mutable(GetArenaForAllocation());
}
inline std::string* LocalGridResponse::release_local_grid_type_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.LocalGridResponse.local_grid_type_name)
  return _impl_.local_grid_type_name_.Release();
}
inline void LocalGridResponse::set_allocated_local_grid_type_name(std::string* local_grid_type_name) {
  if (local_grid_type_name != nullptr) {
    
  } else {
    
  }
  _impl_.local_grid_type_name_.SetAllocated(local_grid_type_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.local_grid_type_name_.IsDefault()) {
    _impl_.local_grid_type_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.LocalGridResponse.local_grid_type_name)
}

// .bosdyn.api.LocalGridResponse.Status status = 2;
inline void LocalGridResponse::clear_status() {
  _impl_.status_ = 0;
}
inline ::bosdyn::api::LocalGridResponse_Status LocalGridResponse::_internal_status() const {
  return static_cast< ::bosdyn::api::LocalGridResponse_Status >(_impl_.status_);
}
inline ::bosdyn::api::LocalGridResponse_Status LocalGridResponse::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LocalGridResponse.status)
  return _internal_status();
}
inline void LocalGridResponse::_internal_set_status(::bosdyn::api::LocalGridResponse_Status value) {
  
  _impl_.status_ = value;
}
inline void LocalGridResponse::set_status(::bosdyn::api::LocalGridResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.LocalGridResponse.status)
}

// .bosdyn.api.LocalGrid local_grid = 3;
inline bool LocalGridResponse::_internal_has_local_grid() const {
  return this != internal_default_instance() && _impl_.local_grid_ != nullptr;
}
inline bool LocalGridResponse::has_local_grid() const {
  return _internal_has_local_grid();
}
inline void LocalGridResponse::clear_local_grid() {
  if (GetArenaForAllocation() == nullptr && _impl_.local_grid_ != nullptr) {
    delete _impl_.local_grid_;
  }
  _impl_.local_grid_ = nullptr;
}
inline const ::bosdyn::api::LocalGrid& LocalGridResponse::_internal_local_grid() const {
  const ::bosdyn::api::LocalGrid* p = _impl_.local_grid_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::LocalGrid&>(
      ::bosdyn::api::_LocalGrid_default_instance_);
}
inline const ::bosdyn::api::LocalGrid& LocalGridResponse::local_grid() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LocalGridResponse.local_grid)
  return _internal_local_grid();
}
inline void LocalGridResponse::unsafe_arena_set_allocated_local_grid(
    ::bosdyn::api::LocalGrid* local_grid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.local_grid_);
  }
  _impl_.local_grid_ = local_grid;
  if (local_grid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.LocalGridResponse.local_grid)
}
inline ::bosdyn::api::LocalGrid* LocalGridResponse::release_local_grid() {
  
  ::bosdyn::api::LocalGrid* temp = _impl_.local_grid_;
  _impl_.local_grid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::LocalGrid* LocalGridResponse::unsafe_arena_release_local_grid() {
  // @@protoc_insertion_point(field_release:bosdyn.api.LocalGridResponse.local_grid)
  
  ::bosdyn::api::LocalGrid* temp = _impl_.local_grid_;
  _impl_.local_grid_ = nullptr;
  return temp;
}
inline ::bosdyn::api::LocalGrid* LocalGridResponse::_internal_mutable_local_grid() {
  
  if (_impl_.local_grid_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::LocalGrid>(GetArenaForAllocation());
    _impl_.local_grid_ = p;
  }
  return _impl_.local_grid_;
}
inline ::bosdyn::api::LocalGrid* LocalGridResponse::mutable_local_grid() {
  ::bosdyn::api::LocalGrid* _msg = _internal_mutable_local_grid();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.LocalGridResponse.local_grid)
  return _msg;
}
inline void LocalGridResponse::set_allocated_local_grid(::bosdyn::api::LocalGrid* local_grid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.local_grid_;
  }
  if (local_grid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(local_grid);
    if (message_arena != submessage_arena) {
      local_grid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_grid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.local_grid_ = local_grid;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.LocalGridResponse.local_grid)
}

// -------------------------------------------------------------------

// GetLocalGridTypesRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool GetLocalGridTypesRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool GetLocalGridTypesRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& GetLocalGridTypesRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RequestHeader&>(
      ::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& GetLocalGridTypesRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetLocalGridTypesRequest.header)
  return _internal_header();
}
inline void GetLocalGridTypesRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GetLocalGridTypesRequest.header)
}
inline ::bosdyn::api::RequestHeader* GetLocalGridTypesRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetLocalGridTypesRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GetLocalGridTypesRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetLocalGridTypesRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::RequestHeader* GetLocalGridTypesRequest::mutable_header() {
  ::bosdyn::api::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GetLocalGridTypesRequest.header)
  return _msg;
}
inline void GetLocalGridTypesRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GetLocalGridTypesRequest.header)
}

// -------------------------------------------------------------------

// GetLocalGridTypesResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool GetLocalGridTypesResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool GetLocalGridTypesResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& GetLocalGridTypesResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ResponseHeader&>(
      ::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& GetLocalGridTypesResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetLocalGridTypesResponse.header)
  return _internal_header();
}
inline void GetLocalGridTypesResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GetLocalGridTypesResponse.header)
}
inline ::bosdyn::api::ResponseHeader* GetLocalGridTypesResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetLocalGridTypesResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GetLocalGridTypesResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetLocalGridTypesResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::ResponseHeader* GetLocalGridTypesResponse::mutable_header() {
  ::bosdyn::api::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GetLocalGridTypesResponse.header)
  return _msg;
}
inline void GetLocalGridTypesResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GetLocalGridTypesResponse.header)
}

// repeated .bosdyn.api.LocalGridType local_grid_type = 2;
inline int GetLocalGridTypesResponse::_internal_local_grid_type_size() const {
  return _impl_.local_grid_type_.size();
}
inline int GetLocalGridTypesResponse::local_grid_type_size() const {
  return _internal_local_grid_type_size();
}
inline void GetLocalGridTypesResponse::clear_local_grid_type() {
  _impl_.local_grid_type_.Clear();
}
inline ::bosdyn::api::LocalGridType* GetLocalGridTypesResponse::mutable_local_grid_type(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GetLocalGridTypesResponse.local_grid_type)
  return _impl_.local_grid_type_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LocalGridType >*
GetLocalGridTypesResponse::mutable_local_grid_type() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.GetLocalGridTypesResponse.local_grid_type)
  return &_impl_.local_grid_type_;
}
inline const ::bosdyn::api::LocalGridType& GetLocalGridTypesResponse::_internal_local_grid_type(int index) const {
  return _impl_.local_grid_type_.Get(index);
}
inline const ::bosdyn::api::LocalGridType& GetLocalGridTypesResponse::local_grid_type(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetLocalGridTypesResponse.local_grid_type)
  return _internal_local_grid_type(index);
}
inline ::bosdyn::api::LocalGridType* GetLocalGridTypesResponse::_internal_add_local_grid_type() {
  return _impl_.local_grid_type_.Add();
}
inline ::bosdyn::api::LocalGridType* GetLocalGridTypesResponse::add_local_grid_type() {
  ::bosdyn::api::LocalGridType* _add = _internal_add_local_grid_type();
  // @@protoc_insertion_point(field_add:bosdyn.api.GetLocalGridTypesResponse.local_grid_type)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LocalGridType >&
GetLocalGridTypesResponse::local_grid_type() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.GetLocalGridTypesResponse.local_grid_type)
  return _impl_.local_grid_type_;
}

// -------------------------------------------------------------------

// GetLocalGridsRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool GetLocalGridsRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool GetLocalGridsRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& GetLocalGridsRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RequestHeader&>(
      ::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& GetLocalGridsRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetLocalGridsRequest.header)
  return _internal_header();
}
inline void GetLocalGridsRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GetLocalGridsRequest.header)
}
inline ::bosdyn::api::RequestHeader* GetLocalGridsRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetLocalGridsRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GetLocalGridsRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetLocalGridsRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::RequestHeader* GetLocalGridsRequest::mutable_header() {
  ::bosdyn::api::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GetLocalGridsRequest.header)
  return _msg;
}
inline void GetLocalGridsRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GetLocalGridsRequest.header)
}

// repeated .bosdyn.api.LocalGridRequest local_grid_requests = 2;
inline int GetLocalGridsRequest::_internal_local_grid_requests_size() const {
  return _impl_.local_grid_requests_.size();
}
inline int GetLocalGridsRequest::local_grid_requests_size() const {
  return _internal_local_grid_requests_size();
}
inline void GetLocalGridsRequest::clear_local_grid_requests() {
  _impl_.local_grid_requests_.Clear();
}
inline ::bosdyn::api::LocalGridRequest* GetLocalGridsRequest::mutable_local_grid_requests(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GetLocalGridsRequest.local_grid_requests)
  return _impl_.local_grid_requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LocalGridRequest >*
GetLocalGridsRequest::mutable_local_grid_requests() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.GetLocalGridsRequest.local_grid_requests)
  return &_impl_.local_grid_requests_;
}
inline const ::bosdyn::api::LocalGridRequest& GetLocalGridsRequest::_internal_local_grid_requests(int index) const {
  return _impl_.local_grid_requests_.Get(index);
}
inline const ::bosdyn::api::LocalGridRequest& GetLocalGridsRequest::local_grid_requests(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetLocalGridsRequest.local_grid_requests)
  return _internal_local_grid_requests(index);
}
inline ::bosdyn::api::LocalGridRequest* GetLocalGridsRequest::_internal_add_local_grid_requests() {
  return _impl_.local_grid_requests_.Add();
}
inline ::bosdyn::api::LocalGridRequest* GetLocalGridsRequest::add_local_grid_requests() {
  ::bosdyn::api::LocalGridRequest* _add = _internal_add_local_grid_requests();
  // @@protoc_insertion_point(field_add:bosdyn.api.GetLocalGridsRequest.local_grid_requests)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LocalGridRequest >&
GetLocalGridsRequest::local_grid_requests() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.GetLocalGridsRequest.local_grid_requests)
  return _impl_.local_grid_requests_;
}

// -------------------------------------------------------------------

// GetLocalGridsResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool GetLocalGridsResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool GetLocalGridsResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& GetLocalGridsResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ResponseHeader&>(
      ::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& GetLocalGridsResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetLocalGridsResponse.header)
  return _internal_header();
}
inline void GetLocalGridsResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GetLocalGridsResponse.header)
}
inline ::bosdyn::api::ResponseHeader* GetLocalGridsResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetLocalGridsResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GetLocalGridsResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetLocalGridsResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::ResponseHeader* GetLocalGridsResponse::mutable_header() {
  ::bosdyn::api::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GetLocalGridsResponse.header)
  return _msg;
}
inline void GetLocalGridsResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GetLocalGridsResponse.header)
}

// repeated .bosdyn.api.LocalGridResponse local_grid_responses = 2;
inline int GetLocalGridsResponse::_internal_local_grid_responses_size() const {
  return _impl_.local_grid_responses_.size();
}
inline int GetLocalGridsResponse::local_grid_responses_size() const {
  return _internal_local_grid_responses_size();
}
inline void GetLocalGridsResponse::clear_local_grid_responses() {
  _impl_.local_grid_responses_.Clear();
}
inline ::bosdyn::api::LocalGridResponse* GetLocalGridsResponse::mutable_local_grid_responses(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GetLocalGridsResponse.local_grid_responses)
  return _impl_.local_grid_responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LocalGridResponse >*
GetLocalGridsResponse::mutable_local_grid_responses() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.GetLocalGridsResponse.local_grid_responses)
  return &_impl_.local_grid_responses_;
}
inline const ::bosdyn::api::LocalGridResponse& GetLocalGridsResponse::_internal_local_grid_responses(int index) const {
  return _impl_.local_grid_responses_.Get(index);
}
inline const ::bosdyn::api::LocalGridResponse& GetLocalGridsResponse::local_grid_responses(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetLocalGridsResponse.local_grid_responses)
  return _internal_local_grid_responses(index);
}
inline ::bosdyn::api::LocalGridResponse* GetLocalGridsResponse::_internal_add_local_grid_responses() {
  return _impl_.local_grid_responses_.Add();
}
inline ::bosdyn::api::LocalGridResponse* GetLocalGridsResponse::add_local_grid_responses() {
  ::bosdyn::api::LocalGridResponse* _add = _internal_add_local_grid_responses();
  // @@protoc_insertion_point(field_add:bosdyn.api.GetLocalGridsResponse.local_grid_responses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LocalGridResponse >&
GetLocalGridsResponse::local_grid_responses() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.GetLocalGridsResponse.local_grid_responses)
  return _impl_.local_grid_responses_;
}

// int32 num_local_grid_errors = 3;
inline void GetLocalGridsResponse::clear_num_local_grid_errors() {
  _impl_.num_local_grid_errors_ = 0;
}
inline int32_t GetLocalGridsResponse::_internal_num_local_grid_errors() const {
  return _impl_.num_local_grid_errors_;
}
inline int32_t GetLocalGridsResponse::num_local_grid_errors() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetLocalGridsResponse.num_local_grid_errors)
  return _internal_num_local_grid_errors();
}
inline void GetLocalGridsResponse::_internal_set_num_local_grid_errors(int32_t value) {
  
  _impl_.num_local_grid_errors_ = value;
}
inline void GetLocalGridsResponse::set_num_local_grid_errors(int32_t value) {
  _internal_set_num_local_grid_errors(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.GetLocalGridsResponse.num_local_grid_errors)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::LocalGrid_CellFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::LocalGrid_CellFormat>() {
  return ::bosdyn::api::LocalGrid_CellFormat_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::LocalGrid_Encoding> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::LocalGrid_Encoding>() {
  return ::bosdyn::api::LocalGrid_Encoding_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::LocalGridResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::LocalGridResponse_Status>() {
  return ::bosdyn::api::LocalGridResponse_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2flocal_5fgrid_2eproto

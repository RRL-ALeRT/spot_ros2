// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/bddf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fbddf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fbddf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fbddf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fbddf_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fbddf_2eproto;
namespace bosdyn {
namespace api {
class DataDescriptor;
struct DataDescriptorDefaultTypeInternal;
extern DataDescriptorDefaultTypeInternal _DataDescriptor_default_instance_;
class DescriptorBlock;
struct DescriptorBlockDefaultTypeInternal;
extern DescriptorBlockDefaultTypeInternal _DescriptorBlock_default_instance_;
class FileFormatDescriptor;
struct FileFormatDescriptorDefaultTypeInternal;
extern FileFormatDescriptorDefaultTypeInternal _FileFormatDescriptor_default_instance_;
class FileFormatDescriptor_AnnotationsEntry_DoNotUse;
struct FileFormatDescriptor_AnnotationsEntry_DoNotUseDefaultTypeInternal;
extern FileFormatDescriptor_AnnotationsEntry_DoNotUseDefaultTypeInternal _FileFormatDescriptor_AnnotationsEntry_DoNotUse_default_instance_;
class FileFormatVersion;
struct FileFormatVersionDefaultTypeInternal;
extern FileFormatVersionDefaultTypeInternal _FileFormatVersion_default_instance_;
class FileIndex;
struct FileIndexDefaultTypeInternal;
extern FileIndexDefaultTypeInternal _FileIndex_default_instance_;
class MessageTypeDescriptor;
struct MessageTypeDescriptorDefaultTypeInternal;
extern MessageTypeDescriptorDefaultTypeInternal _MessageTypeDescriptor_default_instance_;
class PodTypeDescriptor;
struct PodTypeDescriptorDefaultTypeInternal;
extern PodTypeDescriptorDefaultTypeInternal _PodTypeDescriptor_default_instance_;
class SeriesBlockIndex;
struct SeriesBlockIndexDefaultTypeInternal;
extern SeriesBlockIndexDefaultTypeInternal _SeriesBlockIndex_default_instance_;
class SeriesBlockIndex_BlockEntry;
struct SeriesBlockIndex_BlockEntryDefaultTypeInternal;
extern SeriesBlockIndex_BlockEntryDefaultTypeInternal _SeriesBlockIndex_BlockEntry_default_instance_;
class SeriesDescriptor;
struct SeriesDescriptorDefaultTypeInternal;
extern SeriesDescriptorDefaultTypeInternal _SeriesDescriptor_default_instance_;
class SeriesDescriptor_AnnotationsEntry_DoNotUse;
struct SeriesDescriptor_AnnotationsEntry_DoNotUseDefaultTypeInternal;
extern SeriesDescriptor_AnnotationsEntry_DoNotUseDefaultTypeInternal _SeriesDescriptor_AnnotationsEntry_DoNotUse_default_instance_;
class SeriesIdentifier;
struct SeriesIdentifierDefaultTypeInternal;
extern SeriesIdentifierDefaultTypeInternal _SeriesIdentifier_default_instance_;
class SeriesIdentifier_SpecEntry_DoNotUse;
struct SeriesIdentifier_SpecEntry_DoNotUseDefaultTypeInternal;
extern SeriesIdentifier_SpecEntry_DoNotUseDefaultTypeInternal _SeriesIdentifier_SpecEntry_DoNotUse_default_instance_;
class StructTypeDescriptor;
struct StructTypeDescriptorDefaultTypeInternal;
extern StructTypeDescriptorDefaultTypeInternal _StructTypeDescriptor_default_instance_;
class StructTypeDescriptor_KeyToSeriesIdentifierHashEntry_DoNotUse;
struct StructTypeDescriptor_KeyToSeriesIdentifierHashEntry_DoNotUseDefaultTypeInternal;
extern StructTypeDescriptor_KeyToSeriesIdentifierHashEntry_DoNotUseDefaultTypeInternal _StructTypeDescriptor_KeyToSeriesIdentifierHashEntry_DoNotUse_default_instance_;
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::DataDescriptor* Arena::CreateMaybeMessage<::bosdyn::api::DataDescriptor>(Arena*);
template<> ::bosdyn::api::DescriptorBlock* Arena::CreateMaybeMessage<::bosdyn::api::DescriptorBlock>(Arena*);
template<> ::bosdyn::api::FileFormatDescriptor* Arena::CreateMaybeMessage<::bosdyn::api::FileFormatDescriptor>(Arena*);
template<> ::bosdyn::api::FileFormatDescriptor_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage<::bosdyn::api::FileFormatDescriptor_AnnotationsEntry_DoNotUse>(Arena*);
template<> ::bosdyn::api::FileFormatVersion* Arena::CreateMaybeMessage<::bosdyn::api::FileFormatVersion>(Arena*);
template<> ::bosdyn::api::FileIndex* Arena::CreateMaybeMessage<::bosdyn::api::FileIndex>(Arena*);
template<> ::bosdyn::api::MessageTypeDescriptor* Arena::CreateMaybeMessage<::bosdyn::api::MessageTypeDescriptor>(Arena*);
template<> ::bosdyn::api::PodTypeDescriptor* Arena::CreateMaybeMessage<::bosdyn::api::PodTypeDescriptor>(Arena*);
template<> ::bosdyn::api::SeriesBlockIndex* Arena::CreateMaybeMessage<::bosdyn::api::SeriesBlockIndex>(Arena*);
template<> ::bosdyn::api::SeriesBlockIndex_BlockEntry* Arena::CreateMaybeMessage<::bosdyn::api::SeriesBlockIndex_BlockEntry>(Arena*);
template<> ::bosdyn::api::SeriesDescriptor* Arena::CreateMaybeMessage<::bosdyn::api::SeriesDescriptor>(Arena*);
template<> ::bosdyn::api::SeriesDescriptor_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage<::bosdyn::api::SeriesDescriptor_AnnotationsEntry_DoNotUse>(Arena*);
template<> ::bosdyn::api::SeriesIdentifier* Arena::CreateMaybeMessage<::bosdyn::api::SeriesIdentifier>(Arena*);
template<> ::bosdyn::api::SeriesIdentifier_SpecEntry_DoNotUse* Arena::CreateMaybeMessage<::bosdyn::api::SeriesIdentifier_SpecEntry_DoNotUse>(Arena*);
template<> ::bosdyn::api::StructTypeDescriptor* Arena::CreateMaybeMessage<::bosdyn::api::StructTypeDescriptor>(Arena*);
template<> ::bosdyn::api::StructTypeDescriptor_KeyToSeriesIdentifierHashEntry_DoNotUse* Arena::CreateMaybeMessage<::bosdyn::api::StructTypeDescriptor_KeyToSeriesIdentifierHashEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {

enum FileFormatDescriptor_CheckSumType : int {
  FileFormatDescriptor_CheckSumType_CHECKSUM_TYPE_UNKNOWN = 0,
  FileFormatDescriptor_CheckSumType_CHECKSUM_TYPE_NONE = 1,
  FileFormatDescriptor_CheckSumType_CHECKSUM_TYPE_SHA1 = 2,
  FileFormatDescriptor_CheckSumType_FileFormatDescriptor_CheckSumType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FileFormatDescriptor_CheckSumType_FileFormatDescriptor_CheckSumType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FileFormatDescriptor_CheckSumType_IsValid(int value);
constexpr FileFormatDescriptor_CheckSumType FileFormatDescriptor_CheckSumType_CheckSumType_MIN = FileFormatDescriptor_CheckSumType_CHECKSUM_TYPE_UNKNOWN;
constexpr FileFormatDescriptor_CheckSumType FileFormatDescriptor_CheckSumType_CheckSumType_MAX = FileFormatDescriptor_CheckSumType_CHECKSUM_TYPE_SHA1;
constexpr int FileFormatDescriptor_CheckSumType_CheckSumType_ARRAYSIZE = FileFormatDescriptor_CheckSumType_CheckSumType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileFormatDescriptor_CheckSumType_descriptor();
template<typename T>
inline const std::string& FileFormatDescriptor_CheckSumType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FileFormatDescriptor_CheckSumType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FileFormatDescriptor_CheckSumType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FileFormatDescriptor_CheckSumType_descriptor(), enum_t_value);
}
inline bool FileFormatDescriptor_CheckSumType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FileFormatDescriptor_CheckSumType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FileFormatDescriptor_CheckSumType>(
    FileFormatDescriptor_CheckSumType_descriptor(), name, value);
}
enum PodTypeEnum : int {
  TYPE_UNSPECIFIED = 0,
  TYPE_INT8 = 1,
  TYPE_INT16 = 2,
  TYPE_INT32 = 3,
  TYPE_INT64 = 4,
  TYPE_UINT8 = 5,
  TYPE_UINT16 = 6,
  TYPE_UINT32 = 7,
  TYPE_UINT64 = 8,
  TYPE_FLOAT32 = 9,
  TYPE_FLOAT64 = 10,
  PodTypeEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PodTypeEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PodTypeEnum_IsValid(int value);
constexpr PodTypeEnum PodTypeEnum_MIN = TYPE_UNSPECIFIED;
constexpr PodTypeEnum PodTypeEnum_MAX = TYPE_FLOAT64;
constexpr int PodTypeEnum_ARRAYSIZE = PodTypeEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PodTypeEnum_descriptor();
template<typename T>
inline const std::string& PodTypeEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PodTypeEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PodTypeEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PodTypeEnum_descriptor(), enum_t_value);
}
inline bool PodTypeEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PodTypeEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PodTypeEnum>(
    PodTypeEnum_descriptor(), name, value);
}
// ===================================================================

class DescriptorBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.DescriptorBlock) */ {
 public:
  inline DescriptorBlock() : DescriptorBlock(nullptr) {}
  ~DescriptorBlock() override;
  explicit PROTOBUF_CONSTEXPR DescriptorBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DescriptorBlock(const DescriptorBlock& from);
  DescriptorBlock(DescriptorBlock&& from) noexcept
    : DescriptorBlock() {
    *this = ::std::move(from);
  }

  inline DescriptorBlock& operator=(const DescriptorBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline DescriptorBlock& operator=(DescriptorBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DescriptorBlock& default_instance() {
    return *internal_default_instance();
  }
  enum DescriptorTypeCase {
    kFileDescriptor = 1,
    kSeriesDescriptor = 2,
    kSeriesBlockIndex = 3,
    kFileIndex = 4,
    DESCRIPTORTYPE_NOT_SET = 0,
  };

  static inline const DescriptorBlock* internal_default_instance() {
    return reinterpret_cast<const DescriptorBlock*>(
               &_DescriptorBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DescriptorBlock& a, DescriptorBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(DescriptorBlock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DescriptorBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DescriptorBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DescriptorBlock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DescriptorBlock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DescriptorBlock& from) {
    DescriptorBlock::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescriptorBlock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.DescriptorBlock";
  }
  protected:
  explicit DescriptorBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileDescriptorFieldNumber = 1,
    kSeriesDescriptorFieldNumber = 2,
    kSeriesBlockIndexFieldNumber = 3,
    kFileIndexFieldNumber = 4,
  };
  // .bosdyn.api.FileFormatDescriptor file_descriptor = 1;
  bool has_file_descriptor() const;
  private:
  bool _internal_has_file_descriptor() const;
  public:
  void clear_file_descriptor();
  const ::bosdyn::api::FileFormatDescriptor& file_descriptor() const;
  PROTOBUF_NODISCARD ::bosdyn::api::FileFormatDescriptor* release_file_descriptor();
  ::bosdyn::api::FileFormatDescriptor* mutable_file_descriptor();
  void set_allocated_file_descriptor(::bosdyn::api::FileFormatDescriptor* file_descriptor);
  private:
  const ::bosdyn::api::FileFormatDescriptor& _internal_file_descriptor() const;
  ::bosdyn::api::FileFormatDescriptor* _internal_mutable_file_descriptor();
  public:
  void unsafe_arena_set_allocated_file_descriptor(
      ::bosdyn::api::FileFormatDescriptor* file_descriptor);
  ::bosdyn::api::FileFormatDescriptor* unsafe_arena_release_file_descriptor();

  // .bosdyn.api.SeriesDescriptor series_descriptor = 2;
  bool has_series_descriptor() const;
  private:
  bool _internal_has_series_descriptor() const;
  public:
  void clear_series_descriptor();
  const ::bosdyn::api::SeriesDescriptor& series_descriptor() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SeriesDescriptor* release_series_descriptor();
  ::bosdyn::api::SeriesDescriptor* mutable_series_descriptor();
  void set_allocated_series_descriptor(::bosdyn::api::SeriesDescriptor* series_descriptor);
  private:
  const ::bosdyn::api::SeriesDescriptor& _internal_series_descriptor() const;
  ::bosdyn::api::SeriesDescriptor* _internal_mutable_series_descriptor();
  public:
  void unsafe_arena_set_allocated_series_descriptor(
      ::bosdyn::api::SeriesDescriptor* series_descriptor);
  ::bosdyn::api::SeriesDescriptor* unsafe_arena_release_series_descriptor();

  // .bosdyn.api.SeriesBlockIndex series_block_index = 3;
  bool has_series_block_index() const;
  private:
  bool _internal_has_series_block_index() const;
  public:
  void clear_series_block_index();
  const ::bosdyn::api::SeriesBlockIndex& series_block_index() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SeriesBlockIndex* release_series_block_index();
  ::bosdyn::api::SeriesBlockIndex* mutable_series_block_index();
  void set_allocated_series_block_index(::bosdyn::api::SeriesBlockIndex* series_block_index);
  private:
  const ::bosdyn::api::SeriesBlockIndex& _internal_series_block_index() const;
  ::bosdyn::api::SeriesBlockIndex* _internal_mutable_series_block_index();
  public:
  void unsafe_arena_set_allocated_series_block_index(
      ::bosdyn::api::SeriesBlockIndex* series_block_index);
  ::bosdyn::api::SeriesBlockIndex* unsafe_arena_release_series_block_index();

  // .bosdyn.api.FileIndex file_index = 4;
  bool has_file_index() const;
  private:
  bool _internal_has_file_index() const;
  public:
  void clear_file_index();
  const ::bosdyn::api::FileIndex& file_index() const;
  PROTOBUF_NODISCARD ::bosdyn::api::FileIndex* release_file_index();
  ::bosdyn::api::FileIndex* mutable_file_index();
  void set_allocated_file_index(::bosdyn::api::FileIndex* file_index);
  private:
  const ::bosdyn::api::FileIndex& _internal_file_index() const;
  ::bosdyn::api::FileIndex* _internal_mutable_file_index();
  public:
  void unsafe_arena_set_allocated_file_index(
      ::bosdyn::api::FileIndex* file_index);
  ::bosdyn::api::FileIndex* unsafe_arena_release_file_index();

  void clear_DescriptorType();
  DescriptorTypeCase DescriptorType_case() const;
  // @@protoc_insertion_point(class_scope:bosdyn.api.DescriptorBlock)
 private:
  class _Internal;
  void set_has_file_descriptor();
  void set_has_series_descriptor();
  void set_has_series_block_index();
  void set_has_file_index();

  inline bool has_DescriptorType() const;
  inline void clear_has_DescriptorType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union DescriptorTypeUnion {
      constexpr DescriptorTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::bosdyn::api::FileFormatDescriptor* file_descriptor_;
      ::bosdyn::api::SeriesDescriptor* series_descriptor_;
      ::bosdyn::api::SeriesBlockIndex* series_block_index_;
      ::bosdyn::api::FileIndex* file_index_;
    } DescriptorType_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fbddf_2eproto;
};
// -------------------------------------------------------------------

class DataDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.DataDescriptor) */ {
 public:
  inline DataDescriptor() : DataDescriptor(nullptr) {}
  ~DataDescriptor() override;
  explicit PROTOBUF_CONSTEXPR DataDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataDescriptor(const DataDescriptor& from);
  DataDescriptor(DataDescriptor&& from) noexcept
    : DataDescriptor() {
    *this = ::std::move(from);
  }

  inline DataDescriptor& operator=(const DataDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataDescriptor& operator=(DataDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataDescriptor* internal_default_instance() {
    return reinterpret_cast<const DataDescriptor*>(
               &_DataDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DataDescriptor& a, DataDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(DataDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DataDescriptor& from) {
    DataDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.DataDescriptor";
  }
  protected:
  explicit DataDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdditionalIndexesFieldNumber = 3,
    kTimestampFieldNumber = 2,
    kSeriesIndexFieldNumber = 1,
  };
  // repeated int64 additional_indexes = 3;
  int additional_indexes_size() const;
  private:
  int _internal_additional_indexes_size() const;
  public:
  void clear_additional_indexes();
  private:
  int64_t _internal_additional_indexes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_additional_indexes() const;
  void _internal_add_additional_indexes(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_additional_indexes();
  public:
  int64_t additional_indexes(int index) const;
  void set_additional_indexes(int index, int64_t value);
  void add_additional_indexes(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      additional_indexes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_additional_indexes();

  // .google.protobuf.Timestamp timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // uint32 series_index = 1;
  void clear_series_index();
  uint32_t series_index() const;
  void set_series_index(uint32_t value);
  private:
  uint32_t _internal_series_index() const;
  void _internal_set_series_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.DataDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > additional_indexes_;
    mutable std::atomic<int> _additional_indexes_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
    uint32_t series_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fbddf_2eproto;
};
// -------------------------------------------------------------------

class FileFormatDescriptor_AnnotationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FileFormatDescriptor_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FileFormatDescriptor_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  FileFormatDescriptor_AnnotationsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR FileFormatDescriptor_AnnotationsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit FileFormatDescriptor_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FileFormatDescriptor_AnnotationsEntry_DoNotUse& other);
  static const FileFormatDescriptor_AnnotationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FileFormatDescriptor_AnnotationsEntry_DoNotUse*>(&_FileFormatDescriptor_AnnotationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "bosdyn.api.FileFormatDescriptor.AnnotationsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "bosdyn.api.FileFormatDescriptor.AnnotationsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_bosdyn_2fapi_2fbddf_2eproto;
};

// -------------------------------------------------------------------

class FileFormatDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.FileFormatDescriptor) */ {
 public:
  inline FileFormatDescriptor() : FileFormatDescriptor(nullptr) {}
  ~FileFormatDescriptor() override;
  explicit PROTOBUF_CONSTEXPR FileFormatDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileFormatDescriptor(const FileFormatDescriptor& from);
  FileFormatDescriptor(FileFormatDescriptor&& from) noexcept
    : FileFormatDescriptor() {
    *this = ::std::move(from);
  }

  inline FileFormatDescriptor& operator=(const FileFormatDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileFormatDescriptor& operator=(FileFormatDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileFormatDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileFormatDescriptor* internal_default_instance() {
    return reinterpret_cast<const FileFormatDescriptor*>(
               &_FileFormatDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FileFormatDescriptor& a, FileFormatDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(FileFormatDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileFormatDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileFormatDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileFormatDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileFormatDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileFormatDescriptor& from) {
    FileFormatDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileFormatDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.FileFormatDescriptor";
  }
  protected:
  explicit FileFormatDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef FileFormatDescriptor_CheckSumType CheckSumType;
  static constexpr CheckSumType CHECKSUM_TYPE_UNKNOWN =
    FileFormatDescriptor_CheckSumType_CHECKSUM_TYPE_UNKNOWN;
  static constexpr CheckSumType CHECKSUM_TYPE_NONE =
    FileFormatDescriptor_CheckSumType_CHECKSUM_TYPE_NONE;
  static constexpr CheckSumType CHECKSUM_TYPE_SHA1 =
    FileFormatDescriptor_CheckSumType_CHECKSUM_TYPE_SHA1;
  static inline bool CheckSumType_IsValid(int value) {
    return FileFormatDescriptor_CheckSumType_IsValid(value);
  }
  static constexpr CheckSumType CheckSumType_MIN =
    FileFormatDescriptor_CheckSumType_CheckSumType_MIN;
  static constexpr CheckSumType CheckSumType_MAX =
    FileFormatDescriptor_CheckSumType_CheckSumType_MAX;
  static constexpr int CheckSumType_ARRAYSIZE =
    FileFormatDescriptor_CheckSumType_CheckSumType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CheckSumType_descriptor() {
    return FileFormatDescriptor_CheckSumType_descriptor();
  }
  template<typename T>
  static inline const std::string& CheckSumType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CheckSumType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CheckSumType_Name.");
    return FileFormatDescriptor_CheckSumType_Name(enum_t_value);
  }
  static inline bool CheckSumType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CheckSumType* value) {
    return FileFormatDescriptor_CheckSumType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 2,
    kVersionFieldNumber = 1,
    kChecksumTypeFieldNumber = 3,
    kChecksumNumBytesFieldNumber = 4,
  };
  // map<string, string> annotations = 2;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_annotations();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_annotations();

  // .bosdyn.api.FileFormatVersion version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const ::bosdyn::api::FileFormatVersion& version() const;
  PROTOBUF_NODISCARD ::bosdyn::api::FileFormatVersion* release_version();
  ::bosdyn::api::FileFormatVersion* mutable_version();
  void set_allocated_version(::bosdyn::api::FileFormatVersion* version);
  private:
  const ::bosdyn::api::FileFormatVersion& _internal_version() const;
  ::bosdyn::api::FileFormatVersion* _internal_mutable_version();
  public:
  void unsafe_arena_set_allocated_version(
      ::bosdyn::api::FileFormatVersion* version);
  ::bosdyn::api::FileFormatVersion* unsafe_arena_release_version();

  // .bosdyn.api.FileFormatDescriptor.CheckSumType checksum_type = 3;
  void clear_checksum_type();
  ::bosdyn::api::FileFormatDescriptor_CheckSumType checksum_type() const;
  void set_checksum_type(::bosdyn::api::FileFormatDescriptor_CheckSumType value);
  private:
  ::bosdyn::api::FileFormatDescriptor_CheckSumType _internal_checksum_type() const;
  void _internal_set_checksum_type(::bosdyn::api::FileFormatDescriptor_CheckSumType value);
  public:

  // uint32 checksum_num_bytes = 4;
  void clear_checksum_num_bytes();
  uint32_t checksum_num_bytes() const;
  void set_checksum_num_bytes(uint32_t value);
  private:
  uint32_t _internal_checksum_num_bytes() const;
  void _internal_set_checksum_num_bytes(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.FileFormatDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        FileFormatDescriptor_AnnotationsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> annotations_;
    ::bosdyn::api::FileFormatVersion* version_;
    int checksum_type_;
    uint32_t checksum_num_bytes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fbddf_2eproto;
};
// -------------------------------------------------------------------

class FileFormatVersion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.FileFormatVersion) */ {
 public:
  inline FileFormatVersion() : FileFormatVersion(nullptr) {}
  ~FileFormatVersion() override;
  explicit PROTOBUF_CONSTEXPR FileFormatVersion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileFormatVersion(const FileFormatVersion& from);
  FileFormatVersion(FileFormatVersion&& from) noexcept
    : FileFormatVersion() {
    *this = ::std::move(from);
  }

  inline FileFormatVersion& operator=(const FileFormatVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileFormatVersion& operator=(FileFormatVersion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileFormatVersion& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileFormatVersion* internal_default_instance() {
    return reinterpret_cast<const FileFormatVersion*>(
               &_FileFormatVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FileFormatVersion& a, FileFormatVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(FileFormatVersion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileFormatVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileFormatVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileFormatVersion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileFormatVersion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileFormatVersion& from) {
    FileFormatVersion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileFormatVersion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.FileFormatVersion";
  }
  protected:
  explicit FileFormatVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMajorVersionFieldNumber = 1,
    kMinorVersionFieldNumber = 2,
    kPatchLevelFieldNumber = 3,
  };
  // uint32 major_version = 1;
  void clear_major_version();
  uint32_t major_version() const;
  void set_major_version(uint32_t value);
  private:
  uint32_t _internal_major_version() const;
  void _internal_set_major_version(uint32_t value);
  public:

  // uint32 minor_version = 2;
  void clear_minor_version();
  uint32_t minor_version() const;
  void set_minor_version(uint32_t value);
  private:
  uint32_t _internal_minor_version() const;
  void _internal_set_minor_version(uint32_t value);
  public:

  // uint32 patch_level = 3;
  void clear_patch_level();
  uint32_t patch_level() const;
  void set_patch_level(uint32_t value);
  private:
  uint32_t _internal_patch_level() const;
  void _internal_set_patch_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.FileFormatVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t major_version_;
    uint32_t minor_version_;
    uint32_t patch_level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fbddf_2eproto;
};
// -------------------------------------------------------------------

class SeriesDescriptor_AnnotationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SeriesDescriptor_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SeriesDescriptor_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  SeriesDescriptor_AnnotationsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR SeriesDescriptor_AnnotationsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SeriesDescriptor_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SeriesDescriptor_AnnotationsEntry_DoNotUse& other);
  static const SeriesDescriptor_AnnotationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SeriesDescriptor_AnnotationsEntry_DoNotUse*>(&_SeriesDescriptor_AnnotationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "bosdyn.api.SeriesDescriptor.AnnotationsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "bosdyn.api.SeriesDescriptor.AnnotationsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_bosdyn_2fapi_2fbddf_2eproto;
};

// -------------------------------------------------------------------

class SeriesDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.SeriesDescriptor) */ {
 public:
  inline SeriesDescriptor() : SeriesDescriptor(nullptr) {}
  ~SeriesDescriptor() override;
  explicit PROTOBUF_CONSTEXPR SeriesDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SeriesDescriptor(const SeriesDescriptor& from);
  SeriesDescriptor(SeriesDescriptor&& from) noexcept
    : SeriesDescriptor() {
    *this = ::std::move(from);
  }

  inline SeriesDescriptor& operator=(const SeriesDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeriesDescriptor& operator=(SeriesDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SeriesDescriptor& default_instance() {
    return *internal_default_instance();
  }
  enum DataTypeCase {
    kMessageType = 4,
    kPodType = 5,
    kStructType = 6,
    DATATYPE_NOT_SET = 0,
  };

  static inline const SeriesDescriptor* internal_default_instance() {
    return reinterpret_cast<const SeriesDescriptor*>(
               &_SeriesDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SeriesDescriptor& a, SeriesDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(SeriesDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeriesDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SeriesDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SeriesDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SeriesDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SeriesDescriptor& from) {
    SeriesDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeriesDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.SeriesDescriptor";
  }
  protected:
  explicit SeriesDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 7,
    kAdditionalIndexNamesFieldNumber = 8,
    kDescriptionFieldNumber = 9,
    kSeriesIdentifierFieldNumber = 2,
    kIdentifierHashFieldNumber = 3,
    kSeriesIndexFieldNumber = 1,
    kMessageTypeFieldNumber = 4,
    kPodTypeFieldNumber = 5,
    kStructTypeFieldNumber = 6,
  };
  // map<string, string> annotations = 7;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_annotations();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_annotations();

  // repeated string additional_index_names = 8;
  int additional_index_names_size() const;
  private:
  int _internal_additional_index_names_size() const;
  public:
  void clear_additional_index_names();
  const std::string& additional_index_names(int index) const;
  std::string* mutable_additional_index_names(int index);
  void set_additional_index_names(int index, const std::string& value);
  void set_additional_index_names(int index, std::string&& value);
  void set_additional_index_names(int index, const char* value);
  void set_additional_index_names(int index, const char* value, size_t size);
  std::string* add_additional_index_names();
  void add_additional_index_names(const std::string& value);
  void add_additional_index_names(std::string&& value);
  void add_additional_index_names(const char* value);
  void add_additional_index_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& additional_index_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_additional_index_names();
  private:
  const std::string& _internal_additional_index_names(int index) const;
  std::string* _internal_add_additional_index_names();
  public:

  // string description = 9;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .bosdyn.api.SeriesIdentifier series_identifier = 2;
  bool has_series_identifier() const;
  private:
  bool _internal_has_series_identifier() const;
  public:
  void clear_series_identifier();
  const ::bosdyn::api::SeriesIdentifier& series_identifier() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SeriesIdentifier* release_series_identifier();
  ::bosdyn::api::SeriesIdentifier* mutable_series_identifier();
  void set_allocated_series_identifier(::bosdyn::api::SeriesIdentifier* series_identifier);
  private:
  const ::bosdyn::api::SeriesIdentifier& _internal_series_identifier() const;
  ::bosdyn::api::SeriesIdentifier* _internal_mutable_series_identifier();
  public:
  void unsafe_arena_set_allocated_series_identifier(
      ::bosdyn::api::SeriesIdentifier* series_identifier);
  ::bosdyn::api::SeriesIdentifier* unsafe_arena_release_series_identifier();

  // uint64 identifier_hash = 3;
  void clear_identifier_hash();
  uint64_t identifier_hash() const;
  void set_identifier_hash(uint64_t value);
  private:
  uint64_t _internal_identifier_hash() const;
  void _internal_set_identifier_hash(uint64_t value);
  public:

  // uint32 series_index = 1;
  void clear_series_index();
  uint32_t series_index() const;
  void set_series_index(uint32_t value);
  private:
  uint32_t _internal_series_index() const;
  void _internal_set_series_index(uint32_t value);
  public:

  // .bosdyn.api.MessageTypeDescriptor message_type = 4;
  bool has_message_type() const;
  private:
  bool _internal_has_message_type() const;
  public:
  void clear_message_type();
  const ::bosdyn::api::MessageTypeDescriptor& message_type() const;
  PROTOBUF_NODISCARD ::bosdyn::api::MessageTypeDescriptor* release_message_type();
  ::bosdyn::api::MessageTypeDescriptor* mutable_message_type();
  void set_allocated_message_type(::bosdyn::api::MessageTypeDescriptor* message_type);
  private:
  const ::bosdyn::api::MessageTypeDescriptor& _internal_message_type() const;
  ::bosdyn::api::MessageTypeDescriptor* _internal_mutable_message_type();
  public:
  void unsafe_arena_set_allocated_message_type(
      ::bosdyn::api::MessageTypeDescriptor* message_type);
  ::bosdyn::api::MessageTypeDescriptor* unsafe_arena_release_message_type();

  // .bosdyn.api.PodTypeDescriptor pod_type = 5;
  bool has_pod_type() const;
  private:
  bool _internal_has_pod_type() const;
  public:
  void clear_pod_type();
  const ::bosdyn::api::PodTypeDescriptor& pod_type() const;
  PROTOBUF_NODISCARD ::bosdyn::api::PodTypeDescriptor* release_pod_type();
  ::bosdyn::api::PodTypeDescriptor* mutable_pod_type();
  void set_allocated_pod_type(::bosdyn::api::PodTypeDescriptor* pod_type);
  private:
  const ::bosdyn::api::PodTypeDescriptor& _internal_pod_type() const;
  ::bosdyn::api::PodTypeDescriptor* _internal_mutable_pod_type();
  public:
  void unsafe_arena_set_allocated_pod_type(
      ::bosdyn::api::PodTypeDescriptor* pod_type);
  ::bosdyn::api::PodTypeDescriptor* unsafe_arena_release_pod_type();

  // .bosdyn.api.StructTypeDescriptor struct_type = 6;
  bool has_struct_type() const;
  private:
  bool _internal_has_struct_type() const;
  public:
  void clear_struct_type();
  const ::bosdyn::api::StructTypeDescriptor& struct_type() const;
  PROTOBUF_NODISCARD ::bosdyn::api::StructTypeDescriptor* release_struct_type();
  ::bosdyn::api::StructTypeDescriptor* mutable_struct_type();
  void set_allocated_struct_type(::bosdyn::api::StructTypeDescriptor* struct_type);
  private:
  const ::bosdyn::api::StructTypeDescriptor& _internal_struct_type() const;
  ::bosdyn::api::StructTypeDescriptor* _internal_mutable_struct_type();
  public:
  void unsafe_arena_set_allocated_struct_type(
      ::bosdyn::api::StructTypeDescriptor* struct_type);
  ::bosdyn::api::StructTypeDescriptor* unsafe_arena_release_struct_type();

  void clear_DataType();
  DataTypeCase DataType_case() const;
  // @@protoc_insertion_point(class_scope:bosdyn.api.SeriesDescriptor)
 private:
  class _Internal;
  void set_has_message_type();
  void set_has_pod_type();
  void set_has_struct_type();

  inline bool has_DataType() const;
  inline void clear_has_DataType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        SeriesDescriptor_AnnotationsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> annotations_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> additional_index_names_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::bosdyn::api::SeriesIdentifier* series_identifier_;
    uint64_t identifier_hash_;
    uint32_t series_index_;
    union DataTypeUnion {
      constexpr DataTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::bosdyn::api::MessageTypeDescriptor* message_type_;
      ::bosdyn::api::PodTypeDescriptor* pod_type_;
      ::bosdyn::api::StructTypeDescriptor* struct_type_;
    } DataType_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fbddf_2eproto;
};
// -------------------------------------------------------------------

class MessageTypeDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.MessageTypeDescriptor) */ {
 public:
  inline MessageTypeDescriptor() : MessageTypeDescriptor(nullptr) {}
  ~MessageTypeDescriptor() override;
  explicit PROTOBUF_CONSTEXPR MessageTypeDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageTypeDescriptor(const MessageTypeDescriptor& from);
  MessageTypeDescriptor(MessageTypeDescriptor&& from) noexcept
    : MessageTypeDescriptor() {
    *this = ::std::move(from);
  }

  inline MessageTypeDescriptor& operator=(const MessageTypeDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageTypeDescriptor& operator=(MessageTypeDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageTypeDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageTypeDescriptor* internal_default_instance() {
    return reinterpret_cast<const MessageTypeDescriptor*>(
               &_MessageTypeDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MessageTypeDescriptor& a, MessageTypeDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageTypeDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageTypeDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageTypeDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageTypeDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageTypeDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MessageTypeDescriptor& from) {
    MessageTypeDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageTypeDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.MessageTypeDescriptor";
  }
  protected:
  explicit MessageTypeDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentTypeFieldNumber = 1,
    kTypeNameFieldNumber = 2,
    kIsMetadataFieldNumber = 3,
  };
  // string content_type = 1;
  void clear_content_type();
  const std::string& content_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content_type();
  PROTOBUF_NODISCARD std::string* release_content_type();
  void set_allocated_content_type(std::string* content_type);
  private:
  const std::string& _internal_content_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_type(const std::string& value);
  std::string* _internal_mutable_content_type();
  public:

  // string type_name = 2;
  void clear_type_name();
  const std::string& type_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_name();
  PROTOBUF_NODISCARD std::string* release_type_name();
  void set_allocated_type_name(std::string* type_name);
  private:
  const std::string& _internal_type_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_name(const std::string& value);
  std::string* _internal_mutable_type_name();
  public:

  // bool is_metadata = 3;
  void clear_is_metadata();
  bool is_metadata() const;
  void set_is_metadata(bool value);
  private:
  bool _internal_is_metadata() const;
  void _internal_set_is_metadata(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.MessageTypeDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_name_;
    bool is_metadata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fbddf_2eproto;
};
// -------------------------------------------------------------------

class PodTypeDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.PodTypeDescriptor) */ {
 public:
  inline PodTypeDescriptor() : PodTypeDescriptor(nullptr) {}
  ~PodTypeDescriptor() override;
  explicit PROTOBUF_CONSTEXPR PodTypeDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PodTypeDescriptor(const PodTypeDescriptor& from);
  PodTypeDescriptor(PodTypeDescriptor&& from) noexcept
    : PodTypeDescriptor() {
    *this = ::std::move(from);
  }

  inline PodTypeDescriptor& operator=(const PodTypeDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline PodTypeDescriptor& operator=(PodTypeDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PodTypeDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const PodTypeDescriptor* internal_default_instance() {
    return reinterpret_cast<const PodTypeDescriptor*>(
               &_PodTypeDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PodTypeDescriptor& a, PodTypeDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(PodTypeDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PodTypeDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PodTypeDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PodTypeDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PodTypeDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PodTypeDescriptor& from) {
    PodTypeDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PodTypeDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.PodTypeDescriptor";
  }
  protected:
  explicit PodTypeDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimensionFieldNumber = 2,
    kPodTypeFieldNumber = 1,
  };
  // repeated uint32 dimension = 2;
  int dimension_size() const;
  private:
  int _internal_dimension_size() const;
  public:
  void clear_dimension();
  private:
  uint32_t _internal_dimension(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_dimension() const;
  void _internal_add_dimension(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_dimension();
  public:
  uint32_t dimension(int index) const;
  void set_dimension(int index, uint32_t value);
  void add_dimension(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      dimension() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_dimension();

  // .bosdyn.api.PodTypeEnum pod_type = 1;
  void clear_pod_type();
  ::bosdyn::api::PodTypeEnum pod_type() const;
  void set_pod_type(::bosdyn::api::PodTypeEnum value);
  private:
  ::bosdyn::api::PodTypeEnum _internal_pod_type() const;
  void _internal_set_pod_type(::bosdyn::api::PodTypeEnum value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.PodTypeDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > dimension_;
    mutable std::atomic<int> _dimension_cached_byte_size_;
    int pod_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fbddf_2eproto;
};
// -------------------------------------------------------------------

class StructTypeDescriptor_KeyToSeriesIdentifierHashEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StructTypeDescriptor_KeyToSeriesIdentifierHashEntry_DoNotUse, 
    std::string, uint64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StructTypeDescriptor_KeyToSeriesIdentifierHashEntry_DoNotUse, 
    std::string, uint64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> SuperType;
  StructTypeDescriptor_KeyToSeriesIdentifierHashEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR StructTypeDescriptor_KeyToSeriesIdentifierHashEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit StructTypeDescriptor_KeyToSeriesIdentifierHashEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StructTypeDescriptor_KeyToSeriesIdentifierHashEntry_DoNotUse& other);
  static const StructTypeDescriptor_KeyToSeriesIdentifierHashEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StructTypeDescriptor_KeyToSeriesIdentifierHashEntry_DoNotUse*>(&_StructTypeDescriptor_KeyToSeriesIdentifierHashEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "bosdyn.api.StructTypeDescriptor.KeyToSeriesIdentifierHashEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_bosdyn_2fapi_2fbddf_2eproto;
};

// -------------------------------------------------------------------

class StructTypeDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.StructTypeDescriptor) */ {
 public:
  inline StructTypeDescriptor() : StructTypeDescriptor(nullptr) {}
  ~StructTypeDescriptor() override;
  explicit PROTOBUF_CONSTEXPR StructTypeDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StructTypeDescriptor(const StructTypeDescriptor& from);
  StructTypeDescriptor(StructTypeDescriptor&& from) noexcept
    : StructTypeDescriptor() {
    *this = ::std::move(from);
  }

  inline StructTypeDescriptor& operator=(const StructTypeDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline StructTypeDescriptor& operator=(StructTypeDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StructTypeDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const StructTypeDescriptor* internal_default_instance() {
    return reinterpret_cast<const StructTypeDescriptor*>(
               &_StructTypeDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StructTypeDescriptor& a, StructTypeDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(StructTypeDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StructTypeDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StructTypeDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StructTypeDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StructTypeDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StructTypeDescriptor& from) {
    StructTypeDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StructTypeDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.StructTypeDescriptor";
  }
  protected:
  explicit StructTypeDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kKeyToSeriesIdentifierHashFieldNumber = 1,
  };
  // map<string, uint64> key_to_series_identifier_hash = 1;
  int key_to_series_identifier_hash_size() const;
  private:
  int _internal_key_to_series_identifier_hash_size() const;
  public:
  void clear_key_to_series_identifier_hash();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
      _internal_key_to_series_identifier_hash() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
      _internal_mutable_key_to_series_identifier_hash();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
      key_to_series_identifier_hash() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
      mutable_key_to_series_identifier_hash();

  // @@protoc_insertion_point(class_scope:bosdyn.api.StructTypeDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        StructTypeDescriptor_KeyToSeriesIdentifierHashEntry_DoNotUse,
        std::string, uint64_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> key_to_series_identifier_hash_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fbddf_2eproto;
};
// -------------------------------------------------------------------

class FileIndex final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.FileIndex) */ {
 public:
  inline FileIndex() : FileIndex(nullptr) {}
  ~FileIndex() override;
  explicit PROTOBUF_CONSTEXPR FileIndex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileIndex(const FileIndex& from);
  FileIndex(FileIndex&& from) noexcept
    : FileIndex() {
    *this = ::std::move(from);
  }

  inline FileIndex& operator=(const FileIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileIndex& operator=(FileIndex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileIndex& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileIndex* internal_default_instance() {
    return reinterpret_cast<const FileIndex*>(
               &_FileIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(FileIndex& a, FileIndex& b) {
    a.Swap(&b);
  }
  inline void Swap(FileIndex* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileIndex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileIndex>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileIndex& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileIndex& from) {
    FileIndex::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileIndex* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.FileIndex";
  }
  protected:
  explicit FileIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeriesIdentifiersFieldNumber = 1,
    kSeriesBlockIndexOffsetsFieldNumber = 2,
    kSeriesIdentifierHashesFieldNumber = 3,
  };
  // repeated .bosdyn.api.SeriesIdentifier series_identifiers = 1;
  int series_identifiers_size() const;
  private:
  int _internal_series_identifiers_size() const;
  public:
  void clear_series_identifiers();
  ::bosdyn::api::SeriesIdentifier* mutable_series_identifiers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::SeriesIdentifier >*
      mutable_series_identifiers();
  private:
  const ::bosdyn::api::SeriesIdentifier& _internal_series_identifiers(int index) const;
  ::bosdyn::api::SeriesIdentifier* _internal_add_series_identifiers();
  public:
  const ::bosdyn::api::SeriesIdentifier& series_identifiers(int index) const;
  ::bosdyn::api::SeriesIdentifier* add_series_identifiers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::SeriesIdentifier >&
      series_identifiers() const;

  // repeated uint64 series_block_index_offsets = 2;
  int series_block_index_offsets_size() const;
  private:
  int _internal_series_block_index_offsets_size() const;
  public:
  void clear_series_block_index_offsets();
  private:
  uint64_t _internal_series_block_index_offsets(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_series_block_index_offsets() const;
  void _internal_add_series_block_index_offsets(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_series_block_index_offsets();
  public:
  uint64_t series_block_index_offsets(int index) const;
  void set_series_block_index_offsets(int index, uint64_t value);
  void add_series_block_index_offsets(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      series_block_index_offsets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_series_block_index_offsets();

  // repeated uint64 series_identifier_hashes = 3;
  int series_identifier_hashes_size() const;
  private:
  int _internal_series_identifier_hashes_size() const;
  public:
  void clear_series_identifier_hashes();
  private:
  uint64_t _internal_series_identifier_hashes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_series_identifier_hashes() const;
  void _internal_add_series_identifier_hashes(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_series_identifier_hashes();
  public:
  uint64_t series_identifier_hashes(int index) const;
  void set_series_identifier_hashes(int index, uint64_t value);
  void add_series_identifier_hashes(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      series_identifier_hashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_series_identifier_hashes();

  // @@protoc_insertion_point(class_scope:bosdyn.api.FileIndex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::SeriesIdentifier > series_identifiers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > series_block_index_offsets_;
    mutable std::atomic<int> _series_block_index_offsets_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > series_identifier_hashes_;
    mutable std::atomic<int> _series_identifier_hashes_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fbddf_2eproto;
};
// -------------------------------------------------------------------

class SeriesBlockIndex_BlockEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.SeriesBlockIndex.BlockEntry) */ {
 public:
  inline SeriesBlockIndex_BlockEntry() : SeriesBlockIndex_BlockEntry(nullptr) {}
  ~SeriesBlockIndex_BlockEntry() override;
  explicit PROTOBUF_CONSTEXPR SeriesBlockIndex_BlockEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SeriesBlockIndex_BlockEntry(const SeriesBlockIndex_BlockEntry& from);
  SeriesBlockIndex_BlockEntry(SeriesBlockIndex_BlockEntry&& from) noexcept
    : SeriesBlockIndex_BlockEntry() {
    *this = ::std::move(from);
  }

  inline SeriesBlockIndex_BlockEntry& operator=(const SeriesBlockIndex_BlockEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeriesBlockIndex_BlockEntry& operator=(SeriesBlockIndex_BlockEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SeriesBlockIndex_BlockEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const SeriesBlockIndex_BlockEntry* internal_default_instance() {
    return reinterpret_cast<const SeriesBlockIndex_BlockEntry*>(
               &_SeriesBlockIndex_BlockEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SeriesBlockIndex_BlockEntry& a, SeriesBlockIndex_BlockEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(SeriesBlockIndex_BlockEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeriesBlockIndex_BlockEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SeriesBlockIndex_BlockEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SeriesBlockIndex_BlockEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SeriesBlockIndex_BlockEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SeriesBlockIndex_BlockEntry& from) {
    SeriesBlockIndex_BlockEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeriesBlockIndex_BlockEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.SeriesBlockIndex.BlockEntry";
  }
  protected:
  explicit SeriesBlockIndex_BlockEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdditionalIndexesFieldNumber = 3,
    kTimestampFieldNumber = 1,
    kFileOffsetFieldNumber = 2,
  };
  // repeated int64 additional_indexes = 3;
  int additional_indexes_size() const;
  private:
  int _internal_additional_indexes_size() const;
  public:
  void clear_additional_indexes();
  private:
  int64_t _internal_additional_indexes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_additional_indexes() const;
  void _internal_add_additional_indexes(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_additional_indexes();
  public:
  int64_t additional_indexes(int index) const;
  void set_additional_indexes(int index, int64_t value);
  void add_additional_indexes(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      additional_indexes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_additional_indexes();

  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // uint64 file_offset = 2;
  void clear_file_offset();
  uint64_t file_offset() const;
  void set_file_offset(uint64_t value);
  private:
  uint64_t _internal_file_offset() const;
  void _internal_set_file_offset(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.SeriesBlockIndex.BlockEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > additional_indexes_;
    mutable std::atomic<int> _additional_indexes_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
    uint64_t file_offset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fbddf_2eproto;
};
// -------------------------------------------------------------------

class SeriesBlockIndex final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.SeriesBlockIndex) */ {
 public:
  inline SeriesBlockIndex() : SeriesBlockIndex(nullptr) {}
  ~SeriesBlockIndex() override;
  explicit PROTOBUF_CONSTEXPR SeriesBlockIndex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SeriesBlockIndex(const SeriesBlockIndex& from);
  SeriesBlockIndex(SeriesBlockIndex&& from) noexcept
    : SeriesBlockIndex() {
    *this = ::std::move(from);
  }

  inline SeriesBlockIndex& operator=(const SeriesBlockIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeriesBlockIndex& operator=(SeriesBlockIndex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SeriesBlockIndex& default_instance() {
    return *internal_default_instance();
  }
  static inline const SeriesBlockIndex* internal_default_instance() {
    return reinterpret_cast<const SeriesBlockIndex*>(
               &_SeriesBlockIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SeriesBlockIndex& a, SeriesBlockIndex& b) {
    a.Swap(&b);
  }
  inline void Swap(SeriesBlockIndex* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeriesBlockIndex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SeriesBlockIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SeriesBlockIndex>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SeriesBlockIndex& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SeriesBlockIndex& from) {
    SeriesBlockIndex::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeriesBlockIndex* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.SeriesBlockIndex";
  }
  protected:
  explicit SeriesBlockIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SeriesBlockIndex_BlockEntry BlockEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kBlockEntriesFieldNumber = 3,
    kDescriptorFileOffsetFieldNumber = 2,
    kTotalBytesFieldNumber = 4,
    kSeriesIndexFieldNumber = 1,
  };
  // repeated .bosdyn.api.SeriesBlockIndex.BlockEntry block_entries = 3;
  int block_entries_size() const;
  private:
  int _internal_block_entries_size() const;
  public:
  void clear_block_entries();
  ::bosdyn::api::SeriesBlockIndex_BlockEntry* mutable_block_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::SeriesBlockIndex_BlockEntry >*
      mutable_block_entries();
  private:
  const ::bosdyn::api::SeriesBlockIndex_BlockEntry& _internal_block_entries(int index) const;
  ::bosdyn::api::SeriesBlockIndex_BlockEntry* _internal_add_block_entries();
  public:
  const ::bosdyn::api::SeriesBlockIndex_BlockEntry& block_entries(int index) const;
  ::bosdyn::api::SeriesBlockIndex_BlockEntry* add_block_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::SeriesBlockIndex_BlockEntry >&
      block_entries() const;

  // uint64 descriptor_file_offset = 2;
  void clear_descriptor_file_offset();
  uint64_t descriptor_file_offset() const;
  void set_descriptor_file_offset(uint64_t value);
  private:
  uint64_t _internal_descriptor_file_offset() const;
  void _internal_set_descriptor_file_offset(uint64_t value);
  public:

  // uint64 total_bytes = 4;
  void clear_total_bytes();
  uint64_t total_bytes() const;
  void set_total_bytes(uint64_t value);
  private:
  uint64_t _internal_total_bytes() const;
  void _internal_set_total_bytes(uint64_t value);
  public:

  // uint32 series_index = 1;
  void clear_series_index();
  uint32_t series_index() const;
  void set_series_index(uint32_t value);
  private:
  uint32_t _internal_series_index() const;
  void _internal_set_series_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.SeriesBlockIndex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::SeriesBlockIndex_BlockEntry > block_entries_;
    uint64_t descriptor_file_offset_;
    uint64_t total_bytes_;
    uint32_t series_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fbddf_2eproto;
};
// -------------------------------------------------------------------

class SeriesIdentifier_SpecEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SeriesIdentifier_SpecEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SeriesIdentifier_SpecEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  SeriesIdentifier_SpecEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR SeriesIdentifier_SpecEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SeriesIdentifier_SpecEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SeriesIdentifier_SpecEntry_DoNotUse& other);
  static const SeriesIdentifier_SpecEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SeriesIdentifier_SpecEntry_DoNotUse*>(&_SeriesIdentifier_SpecEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "bosdyn.api.SeriesIdentifier.SpecEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "bosdyn.api.SeriesIdentifier.SpecEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_bosdyn_2fapi_2fbddf_2eproto;
};

// -------------------------------------------------------------------

class SeriesIdentifier final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.SeriesIdentifier) */ {
 public:
  inline SeriesIdentifier() : SeriesIdentifier(nullptr) {}
  ~SeriesIdentifier() override;
  explicit PROTOBUF_CONSTEXPR SeriesIdentifier(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SeriesIdentifier(const SeriesIdentifier& from);
  SeriesIdentifier(SeriesIdentifier&& from) noexcept
    : SeriesIdentifier() {
    *this = ::std::move(from);
  }

  inline SeriesIdentifier& operator=(const SeriesIdentifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeriesIdentifier& operator=(SeriesIdentifier&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SeriesIdentifier& default_instance() {
    return *internal_default_instance();
  }
  static inline const SeriesIdentifier* internal_default_instance() {
    return reinterpret_cast<const SeriesIdentifier*>(
               &_SeriesIdentifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SeriesIdentifier& a, SeriesIdentifier& b) {
    a.Swap(&b);
  }
  inline void Swap(SeriesIdentifier* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeriesIdentifier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SeriesIdentifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SeriesIdentifier>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SeriesIdentifier& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SeriesIdentifier& from) {
    SeriesIdentifier::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeriesIdentifier* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.SeriesIdentifier";
  }
  protected:
  explicit SeriesIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSpecFieldNumber = 2,
    kSeriesTypeFieldNumber = 1,
  };
  // map<string, string> spec = 2;
  int spec_size() const;
  private:
  int _internal_spec_size() const;
  public:
  void clear_spec();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_spec() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_spec();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      spec() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_spec();

  // string series_type = 1;
  void clear_series_type();
  const std::string& series_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_series_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_series_type();
  PROTOBUF_NODISCARD std::string* release_series_type();
  void set_allocated_series_type(std::string* series_type);
  private:
  const std::string& _internal_series_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_series_type(const std::string& value);
  std::string* _internal_mutable_series_type();
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.SeriesIdentifier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        SeriesIdentifier_SpecEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> spec_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr series_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fbddf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DescriptorBlock

// .bosdyn.api.FileFormatDescriptor file_descriptor = 1;
inline bool DescriptorBlock::_internal_has_file_descriptor() const {
  return DescriptorType_case() == kFileDescriptor;
}
inline bool DescriptorBlock::has_file_descriptor() const {
  return _internal_has_file_descriptor();
}
inline void DescriptorBlock::set_has_file_descriptor() {
  _impl_._oneof_case_[0] = kFileDescriptor;
}
inline void DescriptorBlock::clear_file_descriptor() {
  if (_internal_has_file_descriptor()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.DescriptorType_.file_descriptor_;
    }
    clear_has_DescriptorType();
  }
}
inline ::bosdyn::api::FileFormatDescriptor* DescriptorBlock::release_file_descriptor() {
  // @@protoc_insertion_point(field_release:bosdyn.api.DescriptorBlock.file_descriptor)
  if (_internal_has_file_descriptor()) {
    clear_has_DescriptorType();
    ::bosdyn::api::FileFormatDescriptor* temp = _impl_.DescriptorType_.file_descriptor_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.DescriptorType_.file_descriptor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::FileFormatDescriptor& DescriptorBlock::_internal_file_descriptor() const {
  return _internal_has_file_descriptor()
      ? *_impl_.DescriptorType_.file_descriptor_
      : reinterpret_cast< ::bosdyn::api::FileFormatDescriptor&>(::bosdyn::api::_FileFormatDescriptor_default_instance_);
}
inline const ::bosdyn::api::FileFormatDescriptor& DescriptorBlock::file_descriptor() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DescriptorBlock.file_descriptor)
  return _internal_file_descriptor();
}
inline ::bosdyn::api::FileFormatDescriptor* DescriptorBlock::unsafe_arena_release_file_descriptor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.DescriptorBlock.file_descriptor)
  if (_internal_has_file_descriptor()) {
    clear_has_DescriptorType();
    ::bosdyn::api::FileFormatDescriptor* temp = _impl_.DescriptorType_.file_descriptor_;
    _impl_.DescriptorType_.file_descriptor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DescriptorBlock::unsafe_arena_set_allocated_file_descriptor(::bosdyn::api::FileFormatDescriptor* file_descriptor) {
  clear_DescriptorType();
  if (file_descriptor) {
    set_has_file_descriptor();
    _impl_.DescriptorType_.file_descriptor_ = file_descriptor;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.DescriptorBlock.file_descriptor)
}
inline ::bosdyn::api::FileFormatDescriptor* DescriptorBlock::_internal_mutable_file_descriptor() {
  if (!_internal_has_file_descriptor()) {
    clear_DescriptorType();
    set_has_file_descriptor();
    _impl_.DescriptorType_.file_descriptor_ = CreateMaybeMessage< ::bosdyn::api::FileFormatDescriptor >(GetArenaForAllocation());
  }
  return _impl_.DescriptorType_.file_descriptor_;
}
inline ::bosdyn::api::FileFormatDescriptor* DescriptorBlock::mutable_file_descriptor() {
  ::bosdyn::api::FileFormatDescriptor* _msg = _internal_mutable_file_descriptor();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.DescriptorBlock.file_descriptor)
  return _msg;
}

// .bosdyn.api.SeriesDescriptor series_descriptor = 2;
inline bool DescriptorBlock::_internal_has_series_descriptor() const {
  return DescriptorType_case() == kSeriesDescriptor;
}
inline bool DescriptorBlock::has_series_descriptor() const {
  return _internal_has_series_descriptor();
}
inline void DescriptorBlock::set_has_series_descriptor() {
  _impl_._oneof_case_[0] = kSeriesDescriptor;
}
inline void DescriptorBlock::clear_series_descriptor() {
  if (_internal_has_series_descriptor()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.DescriptorType_.series_descriptor_;
    }
    clear_has_DescriptorType();
  }
}
inline ::bosdyn::api::SeriesDescriptor* DescriptorBlock::release_series_descriptor() {
  // @@protoc_insertion_point(field_release:bosdyn.api.DescriptorBlock.series_descriptor)
  if (_internal_has_series_descriptor()) {
    clear_has_DescriptorType();
    ::bosdyn::api::SeriesDescriptor* temp = _impl_.DescriptorType_.series_descriptor_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.DescriptorType_.series_descriptor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::SeriesDescriptor& DescriptorBlock::_internal_series_descriptor() const {
  return _internal_has_series_descriptor()
      ? *_impl_.DescriptorType_.series_descriptor_
      : reinterpret_cast< ::bosdyn::api::SeriesDescriptor&>(::bosdyn::api::_SeriesDescriptor_default_instance_);
}
inline const ::bosdyn::api::SeriesDescriptor& DescriptorBlock::series_descriptor() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DescriptorBlock.series_descriptor)
  return _internal_series_descriptor();
}
inline ::bosdyn::api::SeriesDescriptor* DescriptorBlock::unsafe_arena_release_series_descriptor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.DescriptorBlock.series_descriptor)
  if (_internal_has_series_descriptor()) {
    clear_has_DescriptorType();
    ::bosdyn::api::SeriesDescriptor* temp = _impl_.DescriptorType_.series_descriptor_;
    _impl_.DescriptorType_.series_descriptor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DescriptorBlock::unsafe_arena_set_allocated_series_descriptor(::bosdyn::api::SeriesDescriptor* series_descriptor) {
  clear_DescriptorType();
  if (series_descriptor) {
    set_has_series_descriptor();
    _impl_.DescriptorType_.series_descriptor_ = series_descriptor;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.DescriptorBlock.series_descriptor)
}
inline ::bosdyn::api::SeriesDescriptor* DescriptorBlock::_internal_mutable_series_descriptor() {
  if (!_internal_has_series_descriptor()) {
    clear_DescriptorType();
    set_has_series_descriptor();
    _impl_.DescriptorType_.series_descriptor_ = CreateMaybeMessage< ::bosdyn::api::SeriesDescriptor >(GetArenaForAllocation());
  }
  return _impl_.DescriptorType_.series_descriptor_;
}
inline ::bosdyn::api::SeriesDescriptor* DescriptorBlock::mutable_series_descriptor() {
  ::bosdyn::api::SeriesDescriptor* _msg = _internal_mutable_series_descriptor();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.DescriptorBlock.series_descriptor)
  return _msg;
}

// .bosdyn.api.SeriesBlockIndex series_block_index = 3;
inline bool DescriptorBlock::_internal_has_series_block_index() const {
  return DescriptorType_case() == kSeriesBlockIndex;
}
inline bool DescriptorBlock::has_series_block_index() const {
  return _internal_has_series_block_index();
}
inline void DescriptorBlock::set_has_series_block_index() {
  _impl_._oneof_case_[0] = kSeriesBlockIndex;
}
inline void DescriptorBlock::clear_series_block_index() {
  if (_internal_has_series_block_index()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.DescriptorType_.series_block_index_;
    }
    clear_has_DescriptorType();
  }
}
inline ::bosdyn::api::SeriesBlockIndex* DescriptorBlock::release_series_block_index() {
  // @@protoc_insertion_point(field_release:bosdyn.api.DescriptorBlock.series_block_index)
  if (_internal_has_series_block_index()) {
    clear_has_DescriptorType();
    ::bosdyn::api::SeriesBlockIndex* temp = _impl_.DescriptorType_.series_block_index_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.DescriptorType_.series_block_index_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::SeriesBlockIndex& DescriptorBlock::_internal_series_block_index() const {
  return _internal_has_series_block_index()
      ? *_impl_.DescriptorType_.series_block_index_
      : reinterpret_cast< ::bosdyn::api::SeriesBlockIndex&>(::bosdyn::api::_SeriesBlockIndex_default_instance_);
}
inline const ::bosdyn::api::SeriesBlockIndex& DescriptorBlock::series_block_index() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DescriptorBlock.series_block_index)
  return _internal_series_block_index();
}
inline ::bosdyn::api::SeriesBlockIndex* DescriptorBlock::unsafe_arena_release_series_block_index() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.DescriptorBlock.series_block_index)
  if (_internal_has_series_block_index()) {
    clear_has_DescriptorType();
    ::bosdyn::api::SeriesBlockIndex* temp = _impl_.DescriptorType_.series_block_index_;
    _impl_.DescriptorType_.series_block_index_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DescriptorBlock::unsafe_arena_set_allocated_series_block_index(::bosdyn::api::SeriesBlockIndex* series_block_index) {
  clear_DescriptorType();
  if (series_block_index) {
    set_has_series_block_index();
    _impl_.DescriptorType_.series_block_index_ = series_block_index;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.DescriptorBlock.series_block_index)
}
inline ::bosdyn::api::SeriesBlockIndex* DescriptorBlock::_internal_mutable_series_block_index() {
  if (!_internal_has_series_block_index()) {
    clear_DescriptorType();
    set_has_series_block_index();
    _impl_.DescriptorType_.series_block_index_ = CreateMaybeMessage< ::bosdyn::api::SeriesBlockIndex >(GetArenaForAllocation());
  }
  return _impl_.DescriptorType_.series_block_index_;
}
inline ::bosdyn::api::SeriesBlockIndex* DescriptorBlock::mutable_series_block_index() {
  ::bosdyn::api::SeriesBlockIndex* _msg = _internal_mutable_series_block_index();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.DescriptorBlock.series_block_index)
  return _msg;
}

// .bosdyn.api.FileIndex file_index = 4;
inline bool DescriptorBlock::_internal_has_file_index() const {
  return DescriptorType_case() == kFileIndex;
}
inline bool DescriptorBlock::has_file_index() const {
  return _internal_has_file_index();
}
inline void DescriptorBlock::set_has_file_index() {
  _impl_._oneof_case_[0] = kFileIndex;
}
inline void DescriptorBlock::clear_file_index() {
  if (_internal_has_file_index()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.DescriptorType_.file_index_;
    }
    clear_has_DescriptorType();
  }
}
inline ::bosdyn::api::FileIndex* DescriptorBlock::release_file_index() {
  // @@protoc_insertion_point(field_release:bosdyn.api.DescriptorBlock.file_index)
  if (_internal_has_file_index()) {
    clear_has_DescriptorType();
    ::bosdyn::api::FileIndex* temp = _impl_.DescriptorType_.file_index_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.DescriptorType_.file_index_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::FileIndex& DescriptorBlock::_internal_file_index() const {
  return _internal_has_file_index()
      ? *_impl_.DescriptorType_.file_index_
      : reinterpret_cast< ::bosdyn::api::FileIndex&>(::bosdyn::api::_FileIndex_default_instance_);
}
inline const ::bosdyn::api::FileIndex& DescriptorBlock::file_index() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DescriptorBlock.file_index)
  return _internal_file_index();
}
inline ::bosdyn::api::FileIndex* DescriptorBlock::unsafe_arena_release_file_index() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.DescriptorBlock.file_index)
  if (_internal_has_file_index()) {
    clear_has_DescriptorType();
    ::bosdyn::api::FileIndex* temp = _impl_.DescriptorType_.file_index_;
    _impl_.DescriptorType_.file_index_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DescriptorBlock::unsafe_arena_set_allocated_file_index(::bosdyn::api::FileIndex* file_index) {
  clear_DescriptorType();
  if (file_index) {
    set_has_file_index();
    _impl_.DescriptorType_.file_index_ = file_index;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.DescriptorBlock.file_index)
}
inline ::bosdyn::api::FileIndex* DescriptorBlock::_internal_mutable_file_index() {
  if (!_internal_has_file_index()) {
    clear_DescriptorType();
    set_has_file_index();
    _impl_.DescriptorType_.file_index_ = CreateMaybeMessage< ::bosdyn::api::FileIndex >(GetArenaForAllocation());
  }
  return _impl_.DescriptorType_.file_index_;
}
inline ::bosdyn::api::FileIndex* DescriptorBlock::mutable_file_index() {
  ::bosdyn::api::FileIndex* _msg = _internal_mutable_file_index();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.DescriptorBlock.file_index)
  return _msg;
}

inline bool DescriptorBlock::has_DescriptorType() const {
  return DescriptorType_case() != DESCRIPTORTYPE_NOT_SET;
}
inline void DescriptorBlock::clear_has_DescriptorType() {
  _impl_._oneof_case_[0] = DESCRIPTORTYPE_NOT_SET;
}
inline DescriptorBlock::DescriptorTypeCase DescriptorBlock::DescriptorType_case() const {
  return DescriptorBlock::DescriptorTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// DataDescriptor

// uint32 series_index = 1;
inline void DataDescriptor::clear_series_index() {
  _impl_.series_index_ = 0u;
}
inline uint32_t DataDescriptor::_internal_series_index() const {
  return _impl_.series_index_;
}
inline uint32_t DataDescriptor::series_index() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DataDescriptor.series_index)
  return _internal_series_index();
}
inline void DataDescriptor::_internal_set_series_index(uint32_t value) {
  
  _impl_.series_index_ = value;
}
inline void DataDescriptor::set_series_index(uint32_t value) {
  _internal_set_series_index(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.DataDescriptor.series_index)
}

// .google.protobuf.Timestamp timestamp = 2;
inline bool DataDescriptor::_internal_has_timestamp() const {
  return this != internal_default_instance() && _impl_.timestamp_ != nullptr;
}
inline bool DataDescriptor::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& DataDescriptor::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& DataDescriptor::timestamp() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DataDescriptor.timestamp)
  return _internal_timestamp();
}
inline void DataDescriptor::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.DataDescriptor.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DataDescriptor::release_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DataDescriptor::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:bosdyn.api.DataDescriptor.timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DataDescriptor::_internal_mutable_timestamp() {
  
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DataDescriptor::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.DataDescriptor.timestamp)
  return _msg;
}
inline void DataDescriptor::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.DataDescriptor.timestamp)
}

// repeated int64 additional_indexes = 3;
inline int DataDescriptor::_internal_additional_indexes_size() const {
  return _impl_.additional_indexes_.size();
}
inline int DataDescriptor::additional_indexes_size() const {
  return _internal_additional_indexes_size();
}
inline void DataDescriptor::clear_additional_indexes() {
  _impl_.additional_indexes_.Clear();
}
inline int64_t DataDescriptor::_internal_additional_indexes(int index) const {
  return _impl_.additional_indexes_.Get(index);
}
inline int64_t DataDescriptor::additional_indexes(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DataDescriptor.additional_indexes)
  return _internal_additional_indexes(index);
}
inline void DataDescriptor::set_additional_indexes(int index, int64_t value) {
  _impl_.additional_indexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:bosdyn.api.DataDescriptor.additional_indexes)
}
inline void DataDescriptor::_internal_add_additional_indexes(int64_t value) {
  _impl_.additional_indexes_.Add(value);
}
inline void DataDescriptor::add_additional_indexes(int64_t value) {
  _internal_add_additional_indexes(value);
  // @@protoc_insertion_point(field_add:bosdyn.api.DataDescriptor.additional_indexes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
DataDescriptor::_internal_additional_indexes() const {
  return _impl_.additional_indexes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
DataDescriptor::additional_indexes() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.DataDescriptor.additional_indexes)
  return _internal_additional_indexes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
DataDescriptor::_internal_mutable_additional_indexes() {
  return &_impl_.additional_indexes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
DataDescriptor::mutable_additional_indexes() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.DataDescriptor.additional_indexes)
  return _internal_mutable_additional_indexes();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FileFormatDescriptor

// .bosdyn.api.FileFormatVersion version = 1;
inline bool FileFormatDescriptor::_internal_has_version() const {
  return this != internal_default_instance() && _impl_.version_ != nullptr;
}
inline bool FileFormatDescriptor::has_version() const {
  return _internal_has_version();
}
inline void FileFormatDescriptor::clear_version() {
  if (GetArenaForAllocation() == nullptr && _impl_.version_ != nullptr) {
    delete _impl_.version_;
  }
  _impl_.version_ = nullptr;
}
inline const ::bosdyn::api::FileFormatVersion& FileFormatDescriptor::_internal_version() const {
  const ::bosdyn::api::FileFormatVersion* p = _impl_.version_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::FileFormatVersion&>(
      ::bosdyn::api::_FileFormatVersion_default_instance_);
}
inline const ::bosdyn::api::FileFormatVersion& FileFormatDescriptor::version() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.FileFormatDescriptor.version)
  return _internal_version();
}
inline void FileFormatDescriptor::unsafe_arena_set_allocated_version(
    ::bosdyn::api::FileFormatVersion* version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.version_);
  }
  _impl_.version_ = version;
  if (version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.FileFormatDescriptor.version)
}
inline ::bosdyn::api::FileFormatVersion* FileFormatDescriptor::release_version() {
  
  ::bosdyn::api::FileFormatVersion* temp = _impl_.version_;
  _impl_.version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::FileFormatVersion* FileFormatDescriptor::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_release:bosdyn.api.FileFormatDescriptor.version)
  
  ::bosdyn::api::FileFormatVersion* temp = _impl_.version_;
  _impl_.version_ = nullptr;
  return temp;
}
inline ::bosdyn::api::FileFormatVersion* FileFormatDescriptor::_internal_mutable_version() {
  
  if (_impl_.version_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::FileFormatVersion>(GetArenaForAllocation());
    _impl_.version_ = p;
  }
  return _impl_.version_;
}
inline ::bosdyn::api::FileFormatVersion* FileFormatDescriptor::mutable_version() {
  ::bosdyn::api::FileFormatVersion* _msg = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.FileFormatDescriptor.version)
  return _msg;
}
inline void FileFormatDescriptor::set_allocated_version(::bosdyn::api::FileFormatVersion* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.version_;
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(version);
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.version_ = version;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.FileFormatDescriptor.version)
}

// map<string, string> annotations = 2;
inline int FileFormatDescriptor::_internal_annotations_size() const {
  return _impl_.annotations_.size();
}
inline int FileFormatDescriptor::annotations_size() const {
  return _internal_annotations_size();
}
inline void FileFormatDescriptor::clear_annotations() {
  _impl_.annotations_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
FileFormatDescriptor::_internal_annotations() const {
  return _impl_.annotations_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
FileFormatDescriptor::annotations() const {
  // @@protoc_insertion_point(field_map:bosdyn.api.FileFormatDescriptor.annotations)
  return _internal_annotations();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
FileFormatDescriptor::_internal_mutable_annotations() {
  return _impl_.annotations_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
FileFormatDescriptor::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_map:bosdyn.api.FileFormatDescriptor.annotations)
  return _internal_mutable_annotations();
}

// .bosdyn.api.FileFormatDescriptor.CheckSumType checksum_type = 3;
inline void FileFormatDescriptor::clear_checksum_type() {
  _impl_.checksum_type_ = 0;
}
inline ::bosdyn::api::FileFormatDescriptor_CheckSumType FileFormatDescriptor::_internal_checksum_type() const {
  return static_cast< ::bosdyn::api::FileFormatDescriptor_CheckSumType >(_impl_.checksum_type_);
}
inline ::bosdyn::api::FileFormatDescriptor_CheckSumType FileFormatDescriptor::checksum_type() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.FileFormatDescriptor.checksum_type)
  return _internal_checksum_type();
}
inline void FileFormatDescriptor::_internal_set_checksum_type(::bosdyn::api::FileFormatDescriptor_CheckSumType value) {
  
  _impl_.checksum_type_ = value;
}
inline void FileFormatDescriptor::set_checksum_type(::bosdyn::api::FileFormatDescriptor_CheckSumType value) {
  _internal_set_checksum_type(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.FileFormatDescriptor.checksum_type)
}

// uint32 checksum_num_bytes = 4;
inline void FileFormatDescriptor::clear_checksum_num_bytes() {
  _impl_.checksum_num_bytes_ = 0u;
}
inline uint32_t FileFormatDescriptor::_internal_checksum_num_bytes() const {
  return _impl_.checksum_num_bytes_;
}
inline uint32_t FileFormatDescriptor::checksum_num_bytes() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.FileFormatDescriptor.checksum_num_bytes)
  return _internal_checksum_num_bytes();
}
inline void FileFormatDescriptor::_internal_set_checksum_num_bytes(uint32_t value) {
  
  _impl_.checksum_num_bytes_ = value;
}
inline void FileFormatDescriptor::set_checksum_num_bytes(uint32_t value) {
  _internal_set_checksum_num_bytes(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.FileFormatDescriptor.checksum_num_bytes)
}

// -------------------------------------------------------------------

// FileFormatVersion

// uint32 major_version = 1;
inline void FileFormatVersion::clear_major_version() {
  _impl_.major_version_ = 0u;
}
inline uint32_t FileFormatVersion::_internal_major_version() const {
  return _impl_.major_version_;
}
inline uint32_t FileFormatVersion::major_version() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.FileFormatVersion.major_version)
  return _internal_major_version();
}
inline void FileFormatVersion::_internal_set_major_version(uint32_t value) {
  
  _impl_.major_version_ = value;
}
inline void FileFormatVersion::set_major_version(uint32_t value) {
  _internal_set_major_version(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.FileFormatVersion.major_version)
}

// uint32 minor_version = 2;
inline void FileFormatVersion::clear_minor_version() {
  _impl_.minor_version_ = 0u;
}
inline uint32_t FileFormatVersion::_internal_minor_version() const {
  return _impl_.minor_version_;
}
inline uint32_t FileFormatVersion::minor_version() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.FileFormatVersion.minor_version)
  return _internal_minor_version();
}
inline void FileFormatVersion::_internal_set_minor_version(uint32_t value) {
  
  _impl_.minor_version_ = value;
}
inline void FileFormatVersion::set_minor_version(uint32_t value) {
  _internal_set_minor_version(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.FileFormatVersion.minor_version)
}

// uint32 patch_level = 3;
inline void FileFormatVersion::clear_patch_level() {
  _impl_.patch_level_ = 0u;
}
inline uint32_t FileFormatVersion::_internal_patch_level() const {
  return _impl_.patch_level_;
}
inline uint32_t FileFormatVersion::patch_level() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.FileFormatVersion.patch_level)
  return _internal_patch_level();
}
inline void FileFormatVersion::_internal_set_patch_level(uint32_t value) {
  
  _impl_.patch_level_ = value;
}
inline void FileFormatVersion::set_patch_level(uint32_t value) {
  _internal_set_patch_level(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.FileFormatVersion.patch_level)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SeriesDescriptor

// uint32 series_index = 1;
inline void SeriesDescriptor::clear_series_index() {
  _impl_.series_index_ = 0u;
}
inline uint32_t SeriesDescriptor::_internal_series_index() const {
  return _impl_.series_index_;
}
inline uint32_t SeriesDescriptor::series_index() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SeriesDescriptor.series_index)
  return _internal_series_index();
}
inline void SeriesDescriptor::_internal_set_series_index(uint32_t value) {
  
  _impl_.series_index_ = value;
}
inline void SeriesDescriptor::set_series_index(uint32_t value) {
  _internal_set_series_index(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.SeriesDescriptor.series_index)
}

// .bosdyn.api.SeriesIdentifier series_identifier = 2;
inline bool SeriesDescriptor::_internal_has_series_identifier() const {
  return this != internal_default_instance() && _impl_.series_identifier_ != nullptr;
}
inline bool SeriesDescriptor::has_series_identifier() const {
  return _internal_has_series_identifier();
}
inline void SeriesDescriptor::clear_series_identifier() {
  if (GetArenaForAllocation() == nullptr && _impl_.series_identifier_ != nullptr) {
    delete _impl_.series_identifier_;
  }
  _impl_.series_identifier_ = nullptr;
}
inline const ::bosdyn::api::SeriesIdentifier& SeriesDescriptor::_internal_series_identifier() const {
  const ::bosdyn::api::SeriesIdentifier* p = _impl_.series_identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::SeriesIdentifier&>(
      ::bosdyn::api::_SeriesIdentifier_default_instance_);
}
inline const ::bosdyn::api::SeriesIdentifier& SeriesDescriptor::series_identifier() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SeriesDescriptor.series_identifier)
  return _internal_series_identifier();
}
inline void SeriesDescriptor::unsafe_arena_set_allocated_series_identifier(
    ::bosdyn::api::SeriesIdentifier* series_identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.series_identifier_);
  }
  _impl_.series_identifier_ = series_identifier;
  if (series_identifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.SeriesDescriptor.series_identifier)
}
inline ::bosdyn::api::SeriesIdentifier* SeriesDescriptor::release_series_identifier() {
  
  ::bosdyn::api::SeriesIdentifier* temp = _impl_.series_identifier_;
  _impl_.series_identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::SeriesIdentifier* SeriesDescriptor::unsafe_arena_release_series_identifier() {
  // @@protoc_insertion_point(field_release:bosdyn.api.SeriesDescriptor.series_identifier)
  
  ::bosdyn::api::SeriesIdentifier* temp = _impl_.series_identifier_;
  _impl_.series_identifier_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SeriesIdentifier* SeriesDescriptor::_internal_mutable_series_identifier() {
  
  if (_impl_.series_identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SeriesIdentifier>(GetArenaForAllocation());
    _impl_.series_identifier_ = p;
  }
  return _impl_.series_identifier_;
}
inline ::bosdyn::api::SeriesIdentifier* SeriesDescriptor::mutable_series_identifier() {
  ::bosdyn::api::SeriesIdentifier* _msg = _internal_mutable_series_identifier();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.SeriesDescriptor.series_identifier)
  return _msg;
}
inline void SeriesDescriptor::set_allocated_series_identifier(::bosdyn::api::SeriesIdentifier* series_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.series_identifier_;
  }
  if (series_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(series_identifier);
    if (message_arena != submessage_arena) {
      series_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, series_identifier, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.series_identifier_ = series_identifier;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.SeriesDescriptor.series_identifier)
}

// uint64 identifier_hash = 3;
inline void SeriesDescriptor::clear_identifier_hash() {
  _impl_.identifier_hash_ = uint64_t{0u};
}
inline uint64_t SeriesDescriptor::_internal_identifier_hash() const {
  return _impl_.identifier_hash_;
}
inline uint64_t SeriesDescriptor::identifier_hash() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SeriesDescriptor.identifier_hash)
  return _internal_identifier_hash();
}
inline void SeriesDescriptor::_internal_set_identifier_hash(uint64_t value) {
  
  _impl_.identifier_hash_ = value;
}
inline void SeriesDescriptor::set_identifier_hash(uint64_t value) {
  _internal_set_identifier_hash(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.SeriesDescriptor.identifier_hash)
}

// .bosdyn.api.MessageTypeDescriptor message_type = 4;
inline bool SeriesDescriptor::_internal_has_message_type() const {
  return DataType_case() == kMessageType;
}
inline bool SeriesDescriptor::has_message_type() const {
  return _internal_has_message_type();
}
inline void SeriesDescriptor::set_has_message_type() {
  _impl_._oneof_case_[0] = kMessageType;
}
inline void SeriesDescriptor::clear_message_type() {
  if (_internal_has_message_type()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.DataType_.message_type_;
    }
    clear_has_DataType();
  }
}
inline ::bosdyn::api::MessageTypeDescriptor* SeriesDescriptor::release_message_type() {
  // @@protoc_insertion_point(field_release:bosdyn.api.SeriesDescriptor.message_type)
  if (_internal_has_message_type()) {
    clear_has_DataType();
    ::bosdyn::api::MessageTypeDescriptor* temp = _impl_.DataType_.message_type_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.DataType_.message_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::MessageTypeDescriptor& SeriesDescriptor::_internal_message_type() const {
  return _internal_has_message_type()
      ? *_impl_.DataType_.message_type_
      : reinterpret_cast< ::bosdyn::api::MessageTypeDescriptor&>(::bosdyn::api::_MessageTypeDescriptor_default_instance_);
}
inline const ::bosdyn::api::MessageTypeDescriptor& SeriesDescriptor::message_type() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SeriesDescriptor.message_type)
  return _internal_message_type();
}
inline ::bosdyn::api::MessageTypeDescriptor* SeriesDescriptor::unsafe_arena_release_message_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.SeriesDescriptor.message_type)
  if (_internal_has_message_type()) {
    clear_has_DataType();
    ::bosdyn::api::MessageTypeDescriptor* temp = _impl_.DataType_.message_type_;
    _impl_.DataType_.message_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SeriesDescriptor::unsafe_arena_set_allocated_message_type(::bosdyn::api::MessageTypeDescriptor* message_type) {
  clear_DataType();
  if (message_type) {
    set_has_message_type();
    _impl_.DataType_.message_type_ = message_type;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.SeriesDescriptor.message_type)
}
inline ::bosdyn::api::MessageTypeDescriptor* SeriesDescriptor::_internal_mutable_message_type() {
  if (!_internal_has_message_type()) {
    clear_DataType();
    set_has_message_type();
    _impl_.DataType_.message_type_ = CreateMaybeMessage< ::bosdyn::api::MessageTypeDescriptor >(GetArenaForAllocation());
  }
  return _impl_.DataType_.message_type_;
}
inline ::bosdyn::api::MessageTypeDescriptor* SeriesDescriptor::mutable_message_type() {
  ::bosdyn::api::MessageTypeDescriptor* _msg = _internal_mutable_message_type();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.SeriesDescriptor.message_type)
  return _msg;
}

// .bosdyn.api.PodTypeDescriptor pod_type = 5;
inline bool SeriesDescriptor::_internal_has_pod_type() const {
  return DataType_case() == kPodType;
}
inline bool SeriesDescriptor::has_pod_type() const {
  return _internal_has_pod_type();
}
inline void SeriesDescriptor::set_has_pod_type() {
  _impl_._oneof_case_[0] = kPodType;
}
inline void SeriesDescriptor::clear_pod_type() {
  if (_internal_has_pod_type()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.DataType_.pod_type_;
    }
    clear_has_DataType();
  }
}
inline ::bosdyn::api::PodTypeDescriptor* SeriesDescriptor::release_pod_type() {
  // @@protoc_insertion_point(field_release:bosdyn.api.SeriesDescriptor.pod_type)
  if (_internal_has_pod_type()) {
    clear_has_DataType();
    ::bosdyn::api::PodTypeDescriptor* temp = _impl_.DataType_.pod_type_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.DataType_.pod_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::PodTypeDescriptor& SeriesDescriptor::_internal_pod_type() const {
  return _internal_has_pod_type()
      ? *_impl_.DataType_.pod_type_
      : reinterpret_cast< ::bosdyn::api::PodTypeDescriptor&>(::bosdyn::api::_PodTypeDescriptor_default_instance_);
}
inline const ::bosdyn::api::PodTypeDescriptor& SeriesDescriptor::pod_type() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SeriesDescriptor.pod_type)
  return _internal_pod_type();
}
inline ::bosdyn::api::PodTypeDescriptor* SeriesDescriptor::unsafe_arena_release_pod_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.SeriesDescriptor.pod_type)
  if (_internal_has_pod_type()) {
    clear_has_DataType();
    ::bosdyn::api::PodTypeDescriptor* temp = _impl_.DataType_.pod_type_;
    _impl_.DataType_.pod_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SeriesDescriptor::unsafe_arena_set_allocated_pod_type(::bosdyn::api::PodTypeDescriptor* pod_type) {
  clear_DataType();
  if (pod_type) {
    set_has_pod_type();
    _impl_.DataType_.pod_type_ = pod_type;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.SeriesDescriptor.pod_type)
}
inline ::bosdyn::api::PodTypeDescriptor* SeriesDescriptor::_internal_mutable_pod_type() {
  if (!_internal_has_pod_type()) {
    clear_DataType();
    set_has_pod_type();
    _impl_.DataType_.pod_type_ = CreateMaybeMessage< ::bosdyn::api::PodTypeDescriptor >(GetArenaForAllocation());
  }
  return _impl_.DataType_.pod_type_;
}
inline ::bosdyn::api::PodTypeDescriptor* SeriesDescriptor::mutable_pod_type() {
  ::bosdyn::api::PodTypeDescriptor* _msg = _internal_mutable_pod_type();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.SeriesDescriptor.pod_type)
  return _msg;
}

// .bosdyn.api.StructTypeDescriptor struct_type = 6;
inline bool SeriesDescriptor::_internal_has_struct_type() const {
  return DataType_case() == kStructType;
}
inline bool SeriesDescriptor::has_struct_type() const {
  return _internal_has_struct_type();
}
inline void SeriesDescriptor::set_has_struct_type() {
  _impl_._oneof_case_[0] = kStructType;
}
inline void SeriesDescriptor::clear_struct_type() {
  if (_internal_has_struct_type()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.DataType_.struct_type_;
    }
    clear_has_DataType();
  }
}
inline ::bosdyn::api::StructTypeDescriptor* SeriesDescriptor::release_struct_type() {
  // @@protoc_insertion_point(field_release:bosdyn.api.SeriesDescriptor.struct_type)
  if (_internal_has_struct_type()) {
    clear_has_DataType();
    ::bosdyn::api::StructTypeDescriptor* temp = _impl_.DataType_.struct_type_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.DataType_.struct_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::StructTypeDescriptor& SeriesDescriptor::_internal_struct_type() const {
  return _internal_has_struct_type()
      ? *_impl_.DataType_.struct_type_
      : reinterpret_cast< ::bosdyn::api::StructTypeDescriptor&>(::bosdyn::api::_StructTypeDescriptor_default_instance_);
}
inline const ::bosdyn::api::StructTypeDescriptor& SeriesDescriptor::struct_type() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SeriesDescriptor.struct_type)
  return _internal_struct_type();
}
inline ::bosdyn::api::StructTypeDescriptor* SeriesDescriptor::unsafe_arena_release_struct_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.SeriesDescriptor.struct_type)
  if (_internal_has_struct_type()) {
    clear_has_DataType();
    ::bosdyn::api::StructTypeDescriptor* temp = _impl_.DataType_.struct_type_;
    _impl_.DataType_.struct_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SeriesDescriptor::unsafe_arena_set_allocated_struct_type(::bosdyn::api::StructTypeDescriptor* struct_type) {
  clear_DataType();
  if (struct_type) {
    set_has_struct_type();
    _impl_.DataType_.struct_type_ = struct_type;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.SeriesDescriptor.struct_type)
}
inline ::bosdyn::api::StructTypeDescriptor* SeriesDescriptor::_internal_mutable_struct_type() {
  if (!_internal_has_struct_type()) {
    clear_DataType();
    set_has_struct_type();
    _impl_.DataType_.struct_type_ = CreateMaybeMessage< ::bosdyn::api::StructTypeDescriptor >(GetArenaForAllocation());
  }
  return _impl_.DataType_.struct_type_;
}
inline ::bosdyn::api::StructTypeDescriptor* SeriesDescriptor::mutable_struct_type() {
  ::bosdyn::api::StructTypeDescriptor* _msg = _internal_mutable_struct_type();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.SeriesDescriptor.struct_type)
  return _msg;
}

// map<string, string> annotations = 7;
inline int SeriesDescriptor::_internal_annotations_size() const {
  return _impl_.annotations_.size();
}
inline int SeriesDescriptor::annotations_size() const {
  return _internal_annotations_size();
}
inline void SeriesDescriptor::clear_annotations() {
  _impl_.annotations_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SeriesDescriptor::_internal_annotations() const {
  return _impl_.annotations_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SeriesDescriptor::annotations() const {
  // @@protoc_insertion_point(field_map:bosdyn.api.SeriesDescriptor.annotations)
  return _internal_annotations();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SeriesDescriptor::_internal_mutable_annotations() {
  return _impl_.annotations_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SeriesDescriptor::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_map:bosdyn.api.SeriesDescriptor.annotations)
  return _internal_mutable_annotations();
}

// repeated string additional_index_names = 8;
inline int SeriesDescriptor::_internal_additional_index_names_size() const {
  return _impl_.additional_index_names_.size();
}
inline int SeriesDescriptor::additional_index_names_size() const {
  return _internal_additional_index_names_size();
}
inline void SeriesDescriptor::clear_additional_index_names() {
  _impl_.additional_index_names_.Clear();
}
inline std::string* SeriesDescriptor::add_additional_index_names() {
  std::string* _s = _internal_add_additional_index_names();
  // @@protoc_insertion_point(field_add_mutable:bosdyn.api.SeriesDescriptor.additional_index_names)
  return _s;
}
inline const std::string& SeriesDescriptor::_internal_additional_index_names(int index) const {
  return _impl_.additional_index_names_.Get(index);
}
inline const std::string& SeriesDescriptor::additional_index_names(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SeriesDescriptor.additional_index_names)
  return _internal_additional_index_names(index);
}
inline std::string* SeriesDescriptor::mutable_additional_index_names(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.SeriesDescriptor.additional_index_names)
  return _impl_.additional_index_names_.Mutable(index);
}
inline void SeriesDescriptor::set_additional_index_names(int index, const std::string& value) {
  _impl_.additional_index_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.SeriesDescriptor.additional_index_names)
}
inline void SeriesDescriptor::set_additional_index_names(int index, std::string&& value) {
  _impl_.additional_index_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:bosdyn.api.SeriesDescriptor.additional_index_names)
}
inline void SeriesDescriptor::set_additional_index_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.additional_index_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bosdyn.api.SeriesDescriptor.additional_index_names)
}
inline void SeriesDescriptor::set_additional_index_names(int index, const char* value, size_t size) {
  _impl_.additional_index_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.SeriesDescriptor.additional_index_names)
}
inline std::string* SeriesDescriptor::_internal_add_additional_index_names() {
  return _impl_.additional_index_names_.Add();
}
inline void SeriesDescriptor::add_additional_index_names(const std::string& value) {
  _impl_.additional_index_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bosdyn.api.SeriesDescriptor.additional_index_names)
}
inline void SeriesDescriptor::add_additional_index_names(std::string&& value) {
  _impl_.additional_index_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bosdyn.api.SeriesDescriptor.additional_index_names)
}
inline void SeriesDescriptor::add_additional_index_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.additional_index_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bosdyn.api.SeriesDescriptor.additional_index_names)
}
inline void SeriesDescriptor::add_additional_index_names(const char* value, size_t size) {
  _impl_.additional_index_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bosdyn.api.SeriesDescriptor.additional_index_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SeriesDescriptor::additional_index_names() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.SeriesDescriptor.additional_index_names)
  return _impl_.additional_index_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SeriesDescriptor::mutable_additional_index_names() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.SeriesDescriptor.additional_index_names)
  return &_impl_.additional_index_names_;
}

// string description = 9;
inline void SeriesDescriptor::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& SeriesDescriptor::description() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SeriesDescriptor.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SeriesDescriptor::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.SeriesDescriptor.description)
}
inline std::string* SeriesDescriptor::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.SeriesDescriptor.description)
  return _s;
}
inline const std::string& SeriesDescriptor::_internal_description() const {
  return _impl_.description_.Get();
}
inline void SeriesDescriptor::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* SeriesDescriptor::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* SeriesDescriptor::release_description() {
  // @@protoc_insertion_point(field_release:bosdyn.api.SeriesDescriptor.description)
  return _impl_.description_.Release();
}
inline void SeriesDescriptor::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.SeriesDescriptor.description)
}

inline bool SeriesDescriptor::has_DataType() const {
  return DataType_case() != DATATYPE_NOT_SET;
}
inline void SeriesDescriptor::clear_has_DataType() {
  _impl_._oneof_case_[0] = DATATYPE_NOT_SET;
}
inline SeriesDescriptor::DataTypeCase SeriesDescriptor::DataType_case() const {
  return SeriesDescriptor::DataTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// MessageTypeDescriptor

// string content_type = 1;
inline void MessageTypeDescriptor::clear_content_type() {
  _impl_.content_type_.ClearToEmpty();
}
inline const std::string& MessageTypeDescriptor::content_type() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MessageTypeDescriptor.content_type)
  return _internal_content_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageTypeDescriptor::set_content_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.MessageTypeDescriptor.content_type)
}
inline std::string* MessageTypeDescriptor::mutable_content_type() {
  std::string* _s = _internal_mutable_content_type();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.MessageTypeDescriptor.content_type)
  return _s;
}
inline const std::string& MessageTypeDescriptor::_internal_content_type() const {
  return _impl_.content_type_.Get();
}
inline void MessageTypeDescriptor::_internal_set_content_type(const std::string& value) {
  
  _impl_.content_type_.Set(value, GetArenaForAllocation());
}
inline std::string* MessageTypeDescriptor::_internal_mutable_content_type() {
  
  return _impl_.content_type_.Mutable(GetArenaForAllocation());
}
inline std::string* MessageTypeDescriptor::release_content_type() {
  // @@protoc_insertion_point(field_release:bosdyn.api.MessageTypeDescriptor.content_type)
  return _impl_.content_type_.Release();
}
inline void MessageTypeDescriptor::set_allocated_content_type(std::string* content_type) {
  if (content_type != nullptr) {
    
  } else {
    
  }
  _impl_.content_type_.SetAllocated(content_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_type_.IsDefault()) {
    _impl_.content_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.MessageTypeDescriptor.content_type)
}

// string type_name = 2;
inline void MessageTypeDescriptor::clear_type_name() {
  _impl_.type_name_.ClearToEmpty();
}
inline const std::string& MessageTypeDescriptor::type_name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MessageTypeDescriptor.type_name)
  return _internal_type_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageTypeDescriptor::set_type_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.MessageTypeDescriptor.type_name)
}
inline std::string* MessageTypeDescriptor::mutable_type_name() {
  std::string* _s = _internal_mutable_type_name();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.MessageTypeDescriptor.type_name)
  return _s;
}
inline const std::string& MessageTypeDescriptor::_internal_type_name() const {
  return _impl_.type_name_.Get();
}
inline void MessageTypeDescriptor::_internal_set_type_name(const std::string& value) {
  
  _impl_.type_name_.Set(value, GetArenaForAllocation());
}
inline std::string* MessageTypeDescriptor::_internal_mutable_type_name() {
  
  return _impl_.type_name_.Mutable(GetArenaForAllocation());
}
inline std::string* MessageTypeDescriptor::release_type_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.MessageTypeDescriptor.type_name)
  return _impl_.type_name_.Release();
}
inline void MessageTypeDescriptor::set_allocated_type_name(std::string* type_name) {
  if (type_name != nullptr) {
    
  } else {
    
  }
  _impl_.type_name_.SetAllocated(type_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_name_.IsDefault()) {
    _impl_.type_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.MessageTypeDescriptor.type_name)
}

// bool is_metadata = 3;
inline void MessageTypeDescriptor::clear_is_metadata() {
  _impl_.is_metadata_ = false;
}
inline bool MessageTypeDescriptor::_internal_is_metadata() const {
  return _impl_.is_metadata_;
}
inline bool MessageTypeDescriptor::is_metadata() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MessageTypeDescriptor.is_metadata)
  return _internal_is_metadata();
}
inline void MessageTypeDescriptor::_internal_set_is_metadata(bool value) {
  
  _impl_.is_metadata_ = value;
}
inline void MessageTypeDescriptor::set_is_metadata(bool value) {
  _internal_set_is_metadata(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.MessageTypeDescriptor.is_metadata)
}

// -------------------------------------------------------------------

// PodTypeDescriptor

// .bosdyn.api.PodTypeEnum pod_type = 1;
inline void PodTypeDescriptor::clear_pod_type() {
  _impl_.pod_type_ = 0;
}
inline ::bosdyn::api::PodTypeEnum PodTypeDescriptor::_internal_pod_type() const {
  return static_cast< ::bosdyn::api::PodTypeEnum >(_impl_.pod_type_);
}
inline ::bosdyn::api::PodTypeEnum PodTypeDescriptor::pod_type() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PodTypeDescriptor.pod_type)
  return _internal_pod_type();
}
inline void PodTypeDescriptor::_internal_set_pod_type(::bosdyn::api::PodTypeEnum value) {
  
  _impl_.pod_type_ = value;
}
inline void PodTypeDescriptor::set_pod_type(::bosdyn::api::PodTypeEnum value) {
  _internal_set_pod_type(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.PodTypeDescriptor.pod_type)
}

// repeated uint32 dimension = 2;
inline int PodTypeDescriptor::_internal_dimension_size() const {
  return _impl_.dimension_.size();
}
inline int PodTypeDescriptor::dimension_size() const {
  return _internal_dimension_size();
}
inline void PodTypeDescriptor::clear_dimension() {
  _impl_.dimension_.Clear();
}
inline uint32_t PodTypeDescriptor::_internal_dimension(int index) const {
  return _impl_.dimension_.Get(index);
}
inline uint32_t PodTypeDescriptor::dimension(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PodTypeDescriptor.dimension)
  return _internal_dimension(index);
}
inline void PodTypeDescriptor::set_dimension(int index, uint32_t value) {
  _impl_.dimension_.Set(index, value);
  // @@protoc_insertion_point(field_set:bosdyn.api.PodTypeDescriptor.dimension)
}
inline void PodTypeDescriptor::_internal_add_dimension(uint32_t value) {
  _impl_.dimension_.Add(value);
}
inline void PodTypeDescriptor::add_dimension(uint32_t value) {
  _internal_add_dimension(value);
  // @@protoc_insertion_point(field_add:bosdyn.api.PodTypeDescriptor.dimension)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PodTypeDescriptor::_internal_dimension() const {
  return _impl_.dimension_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PodTypeDescriptor::dimension() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.PodTypeDescriptor.dimension)
  return _internal_dimension();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PodTypeDescriptor::_internal_mutable_dimension() {
  return &_impl_.dimension_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PodTypeDescriptor::mutable_dimension() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.PodTypeDescriptor.dimension)
  return _internal_mutable_dimension();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StructTypeDescriptor

// map<string, uint64> key_to_series_identifier_hash = 1;
inline int StructTypeDescriptor::_internal_key_to_series_identifier_hash_size() const {
  return _impl_.key_to_series_identifier_hash_.size();
}
inline int StructTypeDescriptor::key_to_series_identifier_hash_size() const {
  return _internal_key_to_series_identifier_hash_size();
}
inline void StructTypeDescriptor::clear_key_to_series_identifier_hash() {
  _impl_.key_to_series_identifier_hash_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
StructTypeDescriptor::_internal_key_to_series_identifier_hash() const {
  return _impl_.key_to_series_identifier_hash_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
StructTypeDescriptor::key_to_series_identifier_hash() const {
  // @@protoc_insertion_point(field_map:bosdyn.api.StructTypeDescriptor.key_to_series_identifier_hash)
  return _internal_key_to_series_identifier_hash();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
StructTypeDescriptor::_internal_mutable_key_to_series_identifier_hash() {
  return _impl_.key_to_series_identifier_hash_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
StructTypeDescriptor::mutable_key_to_series_identifier_hash() {
  // @@protoc_insertion_point(field_mutable_map:bosdyn.api.StructTypeDescriptor.key_to_series_identifier_hash)
  return _internal_mutable_key_to_series_identifier_hash();
}

// -------------------------------------------------------------------

// FileIndex

// repeated .bosdyn.api.SeriesIdentifier series_identifiers = 1;
inline int FileIndex::_internal_series_identifiers_size() const {
  return _impl_.series_identifiers_.size();
}
inline int FileIndex::series_identifiers_size() const {
  return _internal_series_identifiers_size();
}
inline void FileIndex::clear_series_identifiers() {
  _impl_.series_identifiers_.Clear();
}
inline ::bosdyn::api::SeriesIdentifier* FileIndex::mutable_series_identifiers(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.FileIndex.series_identifiers)
  return _impl_.series_identifiers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::SeriesIdentifier >*
FileIndex::mutable_series_identifiers() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.FileIndex.series_identifiers)
  return &_impl_.series_identifiers_;
}
inline const ::bosdyn::api::SeriesIdentifier& FileIndex::_internal_series_identifiers(int index) const {
  return _impl_.series_identifiers_.Get(index);
}
inline const ::bosdyn::api::SeriesIdentifier& FileIndex::series_identifiers(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.FileIndex.series_identifiers)
  return _internal_series_identifiers(index);
}
inline ::bosdyn::api::SeriesIdentifier* FileIndex::_internal_add_series_identifiers() {
  return _impl_.series_identifiers_.Add();
}
inline ::bosdyn::api::SeriesIdentifier* FileIndex::add_series_identifiers() {
  ::bosdyn::api::SeriesIdentifier* _add = _internal_add_series_identifiers();
  // @@protoc_insertion_point(field_add:bosdyn.api.FileIndex.series_identifiers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::SeriesIdentifier >&
FileIndex::series_identifiers() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.FileIndex.series_identifiers)
  return _impl_.series_identifiers_;
}

// repeated uint64 series_block_index_offsets = 2;
inline int FileIndex::_internal_series_block_index_offsets_size() const {
  return _impl_.series_block_index_offsets_.size();
}
inline int FileIndex::series_block_index_offsets_size() const {
  return _internal_series_block_index_offsets_size();
}
inline void FileIndex::clear_series_block_index_offsets() {
  _impl_.series_block_index_offsets_.Clear();
}
inline uint64_t FileIndex::_internal_series_block_index_offsets(int index) const {
  return _impl_.series_block_index_offsets_.Get(index);
}
inline uint64_t FileIndex::series_block_index_offsets(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.FileIndex.series_block_index_offsets)
  return _internal_series_block_index_offsets(index);
}
inline void FileIndex::set_series_block_index_offsets(int index, uint64_t value) {
  _impl_.series_block_index_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:bosdyn.api.FileIndex.series_block_index_offsets)
}
inline void FileIndex::_internal_add_series_block_index_offsets(uint64_t value) {
  _impl_.series_block_index_offsets_.Add(value);
}
inline void FileIndex::add_series_block_index_offsets(uint64_t value) {
  _internal_add_series_block_index_offsets(value);
  // @@protoc_insertion_point(field_add:bosdyn.api.FileIndex.series_block_index_offsets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
FileIndex::_internal_series_block_index_offsets() const {
  return _impl_.series_block_index_offsets_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
FileIndex::series_block_index_offsets() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.FileIndex.series_block_index_offsets)
  return _internal_series_block_index_offsets();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
FileIndex::_internal_mutable_series_block_index_offsets() {
  return &_impl_.series_block_index_offsets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
FileIndex::mutable_series_block_index_offsets() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.FileIndex.series_block_index_offsets)
  return _internal_mutable_series_block_index_offsets();
}

// repeated uint64 series_identifier_hashes = 3;
inline int FileIndex::_internal_series_identifier_hashes_size() const {
  return _impl_.series_identifier_hashes_.size();
}
inline int FileIndex::series_identifier_hashes_size() const {
  return _internal_series_identifier_hashes_size();
}
inline void FileIndex::clear_series_identifier_hashes() {
  _impl_.series_identifier_hashes_.Clear();
}
inline uint64_t FileIndex::_internal_series_identifier_hashes(int index) const {
  return _impl_.series_identifier_hashes_.Get(index);
}
inline uint64_t FileIndex::series_identifier_hashes(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.FileIndex.series_identifier_hashes)
  return _internal_series_identifier_hashes(index);
}
inline void FileIndex::set_series_identifier_hashes(int index, uint64_t value) {
  _impl_.series_identifier_hashes_.Set(index, value);
  // @@protoc_insertion_point(field_set:bosdyn.api.FileIndex.series_identifier_hashes)
}
inline void FileIndex::_internal_add_series_identifier_hashes(uint64_t value) {
  _impl_.series_identifier_hashes_.Add(value);
}
inline void FileIndex::add_series_identifier_hashes(uint64_t value) {
  _internal_add_series_identifier_hashes(value);
  // @@protoc_insertion_point(field_add:bosdyn.api.FileIndex.series_identifier_hashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
FileIndex::_internal_series_identifier_hashes() const {
  return _impl_.series_identifier_hashes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
FileIndex::series_identifier_hashes() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.FileIndex.series_identifier_hashes)
  return _internal_series_identifier_hashes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
FileIndex::_internal_mutable_series_identifier_hashes() {
  return &_impl_.series_identifier_hashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
FileIndex::mutable_series_identifier_hashes() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.FileIndex.series_identifier_hashes)
  return _internal_mutable_series_identifier_hashes();
}

// -------------------------------------------------------------------

// SeriesBlockIndex_BlockEntry

// .google.protobuf.Timestamp timestamp = 1;
inline bool SeriesBlockIndex_BlockEntry::_internal_has_timestamp() const {
  return this != internal_default_instance() && _impl_.timestamp_ != nullptr;
}
inline bool SeriesBlockIndex_BlockEntry::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SeriesBlockIndex_BlockEntry::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SeriesBlockIndex_BlockEntry::timestamp() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SeriesBlockIndex.BlockEntry.timestamp)
  return _internal_timestamp();
}
inline void SeriesBlockIndex_BlockEntry::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.SeriesBlockIndex.BlockEntry.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SeriesBlockIndex_BlockEntry::release_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SeriesBlockIndex_BlockEntry::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:bosdyn.api.SeriesBlockIndex.BlockEntry.timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SeriesBlockIndex_BlockEntry::_internal_mutable_timestamp() {
  
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SeriesBlockIndex_BlockEntry::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.SeriesBlockIndex.BlockEntry.timestamp)
  return _msg;
}
inline void SeriesBlockIndex_BlockEntry::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.SeriesBlockIndex.BlockEntry.timestamp)
}

// uint64 file_offset = 2;
inline void SeriesBlockIndex_BlockEntry::clear_file_offset() {
  _impl_.file_offset_ = uint64_t{0u};
}
inline uint64_t SeriesBlockIndex_BlockEntry::_internal_file_offset() const {
  return _impl_.file_offset_;
}
inline uint64_t SeriesBlockIndex_BlockEntry::file_offset() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SeriesBlockIndex.BlockEntry.file_offset)
  return _internal_file_offset();
}
inline void SeriesBlockIndex_BlockEntry::_internal_set_file_offset(uint64_t value) {
  
  _impl_.file_offset_ = value;
}
inline void SeriesBlockIndex_BlockEntry::set_file_offset(uint64_t value) {
  _internal_set_file_offset(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.SeriesBlockIndex.BlockEntry.file_offset)
}

// repeated int64 additional_indexes = 3;
inline int SeriesBlockIndex_BlockEntry::_internal_additional_indexes_size() const {
  return _impl_.additional_indexes_.size();
}
inline int SeriesBlockIndex_BlockEntry::additional_indexes_size() const {
  return _internal_additional_indexes_size();
}
inline void SeriesBlockIndex_BlockEntry::clear_additional_indexes() {
  _impl_.additional_indexes_.Clear();
}
inline int64_t SeriesBlockIndex_BlockEntry::_internal_additional_indexes(int index) const {
  return _impl_.additional_indexes_.Get(index);
}
inline int64_t SeriesBlockIndex_BlockEntry::additional_indexes(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SeriesBlockIndex.BlockEntry.additional_indexes)
  return _internal_additional_indexes(index);
}
inline void SeriesBlockIndex_BlockEntry::set_additional_indexes(int index, int64_t value) {
  _impl_.additional_indexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:bosdyn.api.SeriesBlockIndex.BlockEntry.additional_indexes)
}
inline void SeriesBlockIndex_BlockEntry::_internal_add_additional_indexes(int64_t value) {
  _impl_.additional_indexes_.Add(value);
}
inline void SeriesBlockIndex_BlockEntry::add_additional_indexes(int64_t value) {
  _internal_add_additional_indexes(value);
  // @@protoc_insertion_point(field_add:bosdyn.api.SeriesBlockIndex.BlockEntry.additional_indexes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SeriesBlockIndex_BlockEntry::_internal_additional_indexes() const {
  return _impl_.additional_indexes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SeriesBlockIndex_BlockEntry::additional_indexes() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.SeriesBlockIndex.BlockEntry.additional_indexes)
  return _internal_additional_indexes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SeriesBlockIndex_BlockEntry::_internal_mutable_additional_indexes() {
  return &_impl_.additional_indexes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SeriesBlockIndex_BlockEntry::mutable_additional_indexes() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.SeriesBlockIndex.BlockEntry.additional_indexes)
  return _internal_mutable_additional_indexes();
}

// -------------------------------------------------------------------

// SeriesBlockIndex

// uint32 series_index = 1;
inline void SeriesBlockIndex::clear_series_index() {
  _impl_.series_index_ = 0u;
}
inline uint32_t SeriesBlockIndex::_internal_series_index() const {
  return _impl_.series_index_;
}
inline uint32_t SeriesBlockIndex::series_index() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SeriesBlockIndex.series_index)
  return _internal_series_index();
}
inline void SeriesBlockIndex::_internal_set_series_index(uint32_t value) {
  
  _impl_.series_index_ = value;
}
inline void SeriesBlockIndex::set_series_index(uint32_t value) {
  _internal_set_series_index(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.SeriesBlockIndex.series_index)
}

// uint64 descriptor_file_offset = 2;
inline void SeriesBlockIndex::clear_descriptor_file_offset() {
  _impl_.descriptor_file_offset_ = uint64_t{0u};
}
inline uint64_t SeriesBlockIndex::_internal_descriptor_file_offset() const {
  return _impl_.descriptor_file_offset_;
}
inline uint64_t SeriesBlockIndex::descriptor_file_offset() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SeriesBlockIndex.descriptor_file_offset)
  return _internal_descriptor_file_offset();
}
inline void SeriesBlockIndex::_internal_set_descriptor_file_offset(uint64_t value) {
  
  _impl_.descriptor_file_offset_ = value;
}
inline void SeriesBlockIndex::set_descriptor_file_offset(uint64_t value) {
  _internal_set_descriptor_file_offset(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.SeriesBlockIndex.descriptor_file_offset)
}

// repeated .bosdyn.api.SeriesBlockIndex.BlockEntry block_entries = 3;
inline int SeriesBlockIndex::_internal_block_entries_size() const {
  return _impl_.block_entries_.size();
}
inline int SeriesBlockIndex::block_entries_size() const {
  return _internal_block_entries_size();
}
inline void SeriesBlockIndex::clear_block_entries() {
  _impl_.block_entries_.Clear();
}
inline ::bosdyn::api::SeriesBlockIndex_BlockEntry* SeriesBlockIndex::mutable_block_entries(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.SeriesBlockIndex.block_entries)
  return _impl_.block_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::SeriesBlockIndex_BlockEntry >*
SeriesBlockIndex::mutable_block_entries() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.SeriesBlockIndex.block_entries)
  return &_impl_.block_entries_;
}
inline const ::bosdyn::api::SeriesBlockIndex_BlockEntry& SeriesBlockIndex::_internal_block_entries(int index) const {
  return _impl_.block_entries_.Get(index);
}
inline const ::bosdyn::api::SeriesBlockIndex_BlockEntry& SeriesBlockIndex::block_entries(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SeriesBlockIndex.block_entries)
  return _internal_block_entries(index);
}
inline ::bosdyn::api::SeriesBlockIndex_BlockEntry* SeriesBlockIndex::_internal_add_block_entries() {
  return _impl_.block_entries_.Add();
}
inline ::bosdyn::api::SeriesBlockIndex_BlockEntry* SeriesBlockIndex::add_block_entries() {
  ::bosdyn::api::SeriesBlockIndex_BlockEntry* _add = _internal_add_block_entries();
  // @@protoc_insertion_point(field_add:bosdyn.api.SeriesBlockIndex.block_entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::SeriesBlockIndex_BlockEntry >&
SeriesBlockIndex::block_entries() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.SeriesBlockIndex.block_entries)
  return _impl_.block_entries_;
}

// uint64 total_bytes = 4;
inline void SeriesBlockIndex::clear_total_bytes() {
  _impl_.total_bytes_ = uint64_t{0u};
}
inline uint64_t SeriesBlockIndex::_internal_total_bytes() const {
  return _impl_.total_bytes_;
}
inline uint64_t SeriesBlockIndex::total_bytes() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SeriesBlockIndex.total_bytes)
  return _internal_total_bytes();
}
inline void SeriesBlockIndex::_internal_set_total_bytes(uint64_t value) {
  
  _impl_.total_bytes_ = value;
}
inline void SeriesBlockIndex::set_total_bytes(uint64_t value) {
  _internal_set_total_bytes(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.SeriesBlockIndex.total_bytes)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SeriesIdentifier

// string series_type = 1;
inline void SeriesIdentifier::clear_series_type() {
  _impl_.series_type_.ClearToEmpty();
}
inline const std::string& SeriesIdentifier::series_type() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SeriesIdentifier.series_type)
  return _internal_series_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SeriesIdentifier::set_series_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.series_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.SeriesIdentifier.series_type)
}
inline std::string* SeriesIdentifier::mutable_series_type() {
  std::string* _s = _internal_mutable_series_type();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.SeriesIdentifier.series_type)
  return _s;
}
inline const std::string& SeriesIdentifier::_internal_series_type() const {
  return _impl_.series_type_.Get();
}
inline void SeriesIdentifier::_internal_set_series_type(const std::string& value) {
  
  _impl_.series_type_.Set(value, GetArenaForAllocation());
}
inline std::string* SeriesIdentifier::_internal_mutable_series_type() {
  
  return _impl_.series_type_.Mutable(GetArenaForAllocation());
}
inline std::string* SeriesIdentifier::release_series_type() {
  // @@protoc_insertion_point(field_release:bosdyn.api.SeriesIdentifier.series_type)
  return _impl_.series_type_.Release();
}
inline void SeriesIdentifier::set_allocated_series_type(std::string* series_type) {
  if (series_type != nullptr) {
    
  } else {
    
  }
  _impl_.series_type_.SetAllocated(series_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.series_type_.IsDefault()) {
    _impl_.series_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.SeriesIdentifier.series_type)
}

// map<string, string> spec = 2;
inline int SeriesIdentifier::_internal_spec_size() const {
  return _impl_.spec_.size();
}
inline int SeriesIdentifier::spec_size() const {
  return _internal_spec_size();
}
inline void SeriesIdentifier::clear_spec() {
  _impl_.spec_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SeriesIdentifier::_internal_spec() const {
  return _impl_.spec_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SeriesIdentifier::spec() const {
  // @@protoc_insertion_point(field_map:bosdyn.api.SeriesIdentifier.spec)
  return _internal_spec();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SeriesIdentifier::_internal_mutable_spec() {
  return _impl_.spec_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SeriesIdentifier::mutable_spec() {
  // @@protoc_insertion_point(field_mutable_map:bosdyn.api.SeriesIdentifier.spec)
  return _internal_mutable_spec();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::FileFormatDescriptor_CheckSumType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::FileFormatDescriptor_CheckSumType>() {
  return ::bosdyn::api::FileFormatDescriptor_CheckSumType_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::PodTypeEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::PodTypeEnum>() {
  return ::bosdyn::api::PodTypeEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fbddf_2eproto

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bosdyn/api/graph_nav/area_callback_service.proto
// Original file comments:
// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).
//
#ifndef GRPC_bosdyn_2fapi_2fgraph_5fnav_2farea_5fcallback_5fservice_2eproto__INCLUDED
#define GRPC_bosdyn_2fapi_2fgraph_5fnav_2farea_5fcallback_5fservice_2eproto__INCLUDED

#include "bosdyn/api/graph_nav/area_callback_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace bosdyn {
namespace api {
namespace graph_nav {

class AreaCallbackService final {
 public:
  static constexpr char const* service_full_name() {
    return "bosdyn.api.graph_nav.AreaCallbackService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Retreive information about how to operate the service, including what lease resources are
    // required by the navigation callback.
    virtual ::grpc::Status AreaCallbackInformation(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::AreaCallbackInformationRequest& request, ::bosdyn::api::graph_nav::AreaCallbackInformationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::AreaCallbackInformationResponse>> AsyncAreaCallbackInformation(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::AreaCallbackInformationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::AreaCallbackInformationResponse>>(AsyncAreaCallbackInformationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::AreaCallbackInformationResponse>> PrepareAsyncAreaCallbackInformation(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::AreaCallbackInformationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::AreaCallbackInformationResponse>>(PrepareAsyncAreaCallbackInformationRaw(context, request, cq));
    }
    // BeginCallback is called once as the robot enters a AreaCallback region of a map. This call
    // initilizes the navigation callback for operation.
    virtual ::grpc::Status BeginCallback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::BeginCallbackRequest& request, ::bosdyn::api::graph_nav::BeginCallbackResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::BeginCallbackResponse>> AsyncBeginCallback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::BeginCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::BeginCallbackResponse>>(AsyncBeginCallbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::BeginCallbackResponse>> PrepareAsyncBeginCallback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::BeginCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::BeginCallbackResponse>>(PrepareAsyncBeginCallbackRaw(context, request, cq));
    }
    // BeginControl is called once after the area callback implementation requests control. Control is
    // handed off (via a lease) from the caller to the area callback.
    virtual ::grpc::Status BeginControl(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::BeginControlRequest& request, ::bosdyn::api::graph_nav::BeginControlResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::BeginControlResponse>> AsyncBeginControl(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::BeginControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::BeginControlResponse>>(AsyncBeginControlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::BeginControlResponse>> PrepareAsyncBeginControl(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::BeginControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::BeginControlResponse>>(PrepareAsyncBeginControlRaw(context, request, cq));
    }
    // UpdateCallback is called periodically while the callback is running. Area callback implementations
    // use UpdateCallback to dictate how caller should operate while callback is running (pause,
    // continue, etc.)
    virtual ::grpc::Status UpdateCallback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UpdateCallbackRequest& request, ::bosdyn::api::graph_nav::UpdateCallbackResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::UpdateCallbackResponse>> AsyncUpdateCallback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UpdateCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::UpdateCallbackResponse>>(AsyncUpdateCallbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::UpdateCallbackResponse>> PrepareAsyncUpdateCallback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UpdateCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::UpdateCallbackResponse>>(PrepareAsyncUpdateCallbackRaw(context, request, cq));
    }
    // EndCallback is called once when the caller decides the navagation callback is over. This might
    // be because the robot exited the callback region or might be because the callback reported that it
    // finished doing work.
    virtual ::grpc::Status EndCallback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::EndCallbackRequest& request, ::bosdyn::api::graph_nav::EndCallbackResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::EndCallbackResponse>> AsyncEndCallback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::EndCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::EndCallbackResponse>>(AsyncEndCallbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::EndCallbackResponse>> PrepareAsyncEndCallback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::EndCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::EndCallbackResponse>>(PrepareAsyncEndCallbackRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Retreive information about how to operate the service, including what lease resources are
      // required by the navigation callback.
      virtual void AreaCallbackInformation(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::AreaCallbackInformationRequest* request, ::bosdyn::api::graph_nav::AreaCallbackInformationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AreaCallbackInformation(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::AreaCallbackInformationRequest* request, ::bosdyn::api::graph_nav::AreaCallbackInformationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // BeginCallback is called once as the robot enters a AreaCallback region of a map. This call
      // initilizes the navigation callback for operation.
      virtual void BeginCallback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::BeginCallbackRequest* request, ::bosdyn::api::graph_nav::BeginCallbackResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BeginCallback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::BeginCallbackRequest* request, ::bosdyn::api::graph_nav::BeginCallbackResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // BeginControl is called once after the area callback implementation requests control. Control is
      // handed off (via a lease) from the caller to the area callback.
      virtual void BeginControl(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::BeginControlRequest* request, ::bosdyn::api::graph_nav::BeginControlResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BeginControl(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::BeginControlRequest* request, ::bosdyn::api::graph_nav::BeginControlResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // UpdateCallback is called periodically while the callback is running. Area callback implementations
      // use UpdateCallback to dictate how caller should operate while callback is running (pause,
      // continue, etc.)
      virtual void UpdateCallback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UpdateCallbackRequest* request, ::bosdyn::api::graph_nav::UpdateCallbackResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateCallback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UpdateCallbackRequest* request, ::bosdyn::api::graph_nav::UpdateCallbackResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // EndCallback is called once when the caller decides the navagation callback is over. This might
      // be because the robot exited the callback region or might be because the callback reported that it
      // finished doing work.
      virtual void EndCallback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::EndCallbackRequest* request, ::bosdyn::api::graph_nav::EndCallbackResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EndCallback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::EndCallbackRequest* request, ::bosdyn::api::graph_nav::EndCallbackResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::AreaCallbackInformationResponse>* AsyncAreaCallbackInformationRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::AreaCallbackInformationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::AreaCallbackInformationResponse>* PrepareAsyncAreaCallbackInformationRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::AreaCallbackInformationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::BeginCallbackResponse>* AsyncBeginCallbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::BeginCallbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::BeginCallbackResponse>* PrepareAsyncBeginCallbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::BeginCallbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::BeginControlResponse>* AsyncBeginControlRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::BeginControlRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::BeginControlResponse>* PrepareAsyncBeginControlRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::BeginControlRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::UpdateCallbackResponse>* AsyncUpdateCallbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UpdateCallbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::UpdateCallbackResponse>* PrepareAsyncUpdateCallbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UpdateCallbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::EndCallbackResponse>* AsyncEndCallbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::EndCallbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::EndCallbackResponse>* PrepareAsyncEndCallbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::EndCallbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status AreaCallbackInformation(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::AreaCallbackInformationRequest& request, ::bosdyn::api::graph_nav::AreaCallbackInformationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::AreaCallbackInformationResponse>> AsyncAreaCallbackInformation(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::AreaCallbackInformationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::AreaCallbackInformationResponse>>(AsyncAreaCallbackInformationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::AreaCallbackInformationResponse>> PrepareAsyncAreaCallbackInformation(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::AreaCallbackInformationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::AreaCallbackInformationResponse>>(PrepareAsyncAreaCallbackInformationRaw(context, request, cq));
    }
    ::grpc::Status BeginCallback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::BeginCallbackRequest& request, ::bosdyn::api::graph_nav::BeginCallbackResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::BeginCallbackResponse>> AsyncBeginCallback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::BeginCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::BeginCallbackResponse>>(AsyncBeginCallbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::BeginCallbackResponse>> PrepareAsyncBeginCallback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::BeginCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::BeginCallbackResponse>>(PrepareAsyncBeginCallbackRaw(context, request, cq));
    }
    ::grpc::Status BeginControl(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::BeginControlRequest& request, ::bosdyn::api::graph_nav::BeginControlResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::BeginControlResponse>> AsyncBeginControl(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::BeginControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::BeginControlResponse>>(AsyncBeginControlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::BeginControlResponse>> PrepareAsyncBeginControl(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::BeginControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::BeginControlResponse>>(PrepareAsyncBeginControlRaw(context, request, cq));
    }
    ::grpc::Status UpdateCallback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UpdateCallbackRequest& request, ::bosdyn::api::graph_nav::UpdateCallbackResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::UpdateCallbackResponse>> AsyncUpdateCallback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UpdateCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::UpdateCallbackResponse>>(AsyncUpdateCallbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::UpdateCallbackResponse>> PrepareAsyncUpdateCallback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UpdateCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::UpdateCallbackResponse>>(PrepareAsyncUpdateCallbackRaw(context, request, cq));
    }
    ::grpc::Status EndCallback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::EndCallbackRequest& request, ::bosdyn::api::graph_nav::EndCallbackResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::EndCallbackResponse>> AsyncEndCallback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::EndCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::EndCallbackResponse>>(AsyncEndCallbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::EndCallbackResponse>> PrepareAsyncEndCallback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::EndCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::EndCallbackResponse>>(PrepareAsyncEndCallbackRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void AreaCallbackInformation(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::AreaCallbackInformationRequest* request, ::bosdyn::api::graph_nav::AreaCallbackInformationResponse* response, std::function<void(::grpc::Status)>) override;
      void AreaCallbackInformation(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::AreaCallbackInformationRequest* request, ::bosdyn::api::graph_nav::AreaCallbackInformationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BeginCallback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::BeginCallbackRequest* request, ::bosdyn::api::graph_nav::BeginCallbackResponse* response, std::function<void(::grpc::Status)>) override;
      void BeginCallback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::BeginCallbackRequest* request, ::bosdyn::api::graph_nav::BeginCallbackResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BeginControl(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::BeginControlRequest* request, ::bosdyn::api::graph_nav::BeginControlResponse* response, std::function<void(::grpc::Status)>) override;
      void BeginControl(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::BeginControlRequest* request, ::bosdyn::api::graph_nav::BeginControlResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateCallback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UpdateCallbackRequest* request, ::bosdyn::api::graph_nav::UpdateCallbackResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateCallback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UpdateCallbackRequest* request, ::bosdyn::api::graph_nav::UpdateCallbackResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EndCallback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::EndCallbackRequest* request, ::bosdyn::api::graph_nav::EndCallbackResponse* response, std::function<void(::grpc::Status)>) override;
      void EndCallback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::EndCallbackRequest* request, ::bosdyn::api::graph_nav::EndCallbackResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::AreaCallbackInformationResponse>* AsyncAreaCallbackInformationRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::AreaCallbackInformationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::AreaCallbackInformationResponse>* PrepareAsyncAreaCallbackInformationRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::AreaCallbackInformationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::BeginCallbackResponse>* AsyncBeginCallbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::BeginCallbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::BeginCallbackResponse>* PrepareAsyncBeginCallbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::BeginCallbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::BeginControlResponse>* AsyncBeginControlRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::BeginControlRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::BeginControlResponse>* PrepareAsyncBeginControlRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::BeginControlRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::UpdateCallbackResponse>* AsyncUpdateCallbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UpdateCallbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::UpdateCallbackResponse>* PrepareAsyncUpdateCallbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UpdateCallbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::EndCallbackResponse>* AsyncEndCallbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::EndCallbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::EndCallbackResponse>* PrepareAsyncEndCallbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::EndCallbackRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AreaCallbackInformation_;
    const ::grpc::internal::RpcMethod rpcmethod_BeginCallback_;
    const ::grpc::internal::RpcMethod rpcmethod_BeginControl_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateCallback_;
    const ::grpc::internal::RpcMethod rpcmethod_EndCallback_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Retreive information about how to operate the service, including what lease resources are
    // required by the navigation callback.
    virtual ::grpc::Status AreaCallbackInformation(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::AreaCallbackInformationRequest* request, ::bosdyn::api::graph_nav::AreaCallbackInformationResponse* response);
    // BeginCallback is called once as the robot enters a AreaCallback region of a map. This call
    // initilizes the navigation callback for operation.
    virtual ::grpc::Status BeginCallback(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::BeginCallbackRequest* request, ::bosdyn::api::graph_nav::BeginCallbackResponse* response);
    // BeginControl is called once after the area callback implementation requests control. Control is
    // handed off (via a lease) from the caller to the area callback.
    virtual ::grpc::Status BeginControl(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::BeginControlRequest* request, ::bosdyn::api::graph_nav::BeginControlResponse* response);
    // UpdateCallback is called periodically while the callback is running. Area callback implementations
    // use UpdateCallback to dictate how caller should operate while callback is running (pause,
    // continue, etc.)
    virtual ::grpc::Status UpdateCallback(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::UpdateCallbackRequest* request, ::bosdyn::api::graph_nav::UpdateCallbackResponse* response);
    // EndCallback is called once when the caller decides the navagation callback is over. This might
    // be because the robot exited the callback region or might be because the callback reported that it
    // finished doing work.
    virtual ::grpc::Status EndCallback(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::EndCallbackRequest* request, ::bosdyn::api::graph_nav::EndCallbackResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AreaCallbackInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AreaCallbackInformation() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AreaCallbackInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AreaCallbackInformation(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::AreaCallbackInformationRequest* /*request*/, ::bosdyn::api::graph_nav::AreaCallbackInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAreaCallbackInformation(::grpc::ServerContext* context, ::bosdyn::api::graph_nav::AreaCallbackInformationRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::graph_nav::AreaCallbackInformationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BeginCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BeginCallback() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_BeginCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginCallback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::BeginCallbackRequest* /*request*/, ::bosdyn::api::graph_nav::BeginCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBeginCallback(::grpc::ServerContext* context, ::bosdyn::api::graph_nav::BeginCallbackRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::graph_nav::BeginCallbackResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BeginControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BeginControl() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_BeginControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginControl(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::BeginControlRequest* /*request*/, ::bosdyn::api::graph_nav::BeginControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBeginControl(::grpc::ServerContext* context, ::bosdyn::api::graph_nav::BeginControlRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::graph_nav::BeginControlResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateCallback() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCallback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::UpdateCallbackRequest* /*request*/, ::bosdyn::api::graph_nav::UpdateCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCallback(::grpc::ServerContext* context, ::bosdyn::api::graph_nav::UpdateCallbackRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::graph_nav::UpdateCallbackResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EndCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EndCallback() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_EndCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndCallback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::EndCallbackRequest* /*request*/, ::bosdyn::api::graph_nav::EndCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEndCallback(::grpc::ServerContext* context, ::bosdyn::api::graph_nav::EndCallbackRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::graph_nav::EndCallbackResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AreaCallbackInformation<WithAsyncMethod_BeginCallback<WithAsyncMethod_BeginControl<WithAsyncMethod_UpdateCallback<WithAsyncMethod_EndCallback<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_AreaCallbackInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AreaCallbackInformation() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::AreaCallbackInformationRequest, ::bosdyn::api::graph_nav::AreaCallbackInformationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::graph_nav::AreaCallbackInformationRequest* request, ::bosdyn::api::graph_nav::AreaCallbackInformationResponse* response) { return this->AreaCallbackInformation(context, request, response); }));}
    void SetMessageAllocatorFor_AreaCallbackInformation(
        ::grpc::MessageAllocator< ::bosdyn::api::graph_nav::AreaCallbackInformationRequest, ::bosdyn::api::graph_nav::AreaCallbackInformationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::AreaCallbackInformationRequest, ::bosdyn::api::graph_nav::AreaCallbackInformationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AreaCallbackInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AreaCallbackInformation(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::AreaCallbackInformationRequest* /*request*/, ::bosdyn::api::graph_nav::AreaCallbackInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AreaCallbackInformation(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::AreaCallbackInformationRequest* /*request*/, ::bosdyn::api::graph_nav::AreaCallbackInformationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BeginCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BeginCallback() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::BeginCallbackRequest, ::bosdyn::api::graph_nav::BeginCallbackResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::graph_nav::BeginCallbackRequest* request, ::bosdyn::api::graph_nav::BeginCallbackResponse* response) { return this->BeginCallback(context, request, response); }));}
    void SetMessageAllocatorFor_BeginCallback(
        ::grpc::MessageAllocator< ::bosdyn::api::graph_nav::BeginCallbackRequest, ::bosdyn::api::graph_nav::BeginCallbackResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::BeginCallbackRequest, ::bosdyn::api::graph_nav::BeginCallbackResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BeginCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginCallback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::BeginCallbackRequest* /*request*/, ::bosdyn::api::graph_nav::BeginCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BeginCallback(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::BeginCallbackRequest* /*request*/, ::bosdyn::api::graph_nav::BeginCallbackResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BeginControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BeginControl() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::BeginControlRequest, ::bosdyn::api::graph_nav::BeginControlResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::graph_nav::BeginControlRequest* request, ::bosdyn::api::graph_nav::BeginControlResponse* response) { return this->BeginControl(context, request, response); }));}
    void SetMessageAllocatorFor_BeginControl(
        ::grpc::MessageAllocator< ::bosdyn::api::graph_nav::BeginControlRequest, ::bosdyn::api::graph_nav::BeginControlResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::BeginControlRequest, ::bosdyn::api::graph_nav::BeginControlResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BeginControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginControl(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::BeginControlRequest* /*request*/, ::bosdyn::api::graph_nav::BeginControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BeginControl(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::BeginControlRequest* /*request*/, ::bosdyn::api::graph_nav::BeginControlResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateCallback() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::UpdateCallbackRequest, ::bosdyn::api::graph_nav::UpdateCallbackResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::graph_nav::UpdateCallbackRequest* request, ::bosdyn::api::graph_nav::UpdateCallbackResponse* response) { return this->UpdateCallback(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateCallback(
        ::grpc::MessageAllocator< ::bosdyn::api::graph_nav::UpdateCallbackRequest, ::bosdyn::api::graph_nav::UpdateCallbackResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::UpdateCallbackRequest, ::bosdyn::api::graph_nav::UpdateCallbackResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCallback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::UpdateCallbackRequest* /*request*/, ::bosdyn::api::graph_nav::UpdateCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateCallback(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::UpdateCallbackRequest* /*request*/, ::bosdyn::api::graph_nav::UpdateCallbackResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EndCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EndCallback() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::EndCallbackRequest, ::bosdyn::api::graph_nav::EndCallbackResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::graph_nav::EndCallbackRequest* request, ::bosdyn::api::graph_nav::EndCallbackResponse* response) { return this->EndCallback(context, request, response); }));}
    void SetMessageAllocatorFor_EndCallback(
        ::grpc::MessageAllocator< ::bosdyn::api::graph_nav::EndCallbackRequest, ::bosdyn::api::graph_nav::EndCallbackResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::EndCallbackRequest, ::bosdyn::api::graph_nav::EndCallbackResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EndCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndCallback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::EndCallbackRequest* /*request*/, ::bosdyn::api::graph_nav::EndCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EndCallback(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::EndCallbackRequest* /*request*/, ::bosdyn::api::graph_nav::EndCallbackResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_AreaCallbackInformation<WithCallbackMethod_BeginCallback<WithCallbackMethod_BeginControl<WithCallbackMethod_UpdateCallback<WithCallbackMethod_EndCallback<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AreaCallbackInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AreaCallbackInformation() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AreaCallbackInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AreaCallbackInformation(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::AreaCallbackInformationRequest* /*request*/, ::bosdyn::api::graph_nav::AreaCallbackInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BeginCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BeginCallback() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_BeginCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginCallback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::BeginCallbackRequest* /*request*/, ::bosdyn::api::graph_nav::BeginCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BeginControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BeginControl() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_BeginControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginControl(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::BeginControlRequest* /*request*/, ::bosdyn::api::graph_nav::BeginControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateCallback() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCallback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::UpdateCallbackRequest* /*request*/, ::bosdyn::api::graph_nav::UpdateCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EndCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EndCallback() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_EndCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndCallback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::EndCallbackRequest* /*request*/, ::bosdyn::api::graph_nav::EndCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AreaCallbackInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AreaCallbackInformation() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AreaCallbackInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AreaCallbackInformation(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::AreaCallbackInformationRequest* /*request*/, ::bosdyn::api::graph_nav::AreaCallbackInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAreaCallbackInformation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BeginCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BeginCallback() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_BeginCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginCallback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::BeginCallbackRequest* /*request*/, ::bosdyn::api::graph_nav::BeginCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBeginCallback(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BeginControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BeginControl() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_BeginControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginControl(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::BeginControlRequest* /*request*/, ::bosdyn::api::graph_nav::BeginControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBeginControl(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateCallback() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCallback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::UpdateCallbackRequest* /*request*/, ::bosdyn::api::graph_nav::UpdateCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCallback(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EndCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EndCallback() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_EndCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndCallback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::EndCallbackRequest* /*request*/, ::bosdyn::api::graph_nav::EndCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEndCallback(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AreaCallbackInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AreaCallbackInformation() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AreaCallbackInformation(context, request, response); }));
    }
    ~WithRawCallbackMethod_AreaCallbackInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AreaCallbackInformation(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::AreaCallbackInformationRequest* /*request*/, ::bosdyn::api::graph_nav::AreaCallbackInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AreaCallbackInformation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BeginCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BeginCallback() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BeginCallback(context, request, response); }));
    }
    ~WithRawCallbackMethod_BeginCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginCallback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::BeginCallbackRequest* /*request*/, ::bosdyn::api::graph_nav::BeginCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BeginCallback(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BeginControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BeginControl() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BeginControl(context, request, response); }));
    }
    ~WithRawCallbackMethod_BeginControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginControl(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::BeginControlRequest* /*request*/, ::bosdyn::api::graph_nav::BeginControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BeginControl(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateCallback() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateCallback(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCallback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::UpdateCallbackRequest* /*request*/, ::bosdyn::api::graph_nav::UpdateCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateCallback(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EndCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EndCallback() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EndCallback(context, request, response); }));
    }
    ~WithRawCallbackMethod_EndCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndCallback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::EndCallbackRequest* /*request*/, ::bosdyn::api::graph_nav::EndCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EndCallback(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AreaCallbackInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AreaCallbackInformation() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::graph_nav::AreaCallbackInformationRequest, ::bosdyn::api::graph_nav::AreaCallbackInformationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::graph_nav::AreaCallbackInformationRequest, ::bosdyn::api::graph_nav::AreaCallbackInformationResponse>* streamer) {
                       return this->StreamedAreaCallbackInformation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AreaCallbackInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AreaCallbackInformation(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::AreaCallbackInformationRequest* /*request*/, ::bosdyn::api::graph_nav::AreaCallbackInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAreaCallbackInformation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::graph_nav::AreaCallbackInformationRequest,::bosdyn::api::graph_nav::AreaCallbackInformationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BeginCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BeginCallback() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::graph_nav::BeginCallbackRequest, ::bosdyn::api::graph_nav::BeginCallbackResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::graph_nav::BeginCallbackRequest, ::bosdyn::api::graph_nav::BeginCallbackResponse>* streamer) {
                       return this->StreamedBeginCallback(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BeginCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BeginCallback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::BeginCallbackRequest* /*request*/, ::bosdyn::api::graph_nav::BeginCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBeginCallback(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::graph_nav::BeginCallbackRequest,::bosdyn::api::graph_nav::BeginCallbackResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BeginControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BeginControl() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::graph_nav::BeginControlRequest, ::bosdyn::api::graph_nav::BeginControlResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::graph_nav::BeginControlRequest, ::bosdyn::api::graph_nav::BeginControlResponse>* streamer) {
                       return this->StreamedBeginControl(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BeginControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BeginControl(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::BeginControlRequest* /*request*/, ::bosdyn::api::graph_nav::BeginControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBeginControl(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::graph_nav::BeginControlRequest,::bosdyn::api::graph_nav::BeginControlResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateCallback() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::graph_nav::UpdateCallbackRequest, ::bosdyn::api::graph_nav::UpdateCallbackResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::graph_nav::UpdateCallbackRequest, ::bosdyn::api::graph_nav::UpdateCallbackResponse>* streamer) {
                       return this->StreamedUpdateCallback(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateCallback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::UpdateCallbackRequest* /*request*/, ::bosdyn::api::graph_nav::UpdateCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateCallback(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::graph_nav::UpdateCallbackRequest,::bosdyn::api::graph_nav::UpdateCallbackResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EndCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EndCallback() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::graph_nav::EndCallbackRequest, ::bosdyn::api::graph_nav::EndCallbackResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::graph_nav::EndCallbackRequest, ::bosdyn::api::graph_nav::EndCallbackResponse>* streamer) {
                       return this->StreamedEndCallback(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EndCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EndCallback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::EndCallbackRequest* /*request*/, ::bosdyn::api::graph_nav::EndCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEndCallback(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::graph_nav::EndCallbackRequest,::bosdyn::api::graph_nav::EndCallbackResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AreaCallbackInformation<WithStreamedUnaryMethod_BeginCallback<WithStreamedUnaryMethod_BeginControl<WithStreamedUnaryMethod_UpdateCallback<WithStreamedUnaryMethod_EndCallback<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AreaCallbackInformation<WithStreamedUnaryMethod_BeginCallback<WithStreamedUnaryMethod_BeginControl<WithStreamedUnaryMethod_UpdateCallback<WithStreamedUnaryMethod_EndCallback<Service > > > > > StreamedService;
};

}  // namespace graph_nav
}  // namespace api
}  // namespace bosdyn


#endif  // GRPC_bosdyn_2fapi_2fgraph_5fnav_2farea_5fcallback_5fservice_2eproto__INCLUDED

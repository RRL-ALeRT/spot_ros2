// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bosdyn/api/data_buffer_service.proto
// Original file comments:
// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).
//
// DataBufferService allows adding information to the robot's log files.
#ifndef GRPC_bosdyn_2fapi_2fdata_5fbuffer_5fservice_2eproto__INCLUDED
#define GRPC_bosdyn_2fapi_2fdata_5fbuffer_5fservice_2eproto__INCLUDED

#include "bosdyn/api/data_buffer_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace bosdyn {
namespace api {

// This service is a mechanism for adding information to the robot's log files.
class DataBufferService final {
 public:
  static constexpr char const* service_full_name() {
    return "bosdyn.api.DataBufferService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Add text messages to the log.
    virtual ::grpc::Status RecordTextMessages(::grpc::ClientContext* context, const ::bosdyn::api::RecordTextMessagesRequest& request, ::bosdyn::api::RecordTextMessagesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RecordTextMessagesResponse>> AsyncRecordTextMessages(::grpc::ClientContext* context, const ::bosdyn::api::RecordTextMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RecordTextMessagesResponse>>(AsyncRecordTextMessagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RecordTextMessagesResponse>> PrepareAsyncRecordTextMessages(::grpc::ClientContext* context, const ::bosdyn::api::RecordTextMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RecordTextMessagesResponse>>(PrepareAsyncRecordTextMessagesRaw(context, request, cq));
    }
    // Add a set of operator messages to the log.
    virtual ::grpc::Status RecordOperatorComments(::grpc::ClientContext* context, const ::bosdyn::api::RecordOperatorCommentsRequest& request, ::bosdyn::api::RecordOperatorCommentsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RecordOperatorCommentsResponse>> AsyncRecordOperatorComments(::grpc::ClientContext* context, const ::bosdyn::api::RecordOperatorCommentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RecordOperatorCommentsResponse>>(AsyncRecordOperatorCommentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RecordOperatorCommentsResponse>> PrepareAsyncRecordOperatorComments(::grpc::ClientContext* context, const ::bosdyn::api::RecordOperatorCommentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RecordOperatorCommentsResponse>>(PrepareAsyncRecordOperatorCommentsRaw(context, request, cq));
    }
    // Add message-style data to the log.
    virtual ::grpc::Status RecordDataBlobs(::grpc::ClientContext* context, const ::bosdyn::api::RecordDataBlobsRequest& request, ::bosdyn::api::RecordDataBlobsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RecordDataBlobsResponse>> AsyncRecordDataBlobs(::grpc::ClientContext* context, const ::bosdyn::api::RecordDataBlobsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RecordDataBlobsResponse>>(AsyncRecordDataBlobsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RecordDataBlobsResponse>> PrepareAsyncRecordDataBlobs(::grpc::ClientContext* context, const ::bosdyn::api::RecordDataBlobsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RecordDataBlobsResponse>>(PrepareAsyncRecordDataBlobsRaw(context, request, cq));
    }
    // Add event data to the log.
    virtual ::grpc::Status RecordEvents(::grpc::ClientContext* context, const ::bosdyn::api::RecordEventsRequest& request, ::bosdyn::api::RecordEventsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RecordEventsResponse>> AsyncRecordEvents(::grpc::ClientContext* context, const ::bosdyn::api::RecordEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RecordEventsResponse>>(AsyncRecordEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RecordEventsResponse>> PrepareAsyncRecordEvents(::grpc::ClientContext* context, const ::bosdyn::api::RecordEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RecordEventsResponse>>(PrepareAsyncRecordEventsRaw(context, request, cq));
    }
    // Register a log tick schema, allowing client to later log tick data.
    virtual ::grpc::Status RegisterSignalSchema(::grpc::ClientContext* context, const ::bosdyn::api::RegisterSignalSchemaRequest& request, ::bosdyn::api::RegisterSignalSchemaResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RegisterSignalSchemaResponse>> AsyncRegisterSignalSchema(::grpc::ClientContext* context, const ::bosdyn::api::RegisterSignalSchemaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RegisterSignalSchemaResponse>>(AsyncRegisterSignalSchemaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RegisterSignalSchemaResponse>> PrepareAsyncRegisterSignalSchema(::grpc::ClientContext* context, const ::bosdyn::api::RegisterSignalSchemaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RegisterSignalSchemaResponse>>(PrepareAsyncRegisterSignalSchemaRaw(context, request, cq));
    }
    // Add signal data for registered signal schema to the log.
    virtual ::grpc::Status RecordSignalTicks(::grpc::ClientContext* context, const ::bosdyn::api::RecordSignalTicksRequest& request, ::bosdyn::api::RecordSignalTicksResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RecordSignalTicksResponse>> AsyncRecordSignalTicks(::grpc::ClientContext* context, const ::bosdyn::api::RecordSignalTicksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RecordSignalTicksResponse>>(AsyncRecordSignalTicksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RecordSignalTicksResponse>> PrepareAsyncRecordSignalTicks(::grpc::ClientContext* context, const ::bosdyn::api::RecordSignalTicksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RecordSignalTicksResponse>>(PrepareAsyncRecordSignalTicksRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Add text messages to the log.
      virtual void RecordTextMessages(::grpc::ClientContext* context, const ::bosdyn::api::RecordTextMessagesRequest* request, ::bosdyn::api::RecordTextMessagesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RecordTextMessages(::grpc::ClientContext* context, const ::bosdyn::api::RecordTextMessagesRequest* request, ::bosdyn::api::RecordTextMessagesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Add a set of operator messages to the log.
      virtual void RecordOperatorComments(::grpc::ClientContext* context, const ::bosdyn::api::RecordOperatorCommentsRequest* request, ::bosdyn::api::RecordOperatorCommentsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RecordOperatorComments(::grpc::ClientContext* context, const ::bosdyn::api::RecordOperatorCommentsRequest* request, ::bosdyn::api::RecordOperatorCommentsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Add message-style data to the log.
      virtual void RecordDataBlobs(::grpc::ClientContext* context, const ::bosdyn::api::RecordDataBlobsRequest* request, ::bosdyn::api::RecordDataBlobsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RecordDataBlobs(::grpc::ClientContext* context, const ::bosdyn::api::RecordDataBlobsRequest* request, ::bosdyn::api::RecordDataBlobsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Add event data to the log.
      virtual void RecordEvents(::grpc::ClientContext* context, const ::bosdyn::api::RecordEventsRequest* request, ::bosdyn::api::RecordEventsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RecordEvents(::grpc::ClientContext* context, const ::bosdyn::api::RecordEventsRequest* request, ::bosdyn::api::RecordEventsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Register a log tick schema, allowing client to later log tick data.
      virtual void RegisterSignalSchema(::grpc::ClientContext* context, const ::bosdyn::api::RegisterSignalSchemaRequest* request, ::bosdyn::api::RegisterSignalSchemaResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterSignalSchema(::grpc::ClientContext* context, const ::bosdyn::api::RegisterSignalSchemaRequest* request, ::bosdyn::api::RegisterSignalSchemaResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Add signal data for registered signal schema to the log.
      virtual void RecordSignalTicks(::grpc::ClientContext* context, const ::bosdyn::api::RecordSignalTicksRequest* request, ::bosdyn::api::RecordSignalTicksResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RecordSignalTicks(::grpc::ClientContext* context, const ::bosdyn::api::RecordSignalTicksRequest* request, ::bosdyn::api::RecordSignalTicksResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RecordTextMessagesResponse>* AsyncRecordTextMessagesRaw(::grpc::ClientContext* context, const ::bosdyn::api::RecordTextMessagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RecordTextMessagesResponse>* PrepareAsyncRecordTextMessagesRaw(::grpc::ClientContext* context, const ::bosdyn::api::RecordTextMessagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RecordOperatorCommentsResponse>* AsyncRecordOperatorCommentsRaw(::grpc::ClientContext* context, const ::bosdyn::api::RecordOperatorCommentsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RecordOperatorCommentsResponse>* PrepareAsyncRecordOperatorCommentsRaw(::grpc::ClientContext* context, const ::bosdyn::api::RecordOperatorCommentsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RecordDataBlobsResponse>* AsyncRecordDataBlobsRaw(::grpc::ClientContext* context, const ::bosdyn::api::RecordDataBlobsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RecordDataBlobsResponse>* PrepareAsyncRecordDataBlobsRaw(::grpc::ClientContext* context, const ::bosdyn::api::RecordDataBlobsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RecordEventsResponse>* AsyncRecordEventsRaw(::grpc::ClientContext* context, const ::bosdyn::api::RecordEventsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RecordEventsResponse>* PrepareAsyncRecordEventsRaw(::grpc::ClientContext* context, const ::bosdyn::api::RecordEventsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RegisterSignalSchemaResponse>* AsyncRegisterSignalSchemaRaw(::grpc::ClientContext* context, const ::bosdyn::api::RegisterSignalSchemaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RegisterSignalSchemaResponse>* PrepareAsyncRegisterSignalSchemaRaw(::grpc::ClientContext* context, const ::bosdyn::api::RegisterSignalSchemaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RecordSignalTicksResponse>* AsyncRecordSignalTicksRaw(::grpc::ClientContext* context, const ::bosdyn::api::RecordSignalTicksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RecordSignalTicksResponse>* PrepareAsyncRecordSignalTicksRaw(::grpc::ClientContext* context, const ::bosdyn::api::RecordSignalTicksRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status RecordTextMessages(::grpc::ClientContext* context, const ::bosdyn::api::RecordTextMessagesRequest& request, ::bosdyn::api::RecordTextMessagesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RecordTextMessagesResponse>> AsyncRecordTextMessages(::grpc::ClientContext* context, const ::bosdyn::api::RecordTextMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RecordTextMessagesResponse>>(AsyncRecordTextMessagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RecordTextMessagesResponse>> PrepareAsyncRecordTextMessages(::grpc::ClientContext* context, const ::bosdyn::api::RecordTextMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RecordTextMessagesResponse>>(PrepareAsyncRecordTextMessagesRaw(context, request, cq));
    }
    ::grpc::Status RecordOperatorComments(::grpc::ClientContext* context, const ::bosdyn::api::RecordOperatorCommentsRequest& request, ::bosdyn::api::RecordOperatorCommentsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RecordOperatorCommentsResponse>> AsyncRecordOperatorComments(::grpc::ClientContext* context, const ::bosdyn::api::RecordOperatorCommentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RecordOperatorCommentsResponse>>(AsyncRecordOperatorCommentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RecordOperatorCommentsResponse>> PrepareAsyncRecordOperatorComments(::grpc::ClientContext* context, const ::bosdyn::api::RecordOperatorCommentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RecordOperatorCommentsResponse>>(PrepareAsyncRecordOperatorCommentsRaw(context, request, cq));
    }
    ::grpc::Status RecordDataBlobs(::grpc::ClientContext* context, const ::bosdyn::api::RecordDataBlobsRequest& request, ::bosdyn::api::RecordDataBlobsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RecordDataBlobsResponse>> AsyncRecordDataBlobs(::grpc::ClientContext* context, const ::bosdyn::api::RecordDataBlobsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RecordDataBlobsResponse>>(AsyncRecordDataBlobsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RecordDataBlobsResponse>> PrepareAsyncRecordDataBlobs(::grpc::ClientContext* context, const ::bosdyn::api::RecordDataBlobsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RecordDataBlobsResponse>>(PrepareAsyncRecordDataBlobsRaw(context, request, cq));
    }
    ::grpc::Status RecordEvents(::grpc::ClientContext* context, const ::bosdyn::api::RecordEventsRequest& request, ::bosdyn::api::RecordEventsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RecordEventsResponse>> AsyncRecordEvents(::grpc::ClientContext* context, const ::bosdyn::api::RecordEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RecordEventsResponse>>(AsyncRecordEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RecordEventsResponse>> PrepareAsyncRecordEvents(::grpc::ClientContext* context, const ::bosdyn::api::RecordEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RecordEventsResponse>>(PrepareAsyncRecordEventsRaw(context, request, cq));
    }
    ::grpc::Status RegisterSignalSchema(::grpc::ClientContext* context, const ::bosdyn::api::RegisterSignalSchemaRequest& request, ::bosdyn::api::RegisterSignalSchemaResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RegisterSignalSchemaResponse>> AsyncRegisterSignalSchema(::grpc::ClientContext* context, const ::bosdyn::api::RegisterSignalSchemaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RegisterSignalSchemaResponse>>(AsyncRegisterSignalSchemaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RegisterSignalSchemaResponse>> PrepareAsyncRegisterSignalSchema(::grpc::ClientContext* context, const ::bosdyn::api::RegisterSignalSchemaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RegisterSignalSchemaResponse>>(PrepareAsyncRegisterSignalSchemaRaw(context, request, cq));
    }
    ::grpc::Status RecordSignalTicks(::grpc::ClientContext* context, const ::bosdyn::api::RecordSignalTicksRequest& request, ::bosdyn::api::RecordSignalTicksResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RecordSignalTicksResponse>> AsyncRecordSignalTicks(::grpc::ClientContext* context, const ::bosdyn::api::RecordSignalTicksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RecordSignalTicksResponse>>(AsyncRecordSignalTicksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RecordSignalTicksResponse>> PrepareAsyncRecordSignalTicks(::grpc::ClientContext* context, const ::bosdyn::api::RecordSignalTicksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RecordSignalTicksResponse>>(PrepareAsyncRecordSignalTicksRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RecordTextMessages(::grpc::ClientContext* context, const ::bosdyn::api::RecordTextMessagesRequest* request, ::bosdyn::api::RecordTextMessagesResponse* response, std::function<void(::grpc::Status)>) override;
      void RecordTextMessages(::grpc::ClientContext* context, const ::bosdyn::api::RecordTextMessagesRequest* request, ::bosdyn::api::RecordTextMessagesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RecordOperatorComments(::grpc::ClientContext* context, const ::bosdyn::api::RecordOperatorCommentsRequest* request, ::bosdyn::api::RecordOperatorCommentsResponse* response, std::function<void(::grpc::Status)>) override;
      void RecordOperatorComments(::grpc::ClientContext* context, const ::bosdyn::api::RecordOperatorCommentsRequest* request, ::bosdyn::api::RecordOperatorCommentsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RecordDataBlobs(::grpc::ClientContext* context, const ::bosdyn::api::RecordDataBlobsRequest* request, ::bosdyn::api::RecordDataBlobsResponse* response, std::function<void(::grpc::Status)>) override;
      void RecordDataBlobs(::grpc::ClientContext* context, const ::bosdyn::api::RecordDataBlobsRequest* request, ::bosdyn::api::RecordDataBlobsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RecordEvents(::grpc::ClientContext* context, const ::bosdyn::api::RecordEventsRequest* request, ::bosdyn::api::RecordEventsResponse* response, std::function<void(::grpc::Status)>) override;
      void RecordEvents(::grpc::ClientContext* context, const ::bosdyn::api::RecordEventsRequest* request, ::bosdyn::api::RecordEventsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RegisterSignalSchema(::grpc::ClientContext* context, const ::bosdyn::api::RegisterSignalSchemaRequest* request, ::bosdyn::api::RegisterSignalSchemaResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterSignalSchema(::grpc::ClientContext* context, const ::bosdyn::api::RegisterSignalSchemaRequest* request, ::bosdyn::api::RegisterSignalSchemaResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RecordSignalTicks(::grpc::ClientContext* context, const ::bosdyn::api::RecordSignalTicksRequest* request, ::bosdyn::api::RecordSignalTicksResponse* response, std::function<void(::grpc::Status)>) override;
      void RecordSignalTicks(::grpc::ClientContext* context, const ::bosdyn::api::RecordSignalTicksRequest* request, ::bosdyn::api::RecordSignalTicksResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RecordTextMessagesResponse>* AsyncRecordTextMessagesRaw(::grpc::ClientContext* context, const ::bosdyn::api::RecordTextMessagesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RecordTextMessagesResponse>* PrepareAsyncRecordTextMessagesRaw(::grpc::ClientContext* context, const ::bosdyn::api::RecordTextMessagesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RecordOperatorCommentsResponse>* AsyncRecordOperatorCommentsRaw(::grpc::ClientContext* context, const ::bosdyn::api::RecordOperatorCommentsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RecordOperatorCommentsResponse>* PrepareAsyncRecordOperatorCommentsRaw(::grpc::ClientContext* context, const ::bosdyn::api::RecordOperatorCommentsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RecordDataBlobsResponse>* AsyncRecordDataBlobsRaw(::grpc::ClientContext* context, const ::bosdyn::api::RecordDataBlobsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RecordDataBlobsResponse>* PrepareAsyncRecordDataBlobsRaw(::grpc::ClientContext* context, const ::bosdyn::api::RecordDataBlobsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RecordEventsResponse>* AsyncRecordEventsRaw(::grpc::ClientContext* context, const ::bosdyn::api::RecordEventsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RecordEventsResponse>* PrepareAsyncRecordEventsRaw(::grpc::ClientContext* context, const ::bosdyn::api::RecordEventsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RegisterSignalSchemaResponse>* AsyncRegisterSignalSchemaRaw(::grpc::ClientContext* context, const ::bosdyn::api::RegisterSignalSchemaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RegisterSignalSchemaResponse>* PrepareAsyncRegisterSignalSchemaRaw(::grpc::ClientContext* context, const ::bosdyn::api::RegisterSignalSchemaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RecordSignalTicksResponse>* AsyncRecordSignalTicksRaw(::grpc::ClientContext* context, const ::bosdyn::api::RecordSignalTicksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RecordSignalTicksResponse>* PrepareAsyncRecordSignalTicksRaw(::grpc::ClientContext* context, const ::bosdyn::api::RecordSignalTicksRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RecordTextMessages_;
    const ::grpc::internal::RpcMethod rpcmethod_RecordOperatorComments_;
    const ::grpc::internal::RpcMethod rpcmethod_RecordDataBlobs_;
    const ::grpc::internal::RpcMethod rpcmethod_RecordEvents_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterSignalSchema_;
    const ::grpc::internal::RpcMethod rpcmethod_RecordSignalTicks_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Add text messages to the log.
    virtual ::grpc::Status RecordTextMessages(::grpc::ServerContext* context, const ::bosdyn::api::RecordTextMessagesRequest* request, ::bosdyn::api::RecordTextMessagesResponse* response);
    // Add a set of operator messages to the log.
    virtual ::grpc::Status RecordOperatorComments(::grpc::ServerContext* context, const ::bosdyn::api::RecordOperatorCommentsRequest* request, ::bosdyn::api::RecordOperatorCommentsResponse* response);
    // Add message-style data to the log.
    virtual ::grpc::Status RecordDataBlobs(::grpc::ServerContext* context, const ::bosdyn::api::RecordDataBlobsRequest* request, ::bosdyn::api::RecordDataBlobsResponse* response);
    // Add event data to the log.
    virtual ::grpc::Status RecordEvents(::grpc::ServerContext* context, const ::bosdyn::api::RecordEventsRequest* request, ::bosdyn::api::RecordEventsResponse* response);
    // Register a log tick schema, allowing client to later log tick data.
    virtual ::grpc::Status RegisterSignalSchema(::grpc::ServerContext* context, const ::bosdyn::api::RegisterSignalSchemaRequest* request, ::bosdyn::api::RegisterSignalSchemaResponse* response);
    // Add signal data for registered signal schema to the log.
    virtual ::grpc::Status RecordSignalTicks(::grpc::ServerContext* context, const ::bosdyn::api::RecordSignalTicksRequest* request, ::bosdyn::api::RecordSignalTicksResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RecordTextMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RecordTextMessages() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RecordTextMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordTextMessages(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RecordTextMessagesRequest* /*request*/, ::bosdyn::api::RecordTextMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecordTextMessages(::grpc::ServerContext* context, ::bosdyn::api::RecordTextMessagesRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::RecordTextMessagesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RecordOperatorComments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RecordOperatorComments() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RecordOperatorComments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordOperatorComments(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RecordOperatorCommentsRequest* /*request*/, ::bosdyn::api::RecordOperatorCommentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecordOperatorComments(::grpc::ServerContext* context, ::bosdyn::api::RecordOperatorCommentsRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::RecordOperatorCommentsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RecordDataBlobs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RecordDataBlobs() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RecordDataBlobs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordDataBlobs(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RecordDataBlobsRequest* /*request*/, ::bosdyn::api::RecordDataBlobsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecordDataBlobs(::grpc::ServerContext* context, ::bosdyn::api::RecordDataBlobsRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::RecordDataBlobsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RecordEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RecordEvents() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RecordEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordEvents(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RecordEventsRequest* /*request*/, ::bosdyn::api::RecordEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecordEvents(::grpc::ServerContext* context, ::bosdyn::api::RecordEventsRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::RecordEventsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterSignalSchema : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterSignalSchema() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_RegisterSignalSchema() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterSignalSchema(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RegisterSignalSchemaRequest* /*request*/, ::bosdyn::api::RegisterSignalSchemaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterSignalSchema(::grpc::ServerContext* context, ::bosdyn::api::RegisterSignalSchemaRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::RegisterSignalSchemaResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RecordSignalTicks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RecordSignalTicks() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_RecordSignalTicks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordSignalTicks(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RecordSignalTicksRequest* /*request*/, ::bosdyn::api::RecordSignalTicksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecordSignalTicks(::grpc::ServerContext* context, ::bosdyn::api::RecordSignalTicksRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::RecordSignalTicksResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RecordTextMessages<WithAsyncMethod_RecordOperatorComments<WithAsyncMethod_RecordDataBlobs<WithAsyncMethod_RecordEvents<WithAsyncMethod_RegisterSignalSchema<WithAsyncMethod_RecordSignalTicks<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RecordTextMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RecordTextMessages() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::RecordTextMessagesRequest, ::bosdyn::api::RecordTextMessagesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::RecordTextMessagesRequest* request, ::bosdyn::api::RecordTextMessagesResponse* response) { return this->RecordTextMessages(context, request, response); }));}
    void SetMessageAllocatorFor_RecordTextMessages(
        ::grpc::MessageAllocator< ::bosdyn::api::RecordTextMessagesRequest, ::bosdyn::api::RecordTextMessagesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::RecordTextMessagesRequest, ::bosdyn::api::RecordTextMessagesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RecordTextMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordTextMessages(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RecordTextMessagesRequest* /*request*/, ::bosdyn::api::RecordTextMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RecordTextMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::RecordTextMessagesRequest* /*request*/, ::bosdyn::api::RecordTextMessagesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RecordOperatorComments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RecordOperatorComments() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::RecordOperatorCommentsRequest, ::bosdyn::api::RecordOperatorCommentsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::RecordOperatorCommentsRequest* request, ::bosdyn::api::RecordOperatorCommentsResponse* response) { return this->RecordOperatorComments(context, request, response); }));}
    void SetMessageAllocatorFor_RecordOperatorComments(
        ::grpc::MessageAllocator< ::bosdyn::api::RecordOperatorCommentsRequest, ::bosdyn::api::RecordOperatorCommentsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::RecordOperatorCommentsRequest, ::bosdyn::api::RecordOperatorCommentsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RecordOperatorComments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordOperatorComments(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RecordOperatorCommentsRequest* /*request*/, ::bosdyn::api::RecordOperatorCommentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RecordOperatorComments(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::RecordOperatorCommentsRequest* /*request*/, ::bosdyn::api::RecordOperatorCommentsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RecordDataBlobs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RecordDataBlobs() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::RecordDataBlobsRequest, ::bosdyn::api::RecordDataBlobsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::RecordDataBlobsRequest* request, ::bosdyn::api::RecordDataBlobsResponse* response) { return this->RecordDataBlobs(context, request, response); }));}
    void SetMessageAllocatorFor_RecordDataBlobs(
        ::grpc::MessageAllocator< ::bosdyn::api::RecordDataBlobsRequest, ::bosdyn::api::RecordDataBlobsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::RecordDataBlobsRequest, ::bosdyn::api::RecordDataBlobsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RecordDataBlobs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordDataBlobs(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RecordDataBlobsRequest* /*request*/, ::bosdyn::api::RecordDataBlobsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RecordDataBlobs(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::RecordDataBlobsRequest* /*request*/, ::bosdyn::api::RecordDataBlobsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RecordEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RecordEvents() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::RecordEventsRequest, ::bosdyn::api::RecordEventsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::RecordEventsRequest* request, ::bosdyn::api::RecordEventsResponse* response) { return this->RecordEvents(context, request, response); }));}
    void SetMessageAllocatorFor_RecordEvents(
        ::grpc::MessageAllocator< ::bosdyn::api::RecordEventsRequest, ::bosdyn::api::RecordEventsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::RecordEventsRequest, ::bosdyn::api::RecordEventsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RecordEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordEvents(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RecordEventsRequest* /*request*/, ::bosdyn::api::RecordEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RecordEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::RecordEventsRequest* /*request*/, ::bosdyn::api::RecordEventsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RegisterSignalSchema : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterSignalSchema() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::RegisterSignalSchemaRequest, ::bosdyn::api::RegisterSignalSchemaResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::RegisterSignalSchemaRequest* request, ::bosdyn::api::RegisterSignalSchemaResponse* response) { return this->RegisterSignalSchema(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterSignalSchema(
        ::grpc::MessageAllocator< ::bosdyn::api::RegisterSignalSchemaRequest, ::bosdyn::api::RegisterSignalSchemaResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::RegisterSignalSchemaRequest, ::bosdyn::api::RegisterSignalSchemaResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterSignalSchema() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterSignalSchema(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RegisterSignalSchemaRequest* /*request*/, ::bosdyn::api::RegisterSignalSchemaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterSignalSchema(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::RegisterSignalSchemaRequest* /*request*/, ::bosdyn::api::RegisterSignalSchemaResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RecordSignalTicks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RecordSignalTicks() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::RecordSignalTicksRequest, ::bosdyn::api::RecordSignalTicksResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::RecordSignalTicksRequest* request, ::bosdyn::api::RecordSignalTicksResponse* response) { return this->RecordSignalTicks(context, request, response); }));}
    void SetMessageAllocatorFor_RecordSignalTicks(
        ::grpc::MessageAllocator< ::bosdyn::api::RecordSignalTicksRequest, ::bosdyn::api::RecordSignalTicksResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::RecordSignalTicksRequest, ::bosdyn::api::RecordSignalTicksResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RecordSignalTicks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordSignalTicks(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RecordSignalTicksRequest* /*request*/, ::bosdyn::api::RecordSignalTicksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RecordSignalTicks(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::RecordSignalTicksRequest* /*request*/, ::bosdyn::api::RecordSignalTicksResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_RecordTextMessages<WithCallbackMethod_RecordOperatorComments<WithCallbackMethod_RecordDataBlobs<WithCallbackMethod_RecordEvents<WithCallbackMethod_RegisterSignalSchema<WithCallbackMethod_RecordSignalTicks<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RecordTextMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RecordTextMessages() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RecordTextMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordTextMessages(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RecordTextMessagesRequest* /*request*/, ::bosdyn::api::RecordTextMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RecordOperatorComments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RecordOperatorComments() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RecordOperatorComments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordOperatorComments(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RecordOperatorCommentsRequest* /*request*/, ::bosdyn::api::RecordOperatorCommentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RecordDataBlobs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RecordDataBlobs() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RecordDataBlobs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordDataBlobs(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RecordDataBlobsRequest* /*request*/, ::bosdyn::api::RecordDataBlobsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RecordEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RecordEvents() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RecordEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordEvents(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RecordEventsRequest* /*request*/, ::bosdyn::api::RecordEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterSignalSchema : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterSignalSchema() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_RegisterSignalSchema() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterSignalSchema(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RegisterSignalSchemaRequest* /*request*/, ::bosdyn::api::RegisterSignalSchemaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RecordSignalTicks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RecordSignalTicks() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_RecordSignalTicks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordSignalTicks(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RecordSignalTicksRequest* /*request*/, ::bosdyn::api::RecordSignalTicksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RecordTextMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RecordTextMessages() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RecordTextMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordTextMessages(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RecordTextMessagesRequest* /*request*/, ::bosdyn::api::RecordTextMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecordTextMessages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RecordOperatorComments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RecordOperatorComments() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RecordOperatorComments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordOperatorComments(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RecordOperatorCommentsRequest* /*request*/, ::bosdyn::api::RecordOperatorCommentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecordOperatorComments(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RecordDataBlobs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RecordDataBlobs() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RecordDataBlobs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordDataBlobs(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RecordDataBlobsRequest* /*request*/, ::bosdyn::api::RecordDataBlobsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecordDataBlobs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RecordEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RecordEvents() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_RecordEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordEvents(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RecordEventsRequest* /*request*/, ::bosdyn::api::RecordEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecordEvents(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterSignalSchema : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterSignalSchema() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_RegisterSignalSchema() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterSignalSchema(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RegisterSignalSchemaRequest* /*request*/, ::bosdyn::api::RegisterSignalSchemaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterSignalSchema(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RecordSignalTicks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RecordSignalTicks() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_RecordSignalTicks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordSignalTicks(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RecordSignalTicksRequest* /*request*/, ::bosdyn::api::RecordSignalTicksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecordSignalTicks(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RecordTextMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RecordTextMessages() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RecordTextMessages(context, request, response); }));
    }
    ~WithRawCallbackMethod_RecordTextMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordTextMessages(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RecordTextMessagesRequest* /*request*/, ::bosdyn::api::RecordTextMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RecordTextMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RecordOperatorComments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RecordOperatorComments() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RecordOperatorComments(context, request, response); }));
    }
    ~WithRawCallbackMethod_RecordOperatorComments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordOperatorComments(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RecordOperatorCommentsRequest* /*request*/, ::bosdyn::api::RecordOperatorCommentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RecordOperatorComments(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RecordDataBlobs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RecordDataBlobs() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RecordDataBlobs(context, request, response); }));
    }
    ~WithRawCallbackMethod_RecordDataBlobs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordDataBlobs(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RecordDataBlobsRequest* /*request*/, ::bosdyn::api::RecordDataBlobsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RecordDataBlobs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RecordEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RecordEvents() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RecordEvents(context, request, response); }));
    }
    ~WithRawCallbackMethod_RecordEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordEvents(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RecordEventsRequest* /*request*/, ::bosdyn::api::RecordEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RecordEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterSignalSchema : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterSignalSchema() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterSignalSchema(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterSignalSchema() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterSignalSchema(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RegisterSignalSchemaRequest* /*request*/, ::bosdyn::api::RegisterSignalSchemaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterSignalSchema(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RecordSignalTicks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RecordSignalTicks() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RecordSignalTicks(context, request, response); }));
    }
    ~WithRawCallbackMethod_RecordSignalTicks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordSignalTicks(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RecordSignalTicksRequest* /*request*/, ::bosdyn::api::RecordSignalTicksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RecordSignalTicks(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RecordTextMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RecordTextMessages() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::RecordTextMessagesRequest, ::bosdyn::api::RecordTextMessagesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::RecordTextMessagesRequest, ::bosdyn::api::RecordTextMessagesResponse>* streamer) {
                       return this->StreamedRecordTextMessages(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RecordTextMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RecordTextMessages(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RecordTextMessagesRequest* /*request*/, ::bosdyn::api::RecordTextMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRecordTextMessages(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::RecordTextMessagesRequest,::bosdyn::api::RecordTextMessagesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RecordOperatorComments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RecordOperatorComments() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::RecordOperatorCommentsRequest, ::bosdyn::api::RecordOperatorCommentsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::RecordOperatorCommentsRequest, ::bosdyn::api::RecordOperatorCommentsResponse>* streamer) {
                       return this->StreamedRecordOperatorComments(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RecordOperatorComments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RecordOperatorComments(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RecordOperatorCommentsRequest* /*request*/, ::bosdyn::api::RecordOperatorCommentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRecordOperatorComments(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::RecordOperatorCommentsRequest,::bosdyn::api::RecordOperatorCommentsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RecordDataBlobs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RecordDataBlobs() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::RecordDataBlobsRequest, ::bosdyn::api::RecordDataBlobsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::RecordDataBlobsRequest, ::bosdyn::api::RecordDataBlobsResponse>* streamer) {
                       return this->StreamedRecordDataBlobs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RecordDataBlobs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RecordDataBlobs(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RecordDataBlobsRequest* /*request*/, ::bosdyn::api::RecordDataBlobsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRecordDataBlobs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::RecordDataBlobsRequest,::bosdyn::api::RecordDataBlobsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RecordEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RecordEvents() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::RecordEventsRequest, ::bosdyn::api::RecordEventsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::RecordEventsRequest, ::bosdyn::api::RecordEventsResponse>* streamer) {
                       return this->StreamedRecordEvents(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RecordEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RecordEvents(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RecordEventsRequest* /*request*/, ::bosdyn::api::RecordEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRecordEvents(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::RecordEventsRequest,::bosdyn::api::RecordEventsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterSignalSchema : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterSignalSchema() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::RegisterSignalSchemaRequest, ::bosdyn::api::RegisterSignalSchemaResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::RegisterSignalSchemaRequest, ::bosdyn::api::RegisterSignalSchemaResponse>* streamer) {
                       return this->StreamedRegisterSignalSchema(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterSignalSchema() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterSignalSchema(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RegisterSignalSchemaRequest* /*request*/, ::bosdyn::api::RegisterSignalSchemaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterSignalSchema(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::RegisterSignalSchemaRequest,::bosdyn::api::RegisterSignalSchemaResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RecordSignalTicks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RecordSignalTicks() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::RecordSignalTicksRequest, ::bosdyn::api::RecordSignalTicksResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::RecordSignalTicksRequest, ::bosdyn::api::RecordSignalTicksResponse>* streamer) {
                       return this->StreamedRecordSignalTicks(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RecordSignalTicks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RecordSignalTicks(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RecordSignalTicksRequest* /*request*/, ::bosdyn::api::RecordSignalTicksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRecordSignalTicks(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::RecordSignalTicksRequest,::bosdyn::api::RecordSignalTicksResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RecordTextMessages<WithStreamedUnaryMethod_RecordOperatorComments<WithStreamedUnaryMethod_RecordDataBlobs<WithStreamedUnaryMethod_RecordEvents<WithStreamedUnaryMethod_RegisterSignalSchema<WithStreamedUnaryMethod_RecordSignalTicks<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RecordTextMessages<WithStreamedUnaryMethod_RecordOperatorComments<WithStreamedUnaryMethod_RecordDataBlobs<WithStreamedUnaryMethod_RecordEvents<WithStreamedUnaryMethod_RegisterSignalSchema<WithStreamedUnaryMethod_RecordSignalTicks<Service > > > > > > StreamedService;
};

}  // namespace api
}  // namespace bosdyn


#endif  // GRPC_bosdyn_2fapi_2fdata_5fbuffer_5fservice_2eproto__INCLUDED

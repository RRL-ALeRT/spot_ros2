// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/graph_nav/map_processing.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fgraph_5fnav_2fmap_5fprocessing_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fgraph_5fnav_2fmap_5fprocessing_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
#include "bosdyn/api/geometry.pb.h"
#include "bosdyn/api/header.pb.h"
#include "bosdyn/api/graph_nav/map.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgraph_5fnav_2fmap_5fprocessing_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_5fprocessing_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_5fprocessing_2eproto;
namespace bosdyn {
namespace api {
namespace graph_nav {
class AnchorHintUncertainty;
struct AnchorHintUncertaintyDefaultTypeInternal;
extern AnchorHintUncertaintyDefaultTypeInternal _AnchorHintUncertainty_default_instance_;
class AnchoringHint;
struct AnchoringHintDefaultTypeInternal;
extern AnchoringHintDefaultTypeInternal _AnchoringHint_default_instance_;
class PoseBounds;
struct PoseBoundsDefaultTypeInternal;
extern PoseBoundsDefaultTypeInternal _PoseBounds_default_instance_;
class ProcessAnchoringRequest;
struct ProcessAnchoringRequestDefaultTypeInternal;
extern ProcessAnchoringRequestDefaultTypeInternal _ProcessAnchoringRequest_default_instance_;
class ProcessAnchoringRequest_Params;
struct ProcessAnchoringRequest_ParamsDefaultTypeInternal;
extern ProcessAnchoringRequest_ParamsDefaultTypeInternal _ProcessAnchoringRequest_Params_default_instance_;
class ProcessAnchoringRequest_Params_MeasurementParams;
struct ProcessAnchoringRequest_Params_MeasurementParamsDefaultTypeInternal;
extern ProcessAnchoringRequest_Params_MeasurementParamsDefaultTypeInternal _ProcessAnchoringRequest_Params_MeasurementParams_default_instance_;
class ProcessAnchoringRequest_Params_OptimizerParams;
struct ProcessAnchoringRequest_Params_OptimizerParamsDefaultTypeInternal;
extern ProcessAnchoringRequest_Params_OptimizerParamsDefaultTypeInternal _ProcessAnchoringRequest_Params_OptimizerParams_default_instance_;
class ProcessAnchoringRequest_Params_Weights;
struct ProcessAnchoringRequest_Params_WeightsDefaultTypeInternal;
extern ProcessAnchoringRequest_Params_WeightsDefaultTypeInternal _ProcessAnchoringRequest_Params_Weights_default_instance_;
class ProcessAnchoringResponse;
struct ProcessAnchoringResponseDefaultTypeInternal;
extern ProcessAnchoringResponseDefaultTypeInternal _ProcessAnchoringResponse_default_instance_;
class ProcessTopologyRequest;
struct ProcessTopologyRequestDefaultTypeInternal;
extern ProcessTopologyRequestDefaultTypeInternal _ProcessTopologyRequest_default_instance_;
class ProcessTopologyRequest_CollisionCheckingParams;
struct ProcessTopologyRequest_CollisionCheckingParamsDefaultTypeInternal;
extern ProcessTopologyRequest_CollisionCheckingParamsDefaultTypeInternal _ProcessTopologyRequest_CollisionCheckingParams_default_instance_;
class ProcessTopologyRequest_FiducialLoopClosureParams;
struct ProcessTopologyRequest_FiducialLoopClosureParamsDefaultTypeInternal;
extern ProcessTopologyRequest_FiducialLoopClosureParamsDefaultTypeInternal _ProcessTopologyRequest_FiducialLoopClosureParams_default_instance_;
class ProcessTopologyRequest_ICPParams;
struct ProcessTopologyRequest_ICPParamsDefaultTypeInternal;
extern ProcessTopologyRequest_ICPParamsDefaultTypeInternal _ProcessTopologyRequest_ICPParams_default_instance_;
class ProcessTopologyRequest_OdometryLoopClosureParams;
struct ProcessTopologyRequest_OdometryLoopClosureParamsDefaultTypeInternal;
extern ProcessTopologyRequest_OdometryLoopClosureParamsDefaultTypeInternal _ProcessTopologyRequest_OdometryLoopClosureParams_default_instance_;
class ProcessTopologyRequest_Params;
struct ProcessTopologyRequest_ParamsDefaultTypeInternal;
extern ProcessTopologyRequest_ParamsDefaultTypeInternal _ProcessTopologyRequest_Params_default_instance_;
class ProcessTopologyResponse;
struct ProcessTopologyResponseDefaultTypeInternal;
extern ProcessTopologyResponseDefaultTypeInternal _ProcessTopologyResponse_default_instance_;
class WaypointAnchorHint;
struct WaypointAnchorHintDefaultTypeInternal;
extern WaypointAnchorHintDefaultTypeInternal _WaypointAnchorHint_default_instance_;
class WorldObjectAnchorHint;
struct WorldObjectAnchorHintDefaultTypeInternal;
extern WorldObjectAnchorHintDefaultTypeInternal _WorldObjectAnchorHint_default_instance_;
}  // namespace graph_nav
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::graph_nav::AnchorHintUncertainty* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::AnchorHintUncertainty>(Arena*);
template<> ::bosdyn::api::graph_nav::AnchoringHint* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::AnchoringHint>(Arena*);
template<> ::bosdyn::api::graph_nav::PoseBounds* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::PoseBounds>(Arena*);
template<> ::bosdyn::api::graph_nav::ProcessAnchoringRequest* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::ProcessAnchoringRequest>(Arena*);
template<> ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params>(Arena*);
template<> ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_MeasurementParams* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_MeasurementParams>(Arena*);
template<> ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_OptimizerParams* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_OptimizerParams>(Arena*);
template<> ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_Weights* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_Weights>(Arena*);
template<> ::bosdyn::api::graph_nav::ProcessAnchoringResponse* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::ProcessAnchoringResponse>(Arena*);
template<> ::bosdyn::api::graph_nav::ProcessTopologyRequest* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::ProcessTopologyRequest>(Arena*);
template<> ::bosdyn::api::graph_nav::ProcessTopologyRequest_CollisionCheckingParams* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::ProcessTopologyRequest_CollisionCheckingParams>(Arena*);
template<> ::bosdyn::api::graph_nav::ProcessTopologyRequest_FiducialLoopClosureParams* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::ProcessTopologyRequest_FiducialLoopClosureParams>(Arena*);
template<> ::bosdyn::api::graph_nav::ProcessTopologyRequest_ICPParams* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::ProcessTopologyRequest_ICPParams>(Arena*);
template<> ::bosdyn::api::graph_nav::ProcessTopologyRequest_OdometryLoopClosureParams* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::ProcessTopologyRequest_OdometryLoopClosureParams>(Arena*);
template<> ::bosdyn::api::graph_nav::ProcessTopologyRequest_Params* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::ProcessTopologyRequest_Params>(Arena*);
template<> ::bosdyn::api::graph_nav::ProcessTopologyResponse* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::ProcessTopologyResponse>(Arena*);
template<> ::bosdyn::api::graph_nav::WaypointAnchorHint* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::WaypointAnchorHint>(Arena*);
template<> ::bosdyn::api::graph_nav::WorldObjectAnchorHint* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::WorldObjectAnchorHint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {
namespace graph_nav {

enum ProcessTopologyResponse_Status : int {
  ProcessTopologyResponse_Status_STATUS_UNKNOWN = 0,
  ProcessTopologyResponse_Status_STATUS_OK = 1,
  ProcessTopologyResponse_Status_STATUS_MISSING_WAYPOINT_SNAPSHOTS = 2,
  ProcessTopologyResponse_Status_STATUS_INVALID_GRAPH = 3,
  ProcessTopologyResponse_Status_STATUS_MAP_MODIFIED_DURING_PROCESSING = 4,
  ProcessTopologyResponse_Status_ProcessTopologyResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ProcessTopologyResponse_Status_ProcessTopologyResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ProcessTopologyResponse_Status_IsValid(int value);
constexpr ProcessTopologyResponse_Status ProcessTopologyResponse_Status_Status_MIN = ProcessTopologyResponse_Status_STATUS_UNKNOWN;
constexpr ProcessTopologyResponse_Status ProcessTopologyResponse_Status_Status_MAX = ProcessTopologyResponse_Status_STATUS_MAP_MODIFIED_DURING_PROCESSING;
constexpr int ProcessTopologyResponse_Status_Status_ARRAYSIZE = ProcessTopologyResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProcessTopologyResponse_Status_descriptor();
template<typename T>
inline const std::string& ProcessTopologyResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProcessTopologyResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProcessTopologyResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProcessTopologyResponse_Status_descriptor(), enum_t_value);
}
inline bool ProcessTopologyResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProcessTopologyResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProcessTopologyResponse_Status>(
    ProcessTopologyResponse_Status_descriptor(), name, value);
}
enum ProcessAnchoringResponse_Status : int {
  ProcessAnchoringResponse_Status_STATUS_UNKNOWN = 0,
  ProcessAnchoringResponse_Status_STATUS_OK = 1,
  ProcessAnchoringResponse_Status_STATUS_MISSING_WAYPOINT_SNAPSHOTS = 2,
  ProcessAnchoringResponse_Status_STATUS_INVALID_GRAPH = 3,
  ProcessAnchoringResponse_Status_STATUS_OPTIMIZATION_FAILURE = 4,
  ProcessAnchoringResponse_Status_STATUS_INVALID_PARAMS = 5,
  ProcessAnchoringResponse_Status_STATUS_CONSTRAINT_VIOLATION = 6,
  ProcessAnchoringResponse_Status_STATUS_MAX_ITERATIONS = 7,
  ProcessAnchoringResponse_Status_STATUS_MAX_TIME = 8,
  ProcessAnchoringResponse_Status_STATUS_INVALID_HINTS = 9,
  ProcessAnchoringResponse_Status_STATUS_MAP_MODIFIED_DURING_PROCESSING = 10,
  ProcessAnchoringResponse_Status_STATUS_INVALID_GRAVITY_ALIGNMENT = 11,
  ProcessAnchoringResponse_Status_ProcessAnchoringResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ProcessAnchoringResponse_Status_ProcessAnchoringResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ProcessAnchoringResponse_Status_IsValid(int value);
constexpr ProcessAnchoringResponse_Status ProcessAnchoringResponse_Status_Status_MIN = ProcessAnchoringResponse_Status_STATUS_UNKNOWN;
constexpr ProcessAnchoringResponse_Status ProcessAnchoringResponse_Status_Status_MAX = ProcessAnchoringResponse_Status_STATUS_INVALID_GRAVITY_ALIGNMENT;
constexpr int ProcessAnchoringResponse_Status_Status_ARRAYSIZE = ProcessAnchoringResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProcessAnchoringResponse_Status_descriptor();
template<typename T>
inline const std::string& ProcessAnchoringResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProcessAnchoringResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProcessAnchoringResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProcessAnchoringResponse_Status_descriptor(), enum_t_value);
}
inline bool ProcessAnchoringResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProcessAnchoringResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProcessAnchoringResponse_Status>(
    ProcessAnchoringResponse_Status_descriptor(), name, value);
}
// ===================================================================

class ProcessTopologyRequest_ICPParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.ProcessTopologyRequest.ICPParams) */ {
 public:
  inline ProcessTopologyRequest_ICPParams() : ProcessTopologyRequest_ICPParams(nullptr) {}
  ~ProcessTopologyRequest_ICPParams() override;
  explicit PROTOBUF_CONSTEXPR ProcessTopologyRequest_ICPParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessTopologyRequest_ICPParams(const ProcessTopologyRequest_ICPParams& from);
  ProcessTopologyRequest_ICPParams(ProcessTopologyRequest_ICPParams&& from) noexcept
    : ProcessTopologyRequest_ICPParams() {
    *this = ::std::move(from);
  }

  inline ProcessTopologyRequest_ICPParams& operator=(const ProcessTopologyRequest_ICPParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessTopologyRequest_ICPParams& operator=(ProcessTopologyRequest_ICPParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessTopologyRequest_ICPParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessTopologyRequest_ICPParams* internal_default_instance() {
    return reinterpret_cast<const ProcessTopologyRequest_ICPParams*>(
               &_ProcessTopologyRequest_ICPParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProcessTopologyRequest_ICPParams& a, ProcessTopologyRequest_ICPParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessTopologyRequest_ICPParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessTopologyRequest_ICPParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessTopologyRequest_ICPParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessTopologyRequest_ICPParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessTopologyRequest_ICPParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessTopologyRequest_ICPParams& from) {
    ProcessTopologyRequest_ICPParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessTopologyRequest_ICPParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.ProcessTopologyRequest.ICPParams";
  }
  protected:
  explicit ProcessTopologyRequest_ICPParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIcpItersFieldNumber = 1,
    kMaxPointMatchDistanceFieldNumber = 2,
  };
  // .google.protobuf.Int32Value icp_iters = 1;
  bool has_icp_iters() const;
  private:
  bool _internal_has_icp_iters() const;
  public:
  void clear_icp_iters();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& icp_iters() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_icp_iters();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_icp_iters();
  void set_allocated_icp_iters(::PROTOBUF_NAMESPACE_ID::Int32Value* icp_iters);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_icp_iters() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_icp_iters();
  public:
  void unsafe_arena_set_allocated_icp_iters(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* icp_iters);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_icp_iters();

  // .google.protobuf.DoubleValue max_point_match_distance = 2;
  bool has_max_point_match_distance() const;
  private:
  bool _internal_has_max_point_match_distance() const;
  public:
  void clear_max_point_match_distance();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_point_match_distance() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_point_match_distance();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_point_match_distance();
  void set_allocated_max_point_match_distance(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_point_match_distance);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_point_match_distance() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_point_match_distance();
  public:
  void unsafe_arena_set_allocated_max_point_match_distance(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_point_match_distance);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_point_match_distance();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.ProcessTopologyRequest.ICPParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Int32Value* icp_iters_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_point_match_distance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_5fprocessing_2eproto;
};
// -------------------------------------------------------------------

class ProcessTopologyRequest_OdometryLoopClosureParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams) */ {
 public:
  inline ProcessTopologyRequest_OdometryLoopClosureParams() : ProcessTopologyRequest_OdometryLoopClosureParams(nullptr) {}
  ~ProcessTopologyRequest_OdometryLoopClosureParams() override;
  explicit PROTOBUF_CONSTEXPR ProcessTopologyRequest_OdometryLoopClosureParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessTopologyRequest_OdometryLoopClosureParams(const ProcessTopologyRequest_OdometryLoopClosureParams& from);
  ProcessTopologyRequest_OdometryLoopClosureParams(ProcessTopologyRequest_OdometryLoopClosureParams&& from) noexcept
    : ProcessTopologyRequest_OdometryLoopClosureParams() {
    *this = ::std::move(from);
  }

  inline ProcessTopologyRequest_OdometryLoopClosureParams& operator=(const ProcessTopologyRequest_OdometryLoopClosureParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessTopologyRequest_OdometryLoopClosureParams& operator=(ProcessTopologyRequest_OdometryLoopClosureParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessTopologyRequest_OdometryLoopClosureParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessTopologyRequest_OdometryLoopClosureParams* internal_default_instance() {
    return reinterpret_cast<const ProcessTopologyRequest_OdometryLoopClosureParams*>(
               &_ProcessTopologyRequest_OdometryLoopClosureParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProcessTopologyRequest_OdometryLoopClosureParams& a, ProcessTopologyRequest_OdometryLoopClosureParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessTopologyRequest_OdometryLoopClosureParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessTopologyRequest_OdometryLoopClosureParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessTopologyRequest_OdometryLoopClosureParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessTopologyRequest_OdometryLoopClosureParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessTopologyRequest_OdometryLoopClosureParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessTopologyRequest_OdometryLoopClosureParams& from) {
    ProcessTopologyRequest_OdometryLoopClosureParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessTopologyRequest_OdometryLoopClosureParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams";
  }
  protected:
  explicit ProcessTopologyRequest_OdometryLoopClosureParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxLoopClosurePathLengthFieldNumber = 1,
    kMinLoopClosurePathLengthFieldNumber = 2,
    kMaxLoopClosureHeightChangeFieldNumber = 3,
    kMaxLoopClosureEdgeLengthFieldNumber = 4,
    kNumExtraLoopClosureIterationsFieldNumber = 5,
  };
  // .google.protobuf.DoubleValue max_loop_closure_path_length = 1;
  bool has_max_loop_closure_path_length() const;
  private:
  bool _internal_has_max_loop_closure_path_length() const;
  public:
  void clear_max_loop_closure_path_length();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_loop_closure_path_length() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_loop_closure_path_length();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_loop_closure_path_length();
  void set_allocated_max_loop_closure_path_length(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_loop_closure_path_length);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_loop_closure_path_length() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_loop_closure_path_length();
  public:
  void unsafe_arena_set_allocated_max_loop_closure_path_length(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_loop_closure_path_length);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_loop_closure_path_length();

  // .google.protobuf.DoubleValue min_loop_closure_path_length = 2;
  bool has_min_loop_closure_path_length() const;
  private:
  bool _internal_has_min_loop_closure_path_length() const;
  public:
  void clear_min_loop_closure_path_length();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& min_loop_closure_path_length() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_min_loop_closure_path_length();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_min_loop_closure_path_length();
  void set_allocated_min_loop_closure_path_length(::PROTOBUF_NAMESPACE_ID::DoubleValue* min_loop_closure_path_length);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_min_loop_closure_path_length() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_min_loop_closure_path_length();
  public:
  void unsafe_arena_set_allocated_min_loop_closure_path_length(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* min_loop_closure_path_length);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_min_loop_closure_path_length();

  // .google.protobuf.DoubleValue max_loop_closure_height_change = 3;
  bool has_max_loop_closure_height_change() const;
  private:
  bool _internal_has_max_loop_closure_height_change() const;
  public:
  void clear_max_loop_closure_height_change();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_loop_closure_height_change() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_loop_closure_height_change();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_loop_closure_height_change();
  void set_allocated_max_loop_closure_height_change(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_loop_closure_height_change);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_loop_closure_height_change() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_loop_closure_height_change();
  public:
  void unsafe_arena_set_allocated_max_loop_closure_height_change(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_loop_closure_height_change);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_loop_closure_height_change();

  // .google.protobuf.DoubleValue max_loop_closure_edge_length = 4;
  bool has_max_loop_closure_edge_length() const;
  private:
  bool _internal_has_max_loop_closure_edge_length() const;
  public:
  void clear_max_loop_closure_edge_length();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_loop_closure_edge_length() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_loop_closure_edge_length();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_loop_closure_edge_length();
  void set_allocated_max_loop_closure_edge_length(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_loop_closure_edge_length);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_loop_closure_edge_length() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_loop_closure_edge_length();
  public:
  void unsafe_arena_set_allocated_max_loop_closure_edge_length(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_loop_closure_edge_length);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_loop_closure_edge_length();

  // .google.protobuf.Int32Value num_extra_loop_closure_iterations = 5;
  bool has_num_extra_loop_closure_iterations() const;
  private:
  bool _internal_has_num_extra_loop_closure_iterations() const;
  public:
  void clear_num_extra_loop_closure_iterations();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& num_extra_loop_closure_iterations() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_num_extra_loop_closure_iterations();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_num_extra_loop_closure_iterations();
  void set_allocated_num_extra_loop_closure_iterations(::PROTOBUF_NAMESPACE_ID::Int32Value* num_extra_loop_closure_iterations);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_num_extra_loop_closure_iterations() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_num_extra_loop_closure_iterations();
  public:
  void unsafe_arena_set_allocated_num_extra_loop_closure_iterations(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* num_extra_loop_closure_iterations);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_num_extra_loop_closure_iterations();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_loop_closure_path_length_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* min_loop_closure_path_length_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_loop_closure_height_change_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_loop_closure_edge_length_;
    ::PROTOBUF_NAMESPACE_ID::Int32Value* num_extra_loop_closure_iterations_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_5fprocessing_2eproto;
};
// -------------------------------------------------------------------

class ProcessTopologyRequest_FiducialLoopClosureParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.ProcessTopologyRequest.FiducialLoopClosureParams) */ {
 public:
  inline ProcessTopologyRequest_FiducialLoopClosureParams() : ProcessTopologyRequest_FiducialLoopClosureParams(nullptr) {}
  ~ProcessTopologyRequest_FiducialLoopClosureParams() override;
  explicit PROTOBUF_CONSTEXPR ProcessTopologyRequest_FiducialLoopClosureParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessTopologyRequest_FiducialLoopClosureParams(const ProcessTopologyRequest_FiducialLoopClosureParams& from);
  ProcessTopologyRequest_FiducialLoopClosureParams(ProcessTopologyRequest_FiducialLoopClosureParams&& from) noexcept
    : ProcessTopologyRequest_FiducialLoopClosureParams() {
    *this = ::std::move(from);
  }

  inline ProcessTopologyRequest_FiducialLoopClosureParams& operator=(const ProcessTopologyRequest_FiducialLoopClosureParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessTopologyRequest_FiducialLoopClosureParams& operator=(ProcessTopologyRequest_FiducialLoopClosureParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessTopologyRequest_FiducialLoopClosureParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessTopologyRequest_FiducialLoopClosureParams* internal_default_instance() {
    return reinterpret_cast<const ProcessTopologyRequest_FiducialLoopClosureParams*>(
               &_ProcessTopologyRequest_FiducialLoopClosureParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProcessTopologyRequest_FiducialLoopClosureParams& a, ProcessTopologyRequest_FiducialLoopClosureParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessTopologyRequest_FiducialLoopClosureParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessTopologyRequest_FiducialLoopClosureParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessTopologyRequest_FiducialLoopClosureParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessTopologyRequest_FiducialLoopClosureParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessTopologyRequest_FiducialLoopClosureParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessTopologyRequest_FiducialLoopClosureParams& from) {
    ProcessTopologyRequest_FiducialLoopClosureParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessTopologyRequest_FiducialLoopClosureParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.ProcessTopologyRequest.FiducialLoopClosureParams";
  }
  protected:
  explicit ProcessTopologyRequest_FiducialLoopClosureParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinLoopClosurePathLengthFieldNumber = 1,
    kMaxLoopClosureEdgeLengthFieldNumber = 2,
    kMaxFiducialDistanceFieldNumber = 3,
    kMaxLoopClosureHeightChangeFieldNumber = 4,
  };
  // .google.protobuf.DoubleValue min_loop_closure_path_length = 1;
  bool has_min_loop_closure_path_length() const;
  private:
  bool _internal_has_min_loop_closure_path_length() const;
  public:
  void clear_min_loop_closure_path_length();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& min_loop_closure_path_length() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_min_loop_closure_path_length();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_min_loop_closure_path_length();
  void set_allocated_min_loop_closure_path_length(::PROTOBUF_NAMESPACE_ID::DoubleValue* min_loop_closure_path_length);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_min_loop_closure_path_length() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_min_loop_closure_path_length();
  public:
  void unsafe_arena_set_allocated_min_loop_closure_path_length(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* min_loop_closure_path_length);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_min_loop_closure_path_length();

  // .google.protobuf.DoubleValue max_loop_closure_edge_length = 2;
  bool has_max_loop_closure_edge_length() const;
  private:
  bool _internal_has_max_loop_closure_edge_length() const;
  public:
  void clear_max_loop_closure_edge_length();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_loop_closure_edge_length() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_loop_closure_edge_length();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_loop_closure_edge_length();
  void set_allocated_max_loop_closure_edge_length(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_loop_closure_edge_length);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_loop_closure_edge_length() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_loop_closure_edge_length();
  public:
  void unsafe_arena_set_allocated_max_loop_closure_edge_length(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_loop_closure_edge_length);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_loop_closure_edge_length();

  // .google.protobuf.DoubleValue max_fiducial_distance = 3;
  bool has_max_fiducial_distance() const;
  private:
  bool _internal_has_max_fiducial_distance() const;
  public:
  void clear_max_fiducial_distance();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_fiducial_distance() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_fiducial_distance();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_fiducial_distance();
  void set_allocated_max_fiducial_distance(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_fiducial_distance);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_fiducial_distance() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_fiducial_distance();
  public:
  void unsafe_arena_set_allocated_max_fiducial_distance(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_fiducial_distance);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_fiducial_distance();

  // .google.protobuf.DoubleValue max_loop_closure_height_change = 4;
  bool has_max_loop_closure_height_change() const;
  private:
  bool _internal_has_max_loop_closure_height_change() const;
  public:
  void clear_max_loop_closure_height_change();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_loop_closure_height_change() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_loop_closure_height_change();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_loop_closure_height_change();
  void set_allocated_max_loop_closure_height_change(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_loop_closure_height_change);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_loop_closure_height_change() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_loop_closure_height_change();
  public:
  void unsafe_arena_set_allocated_max_loop_closure_height_change(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_loop_closure_height_change);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_loop_closure_height_change();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.ProcessTopologyRequest.FiducialLoopClosureParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* min_loop_closure_path_length_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_loop_closure_edge_length_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_fiducial_distance_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_loop_closure_height_change_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_5fprocessing_2eproto;
};
// -------------------------------------------------------------------

class ProcessTopologyRequest_CollisionCheckingParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.ProcessTopologyRequest.CollisionCheckingParams) */ {
 public:
  inline ProcessTopologyRequest_CollisionCheckingParams() : ProcessTopologyRequest_CollisionCheckingParams(nullptr) {}
  ~ProcessTopologyRequest_CollisionCheckingParams() override;
  explicit PROTOBUF_CONSTEXPR ProcessTopologyRequest_CollisionCheckingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessTopologyRequest_CollisionCheckingParams(const ProcessTopologyRequest_CollisionCheckingParams& from);
  ProcessTopologyRequest_CollisionCheckingParams(ProcessTopologyRequest_CollisionCheckingParams&& from) noexcept
    : ProcessTopologyRequest_CollisionCheckingParams() {
    *this = ::std::move(from);
  }

  inline ProcessTopologyRequest_CollisionCheckingParams& operator=(const ProcessTopologyRequest_CollisionCheckingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessTopologyRequest_CollisionCheckingParams& operator=(ProcessTopologyRequest_CollisionCheckingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessTopologyRequest_CollisionCheckingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessTopologyRequest_CollisionCheckingParams* internal_default_instance() {
    return reinterpret_cast<const ProcessTopologyRequest_CollisionCheckingParams*>(
               &_ProcessTopologyRequest_CollisionCheckingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProcessTopologyRequest_CollisionCheckingParams& a, ProcessTopologyRequest_CollisionCheckingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessTopologyRequest_CollisionCheckingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessTopologyRequest_CollisionCheckingParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessTopologyRequest_CollisionCheckingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessTopologyRequest_CollisionCheckingParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessTopologyRequest_CollisionCheckingParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessTopologyRequest_CollisionCheckingParams& from) {
    ProcessTopologyRequest_CollisionCheckingParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessTopologyRequest_CollisionCheckingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.ProcessTopologyRequest.CollisionCheckingParams";
  }
  protected:
  explicit ProcessTopologyRequest_CollisionCheckingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheckEdgesForCollisionFieldNumber = 1,
    kCollisionCheckRobotRadiusFieldNumber = 2,
    kCollisionCheckHeightVariationFieldNumber = 3,
  };
  // .google.protobuf.BoolValue check_edges_for_collision = 1;
  bool has_check_edges_for_collision() const;
  private:
  bool _internal_has_check_edges_for_collision() const;
  public:
  void clear_check_edges_for_collision();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& check_edges_for_collision() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_check_edges_for_collision();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_check_edges_for_collision();
  void set_allocated_check_edges_for_collision(::PROTOBUF_NAMESPACE_ID::BoolValue* check_edges_for_collision);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_check_edges_for_collision() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_check_edges_for_collision();
  public:
  void unsafe_arena_set_allocated_check_edges_for_collision(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* check_edges_for_collision);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_check_edges_for_collision();

  // .google.protobuf.DoubleValue collision_check_robot_radius = 2;
  bool has_collision_check_robot_radius() const;
  private:
  bool _internal_has_collision_check_robot_radius() const;
  public:
  void clear_collision_check_robot_radius();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& collision_check_robot_radius() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_collision_check_robot_radius();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_collision_check_robot_radius();
  void set_allocated_collision_check_robot_radius(::PROTOBUF_NAMESPACE_ID::DoubleValue* collision_check_robot_radius);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_collision_check_robot_radius() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_collision_check_robot_radius();
  public:
  void unsafe_arena_set_allocated_collision_check_robot_radius(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* collision_check_robot_radius);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_collision_check_robot_radius();

  // .google.protobuf.DoubleValue collision_check_height_variation = 3;
  bool has_collision_check_height_variation() const;
  private:
  bool _internal_has_collision_check_height_variation() const;
  public:
  void clear_collision_check_height_variation();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& collision_check_height_variation() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_collision_check_height_variation();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_collision_check_height_variation();
  void set_allocated_collision_check_height_variation(::PROTOBUF_NAMESPACE_ID::DoubleValue* collision_check_height_variation);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_collision_check_height_variation() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_collision_check_height_variation();
  public:
  void unsafe_arena_set_allocated_collision_check_height_variation(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* collision_check_height_variation);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_collision_check_height_variation();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.ProcessTopologyRequest.CollisionCheckingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::BoolValue* check_edges_for_collision_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* collision_check_robot_radius_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* collision_check_height_variation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_5fprocessing_2eproto;
};
// -------------------------------------------------------------------

class ProcessTopologyRequest_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.ProcessTopologyRequest.Params) */ {
 public:
  inline ProcessTopologyRequest_Params() : ProcessTopologyRequest_Params(nullptr) {}
  ~ProcessTopologyRequest_Params() override;
  explicit PROTOBUF_CONSTEXPR ProcessTopologyRequest_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessTopologyRequest_Params(const ProcessTopologyRequest_Params& from);
  ProcessTopologyRequest_Params(ProcessTopologyRequest_Params&& from) noexcept
    : ProcessTopologyRequest_Params() {
    *this = ::std::move(from);
  }

  inline ProcessTopologyRequest_Params& operator=(const ProcessTopologyRequest_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessTopologyRequest_Params& operator=(ProcessTopologyRequest_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessTopologyRequest_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessTopologyRequest_Params* internal_default_instance() {
    return reinterpret_cast<const ProcessTopologyRequest_Params*>(
               &_ProcessTopologyRequest_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ProcessTopologyRequest_Params& a, ProcessTopologyRequest_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessTopologyRequest_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessTopologyRequest_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessTopologyRequest_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessTopologyRequest_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessTopologyRequest_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessTopologyRequest_Params& from) {
    ProcessTopologyRequest_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessTopologyRequest_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.ProcessTopologyRequest.Params";
  }
  protected:
  explicit ProcessTopologyRequest_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDoOdometryLoopClosureFieldNumber = 1,
    kOdometryLoopClosureParamsFieldNumber = 2,
    kIcpParamsFieldNumber = 3,
    kDoFiducialLoopClosureFieldNumber = 4,
    kFiducialLoopClosureParamsFieldNumber = 5,
    kCollisionCheckParamsFieldNumber = 6,
    kTimeoutSecondsFieldNumber = 7,
  };
  // .google.protobuf.BoolValue do_odometry_loop_closure = 1;
  bool has_do_odometry_loop_closure() const;
  private:
  bool _internal_has_do_odometry_loop_closure() const;
  public:
  void clear_do_odometry_loop_closure();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& do_odometry_loop_closure() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_do_odometry_loop_closure();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_do_odometry_loop_closure();
  void set_allocated_do_odometry_loop_closure(::PROTOBUF_NAMESPACE_ID::BoolValue* do_odometry_loop_closure);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_do_odometry_loop_closure() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_do_odometry_loop_closure();
  public:
  void unsafe_arena_set_allocated_do_odometry_loop_closure(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* do_odometry_loop_closure);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_do_odometry_loop_closure();

  // .bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams odometry_loop_closure_params = 2;
  bool has_odometry_loop_closure_params() const;
  private:
  bool _internal_has_odometry_loop_closure_params() const;
  public:
  void clear_odometry_loop_closure_params();
  const ::bosdyn::api::graph_nav::ProcessTopologyRequest_OdometryLoopClosureParams& odometry_loop_closure_params() const;
  PROTOBUF_NODISCARD ::bosdyn::api::graph_nav::ProcessTopologyRequest_OdometryLoopClosureParams* release_odometry_loop_closure_params();
  ::bosdyn::api::graph_nav::ProcessTopologyRequest_OdometryLoopClosureParams* mutable_odometry_loop_closure_params();
  void set_allocated_odometry_loop_closure_params(::bosdyn::api::graph_nav::ProcessTopologyRequest_OdometryLoopClosureParams* odometry_loop_closure_params);
  private:
  const ::bosdyn::api::graph_nav::ProcessTopologyRequest_OdometryLoopClosureParams& _internal_odometry_loop_closure_params() const;
  ::bosdyn::api::graph_nav::ProcessTopologyRequest_OdometryLoopClosureParams* _internal_mutable_odometry_loop_closure_params();
  public:
  void unsafe_arena_set_allocated_odometry_loop_closure_params(
      ::bosdyn::api::graph_nav::ProcessTopologyRequest_OdometryLoopClosureParams* odometry_loop_closure_params);
  ::bosdyn::api::graph_nav::ProcessTopologyRequest_OdometryLoopClosureParams* unsafe_arena_release_odometry_loop_closure_params();

  // .bosdyn.api.graph_nav.ProcessTopologyRequest.ICPParams icp_params = 3;
  bool has_icp_params() const;
  private:
  bool _internal_has_icp_params() const;
  public:
  void clear_icp_params();
  const ::bosdyn::api::graph_nav::ProcessTopologyRequest_ICPParams& icp_params() const;
  PROTOBUF_NODISCARD ::bosdyn::api::graph_nav::ProcessTopologyRequest_ICPParams* release_icp_params();
  ::bosdyn::api::graph_nav::ProcessTopologyRequest_ICPParams* mutable_icp_params();
  void set_allocated_icp_params(::bosdyn::api::graph_nav::ProcessTopologyRequest_ICPParams* icp_params);
  private:
  const ::bosdyn::api::graph_nav::ProcessTopologyRequest_ICPParams& _internal_icp_params() const;
  ::bosdyn::api::graph_nav::ProcessTopologyRequest_ICPParams* _internal_mutable_icp_params();
  public:
  void unsafe_arena_set_allocated_icp_params(
      ::bosdyn::api::graph_nav::ProcessTopologyRequest_ICPParams* icp_params);
  ::bosdyn::api::graph_nav::ProcessTopologyRequest_ICPParams* unsafe_arena_release_icp_params();

  // .google.protobuf.BoolValue do_fiducial_loop_closure = 4;
  bool has_do_fiducial_loop_closure() const;
  private:
  bool _internal_has_do_fiducial_loop_closure() const;
  public:
  void clear_do_fiducial_loop_closure();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& do_fiducial_loop_closure() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_do_fiducial_loop_closure();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_do_fiducial_loop_closure();
  void set_allocated_do_fiducial_loop_closure(::PROTOBUF_NAMESPACE_ID::BoolValue* do_fiducial_loop_closure);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_do_fiducial_loop_closure() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_do_fiducial_loop_closure();
  public:
  void unsafe_arena_set_allocated_do_fiducial_loop_closure(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* do_fiducial_loop_closure);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_do_fiducial_loop_closure();

  // .bosdyn.api.graph_nav.ProcessTopologyRequest.FiducialLoopClosureParams fiducial_loop_closure_params = 5;
  bool has_fiducial_loop_closure_params() const;
  private:
  bool _internal_has_fiducial_loop_closure_params() const;
  public:
  void clear_fiducial_loop_closure_params();
  const ::bosdyn::api::graph_nav::ProcessTopologyRequest_FiducialLoopClosureParams& fiducial_loop_closure_params() const;
  PROTOBUF_NODISCARD ::bosdyn::api::graph_nav::ProcessTopologyRequest_FiducialLoopClosureParams* release_fiducial_loop_closure_params();
  ::bosdyn::api::graph_nav::ProcessTopologyRequest_FiducialLoopClosureParams* mutable_fiducial_loop_closure_params();
  void set_allocated_fiducial_loop_closure_params(::bosdyn::api::graph_nav::ProcessTopologyRequest_FiducialLoopClosureParams* fiducial_loop_closure_params);
  private:
  const ::bosdyn::api::graph_nav::ProcessTopologyRequest_FiducialLoopClosureParams& _internal_fiducial_loop_closure_params() const;
  ::bosdyn::api::graph_nav::ProcessTopologyRequest_FiducialLoopClosureParams* _internal_mutable_fiducial_loop_closure_params();
  public:
  void unsafe_arena_set_allocated_fiducial_loop_closure_params(
      ::bosdyn::api::graph_nav::ProcessTopologyRequest_FiducialLoopClosureParams* fiducial_loop_closure_params);
  ::bosdyn::api::graph_nav::ProcessTopologyRequest_FiducialLoopClosureParams* unsafe_arena_release_fiducial_loop_closure_params();

  // .bosdyn.api.graph_nav.ProcessTopologyRequest.CollisionCheckingParams collision_check_params = 6;
  bool has_collision_check_params() const;
  private:
  bool _internal_has_collision_check_params() const;
  public:
  void clear_collision_check_params();
  const ::bosdyn::api::graph_nav::ProcessTopologyRequest_CollisionCheckingParams& collision_check_params() const;
  PROTOBUF_NODISCARD ::bosdyn::api::graph_nav::ProcessTopologyRequest_CollisionCheckingParams* release_collision_check_params();
  ::bosdyn::api::graph_nav::ProcessTopologyRequest_CollisionCheckingParams* mutable_collision_check_params();
  void set_allocated_collision_check_params(::bosdyn::api::graph_nav::ProcessTopologyRequest_CollisionCheckingParams* collision_check_params);
  private:
  const ::bosdyn::api::graph_nav::ProcessTopologyRequest_CollisionCheckingParams& _internal_collision_check_params() const;
  ::bosdyn::api::graph_nav::ProcessTopologyRequest_CollisionCheckingParams* _internal_mutable_collision_check_params();
  public:
  void unsafe_arena_set_allocated_collision_check_params(
      ::bosdyn::api::graph_nav::ProcessTopologyRequest_CollisionCheckingParams* collision_check_params);
  ::bosdyn::api::graph_nav::ProcessTopologyRequest_CollisionCheckingParams* unsafe_arena_release_collision_check_params();

  // double timeout_seconds = 7;
  void clear_timeout_seconds();
  double timeout_seconds() const;
  void set_timeout_seconds(double value);
  private:
  double _internal_timeout_seconds() const;
  void _internal_set_timeout_seconds(double value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.ProcessTopologyRequest.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::BoolValue* do_odometry_loop_closure_;
    ::bosdyn::api::graph_nav::ProcessTopologyRequest_OdometryLoopClosureParams* odometry_loop_closure_params_;
    ::bosdyn::api::graph_nav::ProcessTopologyRequest_ICPParams* icp_params_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* do_fiducial_loop_closure_;
    ::bosdyn::api::graph_nav::ProcessTopologyRequest_FiducialLoopClosureParams* fiducial_loop_closure_params_;
    ::bosdyn::api::graph_nav::ProcessTopologyRequest_CollisionCheckingParams* collision_check_params_;
    double timeout_seconds_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_5fprocessing_2eproto;
};
// -------------------------------------------------------------------

class ProcessTopologyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.ProcessTopologyRequest) */ {
 public:
  inline ProcessTopologyRequest() : ProcessTopologyRequest(nullptr) {}
  ~ProcessTopologyRequest() override;
  explicit PROTOBUF_CONSTEXPR ProcessTopologyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessTopologyRequest(const ProcessTopologyRequest& from);
  ProcessTopologyRequest(ProcessTopologyRequest&& from) noexcept
    : ProcessTopologyRequest() {
    *this = ::std::move(from);
  }

  inline ProcessTopologyRequest& operator=(const ProcessTopologyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessTopologyRequest& operator=(ProcessTopologyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessTopologyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessTopologyRequest* internal_default_instance() {
    return reinterpret_cast<const ProcessTopologyRequest*>(
               &_ProcessTopologyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ProcessTopologyRequest& a, ProcessTopologyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessTopologyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessTopologyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessTopologyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessTopologyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessTopologyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessTopologyRequest& from) {
    ProcessTopologyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessTopologyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.ProcessTopologyRequest";
  }
  protected:
  explicit ProcessTopologyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProcessTopologyRequest_ICPParams ICPParams;
  typedef ProcessTopologyRequest_OdometryLoopClosureParams OdometryLoopClosureParams;
  typedef ProcessTopologyRequest_FiducialLoopClosureParams FiducialLoopClosureParams;
  typedef ProcessTopologyRequest_CollisionCheckingParams CollisionCheckingParams;
  typedef ProcessTopologyRequest_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kParamsFieldNumber = 2,
    kModifyMapOnServerFieldNumber = 3,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // .bosdyn.api.graph_nav.ProcessTopologyRequest.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::bosdyn::api::graph_nav::ProcessTopologyRequest_Params& params() const;
  PROTOBUF_NODISCARD ::bosdyn::api::graph_nav::ProcessTopologyRequest_Params* release_params();
  ::bosdyn::api::graph_nav::ProcessTopologyRequest_Params* mutable_params();
  void set_allocated_params(::bosdyn::api::graph_nav::ProcessTopologyRequest_Params* params);
  private:
  const ::bosdyn::api::graph_nav::ProcessTopologyRequest_Params& _internal_params() const;
  ::bosdyn::api::graph_nav::ProcessTopologyRequest_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::bosdyn::api::graph_nav::ProcessTopologyRequest_Params* params);
  ::bosdyn::api::graph_nav::ProcessTopologyRequest_Params* unsafe_arena_release_params();

  // bool modify_map_on_server = 3;
  void clear_modify_map_on_server();
  bool modify_map_on_server() const;
  void set_modify_map_on_server(bool value);
  private:
  bool _internal_modify_map_on_server() const;
  void _internal_set_modify_map_on_server(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.ProcessTopologyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::RequestHeader* header_;
    ::bosdyn::api::graph_nav::ProcessTopologyRequest_Params* params_;
    bool modify_map_on_server_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_5fprocessing_2eproto;
};
// -------------------------------------------------------------------

class ProcessTopologyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.ProcessTopologyResponse) */ {
 public:
  inline ProcessTopologyResponse() : ProcessTopologyResponse(nullptr) {}
  ~ProcessTopologyResponse() override;
  explicit PROTOBUF_CONSTEXPR ProcessTopologyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessTopologyResponse(const ProcessTopologyResponse& from);
  ProcessTopologyResponse(ProcessTopologyResponse&& from) noexcept
    : ProcessTopologyResponse() {
    *this = ::std::move(from);
  }

  inline ProcessTopologyResponse& operator=(const ProcessTopologyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessTopologyResponse& operator=(ProcessTopologyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessTopologyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessTopologyResponse* internal_default_instance() {
    return reinterpret_cast<const ProcessTopologyResponse*>(
               &_ProcessTopologyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ProcessTopologyResponse& a, ProcessTopologyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessTopologyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessTopologyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessTopologyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessTopologyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessTopologyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessTopologyResponse& from) {
    ProcessTopologyResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessTopologyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.ProcessTopologyResponse";
  }
  protected:
  explicit ProcessTopologyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProcessTopologyResponse_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    ProcessTopologyResponse_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_OK =
    ProcessTopologyResponse_Status_STATUS_OK;
  static constexpr Status STATUS_MISSING_WAYPOINT_SNAPSHOTS =
    ProcessTopologyResponse_Status_STATUS_MISSING_WAYPOINT_SNAPSHOTS;
  static constexpr Status STATUS_INVALID_GRAPH =
    ProcessTopologyResponse_Status_STATUS_INVALID_GRAPH;
  static constexpr Status STATUS_MAP_MODIFIED_DURING_PROCESSING =
    ProcessTopologyResponse_Status_STATUS_MAP_MODIFIED_DURING_PROCESSING;
  static inline bool Status_IsValid(int value) {
    return ProcessTopologyResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ProcessTopologyResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ProcessTopologyResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ProcessTopologyResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ProcessTopologyResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ProcessTopologyResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return ProcessTopologyResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMissingSnapshotIdsFieldNumber = 10,
    kMissingWaypointIdsFieldNumber = 11,
    kHeaderFieldNumber = 1,
    kNewSubgraphFieldNumber = 3,
    kStatusFieldNumber = 2,
    kMapOnServerWasModifiedFieldNumber = 4,
    kTimedOutFieldNumber = 12,
  };
  // repeated string missing_snapshot_ids = 10;
  int missing_snapshot_ids_size() const;
  private:
  int _internal_missing_snapshot_ids_size() const;
  public:
  void clear_missing_snapshot_ids();
  const std::string& missing_snapshot_ids(int index) const;
  std::string* mutable_missing_snapshot_ids(int index);
  void set_missing_snapshot_ids(int index, const std::string& value);
  void set_missing_snapshot_ids(int index, std::string&& value);
  void set_missing_snapshot_ids(int index, const char* value);
  void set_missing_snapshot_ids(int index, const char* value, size_t size);
  std::string* add_missing_snapshot_ids();
  void add_missing_snapshot_ids(const std::string& value);
  void add_missing_snapshot_ids(std::string&& value);
  void add_missing_snapshot_ids(const char* value);
  void add_missing_snapshot_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& missing_snapshot_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_missing_snapshot_ids();
  private:
  const std::string& _internal_missing_snapshot_ids(int index) const;
  std::string* _internal_add_missing_snapshot_ids();
  public:

  // repeated string missing_waypoint_ids = 11;
  int missing_waypoint_ids_size() const;
  private:
  int _internal_missing_waypoint_ids_size() const;
  public:
  void clear_missing_waypoint_ids();
  const std::string& missing_waypoint_ids(int index) const;
  std::string* mutable_missing_waypoint_ids(int index);
  void set_missing_waypoint_ids(int index, const std::string& value);
  void set_missing_waypoint_ids(int index, std::string&& value);
  void set_missing_waypoint_ids(int index, const char* value);
  void set_missing_waypoint_ids(int index, const char* value, size_t size);
  std::string* add_missing_waypoint_ids();
  void add_missing_waypoint_ids(const std::string& value);
  void add_missing_waypoint_ids(std::string&& value);
  void add_missing_waypoint_ids(const char* value);
  void add_missing_waypoint_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& missing_waypoint_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_missing_waypoint_ids();
  private:
  const std::string& _internal_missing_waypoint_ids(int index) const;
  std::string* _internal_add_missing_waypoint_ids();
  public:

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.graph_nav.Graph new_subgraph = 3;
  bool has_new_subgraph() const;
  private:
  bool _internal_has_new_subgraph() const;
  public:
  void clear_new_subgraph();
  const ::bosdyn::api::graph_nav::Graph& new_subgraph() const;
  PROTOBUF_NODISCARD ::bosdyn::api::graph_nav::Graph* release_new_subgraph();
  ::bosdyn::api::graph_nav::Graph* mutable_new_subgraph();
  void set_allocated_new_subgraph(::bosdyn::api::graph_nav::Graph* new_subgraph);
  private:
  const ::bosdyn::api::graph_nav::Graph& _internal_new_subgraph() const;
  ::bosdyn::api::graph_nav::Graph* _internal_mutable_new_subgraph();
  public:
  void unsafe_arena_set_allocated_new_subgraph(
      ::bosdyn::api::graph_nav::Graph* new_subgraph);
  ::bosdyn::api::graph_nav::Graph* unsafe_arena_release_new_subgraph();

  // .bosdyn.api.graph_nav.ProcessTopologyResponse.Status status = 2;
  void clear_status();
  ::bosdyn::api::graph_nav::ProcessTopologyResponse_Status status() const;
  void set_status(::bosdyn::api::graph_nav::ProcessTopologyResponse_Status value);
  private:
  ::bosdyn::api::graph_nav::ProcessTopologyResponse_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::graph_nav::ProcessTopologyResponse_Status value);
  public:

  // bool map_on_server_was_modified = 4;
  void clear_map_on_server_was_modified();
  bool map_on_server_was_modified() const;
  void set_map_on_server_was_modified(bool value);
  private:
  bool _internal_map_on_server_was_modified() const;
  void _internal_set_map_on_server_was_modified(bool value);
  public:

  // bool timed_out = 12;
  void clear_timed_out();
  bool timed_out() const;
  void set_timed_out(bool value);
  private:
  bool _internal_timed_out() const;
  void _internal_set_timed_out(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.ProcessTopologyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> missing_snapshot_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> missing_waypoint_ids_;
    ::bosdyn::api::ResponseHeader* header_;
    ::bosdyn::api::graph_nav::Graph* new_subgraph_;
    int status_;
    bool map_on_server_was_modified_;
    bool timed_out_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_5fprocessing_2eproto;
};
// -------------------------------------------------------------------

class PoseBounds final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.PoseBounds) */ {
 public:
  inline PoseBounds() : PoseBounds(nullptr) {}
  ~PoseBounds() override;
  explicit PROTOBUF_CONSTEXPR PoseBounds(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PoseBounds(const PoseBounds& from);
  PoseBounds(PoseBounds&& from) noexcept
    : PoseBounds() {
    *this = ::std::move(from);
  }

  inline PoseBounds& operator=(const PoseBounds& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoseBounds& operator=(PoseBounds&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PoseBounds& default_instance() {
    return *internal_default_instance();
  }
  static inline const PoseBounds* internal_default_instance() {
    return reinterpret_cast<const PoseBounds*>(
               &_PoseBounds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PoseBounds& a, PoseBounds& b) {
    a.Swap(&b);
  }
  inline void Swap(PoseBounds* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoseBounds* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PoseBounds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PoseBounds>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PoseBounds& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PoseBounds& from) {
    PoseBounds::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseBounds* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.PoseBounds";
  }
  protected:
  explicit PoseBounds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXBoundsFieldNumber = 1,
    kYBoundsFieldNumber = 2,
    kZBoundsFieldNumber = 3,
    kYawBoundsFieldNumber = 4,
  };
  // double x_bounds = 1;
  void clear_x_bounds();
  double x_bounds() const;
  void set_x_bounds(double value);
  private:
  double _internal_x_bounds() const;
  void _internal_set_x_bounds(double value);
  public:

  // double y_bounds = 2;
  void clear_y_bounds();
  double y_bounds() const;
  void set_y_bounds(double value);
  private:
  double _internal_y_bounds() const;
  void _internal_set_y_bounds(double value);
  public:

  // double z_bounds = 3;
  void clear_z_bounds();
  double z_bounds() const;
  void set_z_bounds(double value);
  private:
  double _internal_z_bounds() const;
  void _internal_set_z_bounds(double value);
  public:

  // double yaw_bounds = 4;
  void clear_yaw_bounds();
  double yaw_bounds() const;
  void set_yaw_bounds(double value);
  private:
  double _internal_yaw_bounds() const;
  void _internal_set_yaw_bounds(double value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.PoseBounds)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_bounds_;
    double y_bounds_;
    double z_bounds_;
    double yaw_bounds_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_5fprocessing_2eproto;
};
// -------------------------------------------------------------------

class AnchorHintUncertainty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.AnchorHintUncertainty) */ {
 public:
  inline AnchorHintUncertainty() : AnchorHintUncertainty(nullptr) {}
  ~AnchorHintUncertainty() override;
  explicit PROTOBUF_CONSTEXPR AnchorHintUncertainty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnchorHintUncertainty(const AnchorHintUncertainty& from);
  AnchorHintUncertainty(AnchorHintUncertainty&& from) noexcept
    : AnchorHintUncertainty() {
    *this = ::std::move(from);
  }

  inline AnchorHintUncertainty& operator=(const AnchorHintUncertainty& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnchorHintUncertainty& operator=(AnchorHintUncertainty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnchorHintUncertainty& default_instance() {
    return *internal_default_instance();
  }
  enum UncertaintyCase {
    kSe3Covariance = 1,
    kConfidenceBounds = 2,
    UNCERTAINTY_NOT_SET = 0,
  };

  static inline const AnchorHintUncertainty* internal_default_instance() {
    return reinterpret_cast<const AnchorHintUncertainty*>(
               &_AnchorHintUncertainty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AnchorHintUncertainty& a, AnchorHintUncertainty& b) {
    a.Swap(&b);
  }
  inline void Swap(AnchorHintUncertainty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnchorHintUncertainty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnchorHintUncertainty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnchorHintUncertainty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnchorHintUncertainty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AnchorHintUncertainty& from) {
    AnchorHintUncertainty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnchorHintUncertainty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.AnchorHintUncertainty";
  }
  protected:
  explicit AnchorHintUncertainty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSe3CovarianceFieldNumber = 1,
    kConfidenceBoundsFieldNumber = 2,
  };
  // .bosdyn.api.SE3Covariance se3_covariance = 1;
  bool has_se3_covariance() const;
  private:
  bool _internal_has_se3_covariance() const;
  public:
  void clear_se3_covariance();
  const ::bosdyn::api::SE3Covariance& se3_covariance() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SE3Covariance* release_se3_covariance();
  ::bosdyn::api::SE3Covariance* mutable_se3_covariance();
  void set_allocated_se3_covariance(::bosdyn::api::SE3Covariance* se3_covariance);
  private:
  const ::bosdyn::api::SE3Covariance& _internal_se3_covariance() const;
  ::bosdyn::api::SE3Covariance* _internal_mutable_se3_covariance();
  public:
  void unsafe_arena_set_allocated_se3_covariance(
      ::bosdyn::api::SE3Covariance* se3_covariance);
  ::bosdyn::api::SE3Covariance* unsafe_arena_release_se3_covariance();

  // .bosdyn.api.graph_nav.PoseBounds confidence_bounds = 2;
  bool has_confidence_bounds() const;
  private:
  bool _internal_has_confidence_bounds() const;
  public:
  void clear_confidence_bounds();
  const ::bosdyn::api::graph_nav::PoseBounds& confidence_bounds() const;
  PROTOBUF_NODISCARD ::bosdyn::api::graph_nav::PoseBounds* release_confidence_bounds();
  ::bosdyn::api::graph_nav::PoseBounds* mutable_confidence_bounds();
  void set_allocated_confidence_bounds(::bosdyn::api::graph_nav::PoseBounds* confidence_bounds);
  private:
  const ::bosdyn::api::graph_nav::PoseBounds& _internal_confidence_bounds() const;
  ::bosdyn::api::graph_nav::PoseBounds* _internal_mutable_confidence_bounds();
  public:
  void unsafe_arena_set_allocated_confidence_bounds(
      ::bosdyn::api::graph_nav::PoseBounds* confidence_bounds);
  ::bosdyn::api::graph_nav::PoseBounds* unsafe_arena_release_confidence_bounds();

  void clear_uncertainty();
  UncertaintyCase uncertainty_case() const;
  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.AnchorHintUncertainty)
 private:
  class _Internal;
  void set_has_se3_covariance();
  void set_has_confidence_bounds();

  inline bool has_uncertainty() const;
  inline void clear_has_uncertainty();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union UncertaintyUnion {
      constexpr UncertaintyUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::bosdyn::api::SE3Covariance* se3_covariance_;
      ::bosdyn::api::graph_nav::PoseBounds* confidence_bounds_;
    } uncertainty_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_5fprocessing_2eproto;
};
// -------------------------------------------------------------------

class WaypointAnchorHint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.WaypointAnchorHint) */ {
 public:
  inline WaypointAnchorHint() : WaypointAnchorHint(nullptr) {}
  ~WaypointAnchorHint() override;
  explicit PROTOBUF_CONSTEXPR WaypointAnchorHint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WaypointAnchorHint(const WaypointAnchorHint& from);
  WaypointAnchorHint(WaypointAnchorHint&& from) noexcept
    : WaypointAnchorHint() {
    *this = ::std::move(from);
  }

  inline WaypointAnchorHint& operator=(const WaypointAnchorHint& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaypointAnchorHint& operator=(WaypointAnchorHint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WaypointAnchorHint& default_instance() {
    return *internal_default_instance();
  }
  static inline const WaypointAnchorHint* internal_default_instance() {
    return reinterpret_cast<const WaypointAnchorHint*>(
               &_WaypointAnchorHint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(WaypointAnchorHint& a, WaypointAnchorHint& b) {
    a.Swap(&b);
  }
  inline void Swap(WaypointAnchorHint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaypointAnchorHint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WaypointAnchorHint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WaypointAnchorHint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WaypointAnchorHint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WaypointAnchorHint& from) {
    WaypointAnchorHint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaypointAnchorHint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.WaypointAnchorHint";
  }
  protected:
  explicit WaypointAnchorHint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWaypointAnchorFieldNumber = 1,
    kSeedTformWaypointUncertaintyFieldNumber = 2,
    kSeedTformWaypointConstraintFieldNumber = 3,
  };
  // .bosdyn.api.graph_nav.Anchor waypoint_anchor = 1;
  bool has_waypoint_anchor() const;
  private:
  bool _internal_has_waypoint_anchor() const;
  public:
  void clear_waypoint_anchor();
  const ::bosdyn::api::graph_nav::Anchor& waypoint_anchor() const;
  PROTOBUF_NODISCARD ::bosdyn::api::graph_nav::Anchor* release_waypoint_anchor();
  ::bosdyn::api::graph_nav::Anchor* mutable_waypoint_anchor();
  void set_allocated_waypoint_anchor(::bosdyn::api::graph_nav::Anchor* waypoint_anchor);
  private:
  const ::bosdyn::api::graph_nav::Anchor& _internal_waypoint_anchor() const;
  ::bosdyn::api::graph_nav::Anchor* _internal_mutable_waypoint_anchor();
  public:
  void unsafe_arena_set_allocated_waypoint_anchor(
      ::bosdyn::api::graph_nav::Anchor* waypoint_anchor);
  ::bosdyn::api::graph_nav::Anchor* unsafe_arena_release_waypoint_anchor();

  // .bosdyn.api.graph_nav.AnchorHintUncertainty seed_tform_waypoint_uncertainty = 2;
  bool has_seed_tform_waypoint_uncertainty() const;
  private:
  bool _internal_has_seed_tform_waypoint_uncertainty() const;
  public:
  void clear_seed_tform_waypoint_uncertainty();
  const ::bosdyn::api::graph_nav::AnchorHintUncertainty& seed_tform_waypoint_uncertainty() const;
  PROTOBUF_NODISCARD ::bosdyn::api::graph_nav::AnchorHintUncertainty* release_seed_tform_waypoint_uncertainty();
  ::bosdyn::api::graph_nav::AnchorHintUncertainty* mutable_seed_tform_waypoint_uncertainty();
  void set_allocated_seed_tform_waypoint_uncertainty(::bosdyn::api::graph_nav::AnchorHintUncertainty* seed_tform_waypoint_uncertainty);
  private:
  const ::bosdyn::api::graph_nav::AnchorHintUncertainty& _internal_seed_tform_waypoint_uncertainty() const;
  ::bosdyn::api::graph_nav::AnchorHintUncertainty* _internal_mutable_seed_tform_waypoint_uncertainty();
  public:
  void unsafe_arena_set_allocated_seed_tform_waypoint_uncertainty(
      ::bosdyn::api::graph_nav::AnchorHintUncertainty* seed_tform_waypoint_uncertainty);
  ::bosdyn::api::graph_nav::AnchorHintUncertainty* unsafe_arena_release_seed_tform_waypoint_uncertainty();

  // .bosdyn.api.graph_nav.PoseBounds seed_tform_waypoint_constraint = 3;
  bool has_seed_tform_waypoint_constraint() const;
  private:
  bool _internal_has_seed_tform_waypoint_constraint() const;
  public:
  void clear_seed_tform_waypoint_constraint();
  const ::bosdyn::api::graph_nav::PoseBounds& seed_tform_waypoint_constraint() const;
  PROTOBUF_NODISCARD ::bosdyn::api::graph_nav::PoseBounds* release_seed_tform_waypoint_constraint();
  ::bosdyn::api::graph_nav::PoseBounds* mutable_seed_tform_waypoint_constraint();
  void set_allocated_seed_tform_waypoint_constraint(::bosdyn::api::graph_nav::PoseBounds* seed_tform_waypoint_constraint);
  private:
  const ::bosdyn::api::graph_nav::PoseBounds& _internal_seed_tform_waypoint_constraint() const;
  ::bosdyn::api::graph_nav::PoseBounds* _internal_mutable_seed_tform_waypoint_constraint();
  public:
  void unsafe_arena_set_allocated_seed_tform_waypoint_constraint(
      ::bosdyn::api::graph_nav::PoseBounds* seed_tform_waypoint_constraint);
  ::bosdyn::api::graph_nav::PoseBounds* unsafe_arena_release_seed_tform_waypoint_constraint();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.WaypointAnchorHint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::graph_nav::Anchor* waypoint_anchor_;
    ::bosdyn::api::graph_nav::AnchorHintUncertainty* seed_tform_waypoint_uncertainty_;
    ::bosdyn::api::graph_nav::PoseBounds* seed_tform_waypoint_constraint_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_5fprocessing_2eproto;
};
// -------------------------------------------------------------------

class WorldObjectAnchorHint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.WorldObjectAnchorHint) */ {
 public:
  inline WorldObjectAnchorHint() : WorldObjectAnchorHint(nullptr) {}
  ~WorldObjectAnchorHint() override;
  explicit PROTOBUF_CONSTEXPR WorldObjectAnchorHint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorldObjectAnchorHint(const WorldObjectAnchorHint& from);
  WorldObjectAnchorHint(WorldObjectAnchorHint&& from) noexcept
    : WorldObjectAnchorHint() {
    *this = ::std::move(from);
  }

  inline WorldObjectAnchorHint& operator=(const WorldObjectAnchorHint& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldObjectAnchorHint& operator=(WorldObjectAnchorHint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorldObjectAnchorHint& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorldObjectAnchorHint* internal_default_instance() {
    return reinterpret_cast<const WorldObjectAnchorHint*>(
               &_WorldObjectAnchorHint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(WorldObjectAnchorHint& a, WorldObjectAnchorHint& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldObjectAnchorHint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorldObjectAnchorHint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorldObjectAnchorHint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorldObjectAnchorHint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WorldObjectAnchorHint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WorldObjectAnchorHint& from) {
    WorldObjectAnchorHint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldObjectAnchorHint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.WorldObjectAnchorHint";
  }
  protected:
  explicit WorldObjectAnchorHint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectAnchorFieldNumber = 1,
    kSeedTformObjectUncertaintyFieldNumber = 2,
    kSeedTformObjectConstraintFieldNumber = 3,
  };
  // .bosdyn.api.graph_nav.AnchoredWorldObject object_anchor = 1;
  bool has_object_anchor() const;
  private:
  bool _internal_has_object_anchor() const;
  public:
  void clear_object_anchor();
  const ::bosdyn::api::graph_nav::AnchoredWorldObject& object_anchor() const;
  PROTOBUF_NODISCARD ::bosdyn::api::graph_nav::AnchoredWorldObject* release_object_anchor();
  ::bosdyn::api::graph_nav::AnchoredWorldObject* mutable_object_anchor();
  void set_allocated_object_anchor(::bosdyn::api::graph_nav::AnchoredWorldObject* object_anchor);
  private:
  const ::bosdyn::api::graph_nav::AnchoredWorldObject& _internal_object_anchor() const;
  ::bosdyn::api::graph_nav::AnchoredWorldObject* _internal_mutable_object_anchor();
  public:
  void unsafe_arena_set_allocated_object_anchor(
      ::bosdyn::api::graph_nav::AnchoredWorldObject* object_anchor);
  ::bosdyn::api::graph_nav::AnchoredWorldObject* unsafe_arena_release_object_anchor();

  // .bosdyn.api.graph_nav.AnchorHintUncertainty seed_tform_object_uncertainty = 2;
  bool has_seed_tform_object_uncertainty() const;
  private:
  bool _internal_has_seed_tform_object_uncertainty() const;
  public:
  void clear_seed_tform_object_uncertainty();
  const ::bosdyn::api::graph_nav::AnchorHintUncertainty& seed_tform_object_uncertainty() const;
  PROTOBUF_NODISCARD ::bosdyn::api::graph_nav::AnchorHintUncertainty* release_seed_tform_object_uncertainty();
  ::bosdyn::api::graph_nav::AnchorHintUncertainty* mutable_seed_tform_object_uncertainty();
  void set_allocated_seed_tform_object_uncertainty(::bosdyn::api::graph_nav::AnchorHintUncertainty* seed_tform_object_uncertainty);
  private:
  const ::bosdyn::api::graph_nav::AnchorHintUncertainty& _internal_seed_tform_object_uncertainty() const;
  ::bosdyn::api::graph_nav::AnchorHintUncertainty* _internal_mutable_seed_tform_object_uncertainty();
  public:
  void unsafe_arena_set_allocated_seed_tform_object_uncertainty(
      ::bosdyn::api::graph_nav::AnchorHintUncertainty* seed_tform_object_uncertainty);
  ::bosdyn::api::graph_nav::AnchorHintUncertainty* unsafe_arena_release_seed_tform_object_uncertainty();

  // .bosdyn.api.graph_nav.PoseBounds seed_tform_object_constraint = 3;
  bool has_seed_tform_object_constraint() const;
  private:
  bool _internal_has_seed_tform_object_constraint() const;
  public:
  void clear_seed_tform_object_constraint();
  const ::bosdyn::api::graph_nav::PoseBounds& seed_tform_object_constraint() const;
  PROTOBUF_NODISCARD ::bosdyn::api::graph_nav::PoseBounds* release_seed_tform_object_constraint();
  ::bosdyn::api::graph_nav::PoseBounds* mutable_seed_tform_object_constraint();
  void set_allocated_seed_tform_object_constraint(::bosdyn::api::graph_nav::PoseBounds* seed_tform_object_constraint);
  private:
  const ::bosdyn::api::graph_nav::PoseBounds& _internal_seed_tform_object_constraint() const;
  ::bosdyn::api::graph_nav::PoseBounds* _internal_mutable_seed_tform_object_constraint();
  public:
  void unsafe_arena_set_allocated_seed_tform_object_constraint(
      ::bosdyn::api::graph_nav::PoseBounds* seed_tform_object_constraint);
  ::bosdyn::api::graph_nav::PoseBounds* unsafe_arena_release_seed_tform_object_constraint();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.WorldObjectAnchorHint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::graph_nav::AnchoredWorldObject* object_anchor_;
    ::bosdyn::api::graph_nav::AnchorHintUncertainty* seed_tform_object_uncertainty_;
    ::bosdyn::api::graph_nav::PoseBounds* seed_tform_object_constraint_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_5fprocessing_2eproto;
};
// -------------------------------------------------------------------

class AnchoringHint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.AnchoringHint) */ {
 public:
  inline AnchoringHint() : AnchoringHint(nullptr) {}
  ~AnchoringHint() override;
  explicit PROTOBUF_CONSTEXPR AnchoringHint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnchoringHint(const AnchoringHint& from);
  AnchoringHint(AnchoringHint&& from) noexcept
    : AnchoringHint() {
    *this = ::std::move(from);
  }

  inline AnchoringHint& operator=(const AnchoringHint& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnchoringHint& operator=(AnchoringHint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnchoringHint& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnchoringHint* internal_default_instance() {
    return reinterpret_cast<const AnchoringHint*>(
               &_AnchoringHint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AnchoringHint& a, AnchoringHint& b) {
    a.Swap(&b);
  }
  inline void Swap(AnchoringHint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnchoringHint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnchoringHint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnchoringHint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnchoringHint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AnchoringHint& from) {
    AnchoringHint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnchoringHint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.AnchoringHint";
  }
  protected:
  explicit AnchoringHint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWaypointAnchorsFieldNumber = 1,
    kWorldObjectsFieldNumber = 2,
  };
  // repeated .bosdyn.api.graph_nav.WaypointAnchorHint waypoint_anchors = 1;
  int waypoint_anchors_size() const;
  private:
  int _internal_waypoint_anchors_size() const;
  public:
  void clear_waypoint_anchors();
  ::bosdyn::api::graph_nav::WaypointAnchorHint* mutable_waypoint_anchors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::WaypointAnchorHint >*
      mutable_waypoint_anchors();
  private:
  const ::bosdyn::api::graph_nav::WaypointAnchorHint& _internal_waypoint_anchors(int index) const;
  ::bosdyn::api::graph_nav::WaypointAnchorHint* _internal_add_waypoint_anchors();
  public:
  const ::bosdyn::api::graph_nav::WaypointAnchorHint& waypoint_anchors(int index) const;
  ::bosdyn::api::graph_nav::WaypointAnchorHint* add_waypoint_anchors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::WaypointAnchorHint >&
      waypoint_anchors() const;

  // repeated .bosdyn.api.graph_nav.WorldObjectAnchorHint world_objects = 2;
  int world_objects_size() const;
  private:
  int _internal_world_objects_size() const;
  public:
  void clear_world_objects();
  ::bosdyn::api::graph_nav::WorldObjectAnchorHint* mutable_world_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::WorldObjectAnchorHint >*
      mutable_world_objects();
  private:
  const ::bosdyn::api::graph_nav::WorldObjectAnchorHint& _internal_world_objects(int index) const;
  ::bosdyn::api::graph_nav::WorldObjectAnchorHint* _internal_add_world_objects();
  public:
  const ::bosdyn::api::graph_nav::WorldObjectAnchorHint& world_objects(int index) const;
  ::bosdyn::api::graph_nav::WorldObjectAnchorHint* add_world_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::WorldObjectAnchorHint >&
      world_objects() const;

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.AnchoringHint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::WaypointAnchorHint > waypoint_anchors_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::WorldObjectAnchorHint > world_objects_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_5fprocessing_2eproto;
};
// -------------------------------------------------------------------

class ProcessAnchoringRequest_Params_OptimizerParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.OptimizerParams) */ {
 public:
  inline ProcessAnchoringRequest_Params_OptimizerParams() : ProcessAnchoringRequest_Params_OptimizerParams(nullptr) {}
  ~ProcessAnchoringRequest_Params_OptimizerParams() override;
  explicit PROTOBUF_CONSTEXPR ProcessAnchoringRequest_Params_OptimizerParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessAnchoringRequest_Params_OptimizerParams(const ProcessAnchoringRequest_Params_OptimizerParams& from);
  ProcessAnchoringRequest_Params_OptimizerParams(ProcessAnchoringRequest_Params_OptimizerParams&& from) noexcept
    : ProcessAnchoringRequest_Params_OptimizerParams() {
    *this = ::std::move(from);
  }

  inline ProcessAnchoringRequest_Params_OptimizerParams& operator=(const ProcessAnchoringRequest_Params_OptimizerParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessAnchoringRequest_Params_OptimizerParams& operator=(ProcessAnchoringRequest_Params_OptimizerParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessAnchoringRequest_Params_OptimizerParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessAnchoringRequest_Params_OptimizerParams* internal_default_instance() {
    return reinterpret_cast<const ProcessAnchoringRequest_Params_OptimizerParams*>(
               &_ProcessAnchoringRequest_Params_OptimizerParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ProcessAnchoringRequest_Params_OptimizerParams& a, ProcessAnchoringRequest_Params_OptimizerParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessAnchoringRequest_Params_OptimizerParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessAnchoringRequest_Params_OptimizerParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessAnchoringRequest_Params_OptimizerParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessAnchoringRequest_Params_OptimizerParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessAnchoringRequest_Params_OptimizerParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessAnchoringRequest_Params_OptimizerParams& from) {
    ProcessAnchoringRequest_Params_OptimizerParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessAnchoringRequest_Params_OptimizerParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.OptimizerParams";
  }
  protected:
  explicit ProcessAnchoringRequest_Params_OptimizerParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxItersFieldNumber = 1,
    kMaxTimeSecondsFieldNumber = 2,
  };
  // .google.protobuf.Int32Value max_iters = 1;
  bool has_max_iters() const;
  private:
  bool _internal_has_max_iters() const;
  public:
  void clear_max_iters();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& max_iters() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_max_iters();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_max_iters();
  void set_allocated_max_iters(::PROTOBUF_NAMESPACE_ID::Int32Value* max_iters);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_max_iters() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_max_iters();
  public:
  void unsafe_arena_set_allocated_max_iters(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* max_iters);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_max_iters();

  // .google.protobuf.DoubleValue max_time_seconds = 2;
  bool has_max_time_seconds() const;
  private:
  bool _internal_has_max_time_seconds() const;
  public:
  void clear_max_time_seconds();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_time_seconds() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_time_seconds();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_time_seconds();
  void set_allocated_max_time_seconds(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_time_seconds);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_time_seconds() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_time_seconds();
  public:
  void unsafe_arena_set_allocated_max_time_seconds(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_time_seconds);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_time_seconds();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.OptimizerParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Int32Value* max_iters_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_time_seconds_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_5fprocessing_2eproto;
};
// -------------------------------------------------------------------

class ProcessAnchoringRequest_Params_MeasurementParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams) */ {
 public:
  inline ProcessAnchoringRequest_Params_MeasurementParams() : ProcessAnchoringRequest_Params_MeasurementParams(nullptr) {}
  ~ProcessAnchoringRequest_Params_MeasurementParams() override;
  explicit PROTOBUF_CONSTEXPR ProcessAnchoringRequest_Params_MeasurementParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessAnchoringRequest_Params_MeasurementParams(const ProcessAnchoringRequest_Params_MeasurementParams& from);
  ProcessAnchoringRequest_Params_MeasurementParams(ProcessAnchoringRequest_Params_MeasurementParams&& from) noexcept
    : ProcessAnchoringRequest_Params_MeasurementParams() {
    *this = ::std::move(from);
  }

  inline ProcessAnchoringRequest_Params_MeasurementParams& operator=(const ProcessAnchoringRequest_Params_MeasurementParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessAnchoringRequest_Params_MeasurementParams& operator=(ProcessAnchoringRequest_Params_MeasurementParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessAnchoringRequest_Params_MeasurementParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessAnchoringRequest_Params_MeasurementParams* internal_default_instance() {
    return reinterpret_cast<const ProcessAnchoringRequest_Params_MeasurementParams*>(
               &_ProcessAnchoringRequest_Params_MeasurementParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ProcessAnchoringRequest_Params_MeasurementParams& a, ProcessAnchoringRequest_Params_MeasurementParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessAnchoringRequest_Params_MeasurementParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessAnchoringRequest_Params_MeasurementParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessAnchoringRequest_Params_MeasurementParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessAnchoringRequest_Params_MeasurementParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessAnchoringRequest_Params_MeasurementParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessAnchoringRequest_Params_MeasurementParams& from) {
    ProcessAnchoringRequest_Params_MeasurementParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessAnchoringRequest_Params_MeasurementParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams";
  }
  protected:
  explicit ProcessAnchoringRequest_Params_MeasurementParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseKinematicOdometryFieldNumber = 1,
    kUseVisualOdometryFieldNumber = 2,
    kUseGyroscopeMeasurementsFieldNumber = 3,
    kUseLoopClosuresFieldNumber = 4,
    kUseWorldObjectsFieldNumber = 5,
  };
  // .google.protobuf.BoolValue use_kinematic_odometry = 1;
  bool has_use_kinematic_odometry() const;
  private:
  bool _internal_has_use_kinematic_odometry() const;
  public:
  void clear_use_kinematic_odometry();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& use_kinematic_odometry() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_use_kinematic_odometry();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_use_kinematic_odometry();
  void set_allocated_use_kinematic_odometry(::PROTOBUF_NAMESPACE_ID::BoolValue* use_kinematic_odometry);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_use_kinematic_odometry() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_use_kinematic_odometry();
  public:
  void unsafe_arena_set_allocated_use_kinematic_odometry(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* use_kinematic_odometry);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_use_kinematic_odometry();

  // .google.protobuf.BoolValue use_visual_odometry = 2;
  bool has_use_visual_odometry() const;
  private:
  bool _internal_has_use_visual_odometry() const;
  public:
  void clear_use_visual_odometry();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& use_visual_odometry() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_use_visual_odometry();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_use_visual_odometry();
  void set_allocated_use_visual_odometry(::PROTOBUF_NAMESPACE_ID::BoolValue* use_visual_odometry);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_use_visual_odometry() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_use_visual_odometry();
  public:
  void unsafe_arena_set_allocated_use_visual_odometry(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* use_visual_odometry);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_use_visual_odometry();

  // .google.protobuf.BoolValue use_gyroscope_measurements = 3;
  bool has_use_gyroscope_measurements() const;
  private:
  bool _internal_has_use_gyroscope_measurements() const;
  public:
  void clear_use_gyroscope_measurements();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& use_gyroscope_measurements() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_use_gyroscope_measurements();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_use_gyroscope_measurements();
  void set_allocated_use_gyroscope_measurements(::PROTOBUF_NAMESPACE_ID::BoolValue* use_gyroscope_measurements);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_use_gyroscope_measurements() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_use_gyroscope_measurements();
  public:
  void unsafe_arena_set_allocated_use_gyroscope_measurements(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* use_gyroscope_measurements);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_use_gyroscope_measurements();

  // .google.protobuf.BoolValue use_loop_closures = 4;
  bool has_use_loop_closures() const;
  private:
  bool _internal_has_use_loop_closures() const;
  public:
  void clear_use_loop_closures();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& use_loop_closures() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_use_loop_closures();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_use_loop_closures();
  void set_allocated_use_loop_closures(::PROTOBUF_NAMESPACE_ID::BoolValue* use_loop_closures);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_use_loop_closures() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_use_loop_closures();
  public:
  void unsafe_arena_set_allocated_use_loop_closures(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* use_loop_closures);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_use_loop_closures();

  // .google.protobuf.BoolValue use_world_objects = 5;
  bool has_use_world_objects() const;
  private:
  bool _internal_has_use_world_objects() const;
  public:
  void clear_use_world_objects();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& use_world_objects() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_use_world_objects();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_use_world_objects();
  void set_allocated_use_world_objects(::PROTOBUF_NAMESPACE_ID::BoolValue* use_world_objects);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_use_world_objects() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_use_world_objects();
  public:
  void unsafe_arena_set_allocated_use_world_objects(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* use_world_objects);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_use_world_objects();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::BoolValue* use_kinematic_odometry_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* use_visual_odometry_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* use_gyroscope_measurements_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* use_loop_closures_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* use_world_objects_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_5fprocessing_2eproto;
};
// -------------------------------------------------------------------

class ProcessAnchoringRequest_Params_Weights final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.Weights) */ {
 public:
  inline ProcessAnchoringRequest_Params_Weights() : ProcessAnchoringRequest_Params_Weights(nullptr) {}
  ~ProcessAnchoringRequest_Params_Weights() override;
  explicit PROTOBUF_CONSTEXPR ProcessAnchoringRequest_Params_Weights(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessAnchoringRequest_Params_Weights(const ProcessAnchoringRequest_Params_Weights& from);
  ProcessAnchoringRequest_Params_Weights(ProcessAnchoringRequest_Params_Weights&& from) noexcept
    : ProcessAnchoringRequest_Params_Weights() {
    *this = ::std::move(from);
  }

  inline ProcessAnchoringRequest_Params_Weights& operator=(const ProcessAnchoringRequest_Params_Weights& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessAnchoringRequest_Params_Weights& operator=(ProcessAnchoringRequest_Params_Weights&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessAnchoringRequest_Params_Weights& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessAnchoringRequest_Params_Weights* internal_default_instance() {
    return reinterpret_cast<const ProcessAnchoringRequest_Params_Weights*>(
               &_ProcessAnchoringRequest_Params_Weights_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ProcessAnchoringRequest_Params_Weights& a, ProcessAnchoringRequest_Params_Weights& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessAnchoringRequest_Params_Weights* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessAnchoringRequest_Params_Weights* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessAnchoringRequest_Params_Weights* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessAnchoringRequest_Params_Weights>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessAnchoringRequest_Params_Weights& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessAnchoringRequest_Params_Weights& from) {
    ProcessAnchoringRequest_Params_Weights::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessAnchoringRequest_Params_Weights* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.Weights";
  }
  protected:
  explicit ProcessAnchoringRequest_Params_Weights(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKinematicOdometryWeightFieldNumber = 1,
    kVisualOdometryWeightFieldNumber = 2,
    kWorldObjectWeightFieldNumber = 3,
    kHintWeightFieldNumber = 4,
    kGyroscopeWeightFieldNumber = 5,
    kLoopClosureWeightFieldNumber = 6,
  };
  // double kinematic_odometry_weight = 1;
  void clear_kinematic_odometry_weight();
  double kinematic_odometry_weight() const;
  void set_kinematic_odometry_weight(double value);
  private:
  double _internal_kinematic_odometry_weight() const;
  void _internal_set_kinematic_odometry_weight(double value);
  public:

  // double visual_odometry_weight = 2;
  void clear_visual_odometry_weight();
  double visual_odometry_weight() const;
  void set_visual_odometry_weight(double value);
  private:
  double _internal_visual_odometry_weight() const;
  void _internal_set_visual_odometry_weight(double value);
  public:

  // double world_object_weight = 3;
  void clear_world_object_weight();
  double world_object_weight() const;
  void set_world_object_weight(double value);
  private:
  double _internal_world_object_weight() const;
  void _internal_set_world_object_weight(double value);
  public:

  // double hint_weight = 4;
  void clear_hint_weight();
  double hint_weight() const;
  void set_hint_weight(double value);
  private:
  double _internal_hint_weight() const;
  void _internal_set_hint_weight(double value);
  public:

  // double gyroscope_weight = 5;
  void clear_gyroscope_weight();
  double gyroscope_weight() const;
  void set_gyroscope_weight(double value);
  private:
  double _internal_gyroscope_weight() const;
  void _internal_set_gyroscope_weight(double value);
  public:

  // double loop_closure_weight = 6;
  void clear_loop_closure_weight();
  double loop_closure_weight() const;
  void set_loop_closure_weight(double value);
  private:
  double _internal_loop_closure_weight() const;
  void _internal_set_loop_closure_weight(double value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.Weights)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double kinematic_odometry_weight_;
    double visual_odometry_weight_;
    double world_object_weight_;
    double hint_weight_;
    double gyroscope_weight_;
    double loop_closure_weight_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_5fprocessing_2eproto;
};
// -------------------------------------------------------------------

class ProcessAnchoringRequest_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params) */ {
 public:
  inline ProcessAnchoringRequest_Params() : ProcessAnchoringRequest_Params(nullptr) {}
  ~ProcessAnchoringRequest_Params() override;
  explicit PROTOBUF_CONSTEXPR ProcessAnchoringRequest_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessAnchoringRequest_Params(const ProcessAnchoringRequest_Params& from);
  ProcessAnchoringRequest_Params(ProcessAnchoringRequest_Params&& from) noexcept
    : ProcessAnchoringRequest_Params() {
    *this = ::std::move(from);
  }

  inline ProcessAnchoringRequest_Params& operator=(const ProcessAnchoringRequest_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessAnchoringRequest_Params& operator=(ProcessAnchoringRequest_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessAnchoringRequest_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessAnchoringRequest_Params* internal_default_instance() {
    return reinterpret_cast<const ProcessAnchoringRequest_Params*>(
               &_ProcessAnchoringRequest_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ProcessAnchoringRequest_Params& a, ProcessAnchoringRequest_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessAnchoringRequest_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessAnchoringRequest_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessAnchoringRequest_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessAnchoringRequest_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessAnchoringRequest_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessAnchoringRequest_Params& from) {
    ProcessAnchoringRequest_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessAnchoringRequest_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.ProcessAnchoringRequest.Params";
  }
  protected:
  explicit ProcessAnchoringRequest_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProcessAnchoringRequest_Params_OptimizerParams OptimizerParams;
  typedef ProcessAnchoringRequest_Params_MeasurementParams MeasurementParams;
  typedef ProcessAnchoringRequest_Params_Weights Weights;

  // accessors -------------------------------------------------------

  enum : int {
    kOptimizerParamsFieldNumber = 1,
    kMeasurementParamsFieldNumber = 2,
    kWeightsFieldNumber = 3,
    kOptimizeExistingAnchoringFieldNumber = 4,
    kGravityEwrtSeedFieldNumber = 5,
  };
  // .bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.OptimizerParams optimizer_params = 1;
  bool has_optimizer_params() const;
  private:
  bool _internal_has_optimizer_params() const;
  public:
  void clear_optimizer_params();
  const ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_OptimizerParams& optimizer_params() const;
  PROTOBUF_NODISCARD ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_OptimizerParams* release_optimizer_params();
  ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_OptimizerParams* mutable_optimizer_params();
  void set_allocated_optimizer_params(::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_OptimizerParams* optimizer_params);
  private:
  const ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_OptimizerParams& _internal_optimizer_params() const;
  ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_OptimizerParams* _internal_mutable_optimizer_params();
  public:
  void unsafe_arena_set_allocated_optimizer_params(
      ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_OptimizerParams* optimizer_params);
  ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_OptimizerParams* unsafe_arena_release_optimizer_params();

  // .bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams measurement_params = 2;
  bool has_measurement_params() const;
  private:
  bool _internal_has_measurement_params() const;
  public:
  void clear_measurement_params();
  const ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_MeasurementParams& measurement_params() const;
  PROTOBUF_NODISCARD ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_MeasurementParams* release_measurement_params();
  ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_MeasurementParams* mutable_measurement_params();
  void set_allocated_measurement_params(::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_MeasurementParams* measurement_params);
  private:
  const ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_MeasurementParams& _internal_measurement_params() const;
  ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_MeasurementParams* _internal_mutable_measurement_params();
  public:
  void unsafe_arena_set_allocated_measurement_params(
      ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_MeasurementParams* measurement_params);
  ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_MeasurementParams* unsafe_arena_release_measurement_params();

  // .bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.Weights weights = 3;
  bool has_weights() const;
  private:
  bool _internal_has_weights() const;
  public:
  void clear_weights();
  const ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_Weights& weights() const;
  PROTOBUF_NODISCARD ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_Weights* release_weights();
  ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_Weights* mutable_weights();
  void set_allocated_weights(::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_Weights* weights);
  private:
  const ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_Weights& _internal_weights() const;
  ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_Weights* _internal_mutable_weights();
  public:
  void unsafe_arena_set_allocated_weights(
      ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_Weights* weights);
  ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_Weights* unsafe_arena_release_weights();

  // .google.protobuf.BoolValue optimize_existing_anchoring = 4;
  bool has_optimize_existing_anchoring() const;
  private:
  bool _internal_has_optimize_existing_anchoring() const;
  public:
  void clear_optimize_existing_anchoring();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& optimize_existing_anchoring() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_optimize_existing_anchoring();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_optimize_existing_anchoring();
  void set_allocated_optimize_existing_anchoring(::PROTOBUF_NAMESPACE_ID::BoolValue* optimize_existing_anchoring);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_optimize_existing_anchoring() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_optimize_existing_anchoring();
  public:
  void unsafe_arena_set_allocated_optimize_existing_anchoring(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* optimize_existing_anchoring);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_optimize_existing_anchoring();

  // .bosdyn.api.Vec3 gravity_ewrt_seed = 5;
  bool has_gravity_ewrt_seed() const;
  private:
  bool _internal_has_gravity_ewrt_seed() const;
  public:
  void clear_gravity_ewrt_seed();
  const ::bosdyn::api::Vec3& gravity_ewrt_seed() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec3* release_gravity_ewrt_seed();
  ::bosdyn::api::Vec3* mutable_gravity_ewrt_seed();
  void set_allocated_gravity_ewrt_seed(::bosdyn::api::Vec3* gravity_ewrt_seed);
  private:
  const ::bosdyn::api::Vec3& _internal_gravity_ewrt_seed() const;
  ::bosdyn::api::Vec3* _internal_mutable_gravity_ewrt_seed();
  public:
  void unsafe_arena_set_allocated_gravity_ewrt_seed(
      ::bosdyn::api::Vec3* gravity_ewrt_seed);
  ::bosdyn::api::Vec3* unsafe_arena_release_gravity_ewrt_seed();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_OptimizerParams* optimizer_params_;
    ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_MeasurementParams* measurement_params_;
    ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_Weights* weights_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* optimize_existing_anchoring_;
    ::bosdyn::api::Vec3* gravity_ewrt_seed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_5fprocessing_2eproto;
};
// -------------------------------------------------------------------

class ProcessAnchoringRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.ProcessAnchoringRequest) */ {
 public:
  inline ProcessAnchoringRequest() : ProcessAnchoringRequest(nullptr) {}
  ~ProcessAnchoringRequest() override;
  explicit PROTOBUF_CONSTEXPR ProcessAnchoringRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessAnchoringRequest(const ProcessAnchoringRequest& from);
  ProcessAnchoringRequest(ProcessAnchoringRequest&& from) noexcept
    : ProcessAnchoringRequest() {
    *this = ::std::move(from);
  }

  inline ProcessAnchoringRequest& operator=(const ProcessAnchoringRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessAnchoringRequest& operator=(ProcessAnchoringRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessAnchoringRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessAnchoringRequest* internal_default_instance() {
    return reinterpret_cast<const ProcessAnchoringRequest*>(
               &_ProcessAnchoringRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ProcessAnchoringRequest& a, ProcessAnchoringRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessAnchoringRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessAnchoringRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessAnchoringRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessAnchoringRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessAnchoringRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessAnchoringRequest& from) {
    ProcessAnchoringRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessAnchoringRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.ProcessAnchoringRequest";
  }
  protected:
  explicit ProcessAnchoringRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProcessAnchoringRequest_Params Params;

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kParamsFieldNumber = 2,
    kInitialHintFieldNumber = 3,
    kModifyAnchoringOnServerFieldNumber = 4,
    kStreamIntermediateResultsFieldNumber = 5,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // .bosdyn.api.graph_nav.ProcessAnchoringRequest.Params params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params& params() const;
  PROTOBUF_NODISCARD ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params* release_params();
  ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params* mutable_params();
  void set_allocated_params(::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params* params);
  private:
  const ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params& _internal_params() const;
  ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params* params);
  ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params* unsafe_arena_release_params();

  // .bosdyn.api.graph_nav.AnchoringHint initial_hint = 3;
  bool has_initial_hint() const;
  private:
  bool _internal_has_initial_hint() const;
  public:
  void clear_initial_hint();
  const ::bosdyn::api::graph_nav::AnchoringHint& initial_hint() const;
  PROTOBUF_NODISCARD ::bosdyn::api::graph_nav::AnchoringHint* release_initial_hint();
  ::bosdyn::api::graph_nav::AnchoringHint* mutable_initial_hint();
  void set_allocated_initial_hint(::bosdyn::api::graph_nav::AnchoringHint* initial_hint);
  private:
  const ::bosdyn::api::graph_nav::AnchoringHint& _internal_initial_hint() const;
  ::bosdyn::api::graph_nav::AnchoringHint* _internal_mutable_initial_hint();
  public:
  void unsafe_arena_set_allocated_initial_hint(
      ::bosdyn::api::graph_nav::AnchoringHint* initial_hint);
  ::bosdyn::api::graph_nav::AnchoringHint* unsafe_arena_release_initial_hint();

  // bool modify_anchoring_on_server = 4;
  void clear_modify_anchoring_on_server();
  bool modify_anchoring_on_server() const;
  void set_modify_anchoring_on_server(bool value);
  private:
  bool _internal_modify_anchoring_on_server() const;
  void _internal_set_modify_anchoring_on_server(bool value);
  public:

  // bool stream_intermediate_results = 5;
  void clear_stream_intermediate_results();
  bool stream_intermediate_results() const;
  void set_stream_intermediate_results(bool value);
  private:
  bool _internal_stream_intermediate_results() const;
  void _internal_set_stream_intermediate_results(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.ProcessAnchoringRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::RequestHeader* header_;
    ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params* params_;
    ::bosdyn::api::graph_nav::AnchoringHint* initial_hint_;
    bool modify_anchoring_on_server_;
    bool stream_intermediate_results_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_5fprocessing_2eproto;
};
// -------------------------------------------------------------------

class ProcessAnchoringResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.ProcessAnchoringResponse) */ {
 public:
  inline ProcessAnchoringResponse() : ProcessAnchoringResponse(nullptr) {}
  ~ProcessAnchoringResponse() override;
  explicit PROTOBUF_CONSTEXPR ProcessAnchoringResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessAnchoringResponse(const ProcessAnchoringResponse& from);
  ProcessAnchoringResponse(ProcessAnchoringResponse&& from) noexcept
    : ProcessAnchoringResponse() {
    *this = ::std::move(from);
  }

  inline ProcessAnchoringResponse& operator=(const ProcessAnchoringResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessAnchoringResponse& operator=(ProcessAnchoringResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessAnchoringResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessAnchoringResponse* internal_default_instance() {
    return reinterpret_cast<const ProcessAnchoringResponse*>(
               &_ProcessAnchoringResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ProcessAnchoringResponse& a, ProcessAnchoringResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessAnchoringResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessAnchoringResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessAnchoringResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessAnchoringResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessAnchoringResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessAnchoringResponse& from) {
    ProcessAnchoringResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessAnchoringResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.ProcessAnchoringResponse";
  }
  protected:
  explicit ProcessAnchoringResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProcessAnchoringResponse_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    ProcessAnchoringResponse_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_OK =
    ProcessAnchoringResponse_Status_STATUS_OK;
  static constexpr Status STATUS_MISSING_WAYPOINT_SNAPSHOTS =
    ProcessAnchoringResponse_Status_STATUS_MISSING_WAYPOINT_SNAPSHOTS;
  static constexpr Status STATUS_INVALID_GRAPH =
    ProcessAnchoringResponse_Status_STATUS_INVALID_GRAPH;
  static constexpr Status STATUS_OPTIMIZATION_FAILURE =
    ProcessAnchoringResponse_Status_STATUS_OPTIMIZATION_FAILURE;
  static constexpr Status STATUS_INVALID_PARAMS =
    ProcessAnchoringResponse_Status_STATUS_INVALID_PARAMS;
  static constexpr Status STATUS_CONSTRAINT_VIOLATION =
    ProcessAnchoringResponse_Status_STATUS_CONSTRAINT_VIOLATION;
  static constexpr Status STATUS_MAX_ITERATIONS =
    ProcessAnchoringResponse_Status_STATUS_MAX_ITERATIONS;
  static constexpr Status STATUS_MAX_TIME =
    ProcessAnchoringResponse_Status_STATUS_MAX_TIME;
  static constexpr Status STATUS_INVALID_HINTS =
    ProcessAnchoringResponse_Status_STATUS_INVALID_HINTS;
  static constexpr Status STATUS_MAP_MODIFIED_DURING_PROCESSING =
    ProcessAnchoringResponse_Status_STATUS_MAP_MODIFIED_DURING_PROCESSING;
  static constexpr Status STATUS_INVALID_GRAVITY_ALIGNMENT =
    ProcessAnchoringResponse_Status_STATUS_INVALID_GRAVITY_ALIGNMENT;
  static inline bool Status_IsValid(int value) {
    return ProcessAnchoringResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ProcessAnchoringResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ProcessAnchoringResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ProcessAnchoringResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ProcessAnchoringResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ProcessAnchoringResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return ProcessAnchoringResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kWaypointResultsFieldNumber = 3,
    kWorldObjectResultsFieldNumber = 4,
    kViolatedWaypointConstraintsFieldNumber = 9,
    kViolatedObjectConstraintsFieldNumber = 10,
    kMissingSnapshotIdsFieldNumber = 11,
    kMissingWaypointIdsFieldNumber = 12,
    kInvalidHintsFieldNumber = 13,
    kHeaderFieldNumber = 1,
    kStatusFieldNumber = 2,
    kIterationFieldNumber = 6,
    kCostFieldNumber = 7,
    kAnchoringOnServerWasModifiedFieldNumber = 5,
    kFinalIterationFieldNumber = 8,
  };
  // repeated .bosdyn.api.graph_nav.Anchor waypoint_results = 3;
  int waypoint_results_size() const;
  private:
  int _internal_waypoint_results_size() const;
  public:
  void clear_waypoint_results();
  ::bosdyn::api::graph_nav::Anchor* mutable_waypoint_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Anchor >*
      mutable_waypoint_results();
  private:
  const ::bosdyn::api::graph_nav::Anchor& _internal_waypoint_results(int index) const;
  ::bosdyn::api::graph_nav::Anchor* _internal_add_waypoint_results();
  public:
  const ::bosdyn::api::graph_nav::Anchor& waypoint_results(int index) const;
  ::bosdyn::api::graph_nav::Anchor* add_waypoint_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Anchor >&
      waypoint_results() const;

  // repeated .bosdyn.api.graph_nav.AnchoredWorldObject world_object_results = 4;
  int world_object_results_size() const;
  private:
  int _internal_world_object_results_size() const;
  public:
  void clear_world_object_results();
  ::bosdyn::api::graph_nav::AnchoredWorldObject* mutable_world_object_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::AnchoredWorldObject >*
      mutable_world_object_results();
  private:
  const ::bosdyn::api::graph_nav::AnchoredWorldObject& _internal_world_object_results(int index) const;
  ::bosdyn::api::graph_nav::AnchoredWorldObject* _internal_add_world_object_results();
  public:
  const ::bosdyn::api::graph_nav::AnchoredWorldObject& world_object_results(int index) const;
  ::bosdyn::api::graph_nav::AnchoredWorldObject* add_world_object_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::AnchoredWorldObject >&
      world_object_results() const;

  // repeated .bosdyn.api.graph_nav.WaypointAnchorHint violated_waypoint_constraints = 9;
  int violated_waypoint_constraints_size() const;
  private:
  int _internal_violated_waypoint_constraints_size() const;
  public:
  void clear_violated_waypoint_constraints();
  ::bosdyn::api::graph_nav::WaypointAnchorHint* mutable_violated_waypoint_constraints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::WaypointAnchorHint >*
      mutable_violated_waypoint_constraints();
  private:
  const ::bosdyn::api::graph_nav::WaypointAnchorHint& _internal_violated_waypoint_constraints(int index) const;
  ::bosdyn::api::graph_nav::WaypointAnchorHint* _internal_add_violated_waypoint_constraints();
  public:
  const ::bosdyn::api::graph_nav::WaypointAnchorHint& violated_waypoint_constraints(int index) const;
  ::bosdyn::api::graph_nav::WaypointAnchorHint* add_violated_waypoint_constraints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::WaypointAnchorHint >&
      violated_waypoint_constraints() const;

  // repeated .bosdyn.api.graph_nav.WorldObjectAnchorHint violated_object_constraints = 10;
  int violated_object_constraints_size() const;
  private:
  int _internal_violated_object_constraints_size() const;
  public:
  void clear_violated_object_constraints();
  ::bosdyn::api::graph_nav::WorldObjectAnchorHint* mutable_violated_object_constraints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::WorldObjectAnchorHint >*
      mutable_violated_object_constraints();
  private:
  const ::bosdyn::api::graph_nav::WorldObjectAnchorHint& _internal_violated_object_constraints(int index) const;
  ::bosdyn::api::graph_nav::WorldObjectAnchorHint* _internal_add_violated_object_constraints();
  public:
  const ::bosdyn::api::graph_nav::WorldObjectAnchorHint& violated_object_constraints(int index) const;
  ::bosdyn::api::graph_nav::WorldObjectAnchorHint* add_violated_object_constraints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::WorldObjectAnchorHint >&
      violated_object_constraints() const;

  // repeated string missing_snapshot_ids = 11;
  int missing_snapshot_ids_size() const;
  private:
  int _internal_missing_snapshot_ids_size() const;
  public:
  void clear_missing_snapshot_ids();
  const std::string& missing_snapshot_ids(int index) const;
  std::string* mutable_missing_snapshot_ids(int index);
  void set_missing_snapshot_ids(int index, const std::string& value);
  void set_missing_snapshot_ids(int index, std::string&& value);
  void set_missing_snapshot_ids(int index, const char* value);
  void set_missing_snapshot_ids(int index, const char* value, size_t size);
  std::string* add_missing_snapshot_ids();
  void add_missing_snapshot_ids(const std::string& value);
  void add_missing_snapshot_ids(std::string&& value);
  void add_missing_snapshot_ids(const char* value);
  void add_missing_snapshot_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& missing_snapshot_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_missing_snapshot_ids();
  private:
  const std::string& _internal_missing_snapshot_ids(int index) const;
  std::string* _internal_add_missing_snapshot_ids();
  public:

  // repeated string missing_waypoint_ids = 12;
  int missing_waypoint_ids_size() const;
  private:
  int _internal_missing_waypoint_ids_size() const;
  public:
  void clear_missing_waypoint_ids();
  const std::string& missing_waypoint_ids(int index) const;
  std::string* mutable_missing_waypoint_ids(int index);
  void set_missing_waypoint_ids(int index, const std::string& value);
  void set_missing_waypoint_ids(int index, std::string&& value);
  void set_missing_waypoint_ids(int index, const char* value);
  void set_missing_waypoint_ids(int index, const char* value, size_t size);
  std::string* add_missing_waypoint_ids();
  void add_missing_waypoint_ids(const std::string& value);
  void add_missing_waypoint_ids(std::string&& value);
  void add_missing_waypoint_ids(const char* value);
  void add_missing_waypoint_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& missing_waypoint_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_missing_waypoint_ids();
  private:
  const std::string& _internal_missing_waypoint_ids(int index) const;
  std::string* _internal_add_missing_waypoint_ids();
  public:

  // repeated string invalid_hints = 13;
  int invalid_hints_size() const;
  private:
  int _internal_invalid_hints_size() const;
  public:
  void clear_invalid_hints();
  const std::string& invalid_hints(int index) const;
  std::string* mutable_invalid_hints(int index);
  void set_invalid_hints(int index, const std::string& value);
  void set_invalid_hints(int index, std::string&& value);
  void set_invalid_hints(int index, const char* value);
  void set_invalid_hints(int index, const char* value, size_t size);
  std::string* add_invalid_hints();
  void add_invalid_hints(const std::string& value);
  void add_invalid_hints(std::string&& value);
  void add_invalid_hints(const char* value);
  void add_invalid_hints(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& invalid_hints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_invalid_hints();
  private:
  const std::string& _internal_invalid_hints(int index) const;
  std::string* _internal_add_invalid_hints();
  public:

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.graph_nav.ProcessAnchoringResponse.Status status = 2;
  void clear_status();
  ::bosdyn::api::graph_nav::ProcessAnchoringResponse_Status status() const;
  void set_status(::bosdyn::api::graph_nav::ProcessAnchoringResponse_Status value);
  private:
  ::bosdyn::api::graph_nav::ProcessAnchoringResponse_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::graph_nav::ProcessAnchoringResponse_Status value);
  public:

  // int32 iteration = 6;
  void clear_iteration();
  int32_t iteration() const;
  void set_iteration(int32_t value);
  private:
  int32_t _internal_iteration() const;
  void _internal_set_iteration(int32_t value);
  public:

  // double cost = 7;
  void clear_cost();
  double cost() const;
  void set_cost(double value);
  private:
  double _internal_cost() const;
  void _internal_set_cost(double value);
  public:

  // bool anchoring_on_server_was_modified = 5;
  void clear_anchoring_on_server_was_modified();
  bool anchoring_on_server_was_modified() const;
  void set_anchoring_on_server_was_modified(bool value);
  private:
  bool _internal_anchoring_on_server_was_modified() const;
  void _internal_set_anchoring_on_server_was_modified(bool value);
  public:

  // bool final_iteration = 8;
  void clear_final_iteration();
  bool final_iteration() const;
  void set_final_iteration(bool value);
  private:
  bool _internal_final_iteration() const;
  void _internal_set_final_iteration(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.ProcessAnchoringResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Anchor > waypoint_results_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::AnchoredWorldObject > world_object_results_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::WaypointAnchorHint > violated_waypoint_constraints_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::WorldObjectAnchorHint > violated_object_constraints_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> missing_snapshot_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> missing_waypoint_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> invalid_hints_;
    ::bosdyn::api::ResponseHeader* header_;
    int status_;
    int32_t iteration_;
    double cost_;
    bool anchoring_on_server_was_modified_;
    bool final_iteration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_5fprocessing_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProcessTopologyRequest_ICPParams

// .google.protobuf.Int32Value icp_iters = 1;
inline bool ProcessTopologyRequest_ICPParams::_internal_has_icp_iters() const {
  return this != internal_default_instance() && _impl_.icp_iters_ != nullptr;
}
inline bool ProcessTopologyRequest_ICPParams::has_icp_iters() const {
  return _internal_has_icp_iters();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& ProcessTopologyRequest_ICPParams::_internal_icp_iters() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.icp_iters_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& ProcessTopologyRequest_ICPParams::icp_iters() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessTopologyRequest.ICPParams.icp_iters)
  return _internal_icp_iters();
}
inline void ProcessTopologyRequest_ICPParams::unsafe_arena_set_allocated_icp_iters(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* icp_iters) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.icp_iters_);
  }
  _impl_.icp_iters_ = icp_iters;
  if (icp_iters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.ICPParams.icp_iters)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ProcessTopologyRequest_ICPParams::release_icp_iters() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.icp_iters_;
  _impl_.icp_iters_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ProcessTopologyRequest_ICPParams::unsafe_arena_release_icp_iters() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessTopologyRequest.ICPParams.icp_iters)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.icp_iters_;
  _impl_.icp_iters_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ProcessTopologyRequest_ICPParams::_internal_mutable_icp_iters() {
  
  if (_impl_.icp_iters_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.icp_iters_ = p;
  }
  return _impl_.icp_iters_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ProcessTopologyRequest_ICPParams::mutable_icp_iters() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_icp_iters();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessTopologyRequest.ICPParams.icp_iters)
  return _msg;
}
inline void ProcessTopologyRequest_ICPParams::set_allocated_icp_iters(::PROTOBUF_NAMESPACE_ID::Int32Value* icp_iters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.icp_iters_);
  }
  if (icp_iters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(icp_iters));
    if (message_arena != submessage_arena) {
      icp_iters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, icp_iters, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.icp_iters_ = icp_iters;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.ICPParams.icp_iters)
}

// .google.protobuf.DoubleValue max_point_match_distance = 2;
inline bool ProcessTopologyRequest_ICPParams::_internal_has_max_point_match_distance() const {
  return this != internal_default_instance() && _impl_.max_point_match_distance_ != nullptr;
}
inline bool ProcessTopologyRequest_ICPParams::has_max_point_match_distance() const {
  return _internal_has_max_point_match_distance();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ProcessTopologyRequest_ICPParams::_internal_max_point_match_distance() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.max_point_match_distance_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ProcessTopologyRequest_ICPParams::max_point_match_distance() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessTopologyRequest.ICPParams.max_point_match_distance)
  return _internal_max_point_match_distance();
}
inline void ProcessTopologyRequest_ICPParams::unsafe_arena_set_allocated_max_point_match_distance(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_point_match_distance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_point_match_distance_);
  }
  _impl_.max_point_match_distance_ = max_point_match_distance;
  if (max_point_match_distance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.ICPParams.max_point_match_distance)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_ICPParams::release_max_point_match_distance() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_point_match_distance_;
  _impl_.max_point_match_distance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_ICPParams::unsafe_arena_release_max_point_match_distance() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessTopologyRequest.ICPParams.max_point_match_distance)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_point_match_distance_;
  _impl_.max_point_match_distance_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_ICPParams::_internal_mutable_max_point_match_distance() {
  
  if (_impl_.max_point_match_distance_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.max_point_match_distance_ = p;
  }
  return _impl_.max_point_match_distance_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_ICPParams::mutable_max_point_match_distance() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_max_point_match_distance();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessTopologyRequest.ICPParams.max_point_match_distance)
  return _msg;
}
inline void ProcessTopologyRequest_ICPParams::set_allocated_max_point_match_distance(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_point_match_distance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_point_match_distance_);
  }
  if (max_point_match_distance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_point_match_distance));
    if (message_arena != submessage_arena) {
      max_point_match_distance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_point_match_distance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_point_match_distance_ = max_point_match_distance;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.ICPParams.max_point_match_distance)
}

// -------------------------------------------------------------------

// ProcessTopologyRequest_OdometryLoopClosureParams

// .google.protobuf.DoubleValue max_loop_closure_path_length = 1;
inline bool ProcessTopologyRequest_OdometryLoopClosureParams::_internal_has_max_loop_closure_path_length() const {
  return this != internal_default_instance() && _impl_.max_loop_closure_path_length_ != nullptr;
}
inline bool ProcessTopologyRequest_OdometryLoopClosureParams::has_max_loop_closure_path_length() const {
  return _internal_has_max_loop_closure_path_length();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ProcessTopologyRequest_OdometryLoopClosureParams::_internal_max_loop_closure_path_length() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.max_loop_closure_path_length_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ProcessTopologyRequest_OdometryLoopClosureParams::max_loop_closure_path_length() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams.max_loop_closure_path_length)
  return _internal_max_loop_closure_path_length();
}
inline void ProcessTopologyRequest_OdometryLoopClosureParams::unsafe_arena_set_allocated_max_loop_closure_path_length(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_loop_closure_path_length) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_loop_closure_path_length_);
  }
  _impl_.max_loop_closure_path_length_ = max_loop_closure_path_length;
  if (max_loop_closure_path_length) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams.max_loop_closure_path_length)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_OdometryLoopClosureParams::release_max_loop_closure_path_length() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_loop_closure_path_length_;
  _impl_.max_loop_closure_path_length_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_OdometryLoopClosureParams::unsafe_arena_release_max_loop_closure_path_length() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams.max_loop_closure_path_length)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_loop_closure_path_length_;
  _impl_.max_loop_closure_path_length_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_OdometryLoopClosureParams::_internal_mutable_max_loop_closure_path_length() {
  
  if (_impl_.max_loop_closure_path_length_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.max_loop_closure_path_length_ = p;
  }
  return _impl_.max_loop_closure_path_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_OdometryLoopClosureParams::mutable_max_loop_closure_path_length() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_max_loop_closure_path_length();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams.max_loop_closure_path_length)
  return _msg;
}
inline void ProcessTopologyRequest_OdometryLoopClosureParams::set_allocated_max_loop_closure_path_length(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_loop_closure_path_length) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_loop_closure_path_length_);
  }
  if (max_loop_closure_path_length) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_loop_closure_path_length));
    if (message_arena != submessage_arena) {
      max_loop_closure_path_length = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_loop_closure_path_length, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_loop_closure_path_length_ = max_loop_closure_path_length;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams.max_loop_closure_path_length)
}

// .google.protobuf.DoubleValue min_loop_closure_path_length = 2;
inline bool ProcessTopologyRequest_OdometryLoopClosureParams::_internal_has_min_loop_closure_path_length() const {
  return this != internal_default_instance() && _impl_.min_loop_closure_path_length_ != nullptr;
}
inline bool ProcessTopologyRequest_OdometryLoopClosureParams::has_min_loop_closure_path_length() const {
  return _internal_has_min_loop_closure_path_length();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ProcessTopologyRequest_OdometryLoopClosureParams::_internal_min_loop_closure_path_length() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.min_loop_closure_path_length_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ProcessTopologyRequest_OdometryLoopClosureParams::min_loop_closure_path_length() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams.min_loop_closure_path_length)
  return _internal_min_loop_closure_path_length();
}
inline void ProcessTopologyRequest_OdometryLoopClosureParams::unsafe_arena_set_allocated_min_loop_closure_path_length(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* min_loop_closure_path_length) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.min_loop_closure_path_length_);
  }
  _impl_.min_loop_closure_path_length_ = min_loop_closure_path_length;
  if (min_loop_closure_path_length) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams.min_loop_closure_path_length)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_OdometryLoopClosureParams::release_min_loop_closure_path_length() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.min_loop_closure_path_length_;
  _impl_.min_loop_closure_path_length_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_OdometryLoopClosureParams::unsafe_arena_release_min_loop_closure_path_length() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams.min_loop_closure_path_length)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.min_loop_closure_path_length_;
  _impl_.min_loop_closure_path_length_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_OdometryLoopClosureParams::_internal_mutable_min_loop_closure_path_length() {
  
  if (_impl_.min_loop_closure_path_length_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.min_loop_closure_path_length_ = p;
  }
  return _impl_.min_loop_closure_path_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_OdometryLoopClosureParams::mutable_min_loop_closure_path_length() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_min_loop_closure_path_length();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams.min_loop_closure_path_length)
  return _msg;
}
inline void ProcessTopologyRequest_OdometryLoopClosureParams::set_allocated_min_loop_closure_path_length(::PROTOBUF_NAMESPACE_ID::DoubleValue* min_loop_closure_path_length) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.min_loop_closure_path_length_);
  }
  if (min_loop_closure_path_length) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_loop_closure_path_length));
    if (message_arena != submessage_arena) {
      min_loop_closure_path_length = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_loop_closure_path_length, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.min_loop_closure_path_length_ = min_loop_closure_path_length;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams.min_loop_closure_path_length)
}

// .google.protobuf.DoubleValue max_loop_closure_height_change = 3;
inline bool ProcessTopologyRequest_OdometryLoopClosureParams::_internal_has_max_loop_closure_height_change() const {
  return this != internal_default_instance() && _impl_.max_loop_closure_height_change_ != nullptr;
}
inline bool ProcessTopologyRequest_OdometryLoopClosureParams::has_max_loop_closure_height_change() const {
  return _internal_has_max_loop_closure_height_change();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ProcessTopologyRequest_OdometryLoopClosureParams::_internal_max_loop_closure_height_change() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.max_loop_closure_height_change_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ProcessTopologyRequest_OdometryLoopClosureParams::max_loop_closure_height_change() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams.max_loop_closure_height_change)
  return _internal_max_loop_closure_height_change();
}
inline void ProcessTopologyRequest_OdometryLoopClosureParams::unsafe_arena_set_allocated_max_loop_closure_height_change(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_loop_closure_height_change) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_loop_closure_height_change_);
  }
  _impl_.max_loop_closure_height_change_ = max_loop_closure_height_change;
  if (max_loop_closure_height_change) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams.max_loop_closure_height_change)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_OdometryLoopClosureParams::release_max_loop_closure_height_change() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_loop_closure_height_change_;
  _impl_.max_loop_closure_height_change_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_OdometryLoopClosureParams::unsafe_arena_release_max_loop_closure_height_change() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams.max_loop_closure_height_change)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_loop_closure_height_change_;
  _impl_.max_loop_closure_height_change_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_OdometryLoopClosureParams::_internal_mutable_max_loop_closure_height_change() {
  
  if (_impl_.max_loop_closure_height_change_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.max_loop_closure_height_change_ = p;
  }
  return _impl_.max_loop_closure_height_change_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_OdometryLoopClosureParams::mutable_max_loop_closure_height_change() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_max_loop_closure_height_change();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams.max_loop_closure_height_change)
  return _msg;
}
inline void ProcessTopologyRequest_OdometryLoopClosureParams::set_allocated_max_loop_closure_height_change(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_loop_closure_height_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_loop_closure_height_change_);
  }
  if (max_loop_closure_height_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_loop_closure_height_change));
    if (message_arena != submessage_arena) {
      max_loop_closure_height_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_loop_closure_height_change, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_loop_closure_height_change_ = max_loop_closure_height_change;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams.max_loop_closure_height_change)
}

// .google.protobuf.DoubleValue max_loop_closure_edge_length = 4;
inline bool ProcessTopologyRequest_OdometryLoopClosureParams::_internal_has_max_loop_closure_edge_length() const {
  return this != internal_default_instance() && _impl_.max_loop_closure_edge_length_ != nullptr;
}
inline bool ProcessTopologyRequest_OdometryLoopClosureParams::has_max_loop_closure_edge_length() const {
  return _internal_has_max_loop_closure_edge_length();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ProcessTopologyRequest_OdometryLoopClosureParams::_internal_max_loop_closure_edge_length() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.max_loop_closure_edge_length_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ProcessTopologyRequest_OdometryLoopClosureParams::max_loop_closure_edge_length() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams.max_loop_closure_edge_length)
  return _internal_max_loop_closure_edge_length();
}
inline void ProcessTopologyRequest_OdometryLoopClosureParams::unsafe_arena_set_allocated_max_loop_closure_edge_length(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_loop_closure_edge_length) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_loop_closure_edge_length_);
  }
  _impl_.max_loop_closure_edge_length_ = max_loop_closure_edge_length;
  if (max_loop_closure_edge_length) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams.max_loop_closure_edge_length)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_OdometryLoopClosureParams::release_max_loop_closure_edge_length() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_loop_closure_edge_length_;
  _impl_.max_loop_closure_edge_length_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_OdometryLoopClosureParams::unsafe_arena_release_max_loop_closure_edge_length() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams.max_loop_closure_edge_length)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_loop_closure_edge_length_;
  _impl_.max_loop_closure_edge_length_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_OdometryLoopClosureParams::_internal_mutable_max_loop_closure_edge_length() {
  
  if (_impl_.max_loop_closure_edge_length_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.max_loop_closure_edge_length_ = p;
  }
  return _impl_.max_loop_closure_edge_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_OdometryLoopClosureParams::mutable_max_loop_closure_edge_length() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_max_loop_closure_edge_length();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams.max_loop_closure_edge_length)
  return _msg;
}
inline void ProcessTopologyRequest_OdometryLoopClosureParams::set_allocated_max_loop_closure_edge_length(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_loop_closure_edge_length) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_loop_closure_edge_length_);
  }
  if (max_loop_closure_edge_length) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_loop_closure_edge_length));
    if (message_arena != submessage_arena) {
      max_loop_closure_edge_length = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_loop_closure_edge_length, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_loop_closure_edge_length_ = max_loop_closure_edge_length;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams.max_loop_closure_edge_length)
}

// .google.protobuf.Int32Value num_extra_loop_closure_iterations = 5;
inline bool ProcessTopologyRequest_OdometryLoopClosureParams::_internal_has_num_extra_loop_closure_iterations() const {
  return this != internal_default_instance() && _impl_.num_extra_loop_closure_iterations_ != nullptr;
}
inline bool ProcessTopologyRequest_OdometryLoopClosureParams::has_num_extra_loop_closure_iterations() const {
  return _internal_has_num_extra_loop_closure_iterations();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& ProcessTopologyRequest_OdometryLoopClosureParams::_internal_num_extra_loop_closure_iterations() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.num_extra_loop_closure_iterations_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& ProcessTopologyRequest_OdometryLoopClosureParams::num_extra_loop_closure_iterations() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams.num_extra_loop_closure_iterations)
  return _internal_num_extra_loop_closure_iterations();
}
inline void ProcessTopologyRequest_OdometryLoopClosureParams::unsafe_arena_set_allocated_num_extra_loop_closure_iterations(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* num_extra_loop_closure_iterations) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.num_extra_loop_closure_iterations_);
  }
  _impl_.num_extra_loop_closure_iterations_ = num_extra_loop_closure_iterations;
  if (num_extra_loop_closure_iterations) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams.num_extra_loop_closure_iterations)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ProcessTopologyRequest_OdometryLoopClosureParams::release_num_extra_loop_closure_iterations() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.num_extra_loop_closure_iterations_;
  _impl_.num_extra_loop_closure_iterations_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ProcessTopologyRequest_OdometryLoopClosureParams::unsafe_arena_release_num_extra_loop_closure_iterations() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams.num_extra_loop_closure_iterations)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.num_extra_loop_closure_iterations_;
  _impl_.num_extra_loop_closure_iterations_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ProcessTopologyRequest_OdometryLoopClosureParams::_internal_mutable_num_extra_loop_closure_iterations() {
  
  if (_impl_.num_extra_loop_closure_iterations_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.num_extra_loop_closure_iterations_ = p;
  }
  return _impl_.num_extra_loop_closure_iterations_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ProcessTopologyRequest_OdometryLoopClosureParams::mutable_num_extra_loop_closure_iterations() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_num_extra_loop_closure_iterations();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams.num_extra_loop_closure_iterations)
  return _msg;
}
inline void ProcessTopologyRequest_OdometryLoopClosureParams::set_allocated_num_extra_loop_closure_iterations(::PROTOBUF_NAMESPACE_ID::Int32Value* num_extra_loop_closure_iterations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.num_extra_loop_closure_iterations_);
  }
  if (num_extra_loop_closure_iterations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(num_extra_loop_closure_iterations));
    if (message_arena != submessage_arena) {
      num_extra_loop_closure_iterations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, num_extra_loop_closure_iterations, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.num_extra_loop_closure_iterations_ = num_extra_loop_closure_iterations;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams.num_extra_loop_closure_iterations)
}

// -------------------------------------------------------------------

// ProcessTopologyRequest_FiducialLoopClosureParams

// .google.protobuf.DoubleValue min_loop_closure_path_length = 1;
inline bool ProcessTopologyRequest_FiducialLoopClosureParams::_internal_has_min_loop_closure_path_length() const {
  return this != internal_default_instance() && _impl_.min_loop_closure_path_length_ != nullptr;
}
inline bool ProcessTopologyRequest_FiducialLoopClosureParams::has_min_loop_closure_path_length() const {
  return _internal_has_min_loop_closure_path_length();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ProcessTopologyRequest_FiducialLoopClosureParams::_internal_min_loop_closure_path_length() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.min_loop_closure_path_length_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ProcessTopologyRequest_FiducialLoopClosureParams::min_loop_closure_path_length() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessTopologyRequest.FiducialLoopClosureParams.min_loop_closure_path_length)
  return _internal_min_loop_closure_path_length();
}
inline void ProcessTopologyRequest_FiducialLoopClosureParams::unsafe_arena_set_allocated_min_loop_closure_path_length(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* min_loop_closure_path_length) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.min_loop_closure_path_length_);
  }
  _impl_.min_loop_closure_path_length_ = min_loop_closure_path_length;
  if (min_loop_closure_path_length) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.FiducialLoopClosureParams.min_loop_closure_path_length)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_FiducialLoopClosureParams::release_min_loop_closure_path_length() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.min_loop_closure_path_length_;
  _impl_.min_loop_closure_path_length_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_FiducialLoopClosureParams::unsafe_arena_release_min_loop_closure_path_length() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessTopologyRequest.FiducialLoopClosureParams.min_loop_closure_path_length)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.min_loop_closure_path_length_;
  _impl_.min_loop_closure_path_length_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_FiducialLoopClosureParams::_internal_mutable_min_loop_closure_path_length() {
  
  if (_impl_.min_loop_closure_path_length_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.min_loop_closure_path_length_ = p;
  }
  return _impl_.min_loop_closure_path_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_FiducialLoopClosureParams::mutable_min_loop_closure_path_length() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_min_loop_closure_path_length();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessTopologyRequest.FiducialLoopClosureParams.min_loop_closure_path_length)
  return _msg;
}
inline void ProcessTopologyRequest_FiducialLoopClosureParams::set_allocated_min_loop_closure_path_length(::PROTOBUF_NAMESPACE_ID::DoubleValue* min_loop_closure_path_length) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.min_loop_closure_path_length_);
  }
  if (min_loop_closure_path_length) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_loop_closure_path_length));
    if (message_arena != submessage_arena) {
      min_loop_closure_path_length = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_loop_closure_path_length, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.min_loop_closure_path_length_ = min_loop_closure_path_length;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.FiducialLoopClosureParams.min_loop_closure_path_length)
}

// .google.protobuf.DoubleValue max_loop_closure_edge_length = 2;
inline bool ProcessTopologyRequest_FiducialLoopClosureParams::_internal_has_max_loop_closure_edge_length() const {
  return this != internal_default_instance() && _impl_.max_loop_closure_edge_length_ != nullptr;
}
inline bool ProcessTopologyRequest_FiducialLoopClosureParams::has_max_loop_closure_edge_length() const {
  return _internal_has_max_loop_closure_edge_length();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ProcessTopologyRequest_FiducialLoopClosureParams::_internal_max_loop_closure_edge_length() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.max_loop_closure_edge_length_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ProcessTopologyRequest_FiducialLoopClosureParams::max_loop_closure_edge_length() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessTopologyRequest.FiducialLoopClosureParams.max_loop_closure_edge_length)
  return _internal_max_loop_closure_edge_length();
}
inline void ProcessTopologyRequest_FiducialLoopClosureParams::unsafe_arena_set_allocated_max_loop_closure_edge_length(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_loop_closure_edge_length) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_loop_closure_edge_length_);
  }
  _impl_.max_loop_closure_edge_length_ = max_loop_closure_edge_length;
  if (max_loop_closure_edge_length) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.FiducialLoopClosureParams.max_loop_closure_edge_length)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_FiducialLoopClosureParams::release_max_loop_closure_edge_length() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_loop_closure_edge_length_;
  _impl_.max_loop_closure_edge_length_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_FiducialLoopClosureParams::unsafe_arena_release_max_loop_closure_edge_length() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessTopologyRequest.FiducialLoopClosureParams.max_loop_closure_edge_length)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_loop_closure_edge_length_;
  _impl_.max_loop_closure_edge_length_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_FiducialLoopClosureParams::_internal_mutable_max_loop_closure_edge_length() {
  
  if (_impl_.max_loop_closure_edge_length_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.max_loop_closure_edge_length_ = p;
  }
  return _impl_.max_loop_closure_edge_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_FiducialLoopClosureParams::mutable_max_loop_closure_edge_length() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_max_loop_closure_edge_length();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessTopologyRequest.FiducialLoopClosureParams.max_loop_closure_edge_length)
  return _msg;
}
inline void ProcessTopologyRequest_FiducialLoopClosureParams::set_allocated_max_loop_closure_edge_length(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_loop_closure_edge_length) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_loop_closure_edge_length_);
  }
  if (max_loop_closure_edge_length) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_loop_closure_edge_length));
    if (message_arena != submessage_arena) {
      max_loop_closure_edge_length = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_loop_closure_edge_length, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_loop_closure_edge_length_ = max_loop_closure_edge_length;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.FiducialLoopClosureParams.max_loop_closure_edge_length)
}

// .google.protobuf.DoubleValue max_fiducial_distance = 3;
inline bool ProcessTopologyRequest_FiducialLoopClosureParams::_internal_has_max_fiducial_distance() const {
  return this != internal_default_instance() && _impl_.max_fiducial_distance_ != nullptr;
}
inline bool ProcessTopologyRequest_FiducialLoopClosureParams::has_max_fiducial_distance() const {
  return _internal_has_max_fiducial_distance();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ProcessTopologyRequest_FiducialLoopClosureParams::_internal_max_fiducial_distance() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.max_fiducial_distance_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ProcessTopologyRequest_FiducialLoopClosureParams::max_fiducial_distance() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessTopologyRequest.FiducialLoopClosureParams.max_fiducial_distance)
  return _internal_max_fiducial_distance();
}
inline void ProcessTopologyRequest_FiducialLoopClosureParams::unsafe_arena_set_allocated_max_fiducial_distance(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_fiducial_distance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_fiducial_distance_);
  }
  _impl_.max_fiducial_distance_ = max_fiducial_distance;
  if (max_fiducial_distance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.FiducialLoopClosureParams.max_fiducial_distance)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_FiducialLoopClosureParams::release_max_fiducial_distance() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_fiducial_distance_;
  _impl_.max_fiducial_distance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_FiducialLoopClosureParams::unsafe_arena_release_max_fiducial_distance() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessTopologyRequest.FiducialLoopClosureParams.max_fiducial_distance)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_fiducial_distance_;
  _impl_.max_fiducial_distance_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_FiducialLoopClosureParams::_internal_mutable_max_fiducial_distance() {
  
  if (_impl_.max_fiducial_distance_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.max_fiducial_distance_ = p;
  }
  return _impl_.max_fiducial_distance_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_FiducialLoopClosureParams::mutable_max_fiducial_distance() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_max_fiducial_distance();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessTopologyRequest.FiducialLoopClosureParams.max_fiducial_distance)
  return _msg;
}
inline void ProcessTopologyRequest_FiducialLoopClosureParams::set_allocated_max_fiducial_distance(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_fiducial_distance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_fiducial_distance_);
  }
  if (max_fiducial_distance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_fiducial_distance));
    if (message_arena != submessage_arena) {
      max_fiducial_distance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_fiducial_distance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_fiducial_distance_ = max_fiducial_distance;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.FiducialLoopClosureParams.max_fiducial_distance)
}

// .google.protobuf.DoubleValue max_loop_closure_height_change = 4;
inline bool ProcessTopologyRequest_FiducialLoopClosureParams::_internal_has_max_loop_closure_height_change() const {
  return this != internal_default_instance() && _impl_.max_loop_closure_height_change_ != nullptr;
}
inline bool ProcessTopologyRequest_FiducialLoopClosureParams::has_max_loop_closure_height_change() const {
  return _internal_has_max_loop_closure_height_change();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ProcessTopologyRequest_FiducialLoopClosureParams::_internal_max_loop_closure_height_change() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.max_loop_closure_height_change_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ProcessTopologyRequest_FiducialLoopClosureParams::max_loop_closure_height_change() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessTopologyRequest.FiducialLoopClosureParams.max_loop_closure_height_change)
  return _internal_max_loop_closure_height_change();
}
inline void ProcessTopologyRequest_FiducialLoopClosureParams::unsafe_arena_set_allocated_max_loop_closure_height_change(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_loop_closure_height_change) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_loop_closure_height_change_);
  }
  _impl_.max_loop_closure_height_change_ = max_loop_closure_height_change;
  if (max_loop_closure_height_change) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.FiducialLoopClosureParams.max_loop_closure_height_change)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_FiducialLoopClosureParams::release_max_loop_closure_height_change() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_loop_closure_height_change_;
  _impl_.max_loop_closure_height_change_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_FiducialLoopClosureParams::unsafe_arena_release_max_loop_closure_height_change() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessTopologyRequest.FiducialLoopClosureParams.max_loop_closure_height_change)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_loop_closure_height_change_;
  _impl_.max_loop_closure_height_change_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_FiducialLoopClosureParams::_internal_mutable_max_loop_closure_height_change() {
  
  if (_impl_.max_loop_closure_height_change_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.max_loop_closure_height_change_ = p;
  }
  return _impl_.max_loop_closure_height_change_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_FiducialLoopClosureParams::mutable_max_loop_closure_height_change() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_max_loop_closure_height_change();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessTopologyRequest.FiducialLoopClosureParams.max_loop_closure_height_change)
  return _msg;
}
inline void ProcessTopologyRequest_FiducialLoopClosureParams::set_allocated_max_loop_closure_height_change(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_loop_closure_height_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_loop_closure_height_change_);
  }
  if (max_loop_closure_height_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_loop_closure_height_change));
    if (message_arena != submessage_arena) {
      max_loop_closure_height_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_loop_closure_height_change, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_loop_closure_height_change_ = max_loop_closure_height_change;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.FiducialLoopClosureParams.max_loop_closure_height_change)
}

// -------------------------------------------------------------------

// ProcessTopologyRequest_CollisionCheckingParams

// .google.protobuf.BoolValue check_edges_for_collision = 1;
inline bool ProcessTopologyRequest_CollisionCheckingParams::_internal_has_check_edges_for_collision() const {
  return this != internal_default_instance() && _impl_.check_edges_for_collision_ != nullptr;
}
inline bool ProcessTopologyRequest_CollisionCheckingParams::has_check_edges_for_collision() const {
  return _internal_has_check_edges_for_collision();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& ProcessTopologyRequest_CollisionCheckingParams::_internal_check_edges_for_collision() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.check_edges_for_collision_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& ProcessTopologyRequest_CollisionCheckingParams::check_edges_for_collision() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessTopologyRequest.CollisionCheckingParams.check_edges_for_collision)
  return _internal_check_edges_for_collision();
}
inline void ProcessTopologyRequest_CollisionCheckingParams::unsafe_arena_set_allocated_check_edges_for_collision(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* check_edges_for_collision) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.check_edges_for_collision_);
  }
  _impl_.check_edges_for_collision_ = check_edges_for_collision;
  if (check_edges_for_collision) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.CollisionCheckingParams.check_edges_for_collision)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessTopologyRequest_CollisionCheckingParams::release_check_edges_for_collision() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.check_edges_for_collision_;
  _impl_.check_edges_for_collision_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessTopologyRequest_CollisionCheckingParams::unsafe_arena_release_check_edges_for_collision() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessTopologyRequest.CollisionCheckingParams.check_edges_for_collision)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.check_edges_for_collision_;
  _impl_.check_edges_for_collision_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessTopologyRequest_CollisionCheckingParams::_internal_mutable_check_edges_for_collision() {
  
  if (_impl_.check_edges_for_collision_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.check_edges_for_collision_ = p;
  }
  return _impl_.check_edges_for_collision_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessTopologyRequest_CollisionCheckingParams::mutable_check_edges_for_collision() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_check_edges_for_collision();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessTopologyRequest.CollisionCheckingParams.check_edges_for_collision)
  return _msg;
}
inline void ProcessTopologyRequest_CollisionCheckingParams::set_allocated_check_edges_for_collision(::PROTOBUF_NAMESPACE_ID::BoolValue* check_edges_for_collision) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.check_edges_for_collision_);
  }
  if (check_edges_for_collision) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(check_edges_for_collision));
    if (message_arena != submessage_arena) {
      check_edges_for_collision = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, check_edges_for_collision, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.check_edges_for_collision_ = check_edges_for_collision;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.CollisionCheckingParams.check_edges_for_collision)
}

// .google.protobuf.DoubleValue collision_check_robot_radius = 2;
inline bool ProcessTopologyRequest_CollisionCheckingParams::_internal_has_collision_check_robot_radius() const {
  return this != internal_default_instance() && _impl_.collision_check_robot_radius_ != nullptr;
}
inline bool ProcessTopologyRequest_CollisionCheckingParams::has_collision_check_robot_radius() const {
  return _internal_has_collision_check_robot_radius();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ProcessTopologyRequest_CollisionCheckingParams::_internal_collision_check_robot_radius() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.collision_check_robot_radius_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ProcessTopologyRequest_CollisionCheckingParams::collision_check_robot_radius() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessTopologyRequest.CollisionCheckingParams.collision_check_robot_radius)
  return _internal_collision_check_robot_radius();
}
inline void ProcessTopologyRequest_CollisionCheckingParams::unsafe_arena_set_allocated_collision_check_robot_radius(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* collision_check_robot_radius) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.collision_check_robot_radius_);
  }
  _impl_.collision_check_robot_radius_ = collision_check_robot_radius;
  if (collision_check_robot_radius) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.CollisionCheckingParams.collision_check_robot_radius)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_CollisionCheckingParams::release_collision_check_robot_radius() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.collision_check_robot_radius_;
  _impl_.collision_check_robot_radius_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_CollisionCheckingParams::unsafe_arena_release_collision_check_robot_radius() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessTopologyRequest.CollisionCheckingParams.collision_check_robot_radius)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.collision_check_robot_radius_;
  _impl_.collision_check_robot_radius_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_CollisionCheckingParams::_internal_mutable_collision_check_robot_radius() {
  
  if (_impl_.collision_check_robot_radius_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.collision_check_robot_radius_ = p;
  }
  return _impl_.collision_check_robot_radius_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_CollisionCheckingParams::mutable_collision_check_robot_radius() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_collision_check_robot_radius();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessTopologyRequest.CollisionCheckingParams.collision_check_robot_radius)
  return _msg;
}
inline void ProcessTopologyRequest_CollisionCheckingParams::set_allocated_collision_check_robot_radius(::PROTOBUF_NAMESPACE_ID::DoubleValue* collision_check_robot_radius) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.collision_check_robot_radius_);
  }
  if (collision_check_robot_radius) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(collision_check_robot_radius));
    if (message_arena != submessage_arena) {
      collision_check_robot_radius = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collision_check_robot_radius, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.collision_check_robot_radius_ = collision_check_robot_radius;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.CollisionCheckingParams.collision_check_robot_radius)
}

// .google.protobuf.DoubleValue collision_check_height_variation = 3;
inline bool ProcessTopologyRequest_CollisionCheckingParams::_internal_has_collision_check_height_variation() const {
  return this != internal_default_instance() && _impl_.collision_check_height_variation_ != nullptr;
}
inline bool ProcessTopologyRequest_CollisionCheckingParams::has_collision_check_height_variation() const {
  return _internal_has_collision_check_height_variation();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ProcessTopologyRequest_CollisionCheckingParams::_internal_collision_check_height_variation() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.collision_check_height_variation_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ProcessTopologyRequest_CollisionCheckingParams::collision_check_height_variation() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessTopologyRequest.CollisionCheckingParams.collision_check_height_variation)
  return _internal_collision_check_height_variation();
}
inline void ProcessTopologyRequest_CollisionCheckingParams::unsafe_arena_set_allocated_collision_check_height_variation(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* collision_check_height_variation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.collision_check_height_variation_);
  }
  _impl_.collision_check_height_variation_ = collision_check_height_variation;
  if (collision_check_height_variation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.CollisionCheckingParams.collision_check_height_variation)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_CollisionCheckingParams::release_collision_check_height_variation() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.collision_check_height_variation_;
  _impl_.collision_check_height_variation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_CollisionCheckingParams::unsafe_arena_release_collision_check_height_variation() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessTopologyRequest.CollisionCheckingParams.collision_check_height_variation)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.collision_check_height_variation_;
  _impl_.collision_check_height_variation_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_CollisionCheckingParams::_internal_mutable_collision_check_height_variation() {
  
  if (_impl_.collision_check_height_variation_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.collision_check_height_variation_ = p;
  }
  return _impl_.collision_check_height_variation_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessTopologyRequest_CollisionCheckingParams::mutable_collision_check_height_variation() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_collision_check_height_variation();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessTopologyRequest.CollisionCheckingParams.collision_check_height_variation)
  return _msg;
}
inline void ProcessTopologyRequest_CollisionCheckingParams::set_allocated_collision_check_height_variation(::PROTOBUF_NAMESPACE_ID::DoubleValue* collision_check_height_variation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.collision_check_height_variation_);
  }
  if (collision_check_height_variation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(collision_check_height_variation));
    if (message_arena != submessage_arena) {
      collision_check_height_variation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collision_check_height_variation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.collision_check_height_variation_ = collision_check_height_variation;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.CollisionCheckingParams.collision_check_height_variation)
}

// -------------------------------------------------------------------

// ProcessTopologyRequest_Params

// .google.protobuf.BoolValue do_odometry_loop_closure = 1;
inline bool ProcessTopologyRequest_Params::_internal_has_do_odometry_loop_closure() const {
  return this != internal_default_instance() && _impl_.do_odometry_loop_closure_ != nullptr;
}
inline bool ProcessTopologyRequest_Params::has_do_odometry_loop_closure() const {
  return _internal_has_do_odometry_loop_closure();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& ProcessTopologyRequest_Params::_internal_do_odometry_loop_closure() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.do_odometry_loop_closure_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& ProcessTopologyRequest_Params::do_odometry_loop_closure() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessTopologyRequest.Params.do_odometry_loop_closure)
  return _internal_do_odometry_loop_closure();
}
inline void ProcessTopologyRequest_Params::unsafe_arena_set_allocated_do_odometry_loop_closure(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* do_odometry_loop_closure) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.do_odometry_loop_closure_);
  }
  _impl_.do_odometry_loop_closure_ = do_odometry_loop_closure;
  if (do_odometry_loop_closure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.Params.do_odometry_loop_closure)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessTopologyRequest_Params::release_do_odometry_loop_closure() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.do_odometry_loop_closure_;
  _impl_.do_odometry_loop_closure_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessTopologyRequest_Params::unsafe_arena_release_do_odometry_loop_closure() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessTopologyRequest.Params.do_odometry_loop_closure)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.do_odometry_loop_closure_;
  _impl_.do_odometry_loop_closure_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessTopologyRequest_Params::_internal_mutable_do_odometry_loop_closure() {
  
  if (_impl_.do_odometry_loop_closure_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.do_odometry_loop_closure_ = p;
  }
  return _impl_.do_odometry_loop_closure_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessTopologyRequest_Params::mutable_do_odometry_loop_closure() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_do_odometry_loop_closure();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessTopologyRequest.Params.do_odometry_loop_closure)
  return _msg;
}
inline void ProcessTopologyRequest_Params::set_allocated_do_odometry_loop_closure(::PROTOBUF_NAMESPACE_ID::BoolValue* do_odometry_loop_closure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.do_odometry_loop_closure_);
  }
  if (do_odometry_loop_closure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(do_odometry_loop_closure));
    if (message_arena != submessage_arena) {
      do_odometry_loop_closure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, do_odometry_loop_closure, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.do_odometry_loop_closure_ = do_odometry_loop_closure;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.Params.do_odometry_loop_closure)
}

// .bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams odometry_loop_closure_params = 2;
inline bool ProcessTopologyRequest_Params::_internal_has_odometry_loop_closure_params() const {
  return this != internal_default_instance() && _impl_.odometry_loop_closure_params_ != nullptr;
}
inline bool ProcessTopologyRequest_Params::has_odometry_loop_closure_params() const {
  return _internal_has_odometry_loop_closure_params();
}
inline void ProcessTopologyRequest_Params::clear_odometry_loop_closure_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.odometry_loop_closure_params_ != nullptr) {
    delete _impl_.odometry_loop_closure_params_;
  }
  _impl_.odometry_loop_closure_params_ = nullptr;
}
inline const ::bosdyn::api::graph_nav::ProcessTopologyRequest_OdometryLoopClosureParams& ProcessTopologyRequest_Params::_internal_odometry_loop_closure_params() const {
  const ::bosdyn::api::graph_nav::ProcessTopologyRequest_OdometryLoopClosureParams* p = _impl_.odometry_loop_closure_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::graph_nav::ProcessTopologyRequest_OdometryLoopClosureParams&>(
      ::bosdyn::api::graph_nav::_ProcessTopologyRequest_OdometryLoopClosureParams_default_instance_);
}
inline const ::bosdyn::api::graph_nav::ProcessTopologyRequest_OdometryLoopClosureParams& ProcessTopologyRequest_Params::odometry_loop_closure_params() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessTopologyRequest.Params.odometry_loop_closure_params)
  return _internal_odometry_loop_closure_params();
}
inline void ProcessTopologyRequest_Params::unsafe_arena_set_allocated_odometry_loop_closure_params(
    ::bosdyn::api::graph_nav::ProcessTopologyRequest_OdometryLoopClosureParams* odometry_loop_closure_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.odometry_loop_closure_params_);
  }
  _impl_.odometry_loop_closure_params_ = odometry_loop_closure_params;
  if (odometry_loop_closure_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.Params.odometry_loop_closure_params)
}
inline ::bosdyn::api::graph_nav::ProcessTopologyRequest_OdometryLoopClosureParams* ProcessTopologyRequest_Params::release_odometry_loop_closure_params() {
  
  ::bosdyn::api::graph_nav::ProcessTopologyRequest_OdometryLoopClosureParams* temp = _impl_.odometry_loop_closure_params_;
  _impl_.odometry_loop_closure_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::graph_nav::ProcessTopologyRequest_OdometryLoopClosureParams* ProcessTopologyRequest_Params::unsafe_arena_release_odometry_loop_closure_params() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessTopologyRequest.Params.odometry_loop_closure_params)
  
  ::bosdyn::api::graph_nav::ProcessTopologyRequest_OdometryLoopClosureParams* temp = _impl_.odometry_loop_closure_params_;
  _impl_.odometry_loop_closure_params_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::ProcessTopologyRequest_OdometryLoopClosureParams* ProcessTopologyRequest_Params::_internal_mutable_odometry_loop_closure_params() {
  
  if (_impl_.odometry_loop_closure_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::ProcessTopologyRequest_OdometryLoopClosureParams>(GetArenaForAllocation());
    _impl_.odometry_loop_closure_params_ = p;
  }
  return _impl_.odometry_loop_closure_params_;
}
inline ::bosdyn::api::graph_nav::ProcessTopologyRequest_OdometryLoopClosureParams* ProcessTopologyRequest_Params::mutable_odometry_loop_closure_params() {
  ::bosdyn::api::graph_nav::ProcessTopologyRequest_OdometryLoopClosureParams* _msg = _internal_mutable_odometry_loop_closure_params();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessTopologyRequest.Params.odometry_loop_closure_params)
  return _msg;
}
inline void ProcessTopologyRequest_Params::set_allocated_odometry_loop_closure_params(::bosdyn::api::graph_nav::ProcessTopologyRequest_OdometryLoopClosureParams* odometry_loop_closure_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.odometry_loop_closure_params_;
  }
  if (odometry_loop_closure_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(odometry_loop_closure_params);
    if (message_arena != submessage_arena) {
      odometry_loop_closure_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, odometry_loop_closure_params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.odometry_loop_closure_params_ = odometry_loop_closure_params;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.Params.odometry_loop_closure_params)
}

// .bosdyn.api.graph_nav.ProcessTopologyRequest.ICPParams icp_params = 3;
inline bool ProcessTopologyRequest_Params::_internal_has_icp_params() const {
  return this != internal_default_instance() && _impl_.icp_params_ != nullptr;
}
inline bool ProcessTopologyRequest_Params::has_icp_params() const {
  return _internal_has_icp_params();
}
inline void ProcessTopologyRequest_Params::clear_icp_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.icp_params_ != nullptr) {
    delete _impl_.icp_params_;
  }
  _impl_.icp_params_ = nullptr;
}
inline const ::bosdyn::api::graph_nav::ProcessTopologyRequest_ICPParams& ProcessTopologyRequest_Params::_internal_icp_params() const {
  const ::bosdyn::api::graph_nav::ProcessTopologyRequest_ICPParams* p = _impl_.icp_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::graph_nav::ProcessTopologyRequest_ICPParams&>(
      ::bosdyn::api::graph_nav::_ProcessTopologyRequest_ICPParams_default_instance_);
}
inline const ::bosdyn::api::graph_nav::ProcessTopologyRequest_ICPParams& ProcessTopologyRequest_Params::icp_params() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessTopologyRequest.Params.icp_params)
  return _internal_icp_params();
}
inline void ProcessTopologyRequest_Params::unsafe_arena_set_allocated_icp_params(
    ::bosdyn::api::graph_nav::ProcessTopologyRequest_ICPParams* icp_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.icp_params_);
  }
  _impl_.icp_params_ = icp_params;
  if (icp_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.Params.icp_params)
}
inline ::bosdyn::api::graph_nav::ProcessTopologyRequest_ICPParams* ProcessTopologyRequest_Params::release_icp_params() {
  
  ::bosdyn::api::graph_nav::ProcessTopologyRequest_ICPParams* temp = _impl_.icp_params_;
  _impl_.icp_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::graph_nav::ProcessTopologyRequest_ICPParams* ProcessTopologyRequest_Params::unsafe_arena_release_icp_params() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessTopologyRequest.Params.icp_params)
  
  ::bosdyn::api::graph_nav::ProcessTopologyRequest_ICPParams* temp = _impl_.icp_params_;
  _impl_.icp_params_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::ProcessTopologyRequest_ICPParams* ProcessTopologyRequest_Params::_internal_mutable_icp_params() {
  
  if (_impl_.icp_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::ProcessTopologyRequest_ICPParams>(GetArenaForAllocation());
    _impl_.icp_params_ = p;
  }
  return _impl_.icp_params_;
}
inline ::bosdyn::api::graph_nav::ProcessTopologyRequest_ICPParams* ProcessTopologyRequest_Params::mutable_icp_params() {
  ::bosdyn::api::graph_nav::ProcessTopologyRequest_ICPParams* _msg = _internal_mutable_icp_params();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessTopologyRequest.Params.icp_params)
  return _msg;
}
inline void ProcessTopologyRequest_Params::set_allocated_icp_params(::bosdyn::api::graph_nav::ProcessTopologyRequest_ICPParams* icp_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.icp_params_;
  }
  if (icp_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(icp_params);
    if (message_arena != submessage_arena) {
      icp_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, icp_params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.icp_params_ = icp_params;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.Params.icp_params)
}

// .google.protobuf.BoolValue do_fiducial_loop_closure = 4;
inline bool ProcessTopologyRequest_Params::_internal_has_do_fiducial_loop_closure() const {
  return this != internal_default_instance() && _impl_.do_fiducial_loop_closure_ != nullptr;
}
inline bool ProcessTopologyRequest_Params::has_do_fiducial_loop_closure() const {
  return _internal_has_do_fiducial_loop_closure();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& ProcessTopologyRequest_Params::_internal_do_fiducial_loop_closure() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.do_fiducial_loop_closure_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& ProcessTopologyRequest_Params::do_fiducial_loop_closure() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessTopologyRequest.Params.do_fiducial_loop_closure)
  return _internal_do_fiducial_loop_closure();
}
inline void ProcessTopologyRequest_Params::unsafe_arena_set_allocated_do_fiducial_loop_closure(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* do_fiducial_loop_closure) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.do_fiducial_loop_closure_);
  }
  _impl_.do_fiducial_loop_closure_ = do_fiducial_loop_closure;
  if (do_fiducial_loop_closure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.Params.do_fiducial_loop_closure)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessTopologyRequest_Params::release_do_fiducial_loop_closure() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.do_fiducial_loop_closure_;
  _impl_.do_fiducial_loop_closure_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessTopologyRequest_Params::unsafe_arena_release_do_fiducial_loop_closure() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessTopologyRequest.Params.do_fiducial_loop_closure)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.do_fiducial_loop_closure_;
  _impl_.do_fiducial_loop_closure_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessTopologyRequest_Params::_internal_mutable_do_fiducial_loop_closure() {
  
  if (_impl_.do_fiducial_loop_closure_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.do_fiducial_loop_closure_ = p;
  }
  return _impl_.do_fiducial_loop_closure_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessTopologyRequest_Params::mutable_do_fiducial_loop_closure() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_do_fiducial_loop_closure();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessTopologyRequest.Params.do_fiducial_loop_closure)
  return _msg;
}
inline void ProcessTopologyRequest_Params::set_allocated_do_fiducial_loop_closure(::PROTOBUF_NAMESPACE_ID::BoolValue* do_fiducial_loop_closure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.do_fiducial_loop_closure_);
  }
  if (do_fiducial_loop_closure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(do_fiducial_loop_closure));
    if (message_arena != submessage_arena) {
      do_fiducial_loop_closure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, do_fiducial_loop_closure, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.do_fiducial_loop_closure_ = do_fiducial_loop_closure;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.Params.do_fiducial_loop_closure)
}

// .bosdyn.api.graph_nav.ProcessTopologyRequest.FiducialLoopClosureParams fiducial_loop_closure_params = 5;
inline bool ProcessTopologyRequest_Params::_internal_has_fiducial_loop_closure_params() const {
  return this != internal_default_instance() && _impl_.fiducial_loop_closure_params_ != nullptr;
}
inline bool ProcessTopologyRequest_Params::has_fiducial_loop_closure_params() const {
  return _internal_has_fiducial_loop_closure_params();
}
inline void ProcessTopologyRequest_Params::clear_fiducial_loop_closure_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.fiducial_loop_closure_params_ != nullptr) {
    delete _impl_.fiducial_loop_closure_params_;
  }
  _impl_.fiducial_loop_closure_params_ = nullptr;
}
inline const ::bosdyn::api::graph_nav::ProcessTopologyRequest_FiducialLoopClosureParams& ProcessTopologyRequest_Params::_internal_fiducial_loop_closure_params() const {
  const ::bosdyn::api::graph_nav::ProcessTopologyRequest_FiducialLoopClosureParams* p = _impl_.fiducial_loop_closure_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::graph_nav::ProcessTopologyRequest_FiducialLoopClosureParams&>(
      ::bosdyn::api::graph_nav::_ProcessTopologyRequest_FiducialLoopClosureParams_default_instance_);
}
inline const ::bosdyn::api::graph_nav::ProcessTopologyRequest_FiducialLoopClosureParams& ProcessTopologyRequest_Params::fiducial_loop_closure_params() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessTopologyRequest.Params.fiducial_loop_closure_params)
  return _internal_fiducial_loop_closure_params();
}
inline void ProcessTopologyRequest_Params::unsafe_arena_set_allocated_fiducial_loop_closure_params(
    ::bosdyn::api::graph_nav::ProcessTopologyRequest_FiducialLoopClosureParams* fiducial_loop_closure_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fiducial_loop_closure_params_);
  }
  _impl_.fiducial_loop_closure_params_ = fiducial_loop_closure_params;
  if (fiducial_loop_closure_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.Params.fiducial_loop_closure_params)
}
inline ::bosdyn::api::graph_nav::ProcessTopologyRequest_FiducialLoopClosureParams* ProcessTopologyRequest_Params::release_fiducial_loop_closure_params() {
  
  ::bosdyn::api::graph_nav::ProcessTopologyRequest_FiducialLoopClosureParams* temp = _impl_.fiducial_loop_closure_params_;
  _impl_.fiducial_loop_closure_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::graph_nav::ProcessTopologyRequest_FiducialLoopClosureParams* ProcessTopologyRequest_Params::unsafe_arena_release_fiducial_loop_closure_params() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessTopologyRequest.Params.fiducial_loop_closure_params)
  
  ::bosdyn::api::graph_nav::ProcessTopologyRequest_FiducialLoopClosureParams* temp = _impl_.fiducial_loop_closure_params_;
  _impl_.fiducial_loop_closure_params_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::ProcessTopologyRequest_FiducialLoopClosureParams* ProcessTopologyRequest_Params::_internal_mutable_fiducial_loop_closure_params() {
  
  if (_impl_.fiducial_loop_closure_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::ProcessTopologyRequest_FiducialLoopClosureParams>(GetArenaForAllocation());
    _impl_.fiducial_loop_closure_params_ = p;
  }
  return _impl_.fiducial_loop_closure_params_;
}
inline ::bosdyn::api::graph_nav::ProcessTopologyRequest_FiducialLoopClosureParams* ProcessTopologyRequest_Params::mutable_fiducial_loop_closure_params() {
  ::bosdyn::api::graph_nav::ProcessTopologyRequest_FiducialLoopClosureParams* _msg = _internal_mutable_fiducial_loop_closure_params();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessTopologyRequest.Params.fiducial_loop_closure_params)
  return _msg;
}
inline void ProcessTopologyRequest_Params::set_allocated_fiducial_loop_closure_params(::bosdyn::api::graph_nav::ProcessTopologyRequest_FiducialLoopClosureParams* fiducial_loop_closure_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.fiducial_loop_closure_params_;
  }
  if (fiducial_loop_closure_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fiducial_loop_closure_params);
    if (message_arena != submessage_arena) {
      fiducial_loop_closure_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fiducial_loop_closure_params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fiducial_loop_closure_params_ = fiducial_loop_closure_params;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.Params.fiducial_loop_closure_params)
}

// .bosdyn.api.graph_nav.ProcessTopologyRequest.CollisionCheckingParams collision_check_params = 6;
inline bool ProcessTopologyRequest_Params::_internal_has_collision_check_params() const {
  return this != internal_default_instance() && _impl_.collision_check_params_ != nullptr;
}
inline bool ProcessTopologyRequest_Params::has_collision_check_params() const {
  return _internal_has_collision_check_params();
}
inline void ProcessTopologyRequest_Params::clear_collision_check_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.collision_check_params_ != nullptr) {
    delete _impl_.collision_check_params_;
  }
  _impl_.collision_check_params_ = nullptr;
}
inline const ::bosdyn::api::graph_nav::ProcessTopologyRequest_CollisionCheckingParams& ProcessTopologyRequest_Params::_internal_collision_check_params() const {
  const ::bosdyn::api::graph_nav::ProcessTopologyRequest_CollisionCheckingParams* p = _impl_.collision_check_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::graph_nav::ProcessTopologyRequest_CollisionCheckingParams&>(
      ::bosdyn::api::graph_nav::_ProcessTopologyRequest_CollisionCheckingParams_default_instance_);
}
inline const ::bosdyn::api::graph_nav::ProcessTopologyRequest_CollisionCheckingParams& ProcessTopologyRequest_Params::collision_check_params() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessTopologyRequest.Params.collision_check_params)
  return _internal_collision_check_params();
}
inline void ProcessTopologyRequest_Params::unsafe_arena_set_allocated_collision_check_params(
    ::bosdyn::api::graph_nav::ProcessTopologyRequest_CollisionCheckingParams* collision_check_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.collision_check_params_);
  }
  _impl_.collision_check_params_ = collision_check_params;
  if (collision_check_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.Params.collision_check_params)
}
inline ::bosdyn::api::graph_nav::ProcessTopologyRequest_CollisionCheckingParams* ProcessTopologyRequest_Params::release_collision_check_params() {
  
  ::bosdyn::api::graph_nav::ProcessTopologyRequest_CollisionCheckingParams* temp = _impl_.collision_check_params_;
  _impl_.collision_check_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::graph_nav::ProcessTopologyRequest_CollisionCheckingParams* ProcessTopologyRequest_Params::unsafe_arena_release_collision_check_params() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessTopologyRequest.Params.collision_check_params)
  
  ::bosdyn::api::graph_nav::ProcessTopologyRequest_CollisionCheckingParams* temp = _impl_.collision_check_params_;
  _impl_.collision_check_params_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::ProcessTopologyRequest_CollisionCheckingParams* ProcessTopologyRequest_Params::_internal_mutable_collision_check_params() {
  
  if (_impl_.collision_check_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::ProcessTopologyRequest_CollisionCheckingParams>(GetArenaForAllocation());
    _impl_.collision_check_params_ = p;
  }
  return _impl_.collision_check_params_;
}
inline ::bosdyn::api::graph_nav::ProcessTopologyRequest_CollisionCheckingParams* ProcessTopologyRequest_Params::mutable_collision_check_params() {
  ::bosdyn::api::graph_nav::ProcessTopologyRequest_CollisionCheckingParams* _msg = _internal_mutable_collision_check_params();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessTopologyRequest.Params.collision_check_params)
  return _msg;
}
inline void ProcessTopologyRequest_Params::set_allocated_collision_check_params(::bosdyn::api::graph_nav::ProcessTopologyRequest_CollisionCheckingParams* collision_check_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.collision_check_params_;
  }
  if (collision_check_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(collision_check_params);
    if (message_arena != submessage_arena) {
      collision_check_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collision_check_params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.collision_check_params_ = collision_check_params;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.Params.collision_check_params)
}

// double timeout_seconds = 7;
inline void ProcessTopologyRequest_Params::clear_timeout_seconds() {
  _impl_.timeout_seconds_ = 0;
}
inline double ProcessTopologyRequest_Params::_internal_timeout_seconds() const {
  return _impl_.timeout_seconds_;
}
inline double ProcessTopologyRequest_Params::timeout_seconds() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessTopologyRequest.Params.timeout_seconds)
  return _internal_timeout_seconds();
}
inline void ProcessTopologyRequest_Params::_internal_set_timeout_seconds(double value) {
  
  _impl_.timeout_seconds_ = value;
}
inline void ProcessTopologyRequest_Params::set_timeout_seconds(double value) {
  _internal_set_timeout_seconds(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ProcessTopologyRequest.Params.timeout_seconds)
}

// -------------------------------------------------------------------

// ProcessTopologyRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool ProcessTopologyRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool ProcessTopologyRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& ProcessTopologyRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RequestHeader&>(
      ::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& ProcessTopologyRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessTopologyRequest.header)
  return _internal_header();
}
inline void ProcessTopologyRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.header)
}
inline ::bosdyn::api::RequestHeader* ProcessTopologyRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RequestHeader* ProcessTopologyRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessTopologyRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* ProcessTopologyRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::RequestHeader* ProcessTopologyRequest::mutable_header() {
  ::bosdyn::api::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessTopologyRequest.header)
  return _msg;
}
inline void ProcessTopologyRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.header)
}

// .bosdyn.api.graph_nav.ProcessTopologyRequest.Params params = 2;
inline bool ProcessTopologyRequest::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool ProcessTopologyRequest::has_params() const {
  return _internal_has_params();
}
inline void ProcessTopologyRequest::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::bosdyn::api::graph_nav::ProcessTopologyRequest_Params& ProcessTopologyRequest::_internal_params() const {
  const ::bosdyn::api::graph_nav::ProcessTopologyRequest_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::graph_nav::ProcessTopologyRequest_Params&>(
      ::bosdyn::api::graph_nav::_ProcessTopologyRequest_Params_default_instance_);
}
inline const ::bosdyn::api::graph_nav::ProcessTopologyRequest_Params& ProcessTopologyRequest::params() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessTopologyRequest.params)
  return _internal_params();
}
inline void ProcessTopologyRequest::unsafe_arena_set_allocated_params(
    ::bosdyn::api::graph_nav::ProcessTopologyRequest_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.params)
}
inline ::bosdyn::api::graph_nav::ProcessTopologyRequest_Params* ProcessTopologyRequest::release_params() {
  
  ::bosdyn::api::graph_nav::ProcessTopologyRequest_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::graph_nav::ProcessTopologyRequest_Params* ProcessTopologyRequest::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessTopologyRequest.params)
  
  ::bosdyn::api::graph_nav::ProcessTopologyRequest_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::ProcessTopologyRequest_Params* ProcessTopologyRequest::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::ProcessTopologyRequest_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::bosdyn::api::graph_nav::ProcessTopologyRequest_Params* ProcessTopologyRequest::mutable_params() {
  ::bosdyn::api::graph_nav::ProcessTopologyRequest_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessTopologyRequest.params)
  return _msg;
}
inline void ProcessTopologyRequest::set_allocated_params(::bosdyn::api::graph_nav::ProcessTopologyRequest_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessTopologyRequest.params)
}

// bool modify_map_on_server = 3;
inline void ProcessTopologyRequest::clear_modify_map_on_server() {
  _impl_.modify_map_on_server_ = false;
}
inline bool ProcessTopologyRequest::_internal_modify_map_on_server() const {
  return _impl_.modify_map_on_server_;
}
inline bool ProcessTopologyRequest::modify_map_on_server() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessTopologyRequest.modify_map_on_server)
  return _internal_modify_map_on_server();
}
inline void ProcessTopologyRequest::_internal_set_modify_map_on_server(bool value) {
  
  _impl_.modify_map_on_server_ = value;
}
inline void ProcessTopologyRequest::set_modify_map_on_server(bool value) {
  _internal_set_modify_map_on_server(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ProcessTopologyRequest.modify_map_on_server)
}

// -------------------------------------------------------------------

// ProcessTopologyResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool ProcessTopologyResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool ProcessTopologyResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& ProcessTopologyResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ResponseHeader&>(
      ::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& ProcessTopologyResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessTopologyResponse.header)
  return _internal_header();
}
inline void ProcessTopologyResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessTopologyResponse.header)
}
inline ::bosdyn::api::ResponseHeader* ProcessTopologyResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ResponseHeader* ProcessTopologyResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessTopologyResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* ProcessTopologyResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::ResponseHeader* ProcessTopologyResponse::mutable_header() {
  ::bosdyn::api::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessTopologyResponse.header)
  return _msg;
}
inline void ProcessTopologyResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessTopologyResponse.header)
}

// .bosdyn.api.graph_nav.ProcessTopologyResponse.Status status = 2;
inline void ProcessTopologyResponse::clear_status() {
  _impl_.status_ = 0;
}
inline ::bosdyn::api::graph_nav::ProcessTopologyResponse_Status ProcessTopologyResponse::_internal_status() const {
  return static_cast< ::bosdyn::api::graph_nav::ProcessTopologyResponse_Status >(_impl_.status_);
}
inline ::bosdyn::api::graph_nav::ProcessTopologyResponse_Status ProcessTopologyResponse::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessTopologyResponse.status)
  return _internal_status();
}
inline void ProcessTopologyResponse::_internal_set_status(::bosdyn::api::graph_nav::ProcessTopologyResponse_Status value) {
  
  _impl_.status_ = value;
}
inline void ProcessTopologyResponse::set_status(::bosdyn::api::graph_nav::ProcessTopologyResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ProcessTopologyResponse.status)
}

// .bosdyn.api.graph_nav.Graph new_subgraph = 3;
inline bool ProcessTopologyResponse::_internal_has_new_subgraph() const {
  return this != internal_default_instance() && _impl_.new_subgraph_ != nullptr;
}
inline bool ProcessTopologyResponse::has_new_subgraph() const {
  return _internal_has_new_subgraph();
}
inline const ::bosdyn::api::graph_nav::Graph& ProcessTopologyResponse::_internal_new_subgraph() const {
  const ::bosdyn::api::graph_nav::Graph* p = _impl_.new_subgraph_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::graph_nav::Graph&>(
      ::bosdyn::api::graph_nav::_Graph_default_instance_);
}
inline const ::bosdyn::api::graph_nav::Graph& ProcessTopologyResponse::new_subgraph() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessTopologyResponse.new_subgraph)
  return _internal_new_subgraph();
}
inline void ProcessTopologyResponse::unsafe_arena_set_allocated_new_subgraph(
    ::bosdyn::api::graph_nav::Graph* new_subgraph) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_subgraph_);
  }
  _impl_.new_subgraph_ = new_subgraph;
  if (new_subgraph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessTopologyResponse.new_subgraph)
}
inline ::bosdyn::api::graph_nav::Graph* ProcessTopologyResponse::release_new_subgraph() {
  
  ::bosdyn::api::graph_nav::Graph* temp = _impl_.new_subgraph_;
  _impl_.new_subgraph_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::graph_nav::Graph* ProcessTopologyResponse::unsafe_arena_release_new_subgraph() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessTopologyResponse.new_subgraph)
  
  ::bosdyn::api::graph_nav::Graph* temp = _impl_.new_subgraph_;
  _impl_.new_subgraph_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::Graph* ProcessTopologyResponse::_internal_mutable_new_subgraph() {
  
  if (_impl_.new_subgraph_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::Graph>(GetArenaForAllocation());
    _impl_.new_subgraph_ = p;
  }
  return _impl_.new_subgraph_;
}
inline ::bosdyn::api::graph_nav::Graph* ProcessTopologyResponse::mutable_new_subgraph() {
  ::bosdyn::api::graph_nav::Graph* _msg = _internal_mutable_new_subgraph();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessTopologyResponse.new_subgraph)
  return _msg;
}
inline void ProcessTopologyResponse::set_allocated_new_subgraph(::bosdyn::api::graph_nav::Graph* new_subgraph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_subgraph_);
  }
  if (new_subgraph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_subgraph));
    if (message_arena != submessage_arena) {
      new_subgraph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_subgraph, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.new_subgraph_ = new_subgraph;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessTopologyResponse.new_subgraph)
}

// bool map_on_server_was_modified = 4;
inline void ProcessTopologyResponse::clear_map_on_server_was_modified() {
  _impl_.map_on_server_was_modified_ = false;
}
inline bool ProcessTopologyResponse::_internal_map_on_server_was_modified() const {
  return _impl_.map_on_server_was_modified_;
}
inline bool ProcessTopologyResponse::map_on_server_was_modified() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessTopologyResponse.map_on_server_was_modified)
  return _internal_map_on_server_was_modified();
}
inline void ProcessTopologyResponse::_internal_set_map_on_server_was_modified(bool value) {
  
  _impl_.map_on_server_was_modified_ = value;
}
inline void ProcessTopologyResponse::set_map_on_server_was_modified(bool value) {
  _internal_set_map_on_server_was_modified(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ProcessTopologyResponse.map_on_server_was_modified)
}

// repeated string missing_snapshot_ids = 10;
inline int ProcessTopologyResponse::_internal_missing_snapshot_ids_size() const {
  return _impl_.missing_snapshot_ids_.size();
}
inline int ProcessTopologyResponse::missing_snapshot_ids_size() const {
  return _internal_missing_snapshot_ids_size();
}
inline void ProcessTopologyResponse::clear_missing_snapshot_ids() {
  _impl_.missing_snapshot_ids_.Clear();
}
inline std::string* ProcessTopologyResponse::add_missing_snapshot_ids() {
  std::string* _s = _internal_add_missing_snapshot_ids();
  // @@protoc_insertion_point(field_add_mutable:bosdyn.api.graph_nav.ProcessTopologyResponse.missing_snapshot_ids)
  return _s;
}
inline const std::string& ProcessTopologyResponse::_internal_missing_snapshot_ids(int index) const {
  return _impl_.missing_snapshot_ids_.Get(index);
}
inline const std::string& ProcessTopologyResponse::missing_snapshot_ids(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessTopologyResponse.missing_snapshot_ids)
  return _internal_missing_snapshot_ids(index);
}
inline std::string* ProcessTopologyResponse::mutable_missing_snapshot_ids(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessTopologyResponse.missing_snapshot_ids)
  return _impl_.missing_snapshot_ids_.Mutable(index);
}
inline void ProcessTopologyResponse::set_missing_snapshot_ids(int index, const std::string& value) {
  _impl_.missing_snapshot_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ProcessTopologyResponse.missing_snapshot_ids)
}
inline void ProcessTopologyResponse::set_missing_snapshot_ids(int index, std::string&& value) {
  _impl_.missing_snapshot_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ProcessTopologyResponse.missing_snapshot_ids)
}
inline void ProcessTopologyResponse::set_missing_snapshot_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.missing_snapshot_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bosdyn.api.graph_nav.ProcessTopologyResponse.missing_snapshot_ids)
}
inline void ProcessTopologyResponse::set_missing_snapshot_ids(int index, const char* value, size_t size) {
  _impl_.missing_snapshot_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.graph_nav.ProcessTopologyResponse.missing_snapshot_ids)
}
inline std::string* ProcessTopologyResponse::_internal_add_missing_snapshot_ids() {
  return _impl_.missing_snapshot_ids_.Add();
}
inline void ProcessTopologyResponse::add_missing_snapshot_ids(const std::string& value) {
  _impl_.missing_snapshot_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.ProcessTopologyResponse.missing_snapshot_ids)
}
inline void ProcessTopologyResponse::add_missing_snapshot_ids(std::string&& value) {
  _impl_.missing_snapshot_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.ProcessTopologyResponse.missing_snapshot_ids)
}
inline void ProcessTopologyResponse::add_missing_snapshot_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.missing_snapshot_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bosdyn.api.graph_nav.ProcessTopologyResponse.missing_snapshot_ids)
}
inline void ProcessTopologyResponse::add_missing_snapshot_ids(const char* value, size_t size) {
  _impl_.missing_snapshot_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bosdyn.api.graph_nav.ProcessTopologyResponse.missing_snapshot_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProcessTopologyResponse::missing_snapshot_ids() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.ProcessTopologyResponse.missing_snapshot_ids)
  return _impl_.missing_snapshot_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProcessTopologyResponse::mutable_missing_snapshot_ids() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.ProcessTopologyResponse.missing_snapshot_ids)
  return &_impl_.missing_snapshot_ids_;
}

// repeated string missing_waypoint_ids = 11;
inline int ProcessTopologyResponse::_internal_missing_waypoint_ids_size() const {
  return _impl_.missing_waypoint_ids_.size();
}
inline int ProcessTopologyResponse::missing_waypoint_ids_size() const {
  return _internal_missing_waypoint_ids_size();
}
inline void ProcessTopologyResponse::clear_missing_waypoint_ids() {
  _impl_.missing_waypoint_ids_.Clear();
}
inline std::string* ProcessTopologyResponse::add_missing_waypoint_ids() {
  std::string* _s = _internal_add_missing_waypoint_ids();
  // @@protoc_insertion_point(field_add_mutable:bosdyn.api.graph_nav.ProcessTopologyResponse.missing_waypoint_ids)
  return _s;
}
inline const std::string& ProcessTopologyResponse::_internal_missing_waypoint_ids(int index) const {
  return _impl_.missing_waypoint_ids_.Get(index);
}
inline const std::string& ProcessTopologyResponse::missing_waypoint_ids(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessTopologyResponse.missing_waypoint_ids)
  return _internal_missing_waypoint_ids(index);
}
inline std::string* ProcessTopologyResponse::mutable_missing_waypoint_ids(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessTopologyResponse.missing_waypoint_ids)
  return _impl_.missing_waypoint_ids_.Mutable(index);
}
inline void ProcessTopologyResponse::set_missing_waypoint_ids(int index, const std::string& value) {
  _impl_.missing_waypoint_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ProcessTopologyResponse.missing_waypoint_ids)
}
inline void ProcessTopologyResponse::set_missing_waypoint_ids(int index, std::string&& value) {
  _impl_.missing_waypoint_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ProcessTopologyResponse.missing_waypoint_ids)
}
inline void ProcessTopologyResponse::set_missing_waypoint_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.missing_waypoint_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bosdyn.api.graph_nav.ProcessTopologyResponse.missing_waypoint_ids)
}
inline void ProcessTopologyResponse::set_missing_waypoint_ids(int index, const char* value, size_t size) {
  _impl_.missing_waypoint_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.graph_nav.ProcessTopologyResponse.missing_waypoint_ids)
}
inline std::string* ProcessTopologyResponse::_internal_add_missing_waypoint_ids() {
  return _impl_.missing_waypoint_ids_.Add();
}
inline void ProcessTopologyResponse::add_missing_waypoint_ids(const std::string& value) {
  _impl_.missing_waypoint_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.ProcessTopologyResponse.missing_waypoint_ids)
}
inline void ProcessTopologyResponse::add_missing_waypoint_ids(std::string&& value) {
  _impl_.missing_waypoint_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.ProcessTopologyResponse.missing_waypoint_ids)
}
inline void ProcessTopologyResponse::add_missing_waypoint_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.missing_waypoint_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bosdyn.api.graph_nav.ProcessTopologyResponse.missing_waypoint_ids)
}
inline void ProcessTopologyResponse::add_missing_waypoint_ids(const char* value, size_t size) {
  _impl_.missing_waypoint_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bosdyn.api.graph_nav.ProcessTopologyResponse.missing_waypoint_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProcessTopologyResponse::missing_waypoint_ids() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.ProcessTopologyResponse.missing_waypoint_ids)
  return _impl_.missing_waypoint_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProcessTopologyResponse::mutable_missing_waypoint_ids() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.ProcessTopologyResponse.missing_waypoint_ids)
  return &_impl_.missing_waypoint_ids_;
}

// bool timed_out = 12;
inline void ProcessTopologyResponse::clear_timed_out() {
  _impl_.timed_out_ = false;
}
inline bool ProcessTopologyResponse::_internal_timed_out() const {
  return _impl_.timed_out_;
}
inline bool ProcessTopologyResponse::timed_out() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessTopologyResponse.timed_out)
  return _internal_timed_out();
}
inline void ProcessTopologyResponse::_internal_set_timed_out(bool value) {
  
  _impl_.timed_out_ = value;
}
inline void ProcessTopologyResponse::set_timed_out(bool value) {
  _internal_set_timed_out(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ProcessTopologyResponse.timed_out)
}

// -------------------------------------------------------------------

// PoseBounds

// double x_bounds = 1;
inline void PoseBounds::clear_x_bounds() {
  _impl_.x_bounds_ = 0;
}
inline double PoseBounds::_internal_x_bounds() const {
  return _impl_.x_bounds_;
}
inline double PoseBounds::x_bounds() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.PoseBounds.x_bounds)
  return _internal_x_bounds();
}
inline void PoseBounds::_internal_set_x_bounds(double value) {
  
  _impl_.x_bounds_ = value;
}
inline void PoseBounds::set_x_bounds(double value) {
  _internal_set_x_bounds(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.PoseBounds.x_bounds)
}

// double y_bounds = 2;
inline void PoseBounds::clear_y_bounds() {
  _impl_.y_bounds_ = 0;
}
inline double PoseBounds::_internal_y_bounds() const {
  return _impl_.y_bounds_;
}
inline double PoseBounds::y_bounds() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.PoseBounds.y_bounds)
  return _internal_y_bounds();
}
inline void PoseBounds::_internal_set_y_bounds(double value) {
  
  _impl_.y_bounds_ = value;
}
inline void PoseBounds::set_y_bounds(double value) {
  _internal_set_y_bounds(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.PoseBounds.y_bounds)
}

// double z_bounds = 3;
inline void PoseBounds::clear_z_bounds() {
  _impl_.z_bounds_ = 0;
}
inline double PoseBounds::_internal_z_bounds() const {
  return _impl_.z_bounds_;
}
inline double PoseBounds::z_bounds() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.PoseBounds.z_bounds)
  return _internal_z_bounds();
}
inline void PoseBounds::_internal_set_z_bounds(double value) {
  
  _impl_.z_bounds_ = value;
}
inline void PoseBounds::set_z_bounds(double value) {
  _internal_set_z_bounds(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.PoseBounds.z_bounds)
}

// double yaw_bounds = 4;
inline void PoseBounds::clear_yaw_bounds() {
  _impl_.yaw_bounds_ = 0;
}
inline double PoseBounds::_internal_yaw_bounds() const {
  return _impl_.yaw_bounds_;
}
inline double PoseBounds::yaw_bounds() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.PoseBounds.yaw_bounds)
  return _internal_yaw_bounds();
}
inline void PoseBounds::_internal_set_yaw_bounds(double value) {
  
  _impl_.yaw_bounds_ = value;
}
inline void PoseBounds::set_yaw_bounds(double value) {
  _internal_set_yaw_bounds(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.PoseBounds.yaw_bounds)
}

// -------------------------------------------------------------------

// AnchorHintUncertainty

// .bosdyn.api.SE3Covariance se3_covariance = 1;
inline bool AnchorHintUncertainty::_internal_has_se3_covariance() const {
  return uncertainty_case() == kSe3Covariance;
}
inline bool AnchorHintUncertainty::has_se3_covariance() const {
  return _internal_has_se3_covariance();
}
inline void AnchorHintUncertainty::set_has_se3_covariance() {
  _impl_._oneof_case_[0] = kSe3Covariance;
}
inline ::bosdyn::api::SE3Covariance* AnchorHintUncertainty::release_se3_covariance() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.AnchorHintUncertainty.se3_covariance)
  if (_internal_has_se3_covariance()) {
    clear_has_uncertainty();
    ::bosdyn::api::SE3Covariance* temp = _impl_.uncertainty_.se3_covariance_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.uncertainty_.se3_covariance_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::SE3Covariance& AnchorHintUncertainty::_internal_se3_covariance() const {
  return _internal_has_se3_covariance()
      ? *_impl_.uncertainty_.se3_covariance_
      : reinterpret_cast< ::bosdyn::api::SE3Covariance&>(::bosdyn::api::_SE3Covariance_default_instance_);
}
inline const ::bosdyn::api::SE3Covariance& AnchorHintUncertainty::se3_covariance() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.AnchorHintUncertainty.se3_covariance)
  return _internal_se3_covariance();
}
inline ::bosdyn::api::SE3Covariance* AnchorHintUncertainty::unsafe_arena_release_se3_covariance() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.graph_nav.AnchorHintUncertainty.se3_covariance)
  if (_internal_has_se3_covariance()) {
    clear_has_uncertainty();
    ::bosdyn::api::SE3Covariance* temp = _impl_.uncertainty_.se3_covariance_;
    _impl_.uncertainty_.se3_covariance_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnchorHintUncertainty::unsafe_arena_set_allocated_se3_covariance(::bosdyn::api::SE3Covariance* se3_covariance) {
  clear_uncertainty();
  if (se3_covariance) {
    set_has_se3_covariance();
    _impl_.uncertainty_.se3_covariance_ = se3_covariance;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.AnchorHintUncertainty.se3_covariance)
}
inline ::bosdyn::api::SE3Covariance* AnchorHintUncertainty::_internal_mutable_se3_covariance() {
  if (!_internal_has_se3_covariance()) {
    clear_uncertainty();
    set_has_se3_covariance();
    _impl_.uncertainty_.se3_covariance_ = CreateMaybeMessage< ::bosdyn::api::SE3Covariance >(GetArenaForAllocation());
  }
  return _impl_.uncertainty_.se3_covariance_;
}
inline ::bosdyn::api::SE3Covariance* AnchorHintUncertainty::mutable_se3_covariance() {
  ::bosdyn::api::SE3Covariance* _msg = _internal_mutable_se3_covariance();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.AnchorHintUncertainty.se3_covariance)
  return _msg;
}

// .bosdyn.api.graph_nav.PoseBounds confidence_bounds = 2;
inline bool AnchorHintUncertainty::_internal_has_confidence_bounds() const {
  return uncertainty_case() == kConfidenceBounds;
}
inline bool AnchorHintUncertainty::has_confidence_bounds() const {
  return _internal_has_confidence_bounds();
}
inline void AnchorHintUncertainty::set_has_confidence_bounds() {
  _impl_._oneof_case_[0] = kConfidenceBounds;
}
inline void AnchorHintUncertainty::clear_confidence_bounds() {
  if (_internal_has_confidence_bounds()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.uncertainty_.confidence_bounds_;
    }
    clear_has_uncertainty();
  }
}
inline ::bosdyn::api::graph_nav::PoseBounds* AnchorHintUncertainty::release_confidence_bounds() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.AnchorHintUncertainty.confidence_bounds)
  if (_internal_has_confidence_bounds()) {
    clear_has_uncertainty();
    ::bosdyn::api::graph_nav::PoseBounds* temp = _impl_.uncertainty_.confidence_bounds_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.uncertainty_.confidence_bounds_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::graph_nav::PoseBounds& AnchorHintUncertainty::_internal_confidence_bounds() const {
  return _internal_has_confidence_bounds()
      ? *_impl_.uncertainty_.confidence_bounds_
      : reinterpret_cast< ::bosdyn::api::graph_nav::PoseBounds&>(::bosdyn::api::graph_nav::_PoseBounds_default_instance_);
}
inline const ::bosdyn::api::graph_nav::PoseBounds& AnchorHintUncertainty::confidence_bounds() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.AnchorHintUncertainty.confidence_bounds)
  return _internal_confidence_bounds();
}
inline ::bosdyn::api::graph_nav::PoseBounds* AnchorHintUncertainty::unsafe_arena_release_confidence_bounds() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.graph_nav.AnchorHintUncertainty.confidence_bounds)
  if (_internal_has_confidence_bounds()) {
    clear_has_uncertainty();
    ::bosdyn::api::graph_nav::PoseBounds* temp = _impl_.uncertainty_.confidence_bounds_;
    _impl_.uncertainty_.confidence_bounds_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnchorHintUncertainty::unsafe_arena_set_allocated_confidence_bounds(::bosdyn::api::graph_nav::PoseBounds* confidence_bounds) {
  clear_uncertainty();
  if (confidence_bounds) {
    set_has_confidence_bounds();
    _impl_.uncertainty_.confidence_bounds_ = confidence_bounds;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.AnchorHintUncertainty.confidence_bounds)
}
inline ::bosdyn::api::graph_nav::PoseBounds* AnchorHintUncertainty::_internal_mutable_confidence_bounds() {
  if (!_internal_has_confidence_bounds()) {
    clear_uncertainty();
    set_has_confidence_bounds();
    _impl_.uncertainty_.confidence_bounds_ = CreateMaybeMessage< ::bosdyn::api::graph_nav::PoseBounds >(GetArenaForAllocation());
  }
  return _impl_.uncertainty_.confidence_bounds_;
}
inline ::bosdyn::api::graph_nav::PoseBounds* AnchorHintUncertainty::mutable_confidence_bounds() {
  ::bosdyn::api::graph_nav::PoseBounds* _msg = _internal_mutable_confidence_bounds();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.AnchorHintUncertainty.confidence_bounds)
  return _msg;
}

inline bool AnchorHintUncertainty::has_uncertainty() const {
  return uncertainty_case() != UNCERTAINTY_NOT_SET;
}
inline void AnchorHintUncertainty::clear_has_uncertainty() {
  _impl_._oneof_case_[0] = UNCERTAINTY_NOT_SET;
}
inline AnchorHintUncertainty::UncertaintyCase AnchorHintUncertainty::uncertainty_case() const {
  return AnchorHintUncertainty::UncertaintyCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// WaypointAnchorHint

// .bosdyn.api.graph_nav.Anchor waypoint_anchor = 1;
inline bool WaypointAnchorHint::_internal_has_waypoint_anchor() const {
  return this != internal_default_instance() && _impl_.waypoint_anchor_ != nullptr;
}
inline bool WaypointAnchorHint::has_waypoint_anchor() const {
  return _internal_has_waypoint_anchor();
}
inline const ::bosdyn::api::graph_nav::Anchor& WaypointAnchorHint::_internal_waypoint_anchor() const {
  const ::bosdyn::api::graph_nav::Anchor* p = _impl_.waypoint_anchor_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::graph_nav::Anchor&>(
      ::bosdyn::api::graph_nav::_Anchor_default_instance_);
}
inline const ::bosdyn::api::graph_nav::Anchor& WaypointAnchorHint::waypoint_anchor() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.WaypointAnchorHint.waypoint_anchor)
  return _internal_waypoint_anchor();
}
inline void WaypointAnchorHint::unsafe_arena_set_allocated_waypoint_anchor(
    ::bosdyn::api::graph_nav::Anchor* waypoint_anchor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.waypoint_anchor_);
  }
  _impl_.waypoint_anchor_ = waypoint_anchor;
  if (waypoint_anchor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.WaypointAnchorHint.waypoint_anchor)
}
inline ::bosdyn::api::graph_nav::Anchor* WaypointAnchorHint::release_waypoint_anchor() {
  
  ::bosdyn::api::graph_nav::Anchor* temp = _impl_.waypoint_anchor_;
  _impl_.waypoint_anchor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::graph_nav::Anchor* WaypointAnchorHint::unsafe_arena_release_waypoint_anchor() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.WaypointAnchorHint.waypoint_anchor)
  
  ::bosdyn::api::graph_nav::Anchor* temp = _impl_.waypoint_anchor_;
  _impl_.waypoint_anchor_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::Anchor* WaypointAnchorHint::_internal_mutable_waypoint_anchor() {
  
  if (_impl_.waypoint_anchor_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::Anchor>(GetArenaForAllocation());
    _impl_.waypoint_anchor_ = p;
  }
  return _impl_.waypoint_anchor_;
}
inline ::bosdyn::api::graph_nav::Anchor* WaypointAnchorHint::mutable_waypoint_anchor() {
  ::bosdyn::api::graph_nav::Anchor* _msg = _internal_mutable_waypoint_anchor();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.WaypointAnchorHint.waypoint_anchor)
  return _msg;
}
inline void WaypointAnchorHint::set_allocated_waypoint_anchor(::bosdyn::api::graph_nav::Anchor* waypoint_anchor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.waypoint_anchor_);
  }
  if (waypoint_anchor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(waypoint_anchor));
    if (message_arena != submessage_arena) {
      waypoint_anchor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, waypoint_anchor, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.waypoint_anchor_ = waypoint_anchor;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.WaypointAnchorHint.waypoint_anchor)
}

// .bosdyn.api.graph_nav.AnchorHintUncertainty seed_tform_waypoint_uncertainty = 2;
inline bool WaypointAnchorHint::_internal_has_seed_tform_waypoint_uncertainty() const {
  return this != internal_default_instance() && _impl_.seed_tform_waypoint_uncertainty_ != nullptr;
}
inline bool WaypointAnchorHint::has_seed_tform_waypoint_uncertainty() const {
  return _internal_has_seed_tform_waypoint_uncertainty();
}
inline void WaypointAnchorHint::clear_seed_tform_waypoint_uncertainty() {
  if (GetArenaForAllocation() == nullptr && _impl_.seed_tform_waypoint_uncertainty_ != nullptr) {
    delete _impl_.seed_tform_waypoint_uncertainty_;
  }
  _impl_.seed_tform_waypoint_uncertainty_ = nullptr;
}
inline const ::bosdyn::api::graph_nav::AnchorHintUncertainty& WaypointAnchorHint::_internal_seed_tform_waypoint_uncertainty() const {
  const ::bosdyn::api::graph_nav::AnchorHintUncertainty* p = _impl_.seed_tform_waypoint_uncertainty_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::graph_nav::AnchorHintUncertainty&>(
      ::bosdyn::api::graph_nav::_AnchorHintUncertainty_default_instance_);
}
inline const ::bosdyn::api::graph_nav::AnchorHintUncertainty& WaypointAnchorHint::seed_tform_waypoint_uncertainty() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.WaypointAnchorHint.seed_tform_waypoint_uncertainty)
  return _internal_seed_tform_waypoint_uncertainty();
}
inline void WaypointAnchorHint::unsafe_arena_set_allocated_seed_tform_waypoint_uncertainty(
    ::bosdyn::api::graph_nav::AnchorHintUncertainty* seed_tform_waypoint_uncertainty) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.seed_tform_waypoint_uncertainty_);
  }
  _impl_.seed_tform_waypoint_uncertainty_ = seed_tform_waypoint_uncertainty;
  if (seed_tform_waypoint_uncertainty) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.WaypointAnchorHint.seed_tform_waypoint_uncertainty)
}
inline ::bosdyn::api::graph_nav::AnchorHintUncertainty* WaypointAnchorHint::release_seed_tform_waypoint_uncertainty() {
  
  ::bosdyn::api::graph_nav::AnchorHintUncertainty* temp = _impl_.seed_tform_waypoint_uncertainty_;
  _impl_.seed_tform_waypoint_uncertainty_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::graph_nav::AnchorHintUncertainty* WaypointAnchorHint::unsafe_arena_release_seed_tform_waypoint_uncertainty() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.WaypointAnchorHint.seed_tform_waypoint_uncertainty)
  
  ::bosdyn::api::graph_nav::AnchorHintUncertainty* temp = _impl_.seed_tform_waypoint_uncertainty_;
  _impl_.seed_tform_waypoint_uncertainty_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::AnchorHintUncertainty* WaypointAnchorHint::_internal_mutable_seed_tform_waypoint_uncertainty() {
  
  if (_impl_.seed_tform_waypoint_uncertainty_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::AnchorHintUncertainty>(GetArenaForAllocation());
    _impl_.seed_tform_waypoint_uncertainty_ = p;
  }
  return _impl_.seed_tform_waypoint_uncertainty_;
}
inline ::bosdyn::api::graph_nav::AnchorHintUncertainty* WaypointAnchorHint::mutable_seed_tform_waypoint_uncertainty() {
  ::bosdyn::api::graph_nav::AnchorHintUncertainty* _msg = _internal_mutable_seed_tform_waypoint_uncertainty();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.WaypointAnchorHint.seed_tform_waypoint_uncertainty)
  return _msg;
}
inline void WaypointAnchorHint::set_allocated_seed_tform_waypoint_uncertainty(::bosdyn::api::graph_nav::AnchorHintUncertainty* seed_tform_waypoint_uncertainty) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.seed_tform_waypoint_uncertainty_;
  }
  if (seed_tform_waypoint_uncertainty) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(seed_tform_waypoint_uncertainty);
    if (message_arena != submessage_arena) {
      seed_tform_waypoint_uncertainty = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seed_tform_waypoint_uncertainty, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.seed_tform_waypoint_uncertainty_ = seed_tform_waypoint_uncertainty;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.WaypointAnchorHint.seed_tform_waypoint_uncertainty)
}

// .bosdyn.api.graph_nav.PoseBounds seed_tform_waypoint_constraint = 3;
inline bool WaypointAnchorHint::_internal_has_seed_tform_waypoint_constraint() const {
  return this != internal_default_instance() && _impl_.seed_tform_waypoint_constraint_ != nullptr;
}
inline bool WaypointAnchorHint::has_seed_tform_waypoint_constraint() const {
  return _internal_has_seed_tform_waypoint_constraint();
}
inline void WaypointAnchorHint::clear_seed_tform_waypoint_constraint() {
  if (GetArenaForAllocation() == nullptr && _impl_.seed_tform_waypoint_constraint_ != nullptr) {
    delete _impl_.seed_tform_waypoint_constraint_;
  }
  _impl_.seed_tform_waypoint_constraint_ = nullptr;
}
inline const ::bosdyn::api::graph_nav::PoseBounds& WaypointAnchorHint::_internal_seed_tform_waypoint_constraint() const {
  const ::bosdyn::api::graph_nav::PoseBounds* p = _impl_.seed_tform_waypoint_constraint_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::graph_nav::PoseBounds&>(
      ::bosdyn::api::graph_nav::_PoseBounds_default_instance_);
}
inline const ::bosdyn::api::graph_nav::PoseBounds& WaypointAnchorHint::seed_tform_waypoint_constraint() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.WaypointAnchorHint.seed_tform_waypoint_constraint)
  return _internal_seed_tform_waypoint_constraint();
}
inline void WaypointAnchorHint::unsafe_arena_set_allocated_seed_tform_waypoint_constraint(
    ::bosdyn::api::graph_nav::PoseBounds* seed_tform_waypoint_constraint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.seed_tform_waypoint_constraint_);
  }
  _impl_.seed_tform_waypoint_constraint_ = seed_tform_waypoint_constraint;
  if (seed_tform_waypoint_constraint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.WaypointAnchorHint.seed_tform_waypoint_constraint)
}
inline ::bosdyn::api::graph_nav::PoseBounds* WaypointAnchorHint::release_seed_tform_waypoint_constraint() {
  
  ::bosdyn::api::graph_nav::PoseBounds* temp = _impl_.seed_tform_waypoint_constraint_;
  _impl_.seed_tform_waypoint_constraint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::graph_nav::PoseBounds* WaypointAnchorHint::unsafe_arena_release_seed_tform_waypoint_constraint() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.WaypointAnchorHint.seed_tform_waypoint_constraint)
  
  ::bosdyn::api::graph_nav::PoseBounds* temp = _impl_.seed_tform_waypoint_constraint_;
  _impl_.seed_tform_waypoint_constraint_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::PoseBounds* WaypointAnchorHint::_internal_mutable_seed_tform_waypoint_constraint() {
  
  if (_impl_.seed_tform_waypoint_constraint_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::PoseBounds>(GetArenaForAllocation());
    _impl_.seed_tform_waypoint_constraint_ = p;
  }
  return _impl_.seed_tform_waypoint_constraint_;
}
inline ::bosdyn::api::graph_nav::PoseBounds* WaypointAnchorHint::mutable_seed_tform_waypoint_constraint() {
  ::bosdyn::api::graph_nav::PoseBounds* _msg = _internal_mutable_seed_tform_waypoint_constraint();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.WaypointAnchorHint.seed_tform_waypoint_constraint)
  return _msg;
}
inline void WaypointAnchorHint::set_allocated_seed_tform_waypoint_constraint(::bosdyn::api::graph_nav::PoseBounds* seed_tform_waypoint_constraint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.seed_tform_waypoint_constraint_;
  }
  if (seed_tform_waypoint_constraint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(seed_tform_waypoint_constraint);
    if (message_arena != submessage_arena) {
      seed_tform_waypoint_constraint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seed_tform_waypoint_constraint, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.seed_tform_waypoint_constraint_ = seed_tform_waypoint_constraint;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.WaypointAnchorHint.seed_tform_waypoint_constraint)
}

// -------------------------------------------------------------------

// WorldObjectAnchorHint

// .bosdyn.api.graph_nav.AnchoredWorldObject object_anchor = 1;
inline bool WorldObjectAnchorHint::_internal_has_object_anchor() const {
  return this != internal_default_instance() && _impl_.object_anchor_ != nullptr;
}
inline bool WorldObjectAnchorHint::has_object_anchor() const {
  return _internal_has_object_anchor();
}
inline const ::bosdyn::api::graph_nav::AnchoredWorldObject& WorldObjectAnchorHint::_internal_object_anchor() const {
  const ::bosdyn::api::graph_nav::AnchoredWorldObject* p = _impl_.object_anchor_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::graph_nav::AnchoredWorldObject&>(
      ::bosdyn::api::graph_nav::_AnchoredWorldObject_default_instance_);
}
inline const ::bosdyn::api::graph_nav::AnchoredWorldObject& WorldObjectAnchorHint::object_anchor() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.WorldObjectAnchorHint.object_anchor)
  return _internal_object_anchor();
}
inline void WorldObjectAnchorHint::unsafe_arena_set_allocated_object_anchor(
    ::bosdyn::api::graph_nav::AnchoredWorldObject* object_anchor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.object_anchor_);
  }
  _impl_.object_anchor_ = object_anchor;
  if (object_anchor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.WorldObjectAnchorHint.object_anchor)
}
inline ::bosdyn::api::graph_nav::AnchoredWorldObject* WorldObjectAnchorHint::release_object_anchor() {
  
  ::bosdyn::api::graph_nav::AnchoredWorldObject* temp = _impl_.object_anchor_;
  _impl_.object_anchor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::graph_nav::AnchoredWorldObject* WorldObjectAnchorHint::unsafe_arena_release_object_anchor() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.WorldObjectAnchorHint.object_anchor)
  
  ::bosdyn::api::graph_nav::AnchoredWorldObject* temp = _impl_.object_anchor_;
  _impl_.object_anchor_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::AnchoredWorldObject* WorldObjectAnchorHint::_internal_mutable_object_anchor() {
  
  if (_impl_.object_anchor_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::AnchoredWorldObject>(GetArenaForAllocation());
    _impl_.object_anchor_ = p;
  }
  return _impl_.object_anchor_;
}
inline ::bosdyn::api::graph_nav::AnchoredWorldObject* WorldObjectAnchorHint::mutable_object_anchor() {
  ::bosdyn::api::graph_nav::AnchoredWorldObject* _msg = _internal_mutable_object_anchor();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.WorldObjectAnchorHint.object_anchor)
  return _msg;
}
inline void WorldObjectAnchorHint::set_allocated_object_anchor(::bosdyn::api::graph_nav::AnchoredWorldObject* object_anchor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.object_anchor_);
  }
  if (object_anchor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_anchor));
    if (message_arena != submessage_arena) {
      object_anchor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_anchor, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.object_anchor_ = object_anchor;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.WorldObjectAnchorHint.object_anchor)
}

// .bosdyn.api.graph_nav.AnchorHintUncertainty seed_tform_object_uncertainty = 2;
inline bool WorldObjectAnchorHint::_internal_has_seed_tform_object_uncertainty() const {
  return this != internal_default_instance() && _impl_.seed_tform_object_uncertainty_ != nullptr;
}
inline bool WorldObjectAnchorHint::has_seed_tform_object_uncertainty() const {
  return _internal_has_seed_tform_object_uncertainty();
}
inline void WorldObjectAnchorHint::clear_seed_tform_object_uncertainty() {
  if (GetArenaForAllocation() == nullptr && _impl_.seed_tform_object_uncertainty_ != nullptr) {
    delete _impl_.seed_tform_object_uncertainty_;
  }
  _impl_.seed_tform_object_uncertainty_ = nullptr;
}
inline const ::bosdyn::api::graph_nav::AnchorHintUncertainty& WorldObjectAnchorHint::_internal_seed_tform_object_uncertainty() const {
  const ::bosdyn::api::graph_nav::AnchorHintUncertainty* p = _impl_.seed_tform_object_uncertainty_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::graph_nav::AnchorHintUncertainty&>(
      ::bosdyn::api::graph_nav::_AnchorHintUncertainty_default_instance_);
}
inline const ::bosdyn::api::graph_nav::AnchorHintUncertainty& WorldObjectAnchorHint::seed_tform_object_uncertainty() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.WorldObjectAnchorHint.seed_tform_object_uncertainty)
  return _internal_seed_tform_object_uncertainty();
}
inline void WorldObjectAnchorHint::unsafe_arena_set_allocated_seed_tform_object_uncertainty(
    ::bosdyn::api::graph_nav::AnchorHintUncertainty* seed_tform_object_uncertainty) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.seed_tform_object_uncertainty_);
  }
  _impl_.seed_tform_object_uncertainty_ = seed_tform_object_uncertainty;
  if (seed_tform_object_uncertainty) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.WorldObjectAnchorHint.seed_tform_object_uncertainty)
}
inline ::bosdyn::api::graph_nav::AnchorHintUncertainty* WorldObjectAnchorHint::release_seed_tform_object_uncertainty() {
  
  ::bosdyn::api::graph_nav::AnchorHintUncertainty* temp = _impl_.seed_tform_object_uncertainty_;
  _impl_.seed_tform_object_uncertainty_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::graph_nav::AnchorHintUncertainty* WorldObjectAnchorHint::unsafe_arena_release_seed_tform_object_uncertainty() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.WorldObjectAnchorHint.seed_tform_object_uncertainty)
  
  ::bosdyn::api::graph_nav::AnchorHintUncertainty* temp = _impl_.seed_tform_object_uncertainty_;
  _impl_.seed_tform_object_uncertainty_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::AnchorHintUncertainty* WorldObjectAnchorHint::_internal_mutable_seed_tform_object_uncertainty() {
  
  if (_impl_.seed_tform_object_uncertainty_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::AnchorHintUncertainty>(GetArenaForAllocation());
    _impl_.seed_tform_object_uncertainty_ = p;
  }
  return _impl_.seed_tform_object_uncertainty_;
}
inline ::bosdyn::api::graph_nav::AnchorHintUncertainty* WorldObjectAnchorHint::mutable_seed_tform_object_uncertainty() {
  ::bosdyn::api::graph_nav::AnchorHintUncertainty* _msg = _internal_mutable_seed_tform_object_uncertainty();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.WorldObjectAnchorHint.seed_tform_object_uncertainty)
  return _msg;
}
inline void WorldObjectAnchorHint::set_allocated_seed_tform_object_uncertainty(::bosdyn::api::graph_nav::AnchorHintUncertainty* seed_tform_object_uncertainty) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.seed_tform_object_uncertainty_;
  }
  if (seed_tform_object_uncertainty) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(seed_tform_object_uncertainty);
    if (message_arena != submessage_arena) {
      seed_tform_object_uncertainty = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seed_tform_object_uncertainty, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.seed_tform_object_uncertainty_ = seed_tform_object_uncertainty;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.WorldObjectAnchorHint.seed_tform_object_uncertainty)
}

// .bosdyn.api.graph_nav.PoseBounds seed_tform_object_constraint = 3;
inline bool WorldObjectAnchorHint::_internal_has_seed_tform_object_constraint() const {
  return this != internal_default_instance() && _impl_.seed_tform_object_constraint_ != nullptr;
}
inline bool WorldObjectAnchorHint::has_seed_tform_object_constraint() const {
  return _internal_has_seed_tform_object_constraint();
}
inline void WorldObjectAnchorHint::clear_seed_tform_object_constraint() {
  if (GetArenaForAllocation() == nullptr && _impl_.seed_tform_object_constraint_ != nullptr) {
    delete _impl_.seed_tform_object_constraint_;
  }
  _impl_.seed_tform_object_constraint_ = nullptr;
}
inline const ::bosdyn::api::graph_nav::PoseBounds& WorldObjectAnchorHint::_internal_seed_tform_object_constraint() const {
  const ::bosdyn::api::graph_nav::PoseBounds* p = _impl_.seed_tform_object_constraint_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::graph_nav::PoseBounds&>(
      ::bosdyn::api::graph_nav::_PoseBounds_default_instance_);
}
inline const ::bosdyn::api::graph_nav::PoseBounds& WorldObjectAnchorHint::seed_tform_object_constraint() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.WorldObjectAnchorHint.seed_tform_object_constraint)
  return _internal_seed_tform_object_constraint();
}
inline void WorldObjectAnchorHint::unsafe_arena_set_allocated_seed_tform_object_constraint(
    ::bosdyn::api::graph_nav::PoseBounds* seed_tform_object_constraint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.seed_tform_object_constraint_);
  }
  _impl_.seed_tform_object_constraint_ = seed_tform_object_constraint;
  if (seed_tform_object_constraint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.WorldObjectAnchorHint.seed_tform_object_constraint)
}
inline ::bosdyn::api::graph_nav::PoseBounds* WorldObjectAnchorHint::release_seed_tform_object_constraint() {
  
  ::bosdyn::api::graph_nav::PoseBounds* temp = _impl_.seed_tform_object_constraint_;
  _impl_.seed_tform_object_constraint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::graph_nav::PoseBounds* WorldObjectAnchorHint::unsafe_arena_release_seed_tform_object_constraint() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.WorldObjectAnchorHint.seed_tform_object_constraint)
  
  ::bosdyn::api::graph_nav::PoseBounds* temp = _impl_.seed_tform_object_constraint_;
  _impl_.seed_tform_object_constraint_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::PoseBounds* WorldObjectAnchorHint::_internal_mutable_seed_tform_object_constraint() {
  
  if (_impl_.seed_tform_object_constraint_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::PoseBounds>(GetArenaForAllocation());
    _impl_.seed_tform_object_constraint_ = p;
  }
  return _impl_.seed_tform_object_constraint_;
}
inline ::bosdyn::api::graph_nav::PoseBounds* WorldObjectAnchorHint::mutable_seed_tform_object_constraint() {
  ::bosdyn::api::graph_nav::PoseBounds* _msg = _internal_mutable_seed_tform_object_constraint();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.WorldObjectAnchorHint.seed_tform_object_constraint)
  return _msg;
}
inline void WorldObjectAnchorHint::set_allocated_seed_tform_object_constraint(::bosdyn::api::graph_nav::PoseBounds* seed_tform_object_constraint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.seed_tform_object_constraint_;
  }
  if (seed_tform_object_constraint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(seed_tform_object_constraint);
    if (message_arena != submessage_arena) {
      seed_tform_object_constraint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seed_tform_object_constraint, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.seed_tform_object_constraint_ = seed_tform_object_constraint;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.WorldObjectAnchorHint.seed_tform_object_constraint)
}

// -------------------------------------------------------------------

// AnchoringHint

// repeated .bosdyn.api.graph_nav.WaypointAnchorHint waypoint_anchors = 1;
inline int AnchoringHint::_internal_waypoint_anchors_size() const {
  return _impl_.waypoint_anchors_.size();
}
inline int AnchoringHint::waypoint_anchors_size() const {
  return _internal_waypoint_anchors_size();
}
inline void AnchoringHint::clear_waypoint_anchors() {
  _impl_.waypoint_anchors_.Clear();
}
inline ::bosdyn::api::graph_nav::WaypointAnchorHint* AnchoringHint::mutable_waypoint_anchors(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.AnchoringHint.waypoint_anchors)
  return _impl_.waypoint_anchors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::WaypointAnchorHint >*
AnchoringHint::mutable_waypoint_anchors() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.AnchoringHint.waypoint_anchors)
  return &_impl_.waypoint_anchors_;
}
inline const ::bosdyn::api::graph_nav::WaypointAnchorHint& AnchoringHint::_internal_waypoint_anchors(int index) const {
  return _impl_.waypoint_anchors_.Get(index);
}
inline const ::bosdyn::api::graph_nav::WaypointAnchorHint& AnchoringHint::waypoint_anchors(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.AnchoringHint.waypoint_anchors)
  return _internal_waypoint_anchors(index);
}
inline ::bosdyn::api::graph_nav::WaypointAnchorHint* AnchoringHint::_internal_add_waypoint_anchors() {
  return _impl_.waypoint_anchors_.Add();
}
inline ::bosdyn::api::graph_nav::WaypointAnchorHint* AnchoringHint::add_waypoint_anchors() {
  ::bosdyn::api::graph_nav::WaypointAnchorHint* _add = _internal_add_waypoint_anchors();
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.AnchoringHint.waypoint_anchors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::WaypointAnchorHint >&
AnchoringHint::waypoint_anchors() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.AnchoringHint.waypoint_anchors)
  return _impl_.waypoint_anchors_;
}

// repeated .bosdyn.api.graph_nav.WorldObjectAnchorHint world_objects = 2;
inline int AnchoringHint::_internal_world_objects_size() const {
  return _impl_.world_objects_.size();
}
inline int AnchoringHint::world_objects_size() const {
  return _internal_world_objects_size();
}
inline void AnchoringHint::clear_world_objects() {
  _impl_.world_objects_.Clear();
}
inline ::bosdyn::api::graph_nav::WorldObjectAnchorHint* AnchoringHint::mutable_world_objects(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.AnchoringHint.world_objects)
  return _impl_.world_objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::WorldObjectAnchorHint >*
AnchoringHint::mutable_world_objects() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.AnchoringHint.world_objects)
  return &_impl_.world_objects_;
}
inline const ::bosdyn::api::graph_nav::WorldObjectAnchorHint& AnchoringHint::_internal_world_objects(int index) const {
  return _impl_.world_objects_.Get(index);
}
inline const ::bosdyn::api::graph_nav::WorldObjectAnchorHint& AnchoringHint::world_objects(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.AnchoringHint.world_objects)
  return _internal_world_objects(index);
}
inline ::bosdyn::api::graph_nav::WorldObjectAnchorHint* AnchoringHint::_internal_add_world_objects() {
  return _impl_.world_objects_.Add();
}
inline ::bosdyn::api::graph_nav::WorldObjectAnchorHint* AnchoringHint::add_world_objects() {
  ::bosdyn::api::graph_nav::WorldObjectAnchorHint* _add = _internal_add_world_objects();
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.AnchoringHint.world_objects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::WorldObjectAnchorHint >&
AnchoringHint::world_objects() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.AnchoringHint.world_objects)
  return _impl_.world_objects_;
}

// -------------------------------------------------------------------

// ProcessAnchoringRequest_Params_OptimizerParams

// .google.protobuf.Int32Value max_iters = 1;
inline bool ProcessAnchoringRequest_Params_OptimizerParams::_internal_has_max_iters() const {
  return this != internal_default_instance() && _impl_.max_iters_ != nullptr;
}
inline bool ProcessAnchoringRequest_Params_OptimizerParams::has_max_iters() const {
  return _internal_has_max_iters();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& ProcessAnchoringRequest_Params_OptimizerParams::_internal_max_iters() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.max_iters_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& ProcessAnchoringRequest_Params_OptimizerParams::max_iters() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.OptimizerParams.max_iters)
  return _internal_max_iters();
}
inline void ProcessAnchoringRequest_Params_OptimizerParams::unsafe_arena_set_allocated_max_iters(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* max_iters) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_iters_);
  }
  _impl_.max_iters_ = max_iters;
  if (max_iters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.OptimizerParams.max_iters)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ProcessAnchoringRequest_Params_OptimizerParams::release_max_iters() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.max_iters_;
  _impl_.max_iters_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ProcessAnchoringRequest_Params_OptimizerParams::unsafe_arena_release_max_iters() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.OptimizerParams.max_iters)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.max_iters_;
  _impl_.max_iters_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ProcessAnchoringRequest_Params_OptimizerParams::_internal_mutable_max_iters() {
  
  if (_impl_.max_iters_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.max_iters_ = p;
  }
  return _impl_.max_iters_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ProcessAnchoringRequest_Params_OptimizerParams::mutable_max_iters() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_max_iters();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.OptimizerParams.max_iters)
  return _msg;
}
inline void ProcessAnchoringRequest_Params_OptimizerParams::set_allocated_max_iters(::PROTOBUF_NAMESPACE_ID::Int32Value* max_iters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_iters_);
  }
  if (max_iters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_iters));
    if (message_arena != submessage_arena) {
      max_iters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_iters, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_iters_ = max_iters;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.OptimizerParams.max_iters)
}

// .google.protobuf.DoubleValue max_time_seconds = 2;
inline bool ProcessAnchoringRequest_Params_OptimizerParams::_internal_has_max_time_seconds() const {
  return this != internal_default_instance() && _impl_.max_time_seconds_ != nullptr;
}
inline bool ProcessAnchoringRequest_Params_OptimizerParams::has_max_time_seconds() const {
  return _internal_has_max_time_seconds();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ProcessAnchoringRequest_Params_OptimizerParams::_internal_max_time_seconds() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.max_time_seconds_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ProcessAnchoringRequest_Params_OptimizerParams::max_time_seconds() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.OptimizerParams.max_time_seconds)
  return _internal_max_time_seconds();
}
inline void ProcessAnchoringRequest_Params_OptimizerParams::unsafe_arena_set_allocated_max_time_seconds(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_time_seconds) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_time_seconds_);
  }
  _impl_.max_time_seconds_ = max_time_seconds;
  if (max_time_seconds) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.OptimizerParams.max_time_seconds)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessAnchoringRequest_Params_OptimizerParams::release_max_time_seconds() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_time_seconds_;
  _impl_.max_time_seconds_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessAnchoringRequest_Params_OptimizerParams::unsafe_arena_release_max_time_seconds() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.OptimizerParams.max_time_seconds)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_time_seconds_;
  _impl_.max_time_seconds_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessAnchoringRequest_Params_OptimizerParams::_internal_mutable_max_time_seconds() {
  
  if (_impl_.max_time_seconds_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.max_time_seconds_ = p;
  }
  return _impl_.max_time_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ProcessAnchoringRequest_Params_OptimizerParams::mutable_max_time_seconds() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_max_time_seconds();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.OptimizerParams.max_time_seconds)
  return _msg;
}
inline void ProcessAnchoringRequest_Params_OptimizerParams::set_allocated_max_time_seconds(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_time_seconds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_time_seconds_);
  }
  if (max_time_seconds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_time_seconds));
    if (message_arena != submessage_arena) {
      max_time_seconds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_time_seconds, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_time_seconds_ = max_time_seconds;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.OptimizerParams.max_time_seconds)
}

// -------------------------------------------------------------------

// ProcessAnchoringRequest_Params_MeasurementParams

// .google.protobuf.BoolValue use_kinematic_odometry = 1;
inline bool ProcessAnchoringRequest_Params_MeasurementParams::_internal_has_use_kinematic_odometry() const {
  return this != internal_default_instance() && _impl_.use_kinematic_odometry_ != nullptr;
}
inline bool ProcessAnchoringRequest_Params_MeasurementParams::has_use_kinematic_odometry() const {
  return _internal_has_use_kinematic_odometry();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& ProcessAnchoringRequest_Params_MeasurementParams::_internal_use_kinematic_odometry() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.use_kinematic_odometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& ProcessAnchoringRequest_Params_MeasurementParams::use_kinematic_odometry() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams.use_kinematic_odometry)
  return _internal_use_kinematic_odometry();
}
inline void ProcessAnchoringRequest_Params_MeasurementParams::unsafe_arena_set_allocated_use_kinematic_odometry(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* use_kinematic_odometry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.use_kinematic_odometry_);
  }
  _impl_.use_kinematic_odometry_ = use_kinematic_odometry;
  if (use_kinematic_odometry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams.use_kinematic_odometry)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessAnchoringRequest_Params_MeasurementParams::release_use_kinematic_odometry() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.use_kinematic_odometry_;
  _impl_.use_kinematic_odometry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessAnchoringRequest_Params_MeasurementParams::unsafe_arena_release_use_kinematic_odometry() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams.use_kinematic_odometry)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.use_kinematic_odometry_;
  _impl_.use_kinematic_odometry_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessAnchoringRequest_Params_MeasurementParams::_internal_mutable_use_kinematic_odometry() {
  
  if (_impl_.use_kinematic_odometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.use_kinematic_odometry_ = p;
  }
  return _impl_.use_kinematic_odometry_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessAnchoringRequest_Params_MeasurementParams::mutable_use_kinematic_odometry() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_use_kinematic_odometry();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams.use_kinematic_odometry)
  return _msg;
}
inline void ProcessAnchoringRequest_Params_MeasurementParams::set_allocated_use_kinematic_odometry(::PROTOBUF_NAMESPACE_ID::BoolValue* use_kinematic_odometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.use_kinematic_odometry_);
  }
  if (use_kinematic_odometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(use_kinematic_odometry));
    if (message_arena != submessage_arena) {
      use_kinematic_odometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, use_kinematic_odometry, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.use_kinematic_odometry_ = use_kinematic_odometry;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams.use_kinematic_odometry)
}

// .google.protobuf.BoolValue use_visual_odometry = 2;
inline bool ProcessAnchoringRequest_Params_MeasurementParams::_internal_has_use_visual_odometry() const {
  return this != internal_default_instance() && _impl_.use_visual_odometry_ != nullptr;
}
inline bool ProcessAnchoringRequest_Params_MeasurementParams::has_use_visual_odometry() const {
  return _internal_has_use_visual_odometry();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& ProcessAnchoringRequest_Params_MeasurementParams::_internal_use_visual_odometry() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.use_visual_odometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& ProcessAnchoringRequest_Params_MeasurementParams::use_visual_odometry() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams.use_visual_odometry)
  return _internal_use_visual_odometry();
}
inline void ProcessAnchoringRequest_Params_MeasurementParams::unsafe_arena_set_allocated_use_visual_odometry(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* use_visual_odometry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.use_visual_odometry_);
  }
  _impl_.use_visual_odometry_ = use_visual_odometry;
  if (use_visual_odometry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams.use_visual_odometry)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessAnchoringRequest_Params_MeasurementParams::release_use_visual_odometry() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.use_visual_odometry_;
  _impl_.use_visual_odometry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessAnchoringRequest_Params_MeasurementParams::unsafe_arena_release_use_visual_odometry() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams.use_visual_odometry)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.use_visual_odometry_;
  _impl_.use_visual_odometry_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessAnchoringRequest_Params_MeasurementParams::_internal_mutable_use_visual_odometry() {
  
  if (_impl_.use_visual_odometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.use_visual_odometry_ = p;
  }
  return _impl_.use_visual_odometry_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessAnchoringRequest_Params_MeasurementParams::mutable_use_visual_odometry() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_use_visual_odometry();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams.use_visual_odometry)
  return _msg;
}
inline void ProcessAnchoringRequest_Params_MeasurementParams::set_allocated_use_visual_odometry(::PROTOBUF_NAMESPACE_ID::BoolValue* use_visual_odometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.use_visual_odometry_);
  }
  if (use_visual_odometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(use_visual_odometry));
    if (message_arena != submessage_arena) {
      use_visual_odometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, use_visual_odometry, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.use_visual_odometry_ = use_visual_odometry;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams.use_visual_odometry)
}

// .google.protobuf.BoolValue use_gyroscope_measurements = 3;
inline bool ProcessAnchoringRequest_Params_MeasurementParams::_internal_has_use_gyroscope_measurements() const {
  return this != internal_default_instance() && _impl_.use_gyroscope_measurements_ != nullptr;
}
inline bool ProcessAnchoringRequest_Params_MeasurementParams::has_use_gyroscope_measurements() const {
  return _internal_has_use_gyroscope_measurements();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& ProcessAnchoringRequest_Params_MeasurementParams::_internal_use_gyroscope_measurements() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.use_gyroscope_measurements_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& ProcessAnchoringRequest_Params_MeasurementParams::use_gyroscope_measurements() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams.use_gyroscope_measurements)
  return _internal_use_gyroscope_measurements();
}
inline void ProcessAnchoringRequest_Params_MeasurementParams::unsafe_arena_set_allocated_use_gyroscope_measurements(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* use_gyroscope_measurements) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.use_gyroscope_measurements_);
  }
  _impl_.use_gyroscope_measurements_ = use_gyroscope_measurements;
  if (use_gyroscope_measurements) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams.use_gyroscope_measurements)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessAnchoringRequest_Params_MeasurementParams::release_use_gyroscope_measurements() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.use_gyroscope_measurements_;
  _impl_.use_gyroscope_measurements_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessAnchoringRequest_Params_MeasurementParams::unsafe_arena_release_use_gyroscope_measurements() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams.use_gyroscope_measurements)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.use_gyroscope_measurements_;
  _impl_.use_gyroscope_measurements_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessAnchoringRequest_Params_MeasurementParams::_internal_mutable_use_gyroscope_measurements() {
  
  if (_impl_.use_gyroscope_measurements_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.use_gyroscope_measurements_ = p;
  }
  return _impl_.use_gyroscope_measurements_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessAnchoringRequest_Params_MeasurementParams::mutable_use_gyroscope_measurements() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_use_gyroscope_measurements();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams.use_gyroscope_measurements)
  return _msg;
}
inline void ProcessAnchoringRequest_Params_MeasurementParams::set_allocated_use_gyroscope_measurements(::PROTOBUF_NAMESPACE_ID::BoolValue* use_gyroscope_measurements) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.use_gyroscope_measurements_);
  }
  if (use_gyroscope_measurements) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(use_gyroscope_measurements));
    if (message_arena != submessage_arena) {
      use_gyroscope_measurements = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, use_gyroscope_measurements, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.use_gyroscope_measurements_ = use_gyroscope_measurements;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams.use_gyroscope_measurements)
}

// .google.protobuf.BoolValue use_loop_closures = 4;
inline bool ProcessAnchoringRequest_Params_MeasurementParams::_internal_has_use_loop_closures() const {
  return this != internal_default_instance() && _impl_.use_loop_closures_ != nullptr;
}
inline bool ProcessAnchoringRequest_Params_MeasurementParams::has_use_loop_closures() const {
  return _internal_has_use_loop_closures();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& ProcessAnchoringRequest_Params_MeasurementParams::_internal_use_loop_closures() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.use_loop_closures_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& ProcessAnchoringRequest_Params_MeasurementParams::use_loop_closures() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams.use_loop_closures)
  return _internal_use_loop_closures();
}
inline void ProcessAnchoringRequest_Params_MeasurementParams::unsafe_arena_set_allocated_use_loop_closures(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* use_loop_closures) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.use_loop_closures_);
  }
  _impl_.use_loop_closures_ = use_loop_closures;
  if (use_loop_closures) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams.use_loop_closures)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessAnchoringRequest_Params_MeasurementParams::release_use_loop_closures() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.use_loop_closures_;
  _impl_.use_loop_closures_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessAnchoringRequest_Params_MeasurementParams::unsafe_arena_release_use_loop_closures() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams.use_loop_closures)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.use_loop_closures_;
  _impl_.use_loop_closures_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessAnchoringRequest_Params_MeasurementParams::_internal_mutable_use_loop_closures() {
  
  if (_impl_.use_loop_closures_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.use_loop_closures_ = p;
  }
  return _impl_.use_loop_closures_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessAnchoringRequest_Params_MeasurementParams::mutable_use_loop_closures() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_use_loop_closures();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams.use_loop_closures)
  return _msg;
}
inline void ProcessAnchoringRequest_Params_MeasurementParams::set_allocated_use_loop_closures(::PROTOBUF_NAMESPACE_ID::BoolValue* use_loop_closures) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.use_loop_closures_);
  }
  if (use_loop_closures) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(use_loop_closures));
    if (message_arena != submessage_arena) {
      use_loop_closures = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, use_loop_closures, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.use_loop_closures_ = use_loop_closures;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams.use_loop_closures)
}

// .google.protobuf.BoolValue use_world_objects = 5;
inline bool ProcessAnchoringRequest_Params_MeasurementParams::_internal_has_use_world_objects() const {
  return this != internal_default_instance() && _impl_.use_world_objects_ != nullptr;
}
inline bool ProcessAnchoringRequest_Params_MeasurementParams::has_use_world_objects() const {
  return _internal_has_use_world_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& ProcessAnchoringRequest_Params_MeasurementParams::_internal_use_world_objects() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.use_world_objects_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& ProcessAnchoringRequest_Params_MeasurementParams::use_world_objects() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams.use_world_objects)
  return _internal_use_world_objects();
}
inline void ProcessAnchoringRequest_Params_MeasurementParams::unsafe_arena_set_allocated_use_world_objects(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* use_world_objects) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.use_world_objects_);
  }
  _impl_.use_world_objects_ = use_world_objects;
  if (use_world_objects) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams.use_world_objects)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessAnchoringRequest_Params_MeasurementParams::release_use_world_objects() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.use_world_objects_;
  _impl_.use_world_objects_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessAnchoringRequest_Params_MeasurementParams::unsafe_arena_release_use_world_objects() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams.use_world_objects)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.use_world_objects_;
  _impl_.use_world_objects_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessAnchoringRequest_Params_MeasurementParams::_internal_mutable_use_world_objects() {
  
  if (_impl_.use_world_objects_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.use_world_objects_ = p;
  }
  return _impl_.use_world_objects_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessAnchoringRequest_Params_MeasurementParams::mutable_use_world_objects() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_use_world_objects();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams.use_world_objects)
  return _msg;
}
inline void ProcessAnchoringRequest_Params_MeasurementParams::set_allocated_use_world_objects(::PROTOBUF_NAMESPACE_ID::BoolValue* use_world_objects) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.use_world_objects_);
  }
  if (use_world_objects) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(use_world_objects));
    if (message_arena != submessage_arena) {
      use_world_objects = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, use_world_objects, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.use_world_objects_ = use_world_objects;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams.use_world_objects)
}

// -------------------------------------------------------------------

// ProcessAnchoringRequest_Params_Weights

// double kinematic_odometry_weight = 1;
inline void ProcessAnchoringRequest_Params_Weights::clear_kinematic_odometry_weight() {
  _impl_.kinematic_odometry_weight_ = 0;
}
inline double ProcessAnchoringRequest_Params_Weights::_internal_kinematic_odometry_weight() const {
  return _impl_.kinematic_odometry_weight_;
}
inline double ProcessAnchoringRequest_Params_Weights::kinematic_odometry_weight() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.Weights.kinematic_odometry_weight)
  return _internal_kinematic_odometry_weight();
}
inline void ProcessAnchoringRequest_Params_Weights::_internal_set_kinematic_odometry_weight(double value) {
  
  _impl_.kinematic_odometry_weight_ = value;
}
inline void ProcessAnchoringRequest_Params_Weights::set_kinematic_odometry_weight(double value) {
  _internal_set_kinematic_odometry_weight(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.Weights.kinematic_odometry_weight)
}

// double visual_odometry_weight = 2;
inline void ProcessAnchoringRequest_Params_Weights::clear_visual_odometry_weight() {
  _impl_.visual_odometry_weight_ = 0;
}
inline double ProcessAnchoringRequest_Params_Weights::_internal_visual_odometry_weight() const {
  return _impl_.visual_odometry_weight_;
}
inline double ProcessAnchoringRequest_Params_Weights::visual_odometry_weight() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.Weights.visual_odometry_weight)
  return _internal_visual_odometry_weight();
}
inline void ProcessAnchoringRequest_Params_Weights::_internal_set_visual_odometry_weight(double value) {
  
  _impl_.visual_odometry_weight_ = value;
}
inline void ProcessAnchoringRequest_Params_Weights::set_visual_odometry_weight(double value) {
  _internal_set_visual_odometry_weight(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.Weights.visual_odometry_weight)
}

// double world_object_weight = 3;
inline void ProcessAnchoringRequest_Params_Weights::clear_world_object_weight() {
  _impl_.world_object_weight_ = 0;
}
inline double ProcessAnchoringRequest_Params_Weights::_internal_world_object_weight() const {
  return _impl_.world_object_weight_;
}
inline double ProcessAnchoringRequest_Params_Weights::world_object_weight() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.Weights.world_object_weight)
  return _internal_world_object_weight();
}
inline void ProcessAnchoringRequest_Params_Weights::_internal_set_world_object_weight(double value) {
  
  _impl_.world_object_weight_ = value;
}
inline void ProcessAnchoringRequest_Params_Weights::set_world_object_weight(double value) {
  _internal_set_world_object_weight(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.Weights.world_object_weight)
}

// double hint_weight = 4;
inline void ProcessAnchoringRequest_Params_Weights::clear_hint_weight() {
  _impl_.hint_weight_ = 0;
}
inline double ProcessAnchoringRequest_Params_Weights::_internal_hint_weight() const {
  return _impl_.hint_weight_;
}
inline double ProcessAnchoringRequest_Params_Weights::hint_weight() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.Weights.hint_weight)
  return _internal_hint_weight();
}
inline void ProcessAnchoringRequest_Params_Weights::_internal_set_hint_weight(double value) {
  
  _impl_.hint_weight_ = value;
}
inline void ProcessAnchoringRequest_Params_Weights::set_hint_weight(double value) {
  _internal_set_hint_weight(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.Weights.hint_weight)
}

// double gyroscope_weight = 5;
inline void ProcessAnchoringRequest_Params_Weights::clear_gyroscope_weight() {
  _impl_.gyroscope_weight_ = 0;
}
inline double ProcessAnchoringRequest_Params_Weights::_internal_gyroscope_weight() const {
  return _impl_.gyroscope_weight_;
}
inline double ProcessAnchoringRequest_Params_Weights::gyroscope_weight() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.Weights.gyroscope_weight)
  return _internal_gyroscope_weight();
}
inline void ProcessAnchoringRequest_Params_Weights::_internal_set_gyroscope_weight(double value) {
  
  _impl_.gyroscope_weight_ = value;
}
inline void ProcessAnchoringRequest_Params_Weights::set_gyroscope_weight(double value) {
  _internal_set_gyroscope_weight(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.Weights.gyroscope_weight)
}

// double loop_closure_weight = 6;
inline void ProcessAnchoringRequest_Params_Weights::clear_loop_closure_weight() {
  _impl_.loop_closure_weight_ = 0;
}
inline double ProcessAnchoringRequest_Params_Weights::_internal_loop_closure_weight() const {
  return _impl_.loop_closure_weight_;
}
inline double ProcessAnchoringRequest_Params_Weights::loop_closure_weight() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.Weights.loop_closure_weight)
  return _internal_loop_closure_weight();
}
inline void ProcessAnchoringRequest_Params_Weights::_internal_set_loop_closure_weight(double value) {
  
  _impl_.loop_closure_weight_ = value;
}
inline void ProcessAnchoringRequest_Params_Weights::set_loop_closure_weight(double value) {
  _internal_set_loop_closure_weight(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.Weights.loop_closure_weight)
}

// -------------------------------------------------------------------

// ProcessAnchoringRequest_Params

// .bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.OptimizerParams optimizer_params = 1;
inline bool ProcessAnchoringRequest_Params::_internal_has_optimizer_params() const {
  return this != internal_default_instance() && _impl_.optimizer_params_ != nullptr;
}
inline bool ProcessAnchoringRequest_Params::has_optimizer_params() const {
  return _internal_has_optimizer_params();
}
inline void ProcessAnchoringRequest_Params::clear_optimizer_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.optimizer_params_ != nullptr) {
    delete _impl_.optimizer_params_;
  }
  _impl_.optimizer_params_ = nullptr;
}
inline const ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_OptimizerParams& ProcessAnchoringRequest_Params::_internal_optimizer_params() const {
  const ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_OptimizerParams* p = _impl_.optimizer_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_OptimizerParams&>(
      ::bosdyn::api::graph_nav::_ProcessAnchoringRequest_Params_OptimizerParams_default_instance_);
}
inline const ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_OptimizerParams& ProcessAnchoringRequest_Params::optimizer_params() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.optimizer_params)
  return _internal_optimizer_params();
}
inline void ProcessAnchoringRequest_Params::unsafe_arena_set_allocated_optimizer_params(
    ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_OptimizerParams* optimizer_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optimizer_params_);
  }
  _impl_.optimizer_params_ = optimizer_params;
  if (optimizer_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.optimizer_params)
}
inline ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_OptimizerParams* ProcessAnchoringRequest_Params::release_optimizer_params() {
  
  ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_OptimizerParams* temp = _impl_.optimizer_params_;
  _impl_.optimizer_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_OptimizerParams* ProcessAnchoringRequest_Params::unsafe_arena_release_optimizer_params() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.optimizer_params)
  
  ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_OptimizerParams* temp = _impl_.optimizer_params_;
  _impl_.optimizer_params_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_OptimizerParams* ProcessAnchoringRequest_Params::_internal_mutable_optimizer_params() {
  
  if (_impl_.optimizer_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_OptimizerParams>(GetArenaForAllocation());
    _impl_.optimizer_params_ = p;
  }
  return _impl_.optimizer_params_;
}
inline ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_OptimizerParams* ProcessAnchoringRequest_Params::mutable_optimizer_params() {
  ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_OptimizerParams* _msg = _internal_mutable_optimizer_params();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.optimizer_params)
  return _msg;
}
inline void ProcessAnchoringRequest_Params::set_allocated_optimizer_params(::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_OptimizerParams* optimizer_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.optimizer_params_;
  }
  if (optimizer_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(optimizer_params);
    if (message_arena != submessage_arena) {
      optimizer_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optimizer_params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.optimizer_params_ = optimizer_params;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.optimizer_params)
}

// .bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams measurement_params = 2;
inline bool ProcessAnchoringRequest_Params::_internal_has_measurement_params() const {
  return this != internal_default_instance() && _impl_.measurement_params_ != nullptr;
}
inline bool ProcessAnchoringRequest_Params::has_measurement_params() const {
  return _internal_has_measurement_params();
}
inline void ProcessAnchoringRequest_Params::clear_measurement_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.measurement_params_ != nullptr) {
    delete _impl_.measurement_params_;
  }
  _impl_.measurement_params_ = nullptr;
}
inline const ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_MeasurementParams& ProcessAnchoringRequest_Params::_internal_measurement_params() const {
  const ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_MeasurementParams* p = _impl_.measurement_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_MeasurementParams&>(
      ::bosdyn::api::graph_nav::_ProcessAnchoringRequest_Params_MeasurementParams_default_instance_);
}
inline const ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_MeasurementParams& ProcessAnchoringRequest_Params::measurement_params() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.measurement_params)
  return _internal_measurement_params();
}
inline void ProcessAnchoringRequest_Params::unsafe_arena_set_allocated_measurement_params(
    ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_MeasurementParams* measurement_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.measurement_params_);
  }
  _impl_.measurement_params_ = measurement_params;
  if (measurement_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.measurement_params)
}
inline ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_MeasurementParams* ProcessAnchoringRequest_Params::release_measurement_params() {
  
  ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_MeasurementParams* temp = _impl_.measurement_params_;
  _impl_.measurement_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_MeasurementParams* ProcessAnchoringRequest_Params::unsafe_arena_release_measurement_params() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.measurement_params)
  
  ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_MeasurementParams* temp = _impl_.measurement_params_;
  _impl_.measurement_params_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_MeasurementParams* ProcessAnchoringRequest_Params::_internal_mutable_measurement_params() {
  
  if (_impl_.measurement_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_MeasurementParams>(GetArenaForAllocation());
    _impl_.measurement_params_ = p;
  }
  return _impl_.measurement_params_;
}
inline ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_MeasurementParams* ProcessAnchoringRequest_Params::mutable_measurement_params() {
  ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_MeasurementParams* _msg = _internal_mutable_measurement_params();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.measurement_params)
  return _msg;
}
inline void ProcessAnchoringRequest_Params::set_allocated_measurement_params(::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_MeasurementParams* measurement_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.measurement_params_;
  }
  if (measurement_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(measurement_params);
    if (message_arena != submessage_arena) {
      measurement_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, measurement_params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.measurement_params_ = measurement_params;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.measurement_params)
}

// .bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.Weights weights = 3;
inline bool ProcessAnchoringRequest_Params::_internal_has_weights() const {
  return this != internal_default_instance() && _impl_.weights_ != nullptr;
}
inline bool ProcessAnchoringRequest_Params::has_weights() const {
  return _internal_has_weights();
}
inline void ProcessAnchoringRequest_Params::clear_weights() {
  if (GetArenaForAllocation() == nullptr && _impl_.weights_ != nullptr) {
    delete _impl_.weights_;
  }
  _impl_.weights_ = nullptr;
}
inline const ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_Weights& ProcessAnchoringRequest_Params::_internal_weights() const {
  const ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_Weights* p = _impl_.weights_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_Weights&>(
      ::bosdyn::api::graph_nav::_ProcessAnchoringRequest_Params_Weights_default_instance_);
}
inline const ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_Weights& ProcessAnchoringRequest_Params::weights() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.weights)
  return _internal_weights();
}
inline void ProcessAnchoringRequest_Params::unsafe_arena_set_allocated_weights(
    ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_Weights* weights) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.weights_);
  }
  _impl_.weights_ = weights;
  if (weights) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.weights)
}
inline ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_Weights* ProcessAnchoringRequest_Params::release_weights() {
  
  ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_Weights* temp = _impl_.weights_;
  _impl_.weights_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_Weights* ProcessAnchoringRequest_Params::unsafe_arena_release_weights() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.weights)
  
  ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_Weights* temp = _impl_.weights_;
  _impl_.weights_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_Weights* ProcessAnchoringRequest_Params::_internal_mutable_weights() {
  
  if (_impl_.weights_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_Weights>(GetArenaForAllocation());
    _impl_.weights_ = p;
  }
  return _impl_.weights_;
}
inline ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_Weights* ProcessAnchoringRequest_Params::mutable_weights() {
  ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_Weights* _msg = _internal_mutable_weights();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.weights)
  return _msg;
}
inline void ProcessAnchoringRequest_Params::set_allocated_weights(::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params_Weights* weights) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.weights_;
  }
  if (weights) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(weights);
    if (message_arena != submessage_arena) {
      weights = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weights, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.weights_ = weights;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.weights)
}

// .google.protobuf.BoolValue optimize_existing_anchoring = 4;
inline bool ProcessAnchoringRequest_Params::_internal_has_optimize_existing_anchoring() const {
  return this != internal_default_instance() && _impl_.optimize_existing_anchoring_ != nullptr;
}
inline bool ProcessAnchoringRequest_Params::has_optimize_existing_anchoring() const {
  return _internal_has_optimize_existing_anchoring();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& ProcessAnchoringRequest_Params::_internal_optimize_existing_anchoring() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.optimize_existing_anchoring_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& ProcessAnchoringRequest_Params::optimize_existing_anchoring() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.optimize_existing_anchoring)
  return _internal_optimize_existing_anchoring();
}
inline void ProcessAnchoringRequest_Params::unsafe_arena_set_allocated_optimize_existing_anchoring(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* optimize_existing_anchoring) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optimize_existing_anchoring_);
  }
  _impl_.optimize_existing_anchoring_ = optimize_existing_anchoring;
  if (optimize_existing_anchoring) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.optimize_existing_anchoring)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessAnchoringRequest_Params::release_optimize_existing_anchoring() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.optimize_existing_anchoring_;
  _impl_.optimize_existing_anchoring_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessAnchoringRequest_Params::unsafe_arena_release_optimize_existing_anchoring() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.optimize_existing_anchoring)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.optimize_existing_anchoring_;
  _impl_.optimize_existing_anchoring_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessAnchoringRequest_Params::_internal_mutable_optimize_existing_anchoring() {
  
  if (_impl_.optimize_existing_anchoring_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.optimize_existing_anchoring_ = p;
  }
  return _impl_.optimize_existing_anchoring_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ProcessAnchoringRequest_Params::mutable_optimize_existing_anchoring() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_optimize_existing_anchoring();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.optimize_existing_anchoring)
  return _msg;
}
inline void ProcessAnchoringRequest_Params::set_allocated_optimize_existing_anchoring(::PROTOBUF_NAMESPACE_ID::BoolValue* optimize_existing_anchoring) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optimize_existing_anchoring_);
  }
  if (optimize_existing_anchoring) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optimize_existing_anchoring));
    if (message_arena != submessage_arena) {
      optimize_existing_anchoring = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optimize_existing_anchoring, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.optimize_existing_anchoring_ = optimize_existing_anchoring;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.optimize_existing_anchoring)
}

// .bosdyn.api.Vec3 gravity_ewrt_seed = 5;
inline bool ProcessAnchoringRequest_Params::_internal_has_gravity_ewrt_seed() const {
  return this != internal_default_instance() && _impl_.gravity_ewrt_seed_ != nullptr;
}
inline bool ProcessAnchoringRequest_Params::has_gravity_ewrt_seed() const {
  return _internal_has_gravity_ewrt_seed();
}
inline const ::bosdyn::api::Vec3& ProcessAnchoringRequest_Params::_internal_gravity_ewrt_seed() const {
  const ::bosdyn::api::Vec3* p = _impl_.gravity_ewrt_seed_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec3&>(
      ::bosdyn::api::_Vec3_default_instance_);
}
inline const ::bosdyn::api::Vec3& ProcessAnchoringRequest_Params::gravity_ewrt_seed() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.gravity_ewrt_seed)
  return _internal_gravity_ewrt_seed();
}
inline void ProcessAnchoringRequest_Params::unsafe_arena_set_allocated_gravity_ewrt_seed(
    ::bosdyn::api::Vec3* gravity_ewrt_seed) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gravity_ewrt_seed_);
  }
  _impl_.gravity_ewrt_seed_ = gravity_ewrt_seed;
  if (gravity_ewrt_seed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.gravity_ewrt_seed)
}
inline ::bosdyn::api::Vec3* ProcessAnchoringRequest_Params::release_gravity_ewrt_seed() {
  
  ::bosdyn::api::Vec3* temp = _impl_.gravity_ewrt_seed_;
  _impl_.gravity_ewrt_seed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec3* ProcessAnchoringRequest_Params::unsafe_arena_release_gravity_ewrt_seed() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.gravity_ewrt_seed)
  
  ::bosdyn::api::Vec3* temp = _impl_.gravity_ewrt_seed_;
  _impl_.gravity_ewrt_seed_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec3* ProcessAnchoringRequest_Params::_internal_mutable_gravity_ewrt_seed() {
  
  if (_impl_.gravity_ewrt_seed_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec3>(GetArenaForAllocation());
    _impl_.gravity_ewrt_seed_ = p;
  }
  return _impl_.gravity_ewrt_seed_;
}
inline ::bosdyn::api::Vec3* ProcessAnchoringRequest_Params::mutable_gravity_ewrt_seed() {
  ::bosdyn::api::Vec3* _msg = _internal_mutable_gravity_ewrt_seed();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.gravity_ewrt_seed)
  return _msg;
}
inline void ProcessAnchoringRequest_Params::set_allocated_gravity_ewrt_seed(::bosdyn::api::Vec3* gravity_ewrt_seed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gravity_ewrt_seed_);
  }
  if (gravity_ewrt_seed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gravity_ewrt_seed));
    if (message_arena != submessage_arena) {
      gravity_ewrt_seed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gravity_ewrt_seed, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gravity_ewrt_seed_ = gravity_ewrt_seed;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.gravity_ewrt_seed)
}

// -------------------------------------------------------------------

// ProcessAnchoringRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool ProcessAnchoringRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool ProcessAnchoringRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& ProcessAnchoringRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RequestHeader&>(
      ::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& ProcessAnchoringRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringRequest.header)
  return _internal_header();
}
inline void ProcessAnchoringRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessAnchoringRequest.header)
}
inline ::bosdyn::api::RequestHeader* ProcessAnchoringRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RequestHeader* ProcessAnchoringRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessAnchoringRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* ProcessAnchoringRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::RequestHeader* ProcessAnchoringRequest::mutable_header() {
  ::bosdyn::api::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessAnchoringRequest.header)
  return _msg;
}
inline void ProcessAnchoringRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessAnchoringRequest.header)
}

// .bosdyn.api.graph_nav.ProcessAnchoringRequest.Params params = 2;
inline bool ProcessAnchoringRequest::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool ProcessAnchoringRequest::has_params() const {
  return _internal_has_params();
}
inline void ProcessAnchoringRequest::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params& ProcessAnchoringRequest::_internal_params() const {
  const ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params&>(
      ::bosdyn::api::graph_nav::_ProcessAnchoringRequest_Params_default_instance_);
}
inline const ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params& ProcessAnchoringRequest::params() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringRequest.params)
  return _internal_params();
}
inline void ProcessAnchoringRequest::unsafe_arena_set_allocated_params(
    ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessAnchoringRequest.params)
}
inline ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params* ProcessAnchoringRequest::release_params() {
  
  ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params* ProcessAnchoringRequest::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessAnchoringRequest.params)
  
  ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params* ProcessAnchoringRequest::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params* ProcessAnchoringRequest::mutable_params() {
  ::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessAnchoringRequest.params)
  return _msg;
}
inline void ProcessAnchoringRequest::set_allocated_params(::bosdyn::api::graph_nav::ProcessAnchoringRequest_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessAnchoringRequest.params)
}

// .bosdyn.api.graph_nav.AnchoringHint initial_hint = 3;
inline bool ProcessAnchoringRequest::_internal_has_initial_hint() const {
  return this != internal_default_instance() && _impl_.initial_hint_ != nullptr;
}
inline bool ProcessAnchoringRequest::has_initial_hint() const {
  return _internal_has_initial_hint();
}
inline void ProcessAnchoringRequest::clear_initial_hint() {
  if (GetArenaForAllocation() == nullptr && _impl_.initial_hint_ != nullptr) {
    delete _impl_.initial_hint_;
  }
  _impl_.initial_hint_ = nullptr;
}
inline const ::bosdyn::api::graph_nav::AnchoringHint& ProcessAnchoringRequest::_internal_initial_hint() const {
  const ::bosdyn::api::graph_nav::AnchoringHint* p = _impl_.initial_hint_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::graph_nav::AnchoringHint&>(
      ::bosdyn::api::graph_nav::_AnchoringHint_default_instance_);
}
inline const ::bosdyn::api::graph_nav::AnchoringHint& ProcessAnchoringRequest::initial_hint() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringRequest.initial_hint)
  return _internal_initial_hint();
}
inline void ProcessAnchoringRequest::unsafe_arena_set_allocated_initial_hint(
    ::bosdyn::api::graph_nav::AnchoringHint* initial_hint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.initial_hint_);
  }
  _impl_.initial_hint_ = initial_hint;
  if (initial_hint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessAnchoringRequest.initial_hint)
}
inline ::bosdyn::api::graph_nav::AnchoringHint* ProcessAnchoringRequest::release_initial_hint() {
  
  ::bosdyn::api::graph_nav::AnchoringHint* temp = _impl_.initial_hint_;
  _impl_.initial_hint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::graph_nav::AnchoringHint* ProcessAnchoringRequest::unsafe_arena_release_initial_hint() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessAnchoringRequest.initial_hint)
  
  ::bosdyn::api::graph_nav::AnchoringHint* temp = _impl_.initial_hint_;
  _impl_.initial_hint_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::AnchoringHint* ProcessAnchoringRequest::_internal_mutable_initial_hint() {
  
  if (_impl_.initial_hint_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::AnchoringHint>(GetArenaForAllocation());
    _impl_.initial_hint_ = p;
  }
  return _impl_.initial_hint_;
}
inline ::bosdyn::api::graph_nav::AnchoringHint* ProcessAnchoringRequest::mutable_initial_hint() {
  ::bosdyn::api::graph_nav::AnchoringHint* _msg = _internal_mutable_initial_hint();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessAnchoringRequest.initial_hint)
  return _msg;
}
inline void ProcessAnchoringRequest::set_allocated_initial_hint(::bosdyn::api::graph_nav::AnchoringHint* initial_hint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.initial_hint_;
  }
  if (initial_hint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(initial_hint);
    if (message_arena != submessage_arena) {
      initial_hint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initial_hint, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.initial_hint_ = initial_hint;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessAnchoringRequest.initial_hint)
}

// bool modify_anchoring_on_server = 4;
inline void ProcessAnchoringRequest::clear_modify_anchoring_on_server() {
  _impl_.modify_anchoring_on_server_ = false;
}
inline bool ProcessAnchoringRequest::_internal_modify_anchoring_on_server() const {
  return _impl_.modify_anchoring_on_server_;
}
inline bool ProcessAnchoringRequest::modify_anchoring_on_server() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringRequest.modify_anchoring_on_server)
  return _internal_modify_anchoring_on_server();
}
inline void ProcessAnchoringRequest::_internal_set_modify_anchoring_on_server(bool value) {
  
  _impl_.modify_anchoring_on_server_ = value;
}
inline void ProcessAnchoringRequest::set_modify_anchoring_on_server(bool value) {
  _internal_set_modify_anchoring_on_server(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ProcessAnchoringRequest.modify_anchoring_on_server)
}

// bool stream_intermediate_results = 5;
inline void ProcessAnchoringRequest::clear_stream_intermediate_results() {
  _impl_.stream_intermediate_results_ = false;
}
inline bool ProcessAnchoringRequest::_internal_stream_intermediate_results() const {
  return _impl_.stream_intermediate_results_;
}
inline bool ProcessAnchoringRequest::stream_intermediate_results() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringRequest.stream_intermediate_results)
  return _internal_stream_intermediate_results();
}
inline void ProcessAnchoringRequest::_internal_set_stream_intermediate_results(bool value) {
  
  _impl_.stream_intermediate_results_ = value;
}
inline void ProcessAnchoringRequest::set_stream_intermediate_results(bool value) {
  _internal_set_stream_intermediate_results(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ProcessAnchoringRequest.stream_intermediate_results)
}

// -------------------------------------------------------------------

// ProcessAnchoringResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool ProcessAnchoringResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool ProcessAnchoringResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& ProcessAnchoringResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ResponseHeader&>(
      ::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& ProcessAnchoringResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringResponse.header)
  return _internal_header();
}
inline void ProcessAnchoringResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ProcessAnchoringResponse.header)
}
inline ::bosdyn::api::ResponseHeader* ProcessAnchoringResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ResponseHeader* ProcessAnchoringResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ProcessAnchoringResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* ProcessAnchoringResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::ResponseHeader* ProcessAnchoringResponse::mutable_header() {
  ::bosdyn::api::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessAnchoringResponse.header)
  return _msg;
}
inline void ProcessAnchoringResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ProcessAnchoringResponse.header)
}

// .bosdyn.api.graph_nav.ProcessAnchoringResponse.Status status = 2;
inline void ProcessAnchoringResponse::clear_status() {
  _impl_.status_ = 0;
}
inline ::bosdyn::api::graph_nav::ProcessAnchoringResponse_Status ProcessAnchoringResponse::_internal_status() const {
  return static_cast< ::bosdyn::api::graph_nav::ProcessAnchoringResponse_Status >(_impl_.status_);
}
inline ::bosdyn::api::graph_nav::ProcessAnchoringResponse_Status ProcessAnchoringResponse::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringResponse.status)
  return _internal_status();
}
inline void ProcessAnchoringResponse::_internal_set_status(::bosdyn::api::graph_nav::ProcessAnchoringResponse_Status value) {
  
  _impl_.status_ = value;
}
inline void ProcessAnchoringResponse::set_status(::bosdyn::api::graph_nav::ProcessAnchoringResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ProcessAnchoringResponse.status)
}

// repeated .bosdyn.api.graph_nav.Anchor waypoint_results = 3;
inline int ProcessAnchoringResponse::_internal_waypoint_results_size() const {
  return _impl_.waypoint_results_.size();
}
inline int ProcessAnchoringResponse::waypoint_results_size() const {
  return _internal_waypoint_results_size();
}
inline ::bosdyn::api::graph_nav::Anchor* ProcessAnchoringResponse::mutable_waypoint_results(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessAnchoringResponse.waypoint_results)
  return _impl_.waypoint_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Anchor >*
ProcessAnchoringResponse::mutable_waypoint_results() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.ProcessAnchoringResponse.waypoint_results)
  return &_impl_.waypoint_results_;
}
inline const ::bosdyn::api::graph_nav::Anchor& ProcessAnchoringResponse::_internal_waypoint_results(int index) const {
  return _impl_.waypoint_results_.Get(index);
}
inline const ::bosdyn::api::graph_nav::Anchor& ProcessAnchoringResponse::waypoint_results(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringResponse.waypoint_results)
  return _internal_waypoint_results(index);
}
inline ::bosdyn::api::graph_nav::Anchor* ProcessAnchoringResponse::_internal_add_waypoint_results() {
  return _impl_.waypoint_results_.Add();
}
inline ::bosdyn::api::graph_nav::Anchor* ProcessAnchoringResponse::add_waypoint_results() {
  ::bosdyn::api::graph_nav::Anchor* _add = _internal_add_waypoint_results();
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.ProcessAnchoringResponse.waypoint_results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Anchor >&
ProcessAnchoringResponse::waypoint_results() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.ProcessAnchoringResponse.waypoint_results)
  return _impl_.waypoint_results_;
}

// repeated .bosdyn.api.graph_nav.AnchoredWorldObject world_object_results = 4;
inline int ProcessAnchoringResponse::_internal_world_object_results_size() const {
  return _impl_.world_object_results_.size();
}
inline int ProcessAnchoringResponse::world_object_results_size() const {
  return _internal_world_object_results_size();
}
inline ::bosdyn::api::graph_nav::AnchoredWorldObject* ProcessAnchoringResponse::mutable_world_object_results(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessAnchoringResponse.world_object_results)
  return _impl_.world_object_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::AnchoredWorldObject >*
ProcessAnchoringResponse::mutable_world_object_results() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.ProcessAnchoringResponse.world_object_results)
  return &_impl_.world_object_results_;
}
inline const ::bosdyn::api::graph_nav::AnchoredWorldObject& ProcessAnchoringResponse::_internal_world_object_results(int index) const {
  return _impl_.world_object_results_.Get(index);
}
inline const ::bosdyn::api::graph_nav::AnchoredWorldObject& ProcessAnchoringResponse::world_object_results(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringResponse.world_object_results)
  return _internal_world_object_results(index);
}
inline ::bosdyn::api::graph_nav::AnchoredWorldObject* ProcessAnchoringResponse::_internal_add_world_object_results() {
  return _impl_.world_object_results_.Add();
}
inline ::bosdyn::api::graph_nav::AnchoredWorldObject* ProcessAnchoringResponse::add_world_object_results() {
  ::bosdyn::api::graph_nav::AnchoredWorldObject* _add = _internal_add_world_object_results();
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.ProcessAnchoringResponse.world_object_results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::AnchoredWorldObject >&
ProcessAnchoringResponse::world_object_results() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.ProcessAnchoringResponse.world_object_results)
  return _impl_.world_object_results_;
}

// bool anchoring_on_server_was_modified = 5;
inline void ProcessAnchoringResponse::clear_anchoring_on_server_was_modified() {
  _impl_.anchoring_on_server_was_modified_ = false;
}
inline bool ProcessAnchoringResponse::_internal_anchoring_on_server_was_modified() const {
  return _impl_.anchoring_on_server_was_modified_;
}
inline bool ProcessAnchoringResponse::anchoring_on_server_was_modified() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringResponse.anchoring_on_server_was_modified)
  return _internal_anchoring_on_server_was_modified();
}
inline void ProcessAnchoringResponse::_internal_set_anchoring_on_server_was_modified(bool value) {
  
  _impl_.anchoring_on_server_was_modified_ = value;
}
inline void ProcessAnchoringResponse::set_anchoring_on_server_was_modified(bool value) {
  _internal_set_anchoring_on_server_was_modified(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ProcessAnchoringResponse.anchoring_on_server_was_modified)
}

// int32 iteration = 6;
inline void ProcessAnchoringResponse::clear_iteration() {
  _impl_.iteration_ = 0;
}
inline int32_t ProcessAnchoringResponse::_internal_iteration() const {
  return _impl_.iteration_;
}
inline int32_t ProcessAnchoringResponse::iteration() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringResponse.iteration)
  return _internal_iteration();
}
inline void ProcessAnchoringResponse::_internal_set_iteration(int32_t value) {
  
  _impl_.iteration_ = value;
}
inline void ProcessAnchoringResponse::set_iteration(int32_t value) {
  _internal_set_iteration(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ProcessAnchoringResponse.iteration)
}

// double cost = 7;
inline void ProcessAnchoringResponse::clear_cost() {
  _impl_.cost_ = 0;
}
inline double ProcessAnchoringResponse::_internal_cost() const {
  return _impl_.cost_;
}
inline double ProcessAnchoringResponse::cost() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringResponse.cost)
  return _internal_cost();
}
inline void ProcessAnchoringResponse::_internal_set_cost(double value) {
  
  _impl_.cost_ = value;
}
inline void ProcessAnchoringResponse::set_cost(double value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ProcessAnchoringResponse.cost)
}

// bool final_iteration = 8;
inline void ProcessAnchoringResponse::clear_final_iteration() {
  _impl_.final_iteration_ = false;
}
inline bool ProcessAnchoringResponse::_internal_final_iteration() const {
  return _impl_.final_iteration_;
}
inline bool ProcessAnchoringResponse::final_iteration() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringResponse.final_iteration)
  return _internal_final_iteration();
}
inline void ProcessAnchoringResponse::_internal_set_final_iteration(bool value) {
  
  _impl_.final_iteration_ = value;
}
inline void ProcessAnchoringResponse::set_final_iteration(bool value) {
  _internal_set_final_iteration(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ProcessAnchoringResponse.final_iteration)
}

// repeated .bosdyn.api.graph_nav.WaypointAnchorHint violated_waypoint_constraints = 9;
inline int ProcessAnchoringResponse::_internal_violated_waypoint_constraints_size() const {
  return _impl_.violated_waypoint_constraints_.size();
}
inline int ProcessAnchoringResponse::violated_waypoint_constraints_size() const {
  return _internal_violated_waypoint_constraints_size();
}
inline void ProcessAnchoringResponse::clear_violated_waypoint_constraints() {
  _impl_.violated_waypoint_constraints_.Clear();
}
inline ::bosdyn::api::graph_nav::WaypointAnchorHint* ProcessAnchoringResponse::mutable_violated_waypoint_constraints(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessAnchoringResponse.violated_waypoint_constraints)
  return _impl_.violated_waypoint_constraints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::WaypointAnchorHint >*
ProcessAnchoringResponse::mutable_violated_waypoint_constraints() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.ProcessAnchoringResponse.violated_waypoint_constraints)
  return &_impl_.violated_waypoint_constraints_;
}
inline const ::bosdyn::api::graph_nav::WaypointAnchorHint& ProcessAnchoringResponse::_internal_violated_waypoint_constraints(int index) const {
  return _impl_.violated_waypoint_constraints_.Get(index);
}
inline const ::bosdyn::api::graph_nav::WaypointAnchorHint& ProcessAnchoringResponse::violated_waypoint_constraints(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringResponse.violated_waypoint_constraints)
  return _internal_violated_waypoint_constraints(index);
}
inline ::bosdyn::api::graph_nav::WaypointAnchorHint* ProcessAnchoringResponse::_internal_add_violated_waypoint_constraints() {
  return _impl_.violated_waypoint_constraints_.Add();
}
inline ::bosdyn::api::graph_nav::WaypointAnchorHint* ProcessAnchoringResponse::add_violated_waypoint_constraints() {
  ::bosdyn::api::graph_nav::WaypointAnchorHint* _add = _internal_add_violated_waypoint_constraints();
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.ProcessAnchoringResponse.violated_waypoint_constraints)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::WaypointAnchorHint >&
ProcessAnchoringResponse::violated_waypoint_constraints() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.ProcessAnchoringResponse.violated_waypoint_constraints)
  return _impl_.violated_waypoint_constraints_;
}

// repeated .bosdyn.api.graph_nav.WorldObjectAnchorHint violated_object_constraints = 10;
inline int ProcessAnchoringResponse::_internal_violated_object_constraints_size() const {
  return _impl_.violated_object_constraints_.size();
}
inline int ProcessAnchoringResponse::violated_object_constraints_size() const {
  return _internal_violated_object_constraints_size();
}
inline void ProcessAnchoringResponse::clear_violated_object_constraints() {
  _impl_.violated_object_constraints_.Clear();
}
inline ::bosdyn::api::graph_nav::WorldObjectAnchorHint* ProcessAnchoringResponse::mutable_violated_object_constraints(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessAnchoringResponse.violated_object_constraints)
  return _impl_.violated_object_constraints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::WorldObjectAnchorHint >*
ProcessAnchoringResponse::mutable_violated_object_constraints() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.ProcessAnchoringResponse.violated_object_constraints)
  return &_impl_.violated_object_constraints_;
}
inline const ::bosdyn::api::graph_nav::WorldObjectAnchorHint& ProcessAnchoringResponse::_internal_violated_object_constraints(int index) const {
  return _impl_.violated_object_constraints_.Get(index);
}
inline const ::bosdyn::api::graph_nav::WorldObjectAnchorHint& ProcessAnchoringResponse::violated_object_constraints(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringResponse.violated_object_constraints)
  return _internal_violated_object_constraints(index);
}
inline ::bosdyn::api::graph_nav::WorldObjectAnchorHint* ProcessAnchoringResponse::_internal_add_violated_object_constraints() {
  return _impl_.violated_object_constraints_.Add();
}
inline ::bosdyn::api::graph_nav::WorldObjectAnchorHint* ProcessAnchoringResponse::add_violated_object_constraints() {
  ::bosdyn::api::graph_nav::WorldObjectAnchorHint* _add = _internal_add_violated_object_constraints();
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.ProcessAnchoringResponse.violated_object_constraints)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::WorldObjectAnchorHint >&
ProcessAnchoringResponse::violated_object_constraints() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.ProcessAnchoringResponse.violated_object_constraints)
  return _impl_.violated_object_constraints_;
}

// repeated string missing_snapshot_ids = 11;
inline int ProcessAnchoringResponse::_internal_missing_snapshot_ids_size() const {
  return _impl_.missing_snapshot_ids_.size();
}
inline int ProcessAnchoringResponse::missing_snapshot_ids_size() const {
  return _internal_missing_snapshot_ids_size();
}
inline void ProcessAnchoringResponse::clear_missing_snapshot_ids() {
  _impl_.missing_snapshot_ids_.Clear();
}
inline std::string* ProcessAnchoringResponse::add_missing_snapshot_ids() {
  std::string* _s = _internal_add_missing_snapshot_ids();
  // @@protoc_insertion_point(field_add_mutable:bosdyn.api.graph_nav.ProcessAnchoringResponse.missing_snapshot_ids)
  return _s;
}
inline const std::string& ProcessAnchoringResponse::_internal_missing_snapshot_ids(int index) const {
  return _impl_.missing_snapshot_ids_.Get(index);
}
inline const std::string& ProcessAnchoringResponse::missing_snapshot_ids(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringResponse.missing_snapshot_ids)
  return _internal_missing_snapshot_ids(index);
}
inline std::string* ProcessAnchoringResponse::mutable_missing_snapshot_ids(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessAnchoringResponse.missing_snapshot_ids)
  return _impl_.missing_snapshot_ids_.Mutable(index);
}
inline void ProcessAnchoringResponse::set_missing_snapshot_ids(int index, const std::string& value) {
  _impl_.missing_snapshot_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ProcessAnchoringResponse.missing_snapshot_ids)
}
inline void ProcessAnchoringResponse::set_missing_snapshot_ids(int index, std::string&& value) {
  _impl_.missing_snapshot_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ProcessAnchoringResponse.missing_snapshot_ids)
}
inline void ProcessAnchoringResponse::set_missing_snapshot_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.missing_snapshot_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bosdyn.api.graph_nav.ProcessAnchoringResponse.missing_snapshot_ids)
}
inline void ProcessAnchoringResponse::set_missing_snapshot_ids(int index, const char* value, size_t size) {
  _impl_.missing_snapshot_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.graph_nav.ProcessAnchoringResponse.missing_snapshot_ids)
}
inline std::string* ProcessAnchoringResponse::_internal_add_missing_snapshot_ids() {
  return _impl_.missing_snapshot_ids_.Add();
}
inline void ProcessAnchoringResponse::add_missing_snapshot_ids(const std::string& value) {
  _impl_.missing_snapshot_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.ProcessAnchoringResponse.missing_snapshot_ids)
}
inline void ProcessAnchoringResponse::add_missing_snapshot_ids(std::string&& value) {
  _impl_.missing_snapshot_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.ProcessAnchoringResponse.missing_snapshot_ids)
}
inline void ProcessAnchoringResponse::add_missing_snapshot_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.missing_snapshot_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bosdyn.api.graph_nav.ProcessAnchoringResponse.missing_snapshot_ids)
}
inline void ProcessAnchoringResponse::add_missing_snapshot_ids(const char* value, size_t size) {
  _impl_.missing_snapshot_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bosdyn.api.graph_nav.ProcessAnchoringResponse.missing_snapshot_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProcessAnchoringResponse::missing_snapshot_ids() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.ProcessAnchoringResponse.missing_snapshot_ids)
  return _impl_.missing_snapshot_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProcessAnchoringResponse::mutable_missing_snapshot_ids() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.ProcessAnchoringResponse.missing_snapshot_ids)
  return &_impl_.missing_snapshot_ids_;
}

// repeated string missing_waypoint_ids = 12;
inline int ProcessAnchoringResponse::_internal_missing_waypoint_ids_size() const {
  return _impl_.missing_waypoint_ids_.size();
}
inline int ProcessAnchoringResponse::missing_waypoint_ids_size() const {
  return _internal_missing_waypoint_ids_size();
}
inline void ProcessAnchoringResponse::clear_missing_waypoint_ids() {
  _impl_.missing_waypoint_ids_.Clear();
}
inline std::string* ProcessAnchoringResponse::add_missing_waypoint_ids() {
  std::string* _s = _internal_add_missing_waypoint_ids();
  // @@protoc_insertion_point(field_add_mutable:bosdyn.api.graph_nav.ProcessAnchoringResponse.missing_waypoint_ids)
  return _s;
}
inline const std::string& ProcessAnchoringResponse::_internal_missing_waypoint_ids(int index) const {
  return _impl_.missing_waypoint_ids_.Get(index);
}
inline const std::string& ProcessAnchoringResponse::missing_waypoint_ids(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringResponse.missing_waypoint_ids)
  return _internal_missing_waypoint_ids(index);
}
inline std::string* ProcessAnchoringResponse::mutable_missing_waypoint_ids(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessAnchoringResponse.missing_waypoint_ids)
  return _impl_.missing_waypoint_ids_.Mutable(index);
}
inline void ProcessAnchoringResponse::set_missing_waypoint_ids(int index, const std::string& value) {
  _impl_.missing_waypoint_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ProcessAnchoringResponse.missing_waypoint_ids)
}
inline void ProcessAnchoringResponse::set_missing_waypoint_ids(int index, std::string&& value) {
  _impl_.missing_waypoint_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ProcessAnchoringResponse.missing_waypoint_ids)
}
inline void ProcessAnchoringResponse::set_missing_waypoint_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.missing_waypoint_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bosdyn.api.graph_nav.ProcessAnchoringResponse.missing_waypoint_ids)
}
inline void ProcessAnchoringResponse::set_missing_waypoint_ids(int index, const char* value, size_t size) {
  _impl_.missing_waypoint_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.graph_nav.ProcessAnchoringResponse.missing_waypoint_ids)
}
inline std::string* ProcessAnchoringResponse::_internal_add_missing_waypoint_ids() {
  return _impl_.missing_waypoint_ids_.Add();
}
inline void ProcessAnchoringResponse::add_missing_waypoint_ids(const std::string& value) {
  _impl_.missing_waypoint_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.ProcessAnchoringResponse.missing_waypoint_ids)
}
inline void ProcessAnchoringResponse::add_missing_waypoint_ids(std::string&& value) {
  _impl_.missing_waypoint_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.ProcessAnchoringResponse.missing_waypoint_ids)
}
inline void ProcessAnchoringResponse::add_missing_waypoint_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.missing_waypoint_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bosdyn.api.graph_nav.ProcessAnchoringResponse.missing_waypoint_ids)
}
inline void ProcessAnchoringResponse::add_missing_waypoint_ids(const char* value, size_t size) {
  _impl_.missing_waypoint_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bosdyn.api.graph_nav.ProcessAnchoringResponse.missing_waypoint_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProcessAnchoringResponse::missing_waypoint_ids() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.ProcessAnchoringResponse.missing_waypoint_ids)
  return _impl_.missing_waypoint_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProcessAnchoringResponse::mutable_missing_waypoint_ids() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.ProcessAnchoringResponse.missing_waypoint_ids)
  return &_impl_.missing_waypoint_ids_;
}

// repeated string invalid_hints = 13;
inline int ProcessAnchoringResponse::_internal_invalid_hints_size() const {
  return _impl_.invalid_hints_.size();
}
inline int ProcessAnchoringResponse::invalid_hints_size() const {
  return _internal_invalid_hints_size();
}
inline void ProcessAnchoringResponse::clear_invalid_hints() {
  _impl_.invalid_hints_.Clear();
}
inline std::string* ProcessAnchoringResponse::add_invalid_hints() {
  std::string* _s = _internal_add_invalid_hints();
  // @@protoc_insertion_point(field_add_mutable:bosdyn.api.graph_nav.ProcessAnchoringResponse.invalid_hints)
  return _s;
}
inline const std::string& ProcessAnchoringResponse::_internal_invalid_hints(int index) const {
  return _impl_.invalid_hints_.Get(index);
}
inline const std::string& ProcessAnchoringResponse::invalid_hints(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ProcessAnchoringResponse.invalid_hints)
  return _internal_invalid_hints(index);
}
inline std::string* ProcessAnchoringResponse::mutable_invalid_hints(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ProcessAnchoringResponse.invalid_hints)
  return _impl_.invalid_hints_.Mutable(index);
}
inline void ProcessAnchoringResponse::set_invalid_hints(int index, const std::string& value) {
  _impl_.invalid_hints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ProcessAnchoringResponse.invalid_hints)
}
inline void ProcessAnchoringResponse::set_invalid_hints(int index, std::string&& value) {
  _impl_.invalid_hints_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ProcessAnchoringResponse.invalid_hints)
}
inline void ProcessAnchoringResponse::set_invalid_hints(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.invalid_hints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bosdyn.api.graph_nav.ProcessAnchoringResponse.invalid_hints)
}
inline void ProcessAnchoringResponse::set_invalid_hints(int index, const char* value, size_t size) {
  _impl_.invalid_hints_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.graph_nav.ProcessAnchoringResponse.invalid_hints)
}
inline std::string* ProcessAnchoringResponse::_internal_add_invalid_hints() {
  return _impl_.invalid_hints_.Add();
}
inline void ProcessAnchoringResponse::add_invalid_hints(const std::string& value) {
  _impl_.invalid_hints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.ProcessAnchoringResponse.invalid_hints)
}
inline void ProcessAnchoringResponse::add_invalid_hints(std::string&& value) {
  _impl_.invalid_hints_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.ProcessAnchoringResponse.invalid_hints)
}
inline void ProcessAnchoringResponse::add_invalid_hints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.invalid_hints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bosdyn.api.graph_nav.ProcessAnchoringResponse.invalid_hints)
}
inline void ProcessAnchoringResponse::add_invalid_hints(const char* value, size_t size) {
  _impl_.invalid_hints_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bosdyn.api.graph_nav.ProcessAnchoringResponse.invalid_hints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProcessAnchoringResponse::invalid_hints() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.ProcessAnchoringResponse.invalid_hints)
  return _impl_.invalid_hints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProcessAnchoringResponse::mutable_invalid_hints() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.ProcessAnchoringResponse.invalid_hints)
  return &_impl_.invalid_hints_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace graph_nav
}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::graph_nav::ProcessTopologyResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::graph_nav::ProcessTopologyResponse_Status>() {
  return ::bosdyn::api::graph_nav::ProcessTopologyResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::graph_nav::ProcessAnchoringResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::graph_nav::ProcessAnchoringResponse_Status>() {
  return ::bosdyn::api::graph_nav::ProcessAnchoringResponse_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fgraph_5fnav_2fmap_5fprocessing_2eproto

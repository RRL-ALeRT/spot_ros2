// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/gripper_command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fgripper_5fcommand_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fgripper_5fcommand_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/basic_command.pb.h"
#include "bosdyn/api/trajectory.pb.h"
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgripper_5fcommand_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fgripper_5fcommand_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fgripper_5fcommand_2eproto;
namespace bosdyn {
namespace api {
class ClawGripperCommand;
struct ClawGripperCommandDefaultTypeInternal;
extern ClawGripperCommandDefaultTypeInternal _ClawGripperCommand_default_instance_;
class ClawGripperCommand_Feedback;
struct ClawGripperCommand_FeedbackDefaultTypeInternal;
extern ClawGripperCommand_FeedbackDefaultTypeInternal _ClawGripperCommand_Feedback_default_instance_;
class ClawGripperCommand_Request;
struct ClawGripperCommand_RequestDefaultTypeInternal;
extern ClawGripperCommand_RequestDefaultTypeInternal _ClawGripperCommand_Request_default_instance_;
class GripperCommand;
struct GripperCommandDefaultTypeInternal;
extern GripperCommandDefaultTypeInternal _GripperCommand_default_instance_;
class GripperCommand_Feedback;
struct GripperCommand_FeedbackDefaultTypeInternal;
extern GripperCommand_FeedbackDefaultTypeInternal _GripperCommand_Feedback_default_instance_;
class GripperCommand_Request;
struct GripperCommand_RequestDefaultTypeInternal;
extern GripperCommand_RequestDefaultTypeInternal _GripperCommand_Request_default_instance_;
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::ClawGripperCommand* Arena::CreateMaybeMessage<::bosdyn::api::ClawGripperCommand>(Arena*);
template<> ::bosdyn::api::ClawGripperCommand_Feedback* Arena::CreateMaybeMessage<::bosdyn::api::ClawGripperCommand_Feedback>(Arena*);
template<> ::bosdyn::api::ClawGripperCommand_Request* Arena::CreateMaybeMessage<::bosdyn::api::ClawGripperCommand_Request>(Arena*);
template<> ::bosdyn::api::GripperCommand* Arena::CreateMaybeMessage<::bosdyn::api::GripperCommand>(Arena*);
template<> ::bosdyn::api::GripperCommand_Feedback* Arena::CreateMaybeMessage<::bosdyn::api::GripperCommand_Feedback>(Arena*);
template<> ::bosdyn::api::GripperCommand_Request* Arena::CreateMaybeMessage<::bosdyn::api::GripperCommand_Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {

enum ClawGripperCommand_Feedback_Status : int {
  ClawGripperCommand_Feedback_Status_STATUS_UNKNOWN = 0,
  ClawGripperCommand_Feedback_Status_STATUS_IN_PROGRESS = 1,
  ClawGripperCommand_Feedback_Status_STATUS_AT_GOAL = 2,
  ClawGripperCommand_Feedback_Status_STATUS_APPLYING_FORCE = 3,
  ClawGripperCommand_Feedback_Status_ClawGripperCommand_Feedback_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ClawGripperCommand_Feedback_Status_ClawGripperCommand_Feedback_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ClawGripperCommand_Feedback_Status_IsValid(int value);
constexpr ClawGripperCommand_Feedback_Status ClawGripperCommand_Feedback_Status_Status_MIN = ClawGripperCommand_Feedback_Status_STATUS_UNKNOWN;
constexpr ClawGripperCommand_Feedback_Status ClawGripperCommand_Feedback_Status_Status_MAX = ClawGripperCommand_Feedback_Status_STATUS_APPLYING_FORCE;
constexpr int ClawGripperCommand_Feedback_Status_Status_ARRAYSIZE = ClawGripperCommand_Feedback_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClawGripperCommand_Feedback_Status_descriptor();
template<typename T>
inline const std::string& ClawGripperCommand_Feedback_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClawGripperCommand_Feedback_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClawGripperCommand_Feedback_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClawGripperCommand_Feedback_Status_descriptor(), enum_t_value);
}
inline bool ClawGripperCommand_Feedback_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClawGripperCommand_Feedback_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClawGripperCommand_Feedback_Status>(
    ClawGripperCommand_Feedback_Status_descriptor(), name, value);
}
// ===================================================================

class GripperCommand_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.GripperCommand.Request) */ {
 public:
  inline GripperCommand_Request() : GripperCommand_Request(nullptr) {}
  ~GripperCommand_Request() override;
  explicit PROTOBUF_CONSTEXPR GripperCommand_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GripperCommand_Request(const GripperCommand_Request& from);
  GripperCommand_Request(GripperCommand_Request&& from) noexcept
    : GripperCommand_Request() {
    *this = ::std::move(from);
  }

  inline GripperCommand_Request& operator=(const GripperCommand_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline GripperCommand_Request& operator=(GripperCommand_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GripperCommand_Request& default_instance() {
    return *internal_default_instance();
  }
  enum CommandCase {
    kClawGripperCommand = 1,
    COMMAND_NOT_SET = 0,
  };

  static inline const GripperCommand_Request* internal_default_instance() {
    return reinterpret_cast<const GripperCommand_Request*>(
               &_GripperCommand_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GripperCommand_Request& a, GripperCommand_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(GripperCommand_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GripperCommand_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GripperCommand_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GripperCommand_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GripperCommand_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GripperCommand_Request& from) {
    GripperCommand_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GripperCommand_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.GripperCommand.Request";
  }
  protected:
  explicit GripperCommand_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClawGripperCommandFieldNumber = 1,
  };
  // .bosdyn.api.ClawGripperCommand.Request claw_gripper_command = 1;
  bool has_claw_gripper_command() const;
  private:
  bool _internal_has_claw_gripper_command() const;
  public:
  void clear_claw_gripper_command();
  const ::bosdyn::api::ClawGripperCommand_Request& claw_gripper_command() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ClawGripperCommand_Request* release_claw_gripper_command();
  ::bosdyn::api::ClawGripperCommand_Request* mutable_claw_gripper_command();
  void set_allocated_claw_gripper_command(::bosdyn::api::ClawGripperCommand_Request* claw_gripper_command);
  private:
  const ::bosdyn::api::ClawGripperCommand_Request& _internal_claw_gripper_command() const;
  ::bosdyn::api::ClawGripperCommand_Request* _internal_mutable_claw_gripper_command();
  public:
  void unsafe_arena_set_allocated_claw_gripper_command(
      ::bosdyn::api::ClawGripperCommand_Request* claw_gripper_command);
  ::bosdyn::api::ClawGripperCommand_Request* unsafe_arena_release_claw_gripper_command();

  void clear_command();
  CommandCase command_case() const;
  // @@protoc_insertion_point(class_scope:bosdyn.api.GripperCommand.Request)
 private:
  class _Internal;
  void set_has_claw_gripper_command();

  inline bool has_command() const;
  inline void clear_has_command();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union CommandUnion {
      constexpr CommandUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::bosdyn::api::ClawGripperCommand_Request* claw_gripper_command_;
    } command_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgripper_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class GripperCommand_Feedback final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.GripperCommand.Feedback) */ {
 public:
  inline GripperCommand_Feedback() : GripperCommand_Feedback(nullptr) {}
  ~GripperCommand_Feedback() override;
  explicit PROTOBUF_CONSTEXPR GripperCommand_Feedback(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GripperCommand_Feedback(const GripperCommand_Feedback& from);
  GripperCommand_Feedback(GripperCommand_Feedback&& from) noexcept
    : GripperCommand_Feedback() {
    *this = ::std::move(from);
  }

  inline GripperCommand_Feedback& operator=(const GripperCommand_Feedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline GripperCommand_Feedback& operator=(GripperCommand_Feedback&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GripperCommand_Feedback& default_instance() {
    return *internal_default_instance();
  }
  enum CommandCase {
    kClawGripperFeedback = 1,
    COMMAND_NOT_SET = 0,
  };

  static inline const GripperCommand_Feedback* internal_default_instance() {
    return reinterpret_cast<const GripperCommand_Feedback*>(
               &_GripperCommand_Feedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GripperCommand_Feedback& a, GripperCommand_Feedback& b) {
    a.Swap(&b);
  }
  inline void Swap(GripperCommand_Feedback* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GripperCommand_Feedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GripperCommand_Feedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GripperCommand_Feedback>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GripperCommand_Feedback& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GripperCommand_Feedback& from) {
    GripperCommand_Feedback::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GripperCommand_Feedback* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.GripperCommand.Feedback";
  }
  protected:
  explicit GripperCommand_Feedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kClawGripperFeedbackFieldNumber = 1,
  };
  // .bosdyn.api.RobotCommandFeedbackStatus.Status status = 2;
  void clear_status();
  ::bosdyn::api::RobotCommandFeedbackStatus_Status status() const;
  void set_status(::bosdyn::api::RobotCommandFeedbackStatus_Status value);
  private:
  ::bosdyn::api::RobotCommandFeedbackStatus_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::RobotCommandFeedbackStatus_Status value);
  public:

  // .bosdyn.api.ClawGripperCommand.Feedback claw_gripper_feedback = 1;
  bool has_claw_gripper_feedback() const;
  private:
  bool _internal_has_claw_gripper_feedback() const;
  public:
  void clear_claw_gripper_feedback();
  const ::bosdyn::api::ClawGripperCommand_Feedback& claw_gripper_feedback() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ClawGripperCommand_Feedback* release_claw_gripper_feedback();
  ::bosdyn::api::ClawGripperCommand_Feedback* mutable_claw_gripper_feedback();
  void set_allocated_claw_gripper_feedback(::bosdyn::api::ClawGripperCommand_Feedback* claw_gripper_feedback);
  private:
  const ::bosdyn::api::ClawGripperCommand_Feedback& _internal_claw_gripper_feedback() const;
  ::bosdyn::api::ClawGripperCommand_Feedback* _internal_mutable_claw_gripper_feedback();
  public:
  void unsafe_arena_set_allocated_claw_gripper_feedback(
      ::bosdyn::api::ClawGripperCommand_Feedback* claw_gripper_feedback);
  ::bosdyn::api::ClawGripperCommand_Feedback* unsafe_arena_release_claw_gripper_feedback();

  void clear_command();
  CommandCase command_case() const;
  // @@protoc_insertion_point(class_scope:bosdyn.api.GripperCommand.Feedback)
 private:
  class _Internal;
  void set_has_claw_gripper_feedback();

  inline bool has_command() const;
  inline void clear_has_command();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int status_;
    union CommandUnion {
      constexpr CommandUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::bosdyn::api::ClawGripperCommand_Feedback* claw_gripper_feedback_;
    } command_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgripper_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class GripperCommand final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:bosdyn.api.GripperCommand) */ {
 public:
  inline GripperCommand() : GripperCommand(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GripperCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GripperCommand(const GripperCommand& from);
  GripperCommand(GripperCommand&& from) noexcept
    : GripperCommand() {
    *this = ::std::move(from);
  }

  inline GripperCommand& operator=(const GripperCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GripperCommand& operator=(GripperCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GripperCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const GripperCommand* internal_default_instance() {
    return reinterpret_cast<const GripperCommand*>(
               &_GripperCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GripperCommand& a, GripperCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(GripperCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GripperCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GripperCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GripperCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GripperCommand& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GripperCommand& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.GripperCommand";
  }
  protected:
  explicit GripperCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GripperCommand_Request Request;
  typedef GripperCommand_Feedback Feedback;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.GripperCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_bosdyn_2fapi_2fgripper_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class ClawGripperCommand_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.ClawGripperCommand.Request) */ {
 public:
  inline ClawGripperCommand_Request() : ClawGripperCommand_Request(nullptr) {}
  ~ClawGripperCommand_Request() override;
  explicit PROTOBUF_CONSTEXPR ClawGripperCommand_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClawGripperCommand_Request(const ClawGripperCommand_Request& from);
  ClawGripperCommand_Request(ClawGripperCommand_Request&& from) noexcept
    : ClawGripperCommand_Request() {
    *this = ::std::move(from);
  }

  inline ClawGripperCommand_Request& operator=(const ClawGripperCommand_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClawGripperCommand_Request& operator=(ClawGripperCommand_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClawGripperCommand_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClawGripperCommand_Request* internal_default_instance() {
    return reinterpret_cast<const ClawGripperCommand_Request*>(
               &_ClawGripperCommand_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ClawGripperCommand_Request& a, ClawGripperCommand_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(ClawGripperCommand_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClawGripperCommand_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClawGripperCommand_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClawGripperCommand_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClawGripperCommand_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClawGripperCommand_Request& from) {
    ClawGripperCommand_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClawGripperCommand_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ClawGripperCommand.Request";
  }
  protected:
  explicit ClawGripperCommand_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaximumOpenCloseVelocityFieldNumber = 2,
    kMaximumOpenCloseAccelerationFieldNumber = 3,
    kMaximumTorqueFieldNumber = 4,
    kTrajectoryFieldNumber = 5,
    kDisableForceOnContactFieldNumber = 6,
  };
  // .google.protobuf.DoubleValue maximum_open_close_velocity = 2;
  bool has_maximum_open_close_velocity() const;
  private:
  bool _internal_has_maximum_open_close_velocity() const;
  public:
  void clear_maximum_open_close_velocity();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& maximum_open_close_velocity() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_maximum_open_close_velocity();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_maximum_open_close_velocity();
  void set_allocated_maximum_open_close_velocity(::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_open_close_velocity);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_maximum_open_close_velocity() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_maximum_open_close_velocity();
  public:
  void unsafe_arena_set_allocated_maximum_open_close_velocity(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_open_close_velocity);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_maximum_open_close_velocity();

  // .google.protobuf.DoubleValue maximum_open_close_acceleration = 3;
  bool has_maximum_open_close_acceleration() const;
  private:
  bool _internal_has_maximum_open_close_acceleration() const;
  public:
  void clear_maximum_open_close_acceleration();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& maximum_open_close_acceleration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_maximum_open_close_acceleration();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_maximum_open_close_acceleration();
  void set_allocated_maximum_open_close_acceleration(::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_open_close_acceleration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_maximum_open_close_acceleration() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_maximum_open_close_acceleration();
  public:
  void unsafe_arena_set_allocated_maximum_open_close_acceleration(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_open_close_acceleration);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_maximum_open_close_acceleration();

  // .google.protobuf.DoubleValue maximum_torque = 4;
  bool has_maximum_torque() const;
  private:
  bool _internal_has_maximum_torque() const;
  public:
  void clear_maximum_torque();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& maximum_torque() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_maximum_torque();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_maximum_torque();
  void set_allocated_maximum_torque(::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_torque);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_maximum_torque() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_maximum_torque();
  public:
  void unsafe_arena_set_allocated_maximum_torque(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_torque);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_maximum_torque();

  // .bosdyn.api.ScalarTrajectory trajectory = 5;
  bool has_trajectory() const;
  private:
  bool _internal_has_trajectory() const;
  public:
  void clear_trajectory();
  const ::bosdyn::api::ScalarTrajectory& trajectory() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ScalarTrajectory* release_trajectory();
  ::bosdyn::api::ScalarTrajectory* mutable_trajectory();
  void set_allocated_trajectory(::bosdyn::api::ScalarTrajectory* trajectory);
  private:
  const ::bosdyn::api::ScalarTrajectory& _internal_trajectory() const;
  ::bosdyn::api::ScalarTrajectory* _internal_mutable_trajectory();
  public:
  void unsafe_arena_set_allocated_trajectory(
      ::bosdyn::api::ScalarTrajectory* trajectory);
  ::bosdyn::api::ScalarTrajectory* unsafe_arena_release_trajectory();

  // bool disable_force_on_contact = 6;
  void clear_disable_force_on_contact();
  bool disable_force_on_contact() const;
  void set_disable_force_on_contact(bool value);
  private:
  bool _internal_disable_force_on_contact() const;
  void _internal_set_disable_force_on_contact(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.ClawGripperCommand.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_open_close_velocity_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_open_close_acceleration_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_torque_;
    ::bosdyn::api::ScalarTrajectory* trajectory_;
    bool disable_force_on_contact_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgripper_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class ClawGripperCommand_Feedback final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.ClawGripperCommand.Feedback) */ {
 public:
  inline ClawGripperCommand_Feedback() : ClawGripperCommand_Feedback(nullptr) {}
  ~ClawGripperCommand_Feedback() override;
  explicit PROTOBUF_CONSTEXPR ClawGripperCommand_Feedback(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClawGripperCommand_Feedback(const ClawGripperCommand_Feedback& from);
  ClawGripperCommand_Feedback(ClawGripperCommand_Feedback&& from) noexcept
    : ClawGripperCommand_Feedback() {
    *this = ::std::move(from);
  }

  inline ClawGripperCommand_Feedback& operator=(const ClawGripperCommand_Feedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClawGripperCommand_Feedback& operator=(ClawGripperCommand_Feedback&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClawGripperCommand_Feedback& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClawGripperCommand_Feedback* internal_default_instance() {
    return reinterpret_cast<const ClawGripperCommand_Feedback*>(
               &_ClawGripperCommand_Feedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ClawGripperCommand_Feedback& a, ClawGripperCommand_Feedback& b) {
    a.Swap(&b);
  }
  inline void Swap(ClawGripperCommand_Feedback* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClawGripperCommand_Feedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClawGripperCommand_Feedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClawGripperCommand_Feedback>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClawGripperCommand_Feedback& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClawGripperCommand_Feedback& from) {
    ClawGripperCommand_Feedback::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClawGripperCommand_Feedback* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ClawGripperCommand.Feedback";
  }
  protected:
  explicit ClawGripperCommand_Feedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ClawGripperCommand_Feedback_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    ClawGripperCommand_Feedback_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_IN_PROGRESS =
    ClawGripperCommand_Feedback_Status_STATUS_IN_PROGRESS;
  static constexpr Status STATUS_AT_GOAL =
    ClawGripperCommand_Feedback_Status_STATUS_AT_GOAL;
  static constexpr Status STATUS_APPLYING_FORCE =
    ClawGripperCommand_Feedback_Status_STATUS_APPLYING_FORCE;
  static inline bool Status_IsValid(int value) {
    return ClawGripperCommand_Feedback_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ClawGripperCommand_Feedback_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ClawGripperCommand_Feedback_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ClawGripperCommand_Feedback_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ClawGripperCommand_Feedback_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ClawGripperCommand_Feedback_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return ClawGripperCommand_Feedback_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .bosdyn.api.ClawGripperCommand.Feedback.Status status = 1;
  void clear_status();
  ::bosdyn::api::ClawGripperCommand_Feedback_Status status() const;
  void set_status(::bosdyn::api::ClawGripperCommand_Feedback_Status value);
  private:
  ::bosdyn::api::ClawGripperCommand_Feedback_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::ClawGripperCommand_Feedback_Status value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.ClawGripperCommand.Feedback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgripper_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class ClawGripperCommand final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:bosdyn.api.ClawGripperCommand) */ {
 public:
  inline ClawGripperCommand() : ClawGripperCommand(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ClawGripperCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClawGripperCommand(const ClawGripperCommand& from);
  ClawGripperCommand(ClawGripperCommand&& from) noexcept
    : ClawGripperCommand() {
    *this = ::std::move(from);
  }

  inline ClawGripperCommand& operator=(const ClawGripperCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClawGripperCommand& operator=(ClawGripperCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClawGripperCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClawGripperCommand* internal_default_instance() {
    return reinterpret_cast<const ClawGripperCommand*>(
               &_ClawGripperCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ClawGripperCommand& a, ClawGripperCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(ClawGripperCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClawGripperCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClawGripperCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClawGripperCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ClawGripperCommand& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ClawGripperCommand& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ClawGripperCommand";
  }
  protected:
  explicit ClawGripperCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ClawGripperCommand_Request Request;
  typedef ClawGripperCommand_Feedback Feedback;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.ClawGripperCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_bosdyn_2fapi_2fgripper_5fcommand_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GripperCommand_Request

// .bosdyn.api.ClawGripperCommand.Request claw_gripper_command = 1;
inline bool GripperCommand_Request::_internal_has_claw_gripper_command() const {
  return command_case() == kClawGripperCommand;
}
inline bool GripperCommand_Request::has_claw_gripper_command() const {
  return _internal_has_claw_gripper_command();
}
inline void GripperCommand_Request::set_has_claw_gripper_command() {
  _impl_._oneof_case_[0] = kClawGripperCommand;
}
inline void GripperCommand_Request::clear_claw_gripper_command() {
  if (_internal_has_claw_gripper_command()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.command_.claw_gripper_command_;
    }
    clear_has_command();
  }
}
inline ::bosdyn::api::ClawGripperCommand_Request* GripperCommand_Request::release_claw_gripper_command() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GripperCommand.Request.claw_gripper_command)
  if (_internal_has_claw_gripper_command()) {
    clear_has_command();
    ::bosdyn::api::ClawGripperCommand_Request* temp = _impl_.command_.claw_gripper_command_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.claw_gripper_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::ClawGripperCommand_Request& GripperCommand_Request::_internal_claw_gripper_command() const {
  return _internal_has_claw_gripper_command()
      ? *_impl_.command_.claw_gripper_command_
      : reinterpret_cast< ::bosdyn::api::ClawGripperCommand_Request&>(::bosdyn::api::_ClawGripperCommand_Request_default_instance_);
}
inline const ::bosdyn::api::ClawGripperCommand_Request& GripperCommand_Request::claw_gripper_command() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GripperCommand.Request.claw_gripper_command)
  return _internal_claw_gripper_command();
}
inline ::bosdyn::api::ClawGripperCommand_Request* GripperCommand_Request::unsafe_arena_release_claw_gripper_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.GripperCommand.Request.claw_gripper_command)
  if (_internal_has_claw_gripper_command()) {
    clear_has_command();
    ::bosdyn::api::ClawGripperCommand_Request* temp = _impl_.command_.claw_gripper_command_;
    _impl_.command_.claw_gripper_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GripperCommand_Request::unsafe_arena_set_allocated_claw_gripper_command(::bosdyn::api::ClawGripperCommand_Request* claw_gripper_command) {
  clear_command();
  if (claw_gripper_command) {
    set_has_claw_gripper_command();
    _impl_.command_.claw_gripper_command_ = claw_gripper_command;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GripperCommand.Request.claw_gripper_command)
}
inline ::bosdyn::api::ClawGripperCommand_Request* GripperCommand_Request::_internal_mutable_claw_gripper_command() {
  if (!_internal_has_claw_gripper_command()) {
    clear_command();
    set_has_claw_gripper_command();
    _impl_.command_.claw_gripper_command_ = CreateMaybeMessage< ::bosdyn::api::ClawGripperCommand_Request >(GetArenaForAllocation());
  }
  return _impl_.command_.claw_gripper_command_;
}
inline ::bosdyn::api::ClawGripperCommand_Request* GripperCommand_Request::mutable_claw_gripper_command() {
  ::bosdyn::api::ClawGripperCommand_Request* _msg = _internal_mutable_claw_gripper_command();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GripperCommand.Request.claw_gripper_command)
  return _msg;
}

inline bool GripperCommand_Request::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
inline void GripperCommand_Request::clear_has_command() {
  _impl_._oneof_case_[0] = COMMAND_NOT_SET;
}
inline GripperCommand_Request::CommandCase GripperCommand_Request::command_case() const {
  return GripperCommand_Request::CommandCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// GripperCommand_Feedback

// .bosdyn.api.ClawGripperCommand.Feedback claw_gripper_feedback = 1;
inline bool GripperCommand_Feedback::_internal_has_claw_gripper_feedback() const {
  return command_case() == kClawGripperFeedback;
}
inline bool GripperCommand_Feedback::has_claw_gripper_feedback() const {
  return _internal_has_claw_gripper_feedback();
}
inline void GripperCommand_Feedback::set_has_claw_gripper_feedback() {
  _impl_._oneof_case_[0] = kClawGripperFeedback;
}
inline void GripperCommand_Feedback::clear_claw_gripper_feedback() {
  if (_internal_has_claw_gripper_feedback()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.command_.claw_gripper_feedback_;
    }
    clear_has_command();
  }
}
inline ::bosdyn::api::ClawGripperCommand_Feedback* GripperCommand_Feedback::release_claw_gripper_feedback() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GripperCommand.Feedback.claw_gripper_feedback)
  if (_internal_has_claw_gripper_feedback()) {
    clear_has_command();
    ::bosdyn::api::ClawGripperCommand_Feedback* temp = _impl_.command_.claw_gripper_feedback_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.claw_gripper_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::ClawGripperCommand_Feedback& GripperCommand_Feedback::_internal_claw_gripper_feedback() const {
  return _internal_has_claw_gripper_feedback()
      ? *_impl_.command_.claw_gripper_feedback_
      : reinterpret_cast< ::bosdyn::api::ClawGripperCommand_Feedback&>(::bosdyn::api::_ClawGripperCommand_Feedback_default_instance_);
}
inline const ::bosdyn::api::ClawGripperCommand_Feedback& GripperCommand_Feedback::claw_gripper_feedback() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GripperCommand.Feedback.claw_gripper_feedback)
  return _internal_claw_gripper_feedback();
}
inline ::bosdyn::api::ClawGripperCommand_Feedback* GripperCommand_Feedback::unsafe_arena_release_claw_gripper_feedback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.GripperCommand.Feedback.claw_gripper_feedback)
  if (_internal_has_claw_gripper_feedback()) {
    clear_has_command();
    ::bosdyn::api::ClawGripperCommand_Feedback* temp = _impl_.command_.claw_gripper_feedback_;
    _impl_.command_.claw_gripper_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GripperCommand_Feedback::unsafe_arena_set_allocated_claw_gripper_feedback(::bosdyn::api::ClawGripperCommand_Feedback* claw_gripper_feedback) {
  clear_command();
  if (claw_gripper_feedback) {
    set_has_claw_gripper_feedback();
    _impl_.command_.claw_gripper_feedback_ = claw_gripper_feedback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GripperCommand.Feedback.claw_gripper_feedback)
}
inline ::bosdyn::api::ClawGripperCommand_Feedback* GripperCommand_Feedback::_internal_mutable_claw_gripper_feedback() {
  if (!_internal_has_claw_gripper_feedback()) {
    clear_command();
    set_has_claw_gripper_feedback();
    _impl_.command_.claw_gripper_feedback_ = CreateMaybeMessage< ::bosdyn::api::ClawGripperCommand_Feedback >(GetArenaForAllocation());
  }
  return _impl_.command_.claw_gripper_feedback_;
}
inline ::bosdyn::api::ClawGripperCommand_Feedback* GripperCommand_Feedback::mutable_claw_gripper_feedback() {
  ::bosdyn::api::ClawGripperCommand_Feedback* _msg = _internal_mutable_claw_gripper_feedback();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GripperCommand.Feedback.claw_gripper_feedback)
  return _msg;
}

// .bosdyn.api.RobotCommandFeedbackStatus.Status status = 2;
inline void GripperCommand_Feedback::clear_status() {
  _impl_.status_ = 0;
}
inline ::bosdyn::api::RobotCommandFeedbackStatus_Status GripperCommand_Feedback::_internal_status() const {
  return static_cast< ::bosdyn::api::RobotCommandFeedbackStatus_Status >(_impl_.status_);
}
inline ::bosdyn::api::RobotCommandFeedbackStatus_Status GripperCommand_Feedback::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GripperCommand.Feedback.status)
  return _internal_status();
}
inline void GripperCommand_Feedback::_internal_set_status(::bosdyn::api::RobotCommandFeedbackStatus_Status value) {
  
  _impl_.status_ = value;
}
inline void GripperCommand_Feedback::set_status(::bosdyn::api::RobotCommandFeedbackStatus_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.GripperCommand.Feedback.status)
}

inline bool GripperCommand_Feedback::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
inline void GripperCommand_Feedback::clear_has_command() {
  _impl_._oneof_case_[0] = COMMAND_NOT_SET;
}
inline GripperCommand_Feedback::CommandCase GripperCommand_Feedback::command_case() const {
  return GripperCommand_Feedback::CommandCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// GripperCommand

// -------------------------------------------------------------------

// ClawGripperCommand_Request

// .bosdyn.api.ScalarTrajectory trajectory = 5;
inline bool ClawGripperCommand_Request::_internal_has_trajectory() const {
  return this != internal_default_instance() && _impl_.trajectory_ != nullptr;
}
inline bool ClawGripperCommand_Request::has_trajectory() const {
  return _internal_has_trajectory();
}
inline const ::bosdyn::api::ScalarTrajectory& ClawGripperCommand_Request::_internal_trajectory() const {
  const ::bosdyn::api::ScalarTrajectory* p = _impl_.trajectory_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ScalarTrajectory&>(
      ::bosdyn::api::_ScalarTrajectory_default_instance_);
}
inline const ::bosdyn::api::ScalarTrajectory& ClawGripperCommand_Request::trajectory() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ClawGripperCommand.Request.trajectory)
  return _internal_trajectory();
}
inline void ClawGripperCommand_Request::unsafe_arena_set_allocated_trajectory(
    ::bosdyn::api::ScalarTrajectory* trajectory) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trajectory_);
  }
  _impl_.trajectory_ = trajectory;
  if (trajectory) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ClawGripperCommand.Request.trajectory)
}
inline ::bosdyn::api::ScalarTrajectory* ClawGripperCommand_Request::release_trajectory() {
  
  ::bosdyn::api::ScalarTrajectory* temp = _impl_.trajectory_;
  _impl_.trajectory_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ScalarTrajectory* ClawGripperCommand_Request::unsafe_arena_release_trajectory() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ClawGripperCommand.Request.trajectory)
  
  ::bosdyn::api::ScalarTrajectory* temp = _impl_.trajectory_;
  _impl_.trajectory_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ScalarTrajectory* ClawGripperCommand_Request::_internal_mutable_trajectory() {
  
  if (_impl_.trajectory_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ScalarTrajectory>(GetArenaForAllocation());
    _impl_.trajectory_ = p;
  }
  return _impl_.trajectory_;
}
inline ::bosdyn::api::ScalarTrajectory* ClawGripperCommand_Request::mutable_trajectory() {
  ::bosdyn::api::ScalarTrajectory* _msg = _internal_mutable_trajectory();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ClawGripperCommand.Request.trajectory)
  return _msg;
}
inline void ClawGripperCommand_Request::set_allocated_trajectory(::bosdyn::api::ScalarTrajectory* trajectory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trajectory_);
  }
  if (trajectory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trajectory));
    if (message_arena != submessage_arena) {
      trajectory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trajectory, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.trajectory_ = trajectory;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ClawGripperCommand.Request.trajectory)
}

// .google.protobuf.DoubleValue maximum_open_close_velocity = 2;
inline bool ClawGripperCommand_Request::_internal_has_maximum_open_close_velocity() const {
  return this != internal_default_instance() && _impl_.maximum_open_close_velocity_ != nullptr;
}
inline bool ClawGripperCommand_Request::has_maximum_open_close_velocity() const {
  return _internal_has_maximum_open_close_velocity();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ClawGripperCommand_Request::_internal_maximum_open_close_velocity() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.maximum_open_close_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ClawGripperCommand_Request::maximum_open_close_velocity() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ClawGripperCommand.Request.maximum_open_close_velocity)
  return _internal_maximum_open_close_velocity();
}
inline void ClawGripperCommand_Request::unsafe_arena_set_allocated_maximum_open_close_velocity(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_open_close_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maximum_open_close_velocity_);
  }
  _impl_.maximum_open_close_velocity_ = maximum_open_close_velocity;
  if (maximum_open_close_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ClawGripperCommand.Request.maximum_open_close_velocity)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ClawGripperCommand_Request::release_maximum_open_close_velocity() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.maximum_open_close_velocity_;
  _impl_.maximum_open_close_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ClawGripperCommand_Request::unsafe_arena_release_maximum_open_close_velocity() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ClawGripperCommand.Request.maximum_open_close_velocity)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.maximum_open_close_velocity_;
  _impl_.maximum_open_close_velocity_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ClawGripperCommand_Request::_internal_mutable_maximum_open_close_velocity() {
  
  if (_impl_.maximum_open_close_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.maximum_open_close_velocity_ = p;
  }
  return _impl_.maximum_open_close_velocity_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ClawGripperCommand_Request::mutable_maximum_open_close_velocity() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_maximum_open_close_velocity();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ClawGripperCommand.Request.maximum_open_close_velocity)
  return _msg;
}
inline void ClawGripperCommand_Request::set_allocated_maximum_open_close_velocity(::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_open_close_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maximum_open_close_velocity_);
  }
  if (maximum_open_close_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maximum_open_close_velocity));
    if (message_arena != submessage_arena) {
      maximum_open_close_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maximum_open_close_velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.maximum_open_close_velocity_ = maximum_open_close_velocity;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ClawGripperCommand.Request.maximum_open_close_velocity)
}

// .google.protobuf.DoubleValue maximum_open_close_acceleration = 3;
inline bool ClawGripperCommand_Request::_internal_has_maximum_open_close_acceleration() const {
  return this != internal_default_instance() && _impl_.maximum_open_close_acceleration_ != nullptr;
}
inline bool ClawGripperCommand_Request::has_maximum_open_close_acceleration() const {
  return _internal_has_maximum_open_close_acceleration();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ClawGripperCommand_Request::_internal_maximum_open_close_acceleration() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.maximum_open_close_acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ClawGripperCommand_Request::maximum_open_close_acceleration() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ClawGripperCommand.Request.maximum_open_close_acceleration)
  return _internal_maximum_open_close_acceleration();
}
inline void ClawGripperCommand_Request::unsafe_arena_set_allocated_maximum_open_close_acceleration(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_open_close_acceleration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maximum_open_close_acceleration_);
  }
  _impl_.maximum_open_close_acceleration_ = maximum_open_close_acceleration;
  if (maximum_open_close_acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ClawGripperCommand.Request.maximum_open_close_acceleration)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ClawGripperCommand_Request::release_maximum_open_close_acceleration() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.maximum_open_close_acceleration_;
  _impl_.maximum_open_close_acceleration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ClawGripperCommand_Request::unsafe_arena_release_maximum_open_close_acceleration() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ClawGripperCommand.Request.maximum_open_close_acceleration)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.maximum_open_close_acceleration_;
  _impl_.maximum_open_close_acceleration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ClawGripperCommand_Request::_internal_mutable_maximum_open_close_acceleration() {
  
  if (_impl_.maximum_open_close_acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.maximum_open_close_acceleration_ = p;
  }
  return _impl_.maximum_open_close_acceleration_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ClawGripperCommand_Request::mutable_maximum_open_close_acceleration() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_maximum_open_close_acceleration();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ClawGripperCommand.Request.maximum_open_close_acceleration)
  return _msg;
}
inline void ClawGripperCommand_Request::set_allocated_maximum_open_close_acceleration(::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_open_close_acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maximum_open_close_acceleration_);
  }
  if (maximum_open_close_acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maximum_open_close_acceleration));
    if (message_arena != submessage_arena) {
      maximum_open_close_acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maximum_open_close_acceleration, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.maximum_open_close_acceleration_ = maximum_open_close_acceleration;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ClawGripperCommand.Request.maximum_open_close_acceleration)
}

// .google.protobuf.DoubleValue maximum_torque = 4;
inline bool ClawGripperCommand_Request::_internal_has_maximum_torque() const {
  return this != internal_default_instance() && _impl_.maximum_torque_ != nullptr;
}
inline bool ClawGripperCommand_Request::has_maximum_torque() const {
  return _internal_has_maximum_torque();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ClawGripperCommand_Request::_internal_maximum_torque() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.maximum_torque_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ClawGripperCommand_Request::maximum_torque() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ClawGripperCommand.Request.maximum_torque)
  return _internal_maximum_torque();
}
inline void ClawGripperCommand_Request::unsafe_arena_set_allocated_maximum_torque(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_torque) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maximum_torque_);
  }
  _impl_.maximum_torque_ = maximum_torque;
  if (maximum_torque) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ClawGripperCommand.Request.maximum_torque)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ClawGripperCommand_Request::release_maximum_torque() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.maximum_torque_;
  _impl_.maximum_torque_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ClawGripperCommand_Request::unsafe_arena_release_maximum_torque() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ClawGripperCommand.Request.maximum_torque)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.maximum_torque_;
  _impl_.maximum_torque_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ClawGripperCommand_Request::_internal_mutable_maximum_torque() {
  
  if (_impl_.maximum_torque_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.maximum_torque_ = p;
  }
  return _impl_.maximum_torque_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ClawGripperCommand_Request::mutable_maximum_torque() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_maximum_torque();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ClawGripperCommand.Request.maximum_torque)
  return _msg;
}
inline void ClawGripperCommand_Request::set_allocated_maximum_torque(::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_torque) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maximum_torque_);
  }
  if (maximum_torque) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maximum_torque));
    if (message_arena != submessage_arena) {
      maximum_torque = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maximum_torque, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.maximum_torque_ = maximum_torque;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ClawGripperCommand.Request.maximum_torque)
}

// bool disable_force_on_contact = 6;
inline void ClawGripperCommand_Request::clear_disable_force_on_contact() {
  _impl_.disable_force_on_contact_ = false;
}
inline bool ClawGripperCommand_Request::_internal_disable_force_on_contact() const {
  return _impl_.disable_force_on_contact_;
}
inline bool ClawGripperCommand_Request::disable_force_on_contact() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ClawGripperCommand.Request.disable_force_on_contact)
  return _internal_disable_force_on_contact();
}
inline void ClawGripperCommand_Request::_internal_set_disable_force_on_contact(bool value) {
  
  _impl_.disable_force_on_contact_ = value;
}
inline void ClawGripperCommand_Request::set_disable_force_on_contact(bool value) {
  _internal_set_disable_force_on_contact(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.ClawGripperCommand.Request.disable_force_on_contact)
}

// -------------------------------------------------------------------

// ClawGripperCommand_Feedback

// .bosdyn.api.ClawGripperCommand.Feedback.Status status = 1;
inline void ClawGripperCommand_Feedback::clear_status() {
  _impl_.status_ = 0;
}
inline ::bosdyn::api::ClawGripperCommand_Feedback_Status ClawGripperCommand_Feedback::_internal_status() const {
  return static_cast< ::bosdyn::api::ClawGripperCommand_Feedback_Status >(_impl_.status_);
}
inline ::bosdyn::api::ClawGripperCommand_Feedback_Status ClawGripperCommand_Feedback::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ClawGripperCommand.Feedback.status)
  return _internal_status();
}
inline void ClawGripperCommand_Feedback::_internal_set_status(::bosdyn::api::ClawGripperCommand_Feedback_Status value) {
  
  _impl_.status_ = value;
}
inline void ClawGripperCommand_Feedback::set_status(::bosdyn::api::ClawGripperCommand_Feedback_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.ClawGripperCommand.Feedback.status)
}

// -------------------------------------------------------------------

// ClawGripperCommand

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::ClawGripperCommand_Feedback_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::ClawGripperCommand_Feedback_Status>() {
  return ::bosdyn::api::ClawGripperCommand_Feedback_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fgripper_5fcommand_2eproto

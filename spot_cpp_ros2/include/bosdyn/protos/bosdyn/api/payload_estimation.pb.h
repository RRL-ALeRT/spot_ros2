// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/payload_estimation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fpayload_5festimation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fpayload_5festimation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/payload.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fpayload_5festimation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fpayload_5festimation_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fpayload_5festimation_2eproto;
namespace bosdyn {
namespace api {
class PayloadEstimationCommand;
struct PayloadEstimationCommandDefaultTypeInternal;
extern PayloadEstimationCommandDefaultTypeInternal _PayloadEstimationCommand_default_instance_;
class PayloadEstimationCommand_Feedback;
struct PayloadEstimationCommand_FeedbackDefaultTypeInternal;
extern PayloadEstimationCommand_FeedbackDefaultTypeInternal _PayloadEstimationCommand_Feedback_default_instance_;
class PayloadEstimationCommand_Request;
struct PayloadEstimationCommand_RequestDefaultTypeInternal;
extern PayloadEstimationCommand_RequestDefaultTypeInternal _PayloadEstimationCommand_Request_default_instance_;
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::PayloadEstimationCommand* Arena::CreateMaybeMessage<::bosdyn::api::PayloadEstimationCommand>(Arena*);
template<> ::bosdyn::api::PayloadEstimationCommand_Feedback* Arena::CreateMaybeMessage<::bosdyn::api::PayloadEstimationCommand_Feedback>(Arena*);
template<> ::bosdyn::api::PayloadEstimationCommand_Request* Arena::CreateMaybeMessage<::bosdyn::api::PayloadEstimationCommand_Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {

enum PayloadEstimationCommand_Feedback_Status : int {
  PayloadEstimationCommand_Feedback_Status_STATUS_UNKNOWN = 0,
  PayloadEstimationCommand_Feedback_Status_STATUS_COMPLETED = 1,
  PayloadEstimationCommand_Feedback_Status_STATUS_SMALL_MASS = 2,
  PayloadEstimationCommand_Feedback_Status_STATUS_IN_PROGRESS = 3,
  PayloadEstimationCommand_Feedback_Status_STATUS_ERROR = 4,
  PayloadEstimationCommand_Feedback_Status_PayloadEstimationCommand_Feedback_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PayloadEstimationCommand_Feedback_Status_PayloadEstimationCommand_Feedback_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PayloadEstimationCommand_Feedback_Status_IsValid(int value);
constexpr PayloadEstimationCommand_Feedback_Status PayloadEstimationCommand_Feedback_Status_Status_MIN = PayloadEstimationCommand_Feedback_Status_STATUS_UNKNOWN;
constexpr PayloadEstimationCommand_Feedback_Status PayloadEstimationCommand_Feedback_Status_Status_MAX = PayloadEstimationCommand_Feedback_Status_STATUS_ERROR;
constexpr int PayloadEstimationCommand_Feedback_Status_Status_ARRAYSIZE = PayloadEstimationCommand_Feedback_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PayloadEstimationCommand_Feedback_Status_descriptor();
template<typename T>
inline const std::string& PayloadEstimationCommand_Feedback_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PayloadEstimationCommand_Feedback_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PayloadEstimationCommand_Feedback_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PayloadEstimationCommand_Feedback_Status_descriptor(), enum_t_value);
}
inline bool PayloadEstimationCommand_Feedback_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PayloadEstimationCommand_Feedback_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PayloadEstimationCommand_Feedback_Status>(
    PayloadEstimationCommand_Feedback_Status_descriptor(), name, value);
}
enum PayloadEstimationCommand_Feedback_Error : int {
  PayloadEstimationCommand_Feedback_Error_ERROR_UNKNOWN = 0,
  PayloadEstimationCommand_Feedback_Error_ERROR_NONE = 1,
  PayloadEstimationCommand_Feedback_Error_ERROR_FAILED_STAND = 2,
  PayloadEstimationCommand_Feedback_Error_ERROR_NO_RESULTS = 3,
  PayloadEstimationCommand_Feedback_Error_PayloadEstimationCommand_Feedback_Error_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PayloadEstimationCommand_Feedback_Error_PayloadEstimationCommand_Feedback_Error_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PayloadEstimationCommand_Feedback_Error_IsValid(int value);
constexpr PayloadEstimationCommand_Feedback_Error PayloadEstimationCommand_Feedback_Error_Error_MIN = PayloadEstimationCommand_Feedback_Error_ERROR_UNKNOWN;
constexpr PayloadEstimationCommand_Feedback_Error PayloadEstimationCommand_Feedback_Error_Error_MAX = PayloadEstimationCommand_Feedback_Error_ERROR_NO_RESULTS;
constexpr int PayloadEstimationCommand_Feedback_Error_Error_ARRAYSIZE = PayloadEstimationCommand_Feedback_Error_Error_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PayloadEstimationCommand_Feedback_Error_descriptor();
template<typename T>
inline const std::string& PayloadEstimationCommand_Feedback_Error_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PayloadEstimationCommand_Feedback_Error>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PayloadEstimationCommand_Feedback_Error_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PayloadEstimationCommand_Feedback_Error_descriptor(), enum_t_value);
}
inline bool PayloadEstimationCommand_Feedback_Error_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PayloadEstimationCommand_Feedback_Error* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PayloadEstimationCommand_Feedback_Error>(
    PayloadEstimationCommand_Feedback_Error_descriptor(), name, value);
}
// ===================================================================

class PayloadEstimationCommand_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:bosdyn.api.PayloadEstimationCommand.Request) */ {
 public:
  inline PayloadEstimationCommand_Request() : PayloadEstimationCommand_Request(nullptr) {}
  explicit PROTOBUF_CONSTEXPR PayloadEstimationCommand_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PayloadEstimationCommand_Request(const PayloadEstimationCommand_Request& from);
  PayloadEstimationCommand_Request(PayloadEstimationCommand_Request&& from) noexcept
    : PayloadEstimationCommand_Request() {
    *this = ::std::move(from);
  }

  inline PayloadEstimationCommand_Request& operator=(const PayloadEstimationCommand_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayloadEstimationCommand_Request& operator=(PayloadEstimationCommand_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayloadEstimationCommand_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayloadEstimationCommand_Request* internal_default_instance() {
    return reinterpret_cast<const PayloadEstimationCommand_Request*>(
               &_PayloadEstimationCommand_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PayloadEstimationCommand_Request& a, PayloadEstimationCommand_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(PayloadEstimationCommand_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayloadEstimationCommand_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayloadEstimationCommand_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayloadEstimationCommand_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PayloadEstimationCommand_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PayloadEstimationCommand_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.PayloadEstimationCommand.Request";
  }
  protected:
  explicit PayloadEstimationCommand_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.PayloadEstimationCommand.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_bosdyn_2fapi_2fpayload_5festimation_2eproto;
};
// -------------------------------------------------------------------

class PayloadEstimationCommand_Feedback final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.PayloadEstimationCommand.Feedback) */ {
 public:
  inline PayloadEstimationCommand_Feedback() : PayloadEstimationCommand_Feedback(nullptr) {}
  ~PayloadEstimationCommand_Feedback() override;
  explicit PROTOBUF_CONSTEXPR PayloadEstimationCommand_Feedback(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PayloadEstimationCommand_Feedback(const PayloadEstimationCommand_Feedback& from);
  PayloadEstimationCommand_Feedback(PayloadEstimationCommand_Feedback&& from) noexcept
    : PayloadEstimationCommand_Feedback() {
    *this = ::std::move(from);
  }

  inline PayloadEstimationCommand_Feedback& operator=(const PayloadEstimationCommand_Feedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayloadEstimationCommand_Feedback& operator=(PayloadEstimationCommand_Feedback&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayloadEstimationCommand_Feedback& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayloadEstimationCommand_Feedback* internal_default_instance() {
    return reinterpret_cast<const PayloadEstimationCommand_Feedback*>(
               &_PayloadEstimationCommand_Feedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PayloadEstimationCommand_Feedback& a, PayloadEstimationCommand_Feedback& b) {
    a.Swap(&b);
  }
  inline void Swap(PayloadEstimationCommand_Feedback* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayloadEstimationCommand_Feedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayloadEstimationCommand_Feedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayloadEstimationCommand_Feedback>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PayloadEstimationCommand_Feedback& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PayloadEstimationCommand_Feedback& from) {
    PayloadEstimationCommand_Feedback::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PayloadEstimationCommand_Feedback* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.PayloadEstimationCommand.Feedback";
  }
  protected:
  explicit PayloadEstimationCommand_Feedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PayloadEstimationCommand_Feedback_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    PayloadEstimationCommand_Feedback_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_COMPLETED =
    PayloadEstimationCommand_Feedback_Status_STATUS_COMPLETED;
  static constexpr Status STATUS_SMALL_MASS =
    PayloadEstimationCommand_Feedback_Status_STATUS_SMALL_MASS;
  static constexpr Status STATUS_IN_PROGRESS =
    PayloadEstimationCommand_Feedback_Status_STATUS_IN_PROGRESS;
  static constexpr Status STATUS_ERROR =
    PayloadEstimationCommand_Feedback_Status_STATUS_ERROR;
  static inline bool Status_IsValid(int value) {
    return PayloadEstimationCommand_Feedback_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    PayloadEstimationCommand_Feedback_Status_Status_MIN;
  static constexpr Status Status_MAX =
    PayloadEstimationCommand_Feedback_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    PayloadEstimationCommand_Feedback_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return PayloadEstimationCommand_Feedback_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return PayloadEstimationCommand_Feedback_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return PayloadEstimationCommand_Feedback_Status_Parse(name, value);
  }

  typedef PayloadEstimationCommand_Feedback_Error Error;
  static constexpr Error ERROR_UNKNOWN =
    PayloadEstimationCommand_Feedback_Error_ERROR_UNKNOWN;
  static constexpr Error ERROR_NONE =
    PayloadEstimationCommand_Feedback_Error_ERROR_NONE;
  static constexpr Error ERROR_FAILED_STAND =
    PayloadEstimationCommand_Feedback_Error_ERROR_FAILED_STAND;
  static constexpr Error ERROR_NO_RESULTS =
    PayloadEstimationCommand_Feedback_Error_ERROR_NO_RESULTS;
  static inline bool Error_IsValid(int value) {
    return PayloadEstimationCommand_Feedback_Error_IsValid(value);
  }
  static constexpr Error Error_MIN =
    PayloadEstimationCommand_Feedback_Error_Error_MIN;
  static constexpr Error Error_MAX =
    PayloadEstimationCommand_Feedback_Error_Error_MAX;
  static constexpr int Error_ARRAYSIZE =
    PayloadEstimationCommand_Feedback_Error_Error_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Error_descriptor() {
    return PayloadEstimationCommand_Feedback_Error_descriptor();
  }
  template<typename T>
  static inline const std::string& Error_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Error>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Error_Name.");
    return PayloadEstimationCommand_Feedback_Error_Name(enum_t_value);
  }
  static inline bool Error_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Error* value) {
    return PayloadEstimationCommand_Feedback_Error_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEstimatedPayloadFieldNumber = 4,
    kStatusFieldNumber = 1,
    kProgressFieldNumber = 2,
    kErrorFieldNumber = 3,
  };
  // .bosdyn.api.Payload estimated_payload = 4;
  bool has_estimated_payload() const;
  private:
  bool _internal_has_estimated_payload() const;
  public:
  void clear_estimated_payload();
  const ::bosdyn::api::Payload& estimated_payload() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Payload* release_estimated_payload();
  ::bosdyn::api::Payload* mutable_estimated_payload();
  void set_allocated_estimated_payload(::bosdyn::api::Payload* estimated_payload);
  private:
  const ::bosdyn::api::Payload& _internal_estimated_payload() const;
  ::bosdyn::api::Payload* _internal_mutable_estimated_payload();
  public:
  void unsafe_arena_set_allocated_estimated_payload(
      ::bosdyn::api::Payload* estimated_payload);
  ::bosdyn::api::Payload* unsafe_arena_release_estimated_payload();

  // .bosdyn.api.PayloadEstimationCommand.Feedback.Status status = 1;
  void clear_status();
  ::bosdyn::api::PayloadEstimationCommand_Feedback_Status status() const;
  void set_status(::bosdyn::api::PayloadEstimationCommand_Feedback_Status value);
  private:
  ::bosdyn::api::PayloadEstimationCommand_Feedback_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::PayloadEstimationCommand_Feedback_Status value);
  public:

  // float progress = 2;
  void clear_progress();
  float progress() const;
  void set_progress(float value);
  private:
  float _internal_progress() const;
  void _internal_set_progress(float value);
  public:

  // .bosdyn.api.PayloadEstimationCommand.Feedback.Error error = 3;
  void clear_error();
  ::bosdyn::api::PayloadEstimationCommand_Feedback_Error error() const;
  void set_error(::bosdyn::api::PayloadEstimationCommand_Feedback_Error value);
  private:
  ::bosdyn::api::PayloadEstimationCommand_Feedback_Error _internal_error() const;
  void _internal_set_error(::bosdyn::api::PayloadEstimationCommand_Feedback_Error value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.PayloadEstimationCommand.Feedback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::Payload* estimated_payload_;
    int status_;
    float progress_;
    int error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fpayload_5festimation_2eproto;
};
// -------------------------------------------------------------------

class PayloadEstimationCommand final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:bosdyn.api.PayloadEstimationCommand) */ {
 public:
  inline PayloadEstimationCommand() : PayloadEstimationCommand(nullptr) {}
  explicit PROTOBUF_CONSTEXPR PayloadEstimationCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PayloadEstimationCommand(const PayloadEstimationCommand& from);
  PayloadEstimationCommand(PayloadEstimationCommand&& from) noexcept
    : PayloadEstimationCommand() {
    *this = ::std::move(from);
  }

  inline PayloadEstimationCommand& operator=(const PayloadEstimationCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayloadEstimationCommand& operator=(PayloadEstimationCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayloadEstimationCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayloadEstimationCommand* internal_default_instance() {
    return reinterpret_cast<const PayloadEstimationCommand*>(
               &_PayloadEstimationCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PayloadEstimationCommand& a, PayloadEstimationCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(PayloadEstimationCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayloadEstimationCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayloadEstimationCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayloadEstimationCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PayloadEstimationCommand& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PayloadEstimationCommand& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.PayloadEstimationCommand";
  }
  protected:
  explicit PayloadEstimationCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PayloadEstimationCommand_Request Request;
  typedef PayloadEstimationCommand_Feedback Feedback;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.PayloadEstimationCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_bosdyn_2fapi_2fpayload_5festimation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PayloadEstimationCommand_Request

// -------------------------------------------------------------------

// PayloadEstimationCommand_Feedback

// .bosdyn.api.PayloadEstimationCommand.Feedback.Status status = 1;
inline void PayloadEstimationCommand_Feedback::clear_status() {
  _impl_.status_ = 0;
}
inline ::bosdyn::api::PayloadEstimationCommand_Feedback_Status PayloadEstimationCommand_Feedback::_internal_status() const {
  return static_cast< ::bosdyn::api::PayloadEstimationCommand_Feedback_Status >(_impl_.status_);
}
inline ::bosdyn::api::PayloadEstimationCommand_Feedback_Status PayloadEstimationCommand_Feedback::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PayloadEstimationCommand.Feedback.status)
  return _internal_status();
}
inline void PayloadEstimationCommand_Feedback::_internal_set_status(::bosdyn::api::PayloadEstimationCommand_Feedback_Status value) {
  
  _impl_.status_ = value;
}
inline void PayloadEstimationCommand_Feedback::set_status(::bosdyn::api::PayloadEstimationCommand_Feedback_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.PayloadEstimationCommand.Feedback.status)
}

// float progress = 2;
inline void PayloadEstimationCommand_Feedback::clear_progress() {
  _impl_.progress_ = 0;
}
inline float PayloadEstimationCommand_Feedback::_internal_progress() const {
  return _impl_.progress_;
}
inline float PayloadEstimationCommand_Feedback::progress() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PayloadEstimationCommand.Feedback.progress)
  return _internal_progress();
}
inline void PayloadEstimationCommand_Feedback::_internal_set_progress(float value) {
  
  _impl_.progress_ = value;
}
inline void PayloadEstimationCommand_Feedback::set_progress(float value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.PayloadEstimationCommand.Feedback.progress)
}

// .bosdyn.api.PayloadEstimationCommand.Feedback.Error error = 3;
inline void PayloadEstimationCommand_Feedback::clear_error() {
  _impl_.error_ = 0;
}
inline ::bosdyn::api::PayloadEstimationCommand_Feedback_Error PayloadEstimationCommand_Feedback::_internal_error() const {
  return static_cast< ::bosdyn::api::PayloadEstimationCommand_Feedback_Error >(_impl_.error_);
}
inline ::bosdyn::api::PayloadEstimationCommand_Feedback_Error PayloadEstimationCommand_Feedback::error() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PayloadEstimationCommand.Feedback.error)
  return _internal_error();
}
inline void PayloadEstimationCommand_Feedback::_internal_set_error(::bosdyn::api::PayloadEstimationCommand_Feedback_Error value) {
  
  _impl_.error_ = value;
}
inline void PayloadEstimationCommand_Feedback::set_error(::bosdyn::api::PayloadEstimationCommand_Feedback_Error value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.PayloadEstimationCommand.Feedback.error)
}

// .bosdyn.api.Payload estimated_payload = 4;
inline bool PayloadEstimationCommand_Feedback::_internal_has_estimated_payload() const {
  return this != internal_default_instance() && _impl_.estimated_payload_ != nullptr;
}
inline bool PayloadEstimationCommand_Feedback::has_estimated_payload() const {
  return _internal_has_estimated_payload();
}
inline const ::bosdyn::api::Payload& PayloadEstimationCommand_Feedback::_internal_estimated_payload() const {
  const ::bosdyn::api::Payload* p = _impl_.estimated_payload_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Payload&>(
      ::bosdyn::api::_Payload_default_instance_);
}
inline const ::bosdyn::api::Payload& PayloadEstimationCommand_Feedback::estimated_payload() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PayloadEstimationCommand.Feedback.estimated_payload)
  return _internal_estimated_payload();
}
inline void PayloadEstimationCommand_Feedback::unsafe_arena_set_allocated_estimated_payload(
    ::bosdyn::api::Payload* estimated_payload) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.estimated_payload_);
  }
  _impl_.estimated_payload_ = estimated_payload;
  if (estimated_payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.PayloadEstimationCommand.Feedback.estimated_payload)
}
inline ::bosdyn::api::Payload* PayloadEstimationCommand_Feedback::release_estimated_payload() {
  
  ::bosdyn::api::Payload* temp = _impl_.estimated_payload_;
  _impl_.estimated_payload_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Payload* PayloadEstimationCommand_Feedback::unsafe_arena_release_estimated_payload() {
  // @@protoc_insertion_point(field_release:bosdyn.api.PayloadEstimationCommand.Feedback.estimated_payload)
  
  ::bosdyn::api::Payload* temp = _impl_.estimated_payload_;
  _impl_.estimated_payload_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Payload* PayloadEstimationCommand_Feedback::_internal_mutable_estimated_payload() {
  
  if (_impl_.estimated_payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Payload>(GetArenaForAllocation());
    _impl_.estimated_payload_ = p;
  }
  return _impl_.estimated_payload_;
}
inline ::bosdyn::api::Payload* PayloadEstimationCommand_Feedback::mutable_estimated_payload() {
  ::bosdyn::api::Payload* _msg = _internal_mutable_estimated_payload();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.PayloadEstimationCommand.Feedback.estimated_payload)
  return _msg;
}
inline void PayloadEstimationCommand_Feedback::set_allocated_estimated_payload(::bosdyn::api::Payload* estimated_payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.estimated_payload_);
  }
  if (estimated_payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(estimated_payload));
    if (message_arena != submessage_arena) {
      estimated_payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, estimated_payload, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.estimated_payload_ = estimated_payload;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.PayloadEstimationCommand.Feedback.estimated_payload)
}

// -------------------------------------------------------------------

// PayloadEstimationCommand

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::PayloadEstimationCommand_Feedback_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::PayloadEstimationCommand_Feedback_Status>() {
  return ::bosdyn::api::PayloadEstimationCommand_Feedback_Status_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::PayloadEstimationCommand_Feedback_Error> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::PayloadEstimationCommand_Feedback_Error>() {
  return ::bosdyn::api::PayloadEstimationCommand_Feedback_Error_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fpayload_5festimation_2eproto

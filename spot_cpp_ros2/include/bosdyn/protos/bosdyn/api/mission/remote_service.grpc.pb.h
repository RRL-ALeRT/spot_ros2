// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bosdyn/api/mission/remote_service.proto
// Original file comments:
// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).
//
#ifndef GRPC_bosdyn_2fapi_2fmission_2fremote_5fservice_2eproto__INCLUDED
#define GRPC_bosdyn_2fapi_2fmission_2fremote_5fservice_2eproto__INCLUDED

#include "bosdyn/api/mission/remote_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace bosdyn {
namespace api {
namespace mission {

// Interface for mission callbacks.  Mission RemoteGrpc nodes will act as clients
// to this service type, calling out to this service when loaded, ticked, or unloaded.
class RemoteMissionService final {
 public:
  static constexpr char const* service_full_name() {
    return "bosdyn.api.mission.RemoteMissionService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Call this once at mission load time, once for each node that references this remote service.
    virtual ::grpc::Status EstablishSession(::grpc::ClientContext* context, const ::bosdyn::api::mission::EstablishSessionRequest& request, ::bosdyn::api::mission::EstablishSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::EstablishSessionResponse>> AsyncEstablishSession(::grpc::ClientContext* context, const ::bosdyn::api::mission::EstablishSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::EstablishSessionResponse>>(AsyncEstablishSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::EstablishSessionResponse>> PrepareAsyncEstablishSession(::grpc::ClientContext* context, const ::bosdyn::api::mission::EstablishSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::EstablishSessionResponse>>(PrepareAsyncEstablishSessionRaw(context, request, cq));
    }
    // Call this every time the RemoteGrpc node is ticked.
    virtual ::grpc::Status Tick(::grpc::ClientContext* context, const ::bosdyn::api::mission::TickRequest& request, ::bosdyn::api::mission::TickResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::TickResponse>> AsyncTick(::grpc::ClientContext* context, const ::bosdyn::api::mission::TickRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::TickResponse>>(AsyncTickRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::TickResponse>> PrepareAsyncTick(::grpc::ClientContext* context, const ::bosdyn::api::mission::TickRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::TickResponse>>(PrepareAsyncTickRaw(context, request, cq));
    }
    // Call this every time the RemoteGrpc node WAS ticked in the previous cycle, but was NOT ticked
    // in this cycle. Signals that the next tick will be a restart, rather than a continuation.
    virtual ::grpc::Status Stop(::grpc::ClientContext* context, const ::bosdyn::api::mission::StopRequest& request, ::bosdyn::api::mission::StopResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::StopResponse>> AsyncStop(::grpc::ClientContext* context, const ::bosdyn::api::mission::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::StopResponse>>(AsyncStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::StopResponse>> PrepareAsyncStop(::grpc::ClientContext* context, const ::bosdyn::api::mission::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::StopResponse>>(PrepareAsyncStopRaw(context, request, cq));
    }
    // Tells the service it can forget any data associated with the given session ID.
    // Should be called once for every EstablishSession call.
    virtual ::grpc::Status TeardownSession(::grpc::ClientContext* context, const ::bosdyn::api::mission::TeardownSessionRequest& request, ::bosdyn::api::mission::TeardownSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::TeardownSessionResponse>> AsyncTeardownSession(::grpc::ClientContext* context, const ::bosdyn::api::mission::TeardownSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::TeardownSessionResponse>>(AsyncTeardownSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::TeardownSessionResponse>> PrepareAsyncTeardownSession(::grpc::ClientContext* context, const ::bosdyn::api::mission::TeardownSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::TeardownSessionResponse>>(PrepareAsyncTeardownSessionRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Call this once at mission load time, once for each node that references this remote service.
      virtual void EstablishSession(::grpc::ClientContext* context, const ::bosdyn::api::mission::EstablishSessionRequest* request, ::bosdyn::api::mission::EstablishSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EstablishSession(::grpc::ClientContext* context, const ::bosdyn::api::mission::EstablishSessionRequest* request, ::bosdyn::api::mission::EstablishSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Call this every time the RemoteGrpc node is ticked.
      virtual void Tick(::grpc::ClientContext* context, const ::bosdyn::api::mission::TickRequest* request, ::bosdyn::api::mission::TickResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Tick(::grpc::ClientContext* context, const ::bosdyn::api::mission::TickRequest* request, ::bosdyn::api::mission::TickResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Call this every time the RemoteGrpc node WAS ticked in the previous cycle, but was NOT ticked
      // in this cycle. Signals that the next tick will be a restart, rather than a continuation.
      virtual void Stop(::grpc::ClientContext* context, const ::bosdyn::api::mission::StopRequest* request, ::bosdyn::api::mission::StopResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Stop(::grpc::ClientContext* context, const ::bosdyn::api::mission::StopRequest* request, ::bosdyn::api::mission::StopResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Tells the service it can forget any data associated with the given session ID.
      // Should be called once for every EstablishSession call.
      virtual void TeardownSession(::grpc::ClientContext* context, const ::bosdyn::api::mission::TeardownSessionRequest* request, ::bosdyn::api::mission::TeardownSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TeardownSession(::grpc::ClientContext* context, const ::bosdyn::api::mission::TeardownSessionRequest* request, ::bosdyn::api::mission::TeardownSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::EstablishSessionResponse>* AsyncEstablishSessionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::EstablishSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::EstablishSessionResponse>* PrepareAsyncEstablishSessionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::EstablishSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::TickResponse>* AsyncTickRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::TickRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::TickResponse>* PrepareAsyncTickRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::TickRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::StopResponse>* AsyncStopRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::StopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::StopResponse>* PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::StopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::TeardownSessionResponse>* AsyncTeardownSessionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::TeardownSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::TeardownSessionResponse>* PrepareAsyncTeardownSessionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::TeardownSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status EstablishSession(::grpc::ClientContext* context, const ::bosdyn::api::mission::EstablishSessionRequest& request, ::bosdyn::api::mission::EstablishSessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::EstablishSessionResponse>> AsyncEstablishSession(::grpc::ClientContext* context, const ::bosdyn::api::mission::EstablishSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::EstablishSessionResponse>>(AsyncEstablishSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::EstablishSessionResponse>> PrepareAsyncEstablishSession(::grpc::ClientContext* context, const ::bosdyn::api::mission::EstablishSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::EstablishSessionResponse>>(PrepareAsyncEstablishSessionRaw(context, request, cq));
    }
    ::grpc::Status Tick(::grpc::ClientContext* context, const ::bosdyn::api::mission::TickRequest& request, ::bosdyn::api::mission::TickResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::TickResponse>> AsyncTick(::grpc::ClientContext* context, const ::bosdyn::api::mission::TickRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::TickResponse>>(AsyncTickRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::TickResponse>> PrepareAsyncTick(::grpc::ClientContext* context, const ::bosdyn::api::mission::TickRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::TickResponse>>(PrepareAsyncTickRaw(context, request, cq));
    }
    ::grpc::Status Stop(::grpc::ClientContext* context, const ::bosdyn::api::mission::StopRequest& request, ::bosdyn::api::mission::StopResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::StopResponse>> AsyncStop(::grpc::ClientContext* context, const ::bosdyn::api::mission::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::StopResponse>>(AsyncStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::StopResponse>> PrepareAsyncStop(::grpc::ClientContext* context, const ::bosdyn::api::mission::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::StopResponse>>(PrepareAsyncStopRaw(context, request, cq));
    }
    ::grpc::Status TeardownSession(::grpc::ClientContext* context, const ::bosdyn::api::mission::TeardownSessionRequest& request, ::bosdyn::api::mission::TeardownSessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::TeardownSessionResponse>> AsyncTeardownSession(::grpc::ClientContext* context, const ::bosdyn::api::mission::TeardownSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::TeardownSessionResponse>>(AsyncTeardownSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::TeardownSessionResponse>> PrepareAsyncTeardownSession(::grpc::ClientContext* context, const ::bosdyn::api::mission::TeardownSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::TeardownSessionResponse>>(PrepareAsyncTeardownSessionRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void EstablishSession(::grpc::ClientContext* context, const ::bosdyn::api::mission::EstablishSessionRequest* request, ::bosdyn::api::mission::EstablishSessionResponse* response, std::function<void(::grpc::Status)>) override;
      void EstablishSession(::grpc::ClientContext* context, const ::bosdyn::api::mission::EstablishSessionRequest* request, ::bosdyn::api::mission::EstablishSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Tick(::grpc::ClientContext* context, const ::bosdyn::api::mission::TickRequest* request, ::bosdyn::api::mission::TickResponse* response, std::function<void(::grpc::Status)>) override;
      void Tick(::grpc::ClientContext* context, const ::bosdyn::api::mission::TickRequest* request, ::bosdyn::api::mission::TickResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Stop(::grpc::ClientContext* context, const ::bosdyn::api::mission::StopRequest* request, ::bosdyn::api::mission::StopResponse* response, std::function<void(::grpc::Status)>) override;
      void Stop(::grpc::ClientContext* context, const ::bosdyn::api::mission::StopRequest* request, ::bosdyn::api::mission::StopResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TeardownSession(::grpc::ClientContext* context, const ::bosdyn::api::mission::TeardownSessionRequest* request, ::bosdyn::api::mission::TeardownSessionResponse* response, std::function<void(::grpc::Status)>) override;
      void TeardownSession(::grpc::ClientContext* context, const ::bosdyn::api::mission::TeardownSessionRequest* request, ::bosdyn::api::mission::TeardownSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::EstablishSessionResponse>* AsyncEstablishSessionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::EstablishSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::EstablishSessionResponse>* PrepareAsyncEstablishSessionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::EstablishSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::TickResponse>* AsyncTickRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::TickRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::TickResponse>* PrepareAsyncTickRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::TickRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::StopResponse>* AsyncStopRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::StopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::StopResponse>* PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::StopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::TeardownSessionResponse>* AsyncTeardownSessionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::TeardownSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::TeardownSessionResponse>* PrepareAsyncTeardownSessionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::TeardownSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_EstablishSession_;
    const ::grpc::internal::RpcMethod rpcmethod_Tick_;
    const ::grpc::internal::RpcMethod rpcmethod_Stop_;
    const ::grpc::internal::RpcMethod rpcmethod_TeardownSession_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Call this once at mission load time, once for each node that references this remote service.
    virtual ::grpc::Status EstablishSession(::grpc::ServerContext* context, const ::bosdyn::api::mission::EstablishSessionRequest* request, ::bosdyn::api::mission::EstablishSessionResponse* response);
    // Call this every time the RemoteGrpc node is ticked.
    virtual ::grpc::Status Tick(::grpc::ServerContext* context, const ::bosdyn::api::mission::TickRequest* request, ::bosdyn::api::mission::TickResponse* response);
    // Call this every time the RemoteGrpc node WAS ticked in the previous cycle, but was NOT ticked
    // in this cycle. Signals that the next tick will be a restart, rather than a continuation.
    virtual ::grpc::Status Stop(::grpc::ServerContext* context, const ::bosdyn::api::mission::StopRequest* request, ::bosdyn::api::mission::StopResponse* response);
    // Tells the service it can forget any data associated with the given session ID.
    // Should be called once for every EstablishSession call.
    virtual ::grpc::Status TeardownSession(::grpc::ServerContext* context, const ::bosdyn::api::mission::TeardownSessionRequest* request, ::bosdyn::api::mission::TeardownSessionResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_EstablishSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EstablishSession() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_EstablishSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstablishSession(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::EstablishSessionRequest* /*request*/, ::bosdyn::api::mission::EstablishSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEstablishSession(::grpc::ServerContext* context, ::bosdyn::api::mission::EstablishSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::mission::EstablishSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Tick : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Tick() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Tick() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tick(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::TickRequest* /*request*/, ::bosdyn::api::mission::TickResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTick(::grpc::ServerContext* context, ::bosdyn::api::mission::TickRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::mission::TickResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Stop() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::StopRequest* /*request*/, ::bosdyn::api::mission::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStop(::grpc::ServerContext* context, ::bosdyn::api::mission::StopRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::mission::StopResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TeardownSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TeardownSession() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_TeardownSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TeardownSession(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::TeardownSessionRequest* /*request*/, ::bosdyn::api::mission::TeardownSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTeardownSession(::grpc::ServerContext* context, ::bosdyn::api::mission::TeardownSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::mission::TeardownSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_EstablishSession<WithAsyncMethod_Tick<WithAsyncMethod_Stop<WithAsyncMethod_TeardownSession<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_EstablishSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EstablishSession() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::mission::EstablishSessionRequest, ::bosdyn::api::mission::EstablishSessionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::mission::EstablishSessionRequest* request, ::bosdyn::api::mission::EstablishSessionResponse* response) { return this->EstablishSession(context, request, response); }));}
    void SetMessageAllocatorFor_EstablishSession(
        ::grpc::MessageAllocator< ::bosdyn::api::mission::EstablishSessionRequest, ::bosdyn::api::mission::EstablishSessionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::mission::EstablishSessionRequest, ::bosdyn::api::mission::EstablishSessionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EstablishSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstablishSession(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::EstablishSessionRequest* /*request*/, ::bosdyn::api::mission::EstablishSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EstablishSession(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::mission::EstablishSessionRequest* /*request*/, ::bosdyn::api::mission::EstablishSessionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Tick : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Tick() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::mission::TickRequest, ::bosdyn::api::mission::TickResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::mission::TickRequest* request, ::bosdyn::api::mission::TickResponse* response) { return this->Tick(context, request, response); }));}
    void SetMessageAllocatorFor_Tick(
        ::grpc::MessageAllocator< ::bosdyn::api::mission::TickRequest, ::bosdyn::api::mission::TickResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::mission::TickRequest, ::bosdyn::api::mission::TickResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Tick() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tick(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::TickRequest* /*request*/, ::bosdyn::api::mission::TickResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Tick(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::mission::TickRequest* /*request*/, ::bosdyn::api::mission::TickResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Stop() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::mission::StopRequest, ::bosdyn::api::mission::StopResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::mission::StopRequest* request, ::bosdyn::api::mission::StopResponse* response) { return this->Stop(context, request, response); }));}
    void SetMessageAllocatorFor_Stop(
        ::grpc::MessageAllocator< ::bosdyn::api::mission::StopRequest, ::bosdyn::api::mission::StopResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::mission::StopRequest, ::bosdyn::api::mission::StopResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::StopRequest* /*request*/, ::bosdyn::api::mission::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Stop(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::mission::StopRequest* /*request*/, ::bosdyn::api::mission::StopResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TeardownSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TeardownSession() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::mission::TeardownSessionRequest, ::bosdyn::api::mission::TeardownSessionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::mission::TeardownSessionRequest* request, ::bosdyn::api::mission::TeardownSessionResponse* response) { return this->TeardownSession(context, request, response); }));}
    void SetMessageAllocatorFor_TeardownSession(
        ::grpc::MessageAllocator< ::bosdyn::api::mission::TeardownSessionRequest, ::bosdyn::api::mission::TeardownSessionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::mission::TeardownSessionRequest, ::bosdyn::api::mission::TeardownSessionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TeardownSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TeardownSession(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::TeardownSessionRequest* /*request*/, ::bosdyn::api::mission::TeardownSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TeardownSession(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::mission::TeardownSessionRequest* /*request*/, ::bosdyn::api::mission::TeardownSessionResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_EstablishSession<WithCallbackMethod_Tick<WithCallbackMethod_Stop<WithCallbackMethod_TeardownSession<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_EstablishSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EstablishSession() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_EstablishSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstablishSession(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::EstablishSessionRequest* /*request*/, ::bosdyn::api::mission::EstablishSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Tick : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Tick() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Tick() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tick(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::TickRequest* /*request*/, ::bosdyn::api::mission::TickResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Stop() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::StopRequest* /*request*/, ::bosdyn::api::mission::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TeardownSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TeardownSession() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_TeardownSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TeardownSession(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::TeardownSessionRequest* /*request*/, ::bosdyn::api::mission::TeardownSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_EstablishSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EstablishSession() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_EstablishSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstablishSession(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::EstablishSessionRequest* /*request*/, ::bosdyn::api::mission::EstablishSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEstablishSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Tick : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Tick() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Tick() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tick(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::TickRequest* /*request*/, ::bosdyn::api::mission::TickResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTick(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Stop() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::StopRequest* /*request*/, ::bosdyn::api::mission::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TeardownSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TeardownSession() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_TeardownSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TeardownSession(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::TeardownSessionRequest* /*request*/, ::bosdyn::api::mission::TeardownSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTeardownSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EstablishSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EstablishSession() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EstablishSession(context, request, response); }));
    }
    ~WithRawCallbackMethod_EstablishSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstablishSession(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::EstablishSessionRequest* /*request*/, ::bosdyn::api::mission::EstablishSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EstablishSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Tick : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Tick() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Tick(context, request, response); }));
    }
    ~WithRawCallbackMethod_Tick() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tick(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::TickRequest* /*request*/, ::bosdyn::api::mission::TickResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Tick(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Stop() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Stop(context, request, response); }));
    }
    ~WithRawCallbackMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::StopRequest* /*request*/, ::bosdyn::api::mission::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Stop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TeardownSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TeardownSession() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TeardownSession(context, request, response); }));
    }
    ~WithRawCallbackMethod_TeardownSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TeardownSession(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::TeardownSessionRequest* /*request*/, ::bosdyn::api::mission::TeardownSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TeardownSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EstablishSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EstablishSession() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::mission::EstablishSessionRequest, ::bosdyn::api::mission::EstablishSessionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::mission::EstablishSessionRequest, ::bosdyn::api::mission::EstablishSessionResponse>* streamer) {
                       return this->StreamedEstablishSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EstablishSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EstablishSession(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::EstablishSessionRequest* /*request*/, ::bosdyn::api::mission::EstablishSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEstablishSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::mission::EstablishSessionRequest,::bosdyn::api::mission::EstablishSessionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Tick : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Tick() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::mission::TickRequest, ::bosdyn::api::mission::TickResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::mission::TickRequest, ::bosdyn::api::mission::TickResponse>* streamer) {
                       return this->StreamedTick(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Tick() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Tick(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::TickRequest* /*request*/, ::bosdyn::api::mission::TickResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTick(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::mission::TickRequest,::bosdyn::api::mission::TickResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Stop() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::mission::StopRequest, ::bosdyn::api::mission::StopResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::mission::StopRequest, ::bosdyn::api::mission::StopResponse>* streamer) {
                       return this->StreamedStop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::StopRequest* /*request*/, ::bosdyn::api::mission::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::mission::StopRequest,::bosdyn::api::mission::StopResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TeardownSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TeardownSession() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::mission::TeardownSessionRequest, ::bosdyn::api::mission::TeardownSessionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::mission::TeardownSessionRequest, ::bosdyn::api::mission::TeardownSessionResponse>* streamer) {
                       return this->StreamedTeardownSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TeardownSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TeardownSession(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::TeardownSessionRequest* /*request*/, ::bosdyn::api::mission::TeardownSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTeardownSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::mission::TeardownSessionRequest,::bosdyn::api::mission::TeardownSessionResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_EstablishSession<WithStreamedUnaryMethod_Tick<WithStreamedUnaryMethod_Stop<WithStreamedUnaryMethod_TeardownSession<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_EstablishSession<WithStreamedUnaryMethod_Tick<WithStreamedUnaryMethod_Stop<WithStreamedUnaryMethod_TeardownSession<Service > > > > StreamedService;
};

}  // namespace mission
}  // namespace api
}  // namespace bosdyn


#endif  // GRPC_bosdyn_2fapi_2fmission_2fremote_5fservice_2eproto__INCLUDED

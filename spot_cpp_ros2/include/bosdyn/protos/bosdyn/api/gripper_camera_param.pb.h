// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/gripper_camera_param.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fgripper_5fcamera_5fparam_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fgripper_5fcamera_5fparam_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/header.pb.h"
#include "bosdyn/api/geometry.pb.h"
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgripper_5fcamera_5fparam_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fgripper_5fcamera_5fparam_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fgripper_5fcamera_5fparam_2eproto;
namespace bosdyn {
namespace api {
class GripperCameraGetParamRequest;
struct GripperCameraGetParamRequestDefaultTypeInternal;
extern GripperCameraGetParamRequestDefaultTypeInternal _GripperCameraGetParamRequest_default_instance_;
class GripperCameraGetParamResponse;
struct GripperCameraGetParamResponseDefaultTypeInternal;
extern GripperCameraGetParamResponseDefaultTypeInternal _GripperCameraGetParamResponse_default_instance_;
class GripperCameraParamRequest;
struct GripperCameraParamRequestDefaultTypeInternal;
extern GripperCameraParamRequestDefaultTypeInternal _GripperCameraParamRequest_default_instance_;
class GripperCameraParamResponse;
struct GripperCameraParamResponseDefaultTypeInternal;
extern GripperCameraParamResponseDefaultTypeInternal _GripperCameraParamResponse_default_instance_;
class GripperCameraParams;
struct GripperCameraParamsDefaultTypeInternal;
extern GripperCameraParamsDefaultTypeInternal _GripperCameraParams_default_instance_;
class RoiParameters;
struct RoiParametersDefaultTypeInternal;
extern RoiParametersDefaultTypeInternal _RoiParameters_default_instance_;
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::GripperCameraGetParamRequest* Arena::CreateMaybeMessage<::bosdyn::api::GripperCameraGetParamRequest>(Arena*);
template<> ::bosdyn::api::GripperCameraGetParamResponse* Arena::CreateMaybeMessage<::bosdyn::api::GripperCameraGetParamResponse>(Arena*);
template<> ::bosdyn::api::GripperCameraParamRequest* Arena::CreateMaybeMessage<::bosdyn::api::GripperCameraParamRequest>(Arena*);
template<> ::bosdyn::api::GripperCameraParamResponse* Arena::CreateMaybeMessage<::bosdyn::api::GripperCameraParamResponse>(Arena*);
template<> ::bosdyn::api::GripperCameraParams* Arena::CreateMaybeMessage<::bosdyn::api::GripperCameraParams>(Arena*);
template<> ::bosdyn::api::RoiParameters* Arena::CreateMaybeMessage<::bosdyn::api::RoiParameters>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {

enum GripperCameraParams_CameraMode : int {
  GripperCameraParams_CameraMode_MODE_UNKNOWN = 0,
  GripperCameraParams_CameraMode_MODE_1280_720_60FPS_UYVY = 1,
  GripperCameraParams_CameraMode_MODE_640_480_120FPS_UYVY = 11,
  GripperCameraParams_CameraMode_MODE_1920_1080_60FPS_MJPG = 14,
  GripperCameraParams_CameraMode_MODE_3840_2160_30FPS_MJPG = 15,
  GripperCameraParams_CameraMode_MODE_4208_3120_20FPS_MJPG = 16,
  GripperCameraParams_CameraMode_MODE_4096_2160_30FPS_MJPG = 17,
  GripperCameraParams_CameraMode_GripperCameraParams_CameraMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GripperCameraParams_CameraMode_GripperCameraParams_CameraMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GripperCameraParams_CameraMode_IsValid(int value);
constexpr GripperCameraParams_CameraMode GripperCameraParams_CameraMode_CameraMode_MIN = GripperCameraParams_CameraMode_MODE_UNKNOWN;
constexpr GripperCameraParams_CameraMode GripperCameraParams_CameraMode_CameraMode_MAX = GripperCameraParams_CameraMode_MODE_4096_2160_30FPS_MJPG;
constexpr int GripperCameraParams_CameraMode_CameraMode_ARRAYSIZE = GripperCameraParams_CameraMode_CameraMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GripperCameraParams_CameraMode_descriptor();
template<typename T>
inline const std::string& GripperCameraParams_CameraMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GripperCameraParams_CameraMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GripperCameraParams_CameraMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GripperCameraParams_CameraMode_descriptor(), enum_t_value);
}
inline bool GripperCameraParams_CameraMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GripperCameraParams_CameraMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GripperCameraParams_CameraMode>(
    GripperCameraParams_CameraMode_descriptor(), name, value);
}
enum GripperCameraParams_LedMode : int {
  GripperCameraParams_LedMode_LED_MODE_UNKNOWN = 0,
  GripperCameraParams_LedMode_LED_MODE_OFF = 1,
  GripperCameraParams_LedMode_LED_MODE_TORCH = 2,
  GripperCameraParams_LedMode_GripperCameraParams_LedMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GripperCameraParams_LedMode_GripperCameraParams_LedMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GripperCameraParams_LedMode_IsValid(int value);
constexpr GripperCameraParams_LedMode GripperCameraParams_LedMode_LedMode_MIN = GripperCameraParams_LedMode_LED_MODE_UNKNOWN;
constexpr GripperCameraParams_LedMode GripperCameraParams_LedMode_LedMode_MAX = GripperCameraParams_LedMode_LED_MODE_TORCH;
constexpr int GripperCameraParams_LedMode_LedMode_ARRAYSIZE = GripperCameraParams_LedMode_LedMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GripperCameraParams_LedMode_descriptor();
template<typename T>
inline const std::string& GripperCameraParams_LedMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GripperCameraParams_LedMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GripperCameraParams_LedMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GripperCameraParams_LedMode_descriptor(), enum_t_value);
}
inline bool GripperCameraParams_LedMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GripperCameraParams_LedMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GripperCameraParams_LedMode>(
    GripperCameraParams_LedMode_descriptor(), name, value);
}
enum RoiParameters_RoiWindowSize : int {
  RoiParameters_RoiWindowSize_ROI_WINDOW_SIZE_UNKNOWN = 0,
  RoiParameters_RoiWindowSize_ROI_WINDOW_SIZE_1 = 1,
  RoiParameters_RoiWindowSize_ROI_WINDOW_SIZE_2 = 2,
  RoiParameters_RoiWindowSize_ROI_WINDOW_SIZE_3 = 3,
  RoiParameters_RoiWindowSize_ROI_WINDOW_SIZE_4 = 4,
  RoiParameters_RoiWindowSize_ROI_WINDOW_SIZE_5 = 5,
  RoiParameters_RoiWindowSize_ROI_WINDOW_SIZE_6 = 6,
  RoiParameters_RoiWindowSize_ROI_WINDOW_SIZE_7 = 7,
  RoiParameters_RoiWindowSize_ROI_WINDOW_SIZE_8 = 8,
  RoiParameters_RoiWindowSize_RoiParameters_RoiWindowSize_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RoiParameters_RoiWindowSize_RoiParameters_RoiWindowSize_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RoiParameters_RoiWindowSize_IsValid(int value);
constexpr RoiParameters_RoiWindowSize RoiParameters_RoiWindowSize_RoiWindowSize_MIN = RoiParameters_RoiWindowSize_ROI_WINDOW_SIZE_UNKNOWN;
constexpr RoiParameters_RoiWindowSize RoiParameters_RoiWindowSize_RoiWindowSize_MAX = RoiParameters_RoiWindowSize_ROI_WINDOW_SIZE_8;
constexpr int RoiParameters_RoiWindowSize_RoiWindowSize_ARRAYSIZE = RoiParameters_RoiWindowSize_RoiWindowSize_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoiParameters_RoiWindowSize_descriptor();
template<typename T>
inline const std::string& RoiParameters_RoiWindowSize_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RoiParameters_RoiWindowSize>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RoiParameters_RoiWindowSize_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RoiParameters_RoiWindowSize_descriptor(), enum_t_value);
}
inline bool RoiParameters_RoiWindowSize_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RoiParameters_RoiWindowSize* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RoiParameters_RoiWindowSize>(
    RoiParameters_RoiWindowSize_descriptor(), name, value);
}
enum HdrParameters : int {
  HDR_UNKNOWN = 0,
  HDR_OFF = 1,
  HDR_AUTO = 2,
  HDR_MANUAL_1 = 3,
  HDR_MANUAL_2 = 4,
  HDR_MANUAL_3 = 5,
  HDR_MANUAL_4 = 6,
  HdrParameters_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  HdrParameters_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool HdrParameters_IsValid(int value);
constexpr HdrParameters HdrParameters_MIN = HDR_UNKNOWN;
constexpr HdrParameters HdrParameters_MAX = HDR_MANUAL_4;
constexpr int HdrParameters_ARRAYSIZE = HdrParameters_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HdrParameters_descriptor();
template<typename T>
inline const std::string& HdrParameters_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HdrParameters>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HdrParameters_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HdrParameters_descriptor(), enum_t_value);
}
inline bool HdrParameters_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HdrParameters* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HdrParameters>(
    HdrParameters_descriptor(), name, value);
}
// ===================================================================

class GripperCameraParamRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.GripperCameraParamRequest) */ {
 public:
  inline GripperCameraParamRequest() : GripperCameraParamRequest(nullptr) {}
  ~GripperCameraParamRequest() override;
  explicit PROTOBUF_CONSTEXPR GripperCameraParamRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GripperCameraParamRequest(const GripperCameraParamRequest& from);
  GripperCameraParamRequest(GripperCameraParamRequest&& from) noexcept
    : GripperCameraParamRequest() {
    *this = ::std::move(from);
  }

  inline GripperCameraParamRequest& operator=(const GripperCameraParamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GripperCameraParamRequest& operator=(GripperCameraParamRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GripperCameraParamRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GripperCameraParamRequest* internal_default_instance() {
    return reinterpret_cast<const GripperCameraParamRequest*>(
               &_GripperCameraParamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GripperCameraParamRequest& a, GripperCameraParamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GripperCameraParamRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GripperCameraParamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GripperCameraParamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GripperCameraParamRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GripperCameraParamRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GripperCameraParamRequest& from) {
    GripperCameraParamRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GripperCameraParamRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.GripperCameraParamRequest";
  }
  protected:
  explicit GripperCameraParamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // .bosdyn.api.GripperCameraParams params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::bosdyn::api::GripperCameraParams& params() const;
  PROTOBUF_NODISCARD ::bosdyn::api::GripperCameraParams* release_params();
  ::bosdyn::api::GripperCameraParams* mutable_params();
  void set_allocated_params(::bosdyn::api::GripperCameraParams* params);
  private:
  const ::bosdyn::api::GripperCameraParams& _internal_params() const;
  ::bosdyn::api::GripperCameraParams* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::bosdyn::api::GripperCameraParams* params);
  ::bosdyn::api::GripperCameraParams* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:bosdyn.api.GripperCameraParamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::RequestHeader* header_;
    ::bosdyn::api::GripperCameraParams* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgripper_5fcamera_5fparam_2eproto;
};
// -------------------------------------------------------------------

class GripperCameraParamResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.GripperCameraParamResponse) */ {
 public:
  inline GripperCameraParamResponse() : GripperCameraParamResponse(nullptr) {}
  ~GripperCameraParamResponse() override;
  explicit PROTOBUF_CONSTEXPR GripperCameraParamResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GripperCameraParamResponse(const GripperCameraParamResponse& from);
  GripperCameraParamResponse(GripperCameraParamResponse&& from) noexcept
    : GripperCameraParamResponse() {
    *this = ::std::move(from);
  }

  inline GripperCameraParamResponse& operator=(const GripperCameraParamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GripperCameraParamResponse& operator=(GripperCameraParamResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GripperCameraParamResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GripperCameraParamResponse* internal_default_instance() {
    return reinterpret_cast<const GripperCameraParamResponse*>(
               &_GripperCameraParamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GripperCameraParamResponse& a, GripperCameraParamResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GripperCameraParamResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GripperCameraParamResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GripperCameraParamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GripperCameraParamResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GripperCameraParamResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GripperCameraParamResponse& from) {
    GripperCameraParamResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GripperCameraParamResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.GripperCameraParamResponse";
  }
  protected:
  explicit GripperCameraParamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.GripperCameraParamResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::ResponseHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgripper_5fcamera_5fparam_2eproto;
};
// -------------------------------------------------------------------

class GripperCameraGetParamRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.GripperCameraGetParamRequest) */ {
 public:
  inline GripperCameraGetParamRequest() : GripperCameraGetParamRequest(nullptr) {}
  ~GripperCameraGetParamRequest() override;
  explicit PROTOBUF_CONSTEXPR GripperCameraGetParamRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GripperCameraGetParamRequest(const GripperCameraGetParamRequest& from);
  GripperCameraGetParamRequest(GripperCameraGetParamRequest&& from) noexcept
    : GripperCameraGetParamRequest() {
    *this = ::std::move(from);
  }

  inline GripperCameraGetParamRequest& operator=(const GripperCameraGetParamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GripperCameraGetParamRequest& operator=(GripperCameraGetParamRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GripperCameraGetParamRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GripperCameraGetParamRequest* internal_default_instance() {
    return reinterpret_cast<const GripperCameraGetParamRequest*>(
               &_GripperCameraGetParamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GripperCameraGetParamRequest& a, GripperCameraGetParamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GripperCameraGetParamRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GripperCameraGetParamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GripperCameraGetParamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GripperCameraGetParamRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GripperCameraGetParamRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GripperCameraGetParamRequest& from) {
    GripperCameraGetParamRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GripperCameraGetParamRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.GripperCameraGetParamRequest";
  }
  protected:
  explicit GripperCameraGetParamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.GripperCameraGetParamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::RequestHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgripper_5fcamera_5fparam_2eproto;
};
// -------------------------------------------------------------------

class GripperCameraGetParamResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.GripperCameraGetParamResponse) */ {
 public:
  inline GripperCameraGetParamResponse() : GripperCameraGetParamResponse(nullptr) {}
  ~GripperCameraGetParamResponse() override;
  explicit PROTOBUF_CONSTEXPR GripperCameraGetParamResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GripperCameraGetParamResponse(const GripperCameraGetParamResponse& from);
  GripperCameraGetParamResponse(GripperCameraGetParamResponse&& from) noexcept
    : GripperCameraGetParamResponse() {
    *this = ::std::move(from);
  }

  inline GripperCameraGetParamResponse& operator=(const GripperCameraGetParamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GripperCameraGetParamResponse& operator=(GripperCameraGetParamResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GripperCameraGetParamResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GripperCameraGetParamResponse* internal_default_instance() {
    return reinterpret_cast<const GripperCameraGetParamResponse*>(
               &_GripperCameraGetParamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GripperCameraGetParamResponse& a, GripperCameraGetParamResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GripperCameraGetParamResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GripperCameraGetParamResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GripperCameraGetParamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GripperCameraGetParamResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GripperCameraGetParamResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GripperCameraGetParamResponse& from) {
    GripperCameraGetParamResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GripperCameraGetParamResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.GripperCameraGetParamResponse";
  }
  protected:
  explicit GripperCameraGetParamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.GripperCameraParams params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::bosdyn::api::GripperCameraParams& params() const;
  PROTOBUF_NODISCARD ::bosdyn::api::GripperCameraParams* release_params();
  ::bosdyn::api::GripperCameraParams* mutable_params();
  void set_allocated_params(::bosdyn::api::GripperCameraParams* params);
  private:
  const ::bosdyn::api::GripperCameraParams& _internal_params() const;
  ::bosdyn::api::GripperCameraParams* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::bosdyn::api::GripperCameraParams* params);
  ::bosdyn::api::GripperCameraParams* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:bosdyn.api.GripperCameraGetParamResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::ResponseHeader* header_;
    ::bosdyn::api::GripperCameraParams* params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgripper_5fcamera_5fparam_2eproto;
};
// -------------------------------------------------------------------

class GripperCameraParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.GripperCameraParams) */ {
 public:
  inline GripperCameraParams() : GripperCameraParams(nullptr) {}
  ~GripperCameraParams() override;
  explicit PROTOBUF_CONSTEXPR GripperCameraParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GripperCameraParams(const GripperCameraParams& from);
  GripperCameraParams(GripperCameraParams&& from) noexcept
    : GripperCameraParams() {
    *this = ::std::move(from);
  }

  inline GripperCameraParams& operator=(const GripperCameraParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GripperCameraParams& operator=(GripperCameraParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GripperCameraParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const GripperCameraParams* internal_default_instance() {
    return reinterpret_cast<const GripperCameraParams*>(
               &_GripperCameraParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GripperCameraParams& a, GripperCameraParams& b) {
    a.Swap(&b);
  }
  inline void Swap(GripperCameraParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GripperCameraParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GripperCameraParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GripperCameraParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GripperCameraParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GripperCameraParams& from) {
    GripperCameraParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GripperCameraParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.GripperCameraParams";
  }
  protected:
  explicit GripperCameraParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GripperCameraParams_CameraMode CameraMode;
  static constexpr CameraMode MODE_UNKNOWN =
    GripperCameraParams_CameraMode_MODE_UNKNOWN;
  static constexpr CameraMode MODE_1280_720_60FPS_UYVY =
    GripperCameraParams_CameraMode_MODE_1280_720_60FPS_UYVY;
  static constexpr CameraMode MODE_640_480_120FPS_UYVY =
    GripperCameraParams_CameraMode_MODE_640_480_120FPS_UYVY;
  static constexpr CameraMode MODE_1920_1080_60FPS_MJPG =
    GripperCameraParams_CameraMode_MODE_1920_1080_60FPS_MJPG;
  static constexpr CameraMode MODE_3840_2160_30FPS_MJPG =
    GripperCameraParams_CameraMode_MODE_3840_2160_30FPS_MJPG;
  static constexpr CameraMode MODE_4208_3120_20FPS_MJPG =
    GripperCameraParams_CameraMode_MODE_4208_3120_20FPS_MJPG;
  static constexpr CameraMode MODE_4096_2160_30FPS_MJPG =
    GripperCameraParams_CameraMode_MODE_4096_2160_30FPS_MJPG;
  static inline bool CameraMode_IsValid(int value) {
    return GripperCameraParams_CameraMode_IsValid(value);
  }
  static constexpr CameraMode CameraMode_MIN =
    GripperCameraParams_CameraMode_CameraMode_MIN;
  static constexpr CameraMode CameraMode_MAX =
    GripperCameraParams_CameraMode_CameraMode_MAX;
  static constexpr int CameraMode_ARRAYSIZE =
    GripperCameraParams_CameraMode_CameraMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CameraMode_descriptor() {
    return GripperCameraParams_CameraMode_descriptor();
  }
  template<typename T>
  static inline const std::string& CameraMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CameraMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CameraMode_Name.");
    return GripperCameraParams_CameraMode_Name(enum_t_value);
  }
  static inline bool CameraMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CameraMode* value) {
    return GripperCameraParams_CameraMode_Parse(name, value);
  }

  typedef GripperCameraParams_LedMode LedMode;
  static constexpr LedMode LED_MODE_UNKNOWN =
    GripperCameraParams_LedMode_LED_MODE_UNKNOWN;
  static constexpr LedMode LED_MODE_OFF =
    GripperCameraParams_LedMode_LED_MODE_OFF;
  static constexpr LedMode LED_MODE_TORCH =
    GripperCameraParams_LedMode_LED_MODE_TORCH;
  static inline bool LedMode_IsValid(int value) {
    return GripperCameraParams_LedMode_IsValid(value);
  }
  static constexpr LedMode LedMode_MIN =
    GripperCameraParams_LedMode_LedMode_MIN;
  static constexpr LedMode LedMode_MAX =
    GripperCameraParams_LedMode_LedMode_MAX;
  static constexpr int LedMode_ARRAYSIZE =
    GripperCameraParams_LedMode_LedMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LedMode_descriptor() {
    return GripperCameraParams_LedMode_descriptor();
  }
  template<typename T>
  static inline const std::string& LedMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LedMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LedMode_Name.");
    return GripperCameraParams_LedMode_Name(enum_t_value);
  }
  static inline bool LedMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LedMode* value) {
    return GripperCameraParams_LedMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBrightnessFieldNumber = 2,
    kContrastFieldNumber = 3,
    kSaturationFieldNumber = 4,
    kGainFieldNumber = 7,
    kExposureAutoFieldNumber = 10,
    kExposureAbsoluteFieldNumber = 11,
    kFocusAbsoluteFieldNumber = 12,
    kFocusAutoFieldNumber = 13,
    kFocusRoiFieldNumber = 14,
    kExposureRoiFieldNumber = 16,
    kDrawFocusRoiRectangleFieldNumber = 18,
    kLedTorchBrightnessFieldNumber = 20,
    kCameraModeFieldNumber = 1,
    kHdrFieldNumber = 17,
    kLedModeFieldNumber = 19,
  };
  // .google.protobuf.FloatValue brightness = 2;
  bool has_brightness() const;
  private:
  bool _internal_has_brightness() const;
  public:
  void clear_brightness();
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& brightness() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FloatValue* release_brightness();
  ::PROTOBUF_NAMESPACE_ID::FloatValue* mutable_brightness();
  void set_allocated_brightness(::PROTOBUF_NAMESPACE_ID::FloatValue* brightness);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& _internal_brightness() const;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_brightness();
  public:
  void unsafe_arena_set_allocated_brightness(
      ::PROTOBUF_NAMESPACE_ID::FloatValue* brightness);
  ::PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_brightness();

  // .google.protobuf.FloatValue contrast = 3;
  bool has_contrast() const;
  private:
  bool _internal_has_contrast() const;
  public:
  void clear_contrast();
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& contrast() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FloatValue* release_contrast();
  ::PROTOBUF_NAMESPACE_ID::FloatValue* mutable_contrast();
  void set_allocated_contrast(::PROTOBUF_NAMESPACE_ID::FloatValue* contrast);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& _internal_contrast() const;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_contrast();
  public:
  void unsafe_arena_set_allocated_contrast(
      ::PROTOBUF_NAMESPACE_ID::FloatValue* contrast);
  ::PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_contrast();

  // .google.protobuf.FloatValue saturation = 4;
  bool has_saturation() const;
  private:
  bool _internal_has_saturation() const;
  public:
  void clear_saturation();
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& saturation() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FloatValue* release_saturation();
  ::PROTOBUF_NAMESPACE_ID::FloatValue* mutable_saturation();
  void set_allocated_saturation(::PROTOBUF_NAMESPACE_ID::FloatValue* saturation);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& _internal_saturation() const;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_saturation();
  public:
  void unsafe_arena_set_allocated_saturation(
      ::PROTOBUF_NAMESPACE_ID::FloatValue* saturation);
  ::PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_saturation();

  // .google.protobuf.FloatValue gain = 7;
  bool has_gain() const;
  private:
  bool _internal_has_gain() const;
  public:
  void clear_gain();
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& gain() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FloatValue* release_gain();
  ::PROTOBUF_NAMESPACE_ID::FloatValue* mutable_gain();
  void set_allocated_gain(::PROTOBUF_NAMESPACE_ID::FloatValue* gain);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& _internal_gain() const;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_gain();
  public:
  void unsafe_arena_set_allocated_gain(
      ::PROTOBUF_NAMESPACE_ID::FloatValue* gain);
  ::PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_gain();

  // .google.protobuf.BoolValue exposure_auto = 10;
  bool has_exposure_auto() const;
  private:
  bool _internal_has_exposure_auto() const;
  public:
  void clear_exposure_auto();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& exposure_auto() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_exposure_auto();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_exposure_auto();
  void set_allocated_exposure_auto(::PROTOBUF_NAMESPACE_ID::BoolValue* exposure_auto);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_exposure_auto() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_exposure_auto();
  public:
  void unsafe_arena_set_allocated_exposure_auto(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* exposure_auto);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_exposure_auto();

  // .google.protobuf.FloatValue exposure_absolute = 11;
  bool has_exposure_absolute() const;
  private:
  bool _internal_has_exposure_absolute() const;
  public:
  void clear_exposure_absolute();
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& exposure_absolute() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FloatValue* release_exposure_absolute();
  ::PROTOBUF_NAMESPACE_ID::FloatValue* mutable_exposure_absolute();
  void set_allocated_exposure_absolute(::PROTOBUF_NAMESPACE_ID::FloatValue* exposure_absolute);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& _internal_exposure_absolute() const;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_exposure_absolute();
  public:
  void unsafe_arena_set_allocated_exposure_absolute(
      ::PROTOBUF_NAMESPACE_ID::FloatValue* exposure_absolute);
  ::PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_exposure_absolute();

  // .google.protobuf.FloatValue focus_absolute = 12;
  bool has_focus_absolute() const;
  private:
  bool _internal_has_focus_absolute() const;
  public:
  void clear_focus_absolute();
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& focus_absolute() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FloatValue* release_focus_absolute();
  ::PROTOBUF_NAMESPACE_ID::FloatValue* mutable_focus_absolute();
  void set_allocated_focus_absolute(::PROTOBUF_NAMESPACE_ID::FloatValue* focus_absolute);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& _internal_focus_absolute() const;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_focus_absolute();
  public:
  void unsafe_arena_set_allocated_focus_absolute(
      ::PROTOBUF_NAMESPACE_ID::FloatValue* focus_absolute);
  ::PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_focus_absolute();

  // .google.protobuf.BoolValue focus_auto = 13;
  bool has_focus_auto() const;
  private:
  bool _internal_has_focus_auto() const;
  public:
  void clear_focus_auto();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& focus_auto() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_focus_auto();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_focus_auto();
  void set_allocated_focus_auto(::PROTOBUF_NAMESPACE_ID::BoolValue* focus_auto);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_focus_auto() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_focus_auto();
  public:
  void unsafe_arena_set_allocated_focus_auto(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* focus_auto);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_focus_auto();

  // .bosdyn.api.RoiParameters focus_roi = 14;
  bool has_focus_roi() const;
  private:
  bool _internal_has_focus_roi() const;
  public:
  void clear_focus_roi();
  const ::bosdyn::api::RoiParameters& focus_roi() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RoiParameters* release_focus_roi();
  ::bosdyn::api::RoiParameters* mutable_focus_roi();
  void set_allocated_focus_roi(::bosdyn::api::RoiParameters* focus_roi);
  private:
  const ::bosdyn::api::RoiParameters& _internal_focus_roi() const;
  ::bosdyn::api::RoiParameters* _internal_mutable_focus_roi();
  public:
  void unsafe_arena_set_allocated_focus_roi(
      ::bosdyn::api::RoiParameters* focus_roi);
  ::bosdyn::api::RoiParameters* unsafe_arena_release_focus_roi();

  // .bosdyn.api.RoiParameters exposure_roi = 16;
  bool has_exposure_roi() const;
  private:
  bool _internal_has_exposure_roi() const;
  public:
  void clear_exposure_roi();
  const ::bosdyn::api::RoiParameters& exposure_roi() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RoiParameters* release_exposure_roi();
  ::bosdyn::api::RoiParameters* mutable_exposure_roi();
  void set_allocated_exposure_roi(::bosdyn::api::RoiParameters* exposure_roi);
  private:
  const ::bosdyn::api::RoiParameters& _internal_exposure_roi() const;
  ::bosdyn::api::RoiParameters* _internal_mutable_exposure_roi();
  public:
  void unsafe_arena_set_allocated_exposure_roi(
      ::bosdyn::api::RoiParameters* exposure_roi);
  ::bosdyn::api::RoiParameters* unsafe_arena_release_exposure_roi();

  // .google.protobuf.BoolValue draw_focus_roi_rectangle = 18;
  bool has_draw_focus_roi_rectangle() const;
  private:
  bool _internal_has_draw_focus_roi_rectangle() const;
  public:
  void clear_draw_focus_roi_rectangle();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& draw_focus_roi_rectangle() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_draw_focus_roi_rectangle();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_draw_focus_roi_rectangle();
  void set_allocated_draw_focus_roi_rectangle(::PROTOBUF_NAMESPACE_ID::BoolValue* draw_focus_roi_rectangle);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_draw_focus_roi_rectangle() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_draw_focus_roi_rectangle();
  public:
  void unsafe_arena_set_allocated_draw_focus_roi_rectangle(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* draw_focus_roi_rectangle);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_draw_focus_roi_rectangle();

  // .google.protobuf.FloatValue led_torch_brightness = 20;
  bool has_led_torch_brightness() const;
  private:
  bool _internal_has_led_torch_brightness() const;
  public:
  void clear_led_torch_brightness();
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& led_torch_brightness() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FloatValue* release_led_torch_brightness();
  ::PROTOBUF_NAMESPACE_ID::FloatValue* mutable_led_torch_brightness();
  void set_allocated_led_torch_brightness(::PROTOBUF_NAMESPACE_ID::FloatValue* led_torch_brightness);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& _internal_led_torch_brightness() const;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_led_torch_brightness();
  public:
  void unsafe_arena_set_allocated_led_torch_brightness(
      ::PROTOBUF_NAMESPACE_ID::FloatValue* led_torch_brightness);
  ::PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_led_torch_brightness();

  // .bosdyn.api.GripperCameraParams.CameraMode camera_mode = 1;
  void clear_camera_mode();
  ::bosdyn::api::GripperCameraParams_CameraMode camera_mode() const;
  void set_camera_mode(::bosdyn::api::GripperCameraParams_CameraMode value);
  private:
  ::bosdyn::api::GripperCameraParams_CameraMode _internal_camera_mode() const;
  void _internal_set_camera_mode(::bosdyn::api::GripperCameraParams_CameraMode value);
  public:

  // .bosdyn.api.HdrParameters hdr = 17;
  void clear_hdr();
  ::bosdyn::api::HdrParameters hdr() const;
  void set_hdr(::bosdyn::api::HdrParameters value);
  private:
  ::bosdyn::api::HdrParameters _internal_hdr() const;
  void _internal_set_hdr(::bosdyn::api::HdrParameters value);
  public:

  // .bosdyn.api.GripperCameraParams.LedMode led_mode = 19;
  void clear_led_mode();
  ::bosdyn::api::GripperCameraParams_LedMode led_mode() const;
  void set_led_mode(::bosdyn::api::GripperCameraParams_LedMode value);
  private:
  ::bosdyn::api::GripperCameraParams_LedMode _internal_led_mode() const;
  void _internal_set_led_mode(::bosdyn::api::GripperCameraParams_LedMode value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.GripperCameraParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::FloatValue* brightness_;
    ::PROTOBUF_NAMESPACE_ID::FloatValue* contrast_;
    ::PROTOBUF_NAMESPACE_ID::FloatValue* saturation_;
    ::PROTOBUF_NAMESPACE_ID::FloatValue* gain_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* exposure_auto_;
    ::PROTOBUF_NAMESPACE_ID::FloatValue* exposure_absolute_;
    ::PROTOBUF_NAMESPACE_ID::FloatValue* focus_absolute_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* focus_auto_;
    ::bosdyn::api::RoiParameters* focus_roi_;
    ::bosdyn::api::RoiParameters* exposure_roi_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* draw_focus_roi_rectangle_;
    ::PROTOBUF_NAMESPACE_ID::FloatValue* led_torch_brightness_;
    int camera_mode_;
    int hdr_;
    int led_mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgripper_5fcamera_5fparam_2eproto;
};
// -------------------------------------------------------------------

class RoiParameters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.RoiParameters) */ {
 public:
  inline RoiParameters() : RoiParameters(nullptr) {}
  ~RoiParameters() override;
  explicit PROTOBUF_CONSTEXPR RoiParameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoiParameters(const RoiParameters& from);
  RoiParameters(RoiParameters&& from) noexcept
    : RoiParameters() {
    *this = ::std::move(from);
  }

  inline RoiParameters& operator=(const RoiParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoiParameters& operator=(RoiParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoiParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoiParameters* internal_default_instance() {
    return reinterpret_cast<const RoiParameters*>(
               &_RoiParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RoiParameters& a, RoiParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(RoiParameters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoiParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoiParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoiParameters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoiParameters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoiParameters& from) {
    RoiParameters::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoiParameters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.RoiParameters";
  }
  protected:
  explicit RoiParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RoiParameters_RoiWindowSize RoiWindowSize;
  static constexpr RoiWindowSize ROI_WINDOW_SIZE_UNKNOWN =
    RoiParameters_RoiWindowSize_ROI_WINDOW_SIZE_UNKNOWN;
  static constexpr RoiWindowSize ROI_WINDOW_SIZE_1 =
    RoiParameters_RoiWindowSize_ROI_WINDOW_SIZE_1;
  static constexpr RoiWindowSize ROI_WINDOW_SIZE_2 =
    RoiParameters_RoiWindowSize_ROI_WINDOW_SIZE_2;
  static constexpr RoiWindowSize ROI_WINDOW_SIZE_3 =
    RoiParameters_RoiWindowSize_ROI_WINDOW_SIZE_3;
  static constexpr RoiWindowSize ROI_WINDOW_SIZE_4 =
    RoiParameters_RoiWindowSize_ROI_WINDOW_SIZE_4;
  static constexpr RoiWindowSize ROI_WINDOW_SIZE_5 =
    RoiParameters_RoiWindowSize_ROI_WINDOW_SIZE_5;
  static constexpr RoiWindowSize ROI_WINDOW_SIZE_6 =
    RoiParameters_RoiWindowSize_ROI_WINDOW_SIZE_6;
  static constexpr RoiWindowSize ROI_WINDOW_SIZE_7 =
    RoiParameters_RoiWindowSize_ROI_WINDOW_SIZE_7;
  static constexpr RoiWindowSize ROI_WINDOW_SIZE_8 =
    RoiParameters_RoiWindowSize_ROI_WINDOW_SIZE_8;
  static inline bool RoiWindowSize_IsValid(int value) {
    return RoiParameters_RoiWindowSize_IsValid(value);
  }
  static constexpr RoiWindowSize RoiWindowSize_MIN =
    RoiParameters_RoiWindowSize_RoiWindowSize_MIN;
  static constexpr RoiWindowSize RoiWindowSize_MAX =
    RoiParameters_RoiWindowSize_RoiWindowSize_MAX;
  static constexpr int RoiWindowSize_ARRAYSIZE =
    RoiParameters_RoiWindowSize_RoiWindowSize_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RoiWindowSize_descriptor() {
    return RoiParameters_RoiWindowSize_descriptor();
  }
  template<typename T>
  static inline const std::string& RoiWindowSize_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RoiWindowSize>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RoiWindowSize_Name.");
    return RoiParameters_RoiWindowSize_Name(enum_t_value);
  }
  static inline bool RoiWindowSize_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RoiWindowSize* value) {
    return RoiParameters_RoiWindowSize_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRoiPercentageInImageFieldNumber = 1,
    kWindowSizeFieldNumber = 2,
  };
  // .bosdyn.api.Vec2 roi_percentage_in_image = 1;
  bool has_roi_percentage_in_image() const;
  private:
  bool _internal_has_roi_percentage_in_image() const;
  public:
  void clear_roi_percentage_in_image();
  const ::bosdyn::api::Vec2& roi_percentage_in_image() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec2* release_roi_percentage_in_image();
  ::bosdyn::api::Vec2* mutable_roi_percentage_in_image();
  void set_allocated_roi_percentage_in_image(::bosdyn::api::Vec2* roi_percentage_in_image);
  private:
  const ::bosdyn::api::Vec2& _internal_roi_percentage_in_image() const;
  ::bosdyn::api::Vec2* _internal_mutable_roi_percentage_in_image();
  public:
  void unsafe_arena_set_allocated_roi_percentage_in_image(
      ::bosdyn::api::Vec2* roi_percentage_in_image);
  ::bosdyn::api::Vec2* unsafe_arena_release_roi_percentage_in_image();

  // .bosdyn.api.RoiParameters.RoiWindowSize window_size = 2;
  void clear_window_size();
  ::bosdyn::api::RoiParameters_RoiWindowSize window_size() const;
  void set_window_size(::bosdyn::api::RoiParameters_RoiWindowSize value);
  private:
  ::bosdyn::api::RoiParameters_RoiWindowSize _internal_window_size() const;
  void _internal_set_window_size(::bosdyn::api::RoiParameters_RoiWindowSize value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.RoiParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::Vec2* roi_percentage_in_image_;
    int window_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgripper_5fcamera_5fparam_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GripperCameraParamRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool GripperCameraParamRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool GripperCameraParamRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& GripperCameraParamRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RequestHeader&>(
      ::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& GripperCameraParamRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GripperCameraParamRequest.header)
  return _internal_header();
}
inline void GripperCameraParamRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GripperCameraParamRequest.header)
}
inline ::bosdyn::api::RequestHeader* GripperCameraParamRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RequestHeader* GripperCameraParamRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GripperCameraParamRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* GripperCameraParamRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::RequestHeader* GripperCameraParamRequest::mutable_header() {
  ::bosdyn::api::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GripperCameraParamRequest.header)
  return _msg;
}
inline void GripperCameraParamRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GripperCameraParamRequest.header)
}

// .bosdyn.api.GripperCameraParams params = 2;
inline bool GripperCameraParamRequest::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool GripperCameraParamRequest::has_params() const {
  return _internal_has_params();
}
inline void GripperCameraParamRequest::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::bosdyn::api::GripperCameraParams& GripperCameraParamRequest::_internal_params() const {
  const ::bosdyn::api::GripperCameraParams* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::GripperCameraParams&>(
      ::bosdyn::api::_GripperCameraParams_default_instance_);
}
inline const ::bosdyn::api::GripperCameraParams& GripperCameraParamRequest::params() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GripperCameraParamRequest.params)
  return _internal_params();
}
inline void GripperCameraParamRequest::unsafe_arena_set_allocated_params(
    ::bosdyn::api::GripperCameraParams* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GripperCameraParamRequest.params)
}
inline ::bosdyn::api::GripperCameraParams* GripperCameraParamRequest::release_params() {
  
  ::bosdyn::api::GripperCameraParams* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::GripperCameraParams* GripperCameraParamRequest::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GripperCameraParamRequest.params)
  
  ::bosdyn::api::GripperCameraParams* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::bosdyn::api::GripperCameraParams* GripperCameraParamRequest::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::GripperCameraParams>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::bosdyn::api::GripperCameraParams* GripperCameraParamRequest::mutable_params() {
  ::bosdyn::api::GripperCameraParams* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GripperCameraParamRequest.params)
  return _msg;
}
inline void GripperCameraParamRequest::set_allocated_params(::bosdyn::api::GripperCameraParams* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GripperCameraParamRequest.params)
}

// -------------------------------------------------------------------

// GripperCameraParamResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool GripperCameraParamResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool GripperCameraParamResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& GripperCameraParamResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ResponseHeader&>(
      ::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& GripperCameraParamResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GripperCameraParamResponse.header)
  return _internal_header();
}
inline void GripperCameraParamResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GripperCameraParamResponse.header)
}
inline ::bosdyn::api::ResponseHeader* GripperCameraParamResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GripperCameraParamResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GripperCameraParamResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GripperCameraParamResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::ResponseHeader* GripperCameraParamResponse::mutable_header() {
  ::bosdyn::api::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GripperCameraParamResponse.header)
  return _msg;
}
inline void GripperCameraParamResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GripperCameraParamResponse.header)
}

// -------------------------------------------------------------------

// GripperCameraGetParamRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool GripperCameraGetParamRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool GripperCameraGetParamRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& GripperCameraGetParamRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RequestHeader&>(
      ::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& GripperCameraGetParamRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GripperCameraGetParamRequest.header)
  return _internal_header();
}
inline void GripperCameraGetParamRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GripperCameraGetParamRequest.header)
}
inline ::bosdyn::api::RequestHeader* GripperCameraGetParamRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RequestHeader* GripperCameraGetParamRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GripperCameraGetParamRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* GripperCameraGetParamRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::RequestHeader* GripperCameraGetParamRequest::mutable_header() {
  ::bosdyn::api::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GripperCameraGetParamRequest.header)
  return _msg;
}
inline void GripperCameraGetParamRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GripperCameraGetParamRequest.header)
}

// -------------------------------------------------------------------

// GripperCameraGetParamResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool GripperCameraGetParamResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool GripperCameraGetParamResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& GripperCameraGetParamResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ResponseHeader&>(
      ::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& GripperCameraGetParamResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GripperCameraGetParamResponse.header)
  return _internal_header();
}
inline void GripperCameraGetParamResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GripperCameraGetParamResponse.header)
}
inline ::bosdyn::api::ResponseHeader* GripperCameraGetParamResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GripperCameraGetParamResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GripperCameraGetParamResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GripperCameraGetParamResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::ResponseHeader* GripperCameraGetParamResponse::mutable_header() {
  ::bosdyn::api::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GripperCameraGetParamResponse.header)
  return _msg;
}
inline void GripperCameraGetParamResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GripperCameraGetParamResponse.header)
}

// .bosdyn.api.GripperCameraParams params = 2;
inline bool GripperCameraGetParamResponse::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool GripperCameraGetParamResponse::has_params() const {
  return _internal_has_params();
}
inline void GripperCameraGetParamResponse::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::bosdyn::api::GripperCameraParams& GripperCameraGetParamResponse::_internal_params() const {
  const ::bosdyn::api::GripperCameraParams* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::GripperCameraParams&>(
      ::bosdyn::api::_GripperCameraParams_default_instance_);
}
inline const ::bosdyn::api::GripperCameraParams& GripperCameraGetParamResponse::params() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GripperCameraGetParamResponse.params)
  return _internal_params();
}
inline void GripperCameraGetParamResponse::unsafe_arena_set_allocated_params(
    ::bosdyn::api::GripperCameraParams* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GripperCameraGetParamResponse.params)
}
inline ::bosdyn::api::GripperCameraParams* GripperCameraGetParamResponse::release_params() {
  
  ::bosdyn::api::GripperCameraParams* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::GripperCameraParams* GripperCameraGetParamResponse::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GripperCameraGetParamResponse.params)
  
  ::bosdyn::api::GripperCameraParams* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::bosdyn::api::GripperCameraParams* GripperCameraGetParamResponse::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::GripperCameraParams>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::bosdyn::api::GripperCameraParams* GripperCameraGetParamResponse::mutable_params() {
  ::bosdyn::api::GripperCameraParams* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GripperCameraGetParamResponse.params)
  return _msg;
}
inline void GripperCameraGetParamResponse::set_allocated_params(::bosdyn::api::GripperCameraParams* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GripperCameraGetParamResponse.params)
}

// -------------------------------------------------------------------

// GripperCameraParams

// .bosdyn.api.GripperCameraParams.CameraMode camera_mode = 1;
inline void GripperCameraParams::clear_camera_mode() {
  _impl_.camera_mode_ = 0;
}
inline ::bosdyn::api::GripperCameraParams_CameraMode GripperCameraParams::_internal_camera_mode() const {
  return static_cast< ::bosdyn::api::GripperCameraParams_CameraMode >(_impl_.camera_mode_);
}
inline ::bosdyn::api::GripperCameraParams_CameraMode GripperCameraParams::camera_mode() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GripperCameraParams.camera_mode)
  return _internal_camera_mode();
}
inline void GripperCameraParams::_internal_set_camera_mode(::bosdyn::api::GripperCameraParams_CameraMode value) {
  
  _impl_.camera_mode_ = value;
}
inline void GripperCameraParams::set_camera_mode(::bosdyn::api::GripperCameraParams_CameraMode value) {
  _internal_set_camera_mode(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.GripperCameraParams.camera_mode)
}

// .google.protobuf.FloatValue brightness = 2;
inline bool GripperCameraParams::_internal_has_brightness() const {
  return this != internal_default_instance() && _impl_.brightness_ != nullptr;
}
inline bool GripperCameraParams::has_brightness() const {
  return _internal_has_brightness();
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& GripperCameraParams::_internal_brightness() const {
  const ::PROTOBUF_NAMESPACE_ID::FloatValue* p = _impl_.brightness_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FloatValue&>(
      ::PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& GripperCameraParams::brightness() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GripperCameraParams.brightness)
  return _internal_brightness();
}
inline void GripperCameraParams::unsafe_arena_set_allocated_brightness(
    ::PROTOBUF_NAMESPACE_ID::FloatValue* brightness) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brightness_);
  }
  _impl_.brightness_ = brightness;
  if (brightness) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GripperCameraParams.brightness)
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GripperCameraParams::release_brightness() {
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = _impl_.brightness_;
  _impl_.brightness_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GripperCameraParams::unsafe_arena_release_brightness() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GripperCameraParams.brightness)
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = _impl_.brightness_;
  _impl_.brightness_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GripperCameraParams::_internal_mutable_brightness() {
  
  if (_impl_.brightness_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FloatValue>(GetArenaForAllocation());
    _impl_.brightness_ = p;
  }
  return _impl_.brightness_;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GripperCameraParams::mutable_brightness() {
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _msg = _internal_mutable_brightness();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GripperCameraParams.brightness)
  return _msg;
}
inline void GripperCameraParams::set_allocated_brightness(::PROTOBUF_NAMESPACE_ID::FloatValue* brightness) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brightness_);
  }
  if (brightness) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brightness));
    if (message_arena != submessage_arena) {
      brightness = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brightness, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.brightness_ = brightness;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GripperCameraParams.brightness)
}

// .google.protobuf.FloatValue contrast = 3;
inline bool GripperCameraParams::_internal_has_contrast() const {
  return this != internal_default_instance() && _impl_.contrast_ != nullptr;
}
inline bool GripperCameraParams::has_contrast() const {
  return _internal_has_contrast();
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& GripperCameraParams::_internal_contrast() const {
  const ::PROTOBUF_NAMESPACE_ID::FloatValue* p = _impl_.contrast_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FloatValue&>(
      ::PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& GripperCameraParams::contrast() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GripperCameraParams.contrast)
  return _internal_contrast();
}
inline void GripperCameraParams::unsafe_arena_set_allocated_contrast(
    ::PROTOBUF_NAMESPACE_ID::FloatValue* contrast) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contrast_);
  }
  _impl_.contrast_ = contrast;
  if (contrast) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GripperCameraParams.contrast)
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GripperCameraParams::release_contrast() {
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = _impl_.contrast_;
  _impl_.contrast_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GripperCameraParams::unsafe_arena_release_contrast() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GripperCameraParams.contrast)
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = _impl_.contrast_;
  _impl_.contrast_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GripperCameraParams::_internal_mutable_contrast() {
  
  if (_impl_.contrast_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FloatValue>(GetArenaForAllocation());
    _impl_.contrast_ = p;
  }
  return _impl_.contrast_;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GripperCameraParams::mutable_contrast() {
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _msg = _internal_mutable_contrast();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GripperCameraParams.contrast)
  return _msg;
}
inline void GripperCameraParams::set_allocated_contrast(::PROTOBUF_NAMESPACE_ID::FloatValue* contrast) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contrast_);
  }
  if (contrast) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contrast));
    if (message_arena != submessage_arena) {
      contrast = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contrast, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.contrast_ = contrast;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GripperCameraParams.contrast)
}

// .google.protobuf.FloatValue saturation = 4;
inline bool GripperCameraParams::_internal_has_saturation() const {
  return this != internal_default_instance() && _impl_.saturation_ != nullptr;
}
inline bool GripperCameraParams::has_saturation() const {
  return _internal_has_saturation();
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& GripperCameraParams::_internal_saturation() const {
  const ::PROTOBUF_NAMESPACE_ID::FloatValue* p = _impl_.saturation_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FloatValue&>(
      ::PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& GripperCameraParams::saturation() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GripperCameraParams.saturation)
  return _internal_saturation();
}
inline void GripperCameraParams::unsafe_arena_set_allocated_saturation(
    ::PROTOBUF_NAMESPACE_ID::FloatValue* saturation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.saturation_);
  }
  _impl_.saturation_ = saturation;
  if (saturation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GripperCameraParams.saturation)
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GripperCameraParams::release_saturation() {
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = _impl_.saturation_;
  _impl_.saturation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GripperCameraParams::unsafe_arena_release_saturation() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GripperCameraParams.saturation)
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = _impl_.saturation_;
  _impl_.saturation_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GripperCameraParams::_internal_mutable_saturation() {
  
  if (_impl_.saturation_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FloatValue>(GetArenaForAllocation());
    _impl_.saturation_ = p;
  }
  return _impl_.saturation_;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GripperCameraParams::mutable_saturation() {
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _msg = _internal_mutable_saturation();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GripperCameraParams.saturation)
  return _msg;
}
inline void GripperCameraParams::set_allocated_saturation(::PROTOBUF_NAMESPACE_ID::FloatValue* saturation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.saturation_);
  }
  if (saturation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(saturation));
    if (message_arena != submessage_arena) {
      saturation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, saturation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.saturation_ = saturation;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GripperCameraParams.saturation)
}

// .google.protobuf.FloatValue gain = 7;
inline bool GripperCameraParams::_internal_has_gain() const {
  return this != internal_default_instance() && _impl_.gain_ != nullptr;
}
inline bool GripperCameraParams::has_gain() const {
  return _internal_has_gain();
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& GripperCameraParams::_internal_gain() const {
  const ::PROTOBUF_NAMESPACE_ID::FloatValue* p = _impl_.gain_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FloatValue&>(
      ::PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& GripperCameraParams::gain() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GripperCameraParams.gain)
  return _internal_gain();
}
inline void GripperCameraParams::unsafe_arena_set_allocated_gain(
    ::PROTOBUF_NAMESPACE_ID::FloatValue* gain) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gain_);
  }
  _impl_.gain_ = gain;
  if (gain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GripperCameraParams.gain)
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GripperCameraParams::release_gain() {
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = _impl_.gain_;
  _impl_.gain_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GripperCameraParams::unsafe_arena_release_gain() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GripperCameraParams.gain)
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = _impl_.gain_;
  _impl_.gain_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GripperCameraParams::_internal_mutable_gain() {
  
  if (_impl_.gain_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FloatValue>(GetArenaForAllocation());
    _impl_.gain_ = p;
  }
  return _impl_.gain_;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GripperCameraParams::mutable_gain() {
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _msg = _internal_mutable_gain();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GripperCameraParams.gain)
  return _msg;
}
inline void GripperCameraParams::set_allocated_gain(::PROTOBUF_NAMESPACE_ID::FloatValue* gain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gain_);
  }
  if (gain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gain));
    if (message_arena != submessage_arena) {
      gain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gain, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gain_ = gain;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GripperCameraParams.gain)
}

// .google.protobuf.BoolValue exposure_auto = 10;
inline bool GripperCameraParams::_internal_has_exposure_auto() const {
  return this != internal_default_instance() && _impl_.exposure_auto_ != nullptr;
}
inline bool GripperCameraParams::has_exposure_auto() const {
  return _internal_has_exposure_auto();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& GripperCameraParams::_internal_exposure_auto() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.exposure_auto_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& GripperCameraParams::exposure_auto() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GripperCameraParams.exposure_auto)
  return _internal_exposure_auto();
}
inline void GripperCameraParams::unsafe_arena_set_allocated_exposure_auto(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* exposure_auto) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exposure_auto_);
  }
  _impl_.exposure_auto_ = exposure_auto;
  if (exposure_auto) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GripperCameraParams.exposure_auto)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* GripperCameraParams::release_exposure_auto() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.exposure_auto_;
  _impl_.exposure_auto_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* GripperCameraParams::unsafe_arena_release_exposure_auto() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GripperCameraParams.exposure_auto)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.exposure_auto_;
  _impl_.exposure_auto_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* GripperCameraParams::_internal_mutable_exposure_auto() {
  
  if (_impl_.exposure_auto_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.exposure_auto_ = p;
  }
  return _impl_.exposure_auto_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* GripperCameraParams::mutable_exposure_auto() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_exposure_auto();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GripperCameraParams.exposure_auto)
  return _msg;
}
inline void GripperCameraParams::set_allocated_exposure_auto(::PROTOBUF_NAMESPACE_ID::BoolValue* exposure_auto) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exposure_auto_);
  }
  if (exposure_auto) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exposure_auto));
    if (message_arena != submessage_arena) {
      exposure_auto = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exposure_auto, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.exposure_auto_ = exposure_auto;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GripperCameraParams.exposure_auto)
}

// .google.protobuf.FloatValue exposure_absolute = 11;
inline bool GripperCameraParams::_internal_has_exposure_absolute() const {
  return this != internal_default_instance() && _impl_.exposure_absolute_ != nullptr;
}
inline bool GripperCameraParams::has_exposure_absolute() const {
  return _internal_has_exposure_absolute();
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& GripperCameraParams::_internal_exposure_absolute() const {
  const ::PROTOBUF_NAMESPACE_ID::FloatValue* p = _impl_.exposure_absolute_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FloatValue&>(
      ::PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& GripperCameraParams::exposure_absolute() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GripperCameraParams.exposure_absolute)
  return _internal_exposure_absolute();
}
inline void GripperCameraParams::unsafe_arena_set_allocated_exposure_absolute(
    ::PROTOBUF_NAMESPACE_ID::FloatValue* exposure_absolute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exposure_absolute_);
  }
  _impl_.exposure_absolute_ = exposure_absolute;
  if (exposure_absolute) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GripperCameraParams.exposure_absolute)
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GripperCameraParams::release_exposure_absolute() {
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = _impl_.exposure_absolute_;
  _impl_.exposure_absolute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GripperCameraParams::unsafe_arena_release_exposure_absolute() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GripperCameraParams.exposure_absolute)
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = _impl_.exposure_absolute_;
  _impl_.exposure_absolute_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GripperCameraParams::_internal_mutable_exposure_absolute() {
  
  if (_impl_.exposure_absolute_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FloatValue>(GetArenaForAllocation());
    _impl_.exposure_absolute_ = p;
  }
  return _impl_.exposure_absolute_;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GripperCameraParams::mutable_exposure_absolute() {
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _msg = _internal_mutable_exposure_absolute();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GripperCameraParams.exposure_absolute)
  return _msg;
}
inline void GripperCameraParams::set_allocated_exposure_absolute(::PROTOBUF_NAMESPACE_ID::FloatValue* exposure_absolute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exposure_absolute_);
  }
  if (exposure_absolute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exposure_absolute));
    if (message_arena != submessage_arena) {
      exposure_absolute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exposure_absolute, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.exposure_absolute_ = exposure_absolute;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GripperCameraParams.exposure_absolute)
}

// .bosdyn.api.RoiParameters exposure_roi = 16;
inline bool GripperCameraParams::_internal_has_exposure_roi() const {
  return this != internal_default_instance() && _impl_.exposure_roi_ != nullptr;
}
inline bool GripperCameraParams::has_exposure_roi() const {
  return _internal_has_exposure_roi();
}
inline void GripperCameraParams::clear_exposure_roi() {
  if (GetArenaForAllocation() == nullptr && _impl_.exposure_roi_ != nullptr) {
    delete _impl_.exposure_roi_;
  }
  _impl_.exposure_roi_ = nullptr;
}
inline const ::bosdyn::api::RoiParameters& GripperCameraParams::_internal_exposure_roi() const {
  const ::bosdyn::api::RoiParameters* p = _impl_.exposure_roi_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RoiParameters&>(
      ::bosdyn::api::_RoiParameters_default_instance_);
}
inline const ::bosdyn::api::RoiParameters& GripperCameraParams::exposure_roi() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GripperCameraParams.exposure_roi)
  return _internal_exposure_roi();
}
inline void GripperCameraParams::unsafe_arena_set_allocated_exposure_roi(
    ::bosdyn::api::RoiParameters* exposure_roi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exposure_roi_);
  }
  _impl_.exposure_roi_ = exposure_roi;
  if (exposure_roi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GripperCameraParams.exposure_roi)
}
inline ::bosdyn::api::RoiParameters* GripperCameraParams::release_exposure_roi() {
  
  ::bosdyn::api::RoiParameters* temp = _impl_.exposure_roi_;
  _impl_.exposure_roi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RoiParameters* GripperCameraParams::unsafe_arena_release_exposure_roi() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GripperCameraParams.exposure_roi)
  
  ::bosdyn::api::RoiParameters* temp = _impl_.exposure_roi_;
  _impl_.exposure_roi_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RoiParameters* GripperCameraParams::_internal_mutable_exposure_roi() {
  
  if (_impl_.exposure_roi_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RoiParameters>(GetArenaForAllocation());
    _impl_.exposure_roi_ = p;
  }
  return _impl_.exposure_roi_;
}
inline ::bosdyn::api::RoiParameters* GripperCameraParams::mutable_exposure_roi() {
  ::bosdyn::api::RoiParameters* _msg = _internal_mutable_exposure_roi();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GripperCameraParams.exposure_roi)
  return _msg;
}
inline void GripperCameraParams::set_allocated_exposure_roi(::bosdyn::api::RoiParameters* exposure_roi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.exposure_roi_;
  }
  if (exposure_roi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(exposure_roi);
    if (message_arena != submessage_arena) {
      exposure_roi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exposure_roi, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.exposure_roi_ = exposure_roi;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GripperCameraParams.exposure_roi)
}

// .google.protobuf.BoolValue focus_auto = 13;
inline bool GripperCameraParams::_internal_has_focus_auto() const {
  return this != internal_default_instance() && _impl_.focus_auto_ != nullptr;
}
inline bool GripperCameraParams::has_focus_auto() const {
  return _internal_has_focus_auto();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& GripperCameraParams::_internal_focus_auto() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.focus_auto_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& GripperCameraParams::focus_auto() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GripperCameraParams.focus_auto)
  return _internal_focus_auto();
}
inline void GripperCameraParams::unsafe_arena_set_allocated_focus_auto(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* focus_auto) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.focus_auto_);
  }
  _impl_.focus_auto_ = focus_auto;
  if (focus_auto) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GripperCameraParams.focus_auto)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* GripperCameraParams::release_focus_auto() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.focus_auto_;
  _impl_.focus_auto_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* GripperCameraParams::unsafe_arena_release_focus_auto() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GripperCameraParams.focus_auto)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.focus_auto_;
  _impl_.focus_auto_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* GripperCameraParams::_internal_mutable_focus_auto() {
  
  if (_impl_.focus_auto_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.focus_auto_ = p;
  }
  return _impl_.focus_auto_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* GripperCameraParams::mutable_focus_auto() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_focus_auto();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GripperCameraParams.focus_auto)
  return _msg;
}
inline void GripperCameraParams::set_allocated_focus_auto(::PROTOBUF_NAMESPACE_ID::BoolValue* focus_auto) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.focus_auto_);
  }
  if (focus_auto) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(focus_auto));
    if (message_arena != submessage_arena) {
      focus_auto = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, focus_auto, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.focus_auto_ = focus_auto;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GripperCameraParams.focus_auto)
}

// .google.protobuf.FloatValue focus_absolute = 12;
inline bool GripperCameraParams::_internal_has_focus_absolute() const {
  return this != internal_default_instance() && _impl_.focus_absolute_ != nullptr;
}
inline bool GripperCameraParams::has_focus_absolute() const {
  return _internal_has_focus_absolute();
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& GripperCameraParams::_internal_focus_absolute() const {
  const ::PROTOBUF_NAMESPACE_ID::FloatValue* p = _impl_.focus_absolute_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FloatValue&>(
      ::PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& GripperCameraParams::focus_absolute() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GripperCameraParams.focus_absolute)
  return _internal_focus_absolute();
}
inline void GripperCameraParams::unsafe_arena_set_allocated_focus_absolute(
    ::PROTOBUF_NAMESPACE_ID::FloatValue* focus_absolute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.focus_absolute_);
  }
  _impl_.focus_absolute_ = focus_absolute;
  if (focus_absolute) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GripperCameraParams.focus_absolute)
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GripperCameraParams::release_focus_absolute() {
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = _impl_.focus_absolute_;
  _impl_.focus_absolute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GripperCameraParams::unsafe_arena_release_focus_absolute() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GripperCameraParams.focus_absolute)
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = _impl_.focus_absolute_;
  _impl_.focus_absolute_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GripperCameraParams::_internal_mutable_focus_absolute() {
  
  if (_impl_.focus_absolute_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FloatValue>(GetArenaForAllocation());
    _impl_.focus_absolute_ = p;
  }
  return _impl_.focus_absolute_;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GripperCameraParams::mutable_focus_absolute() {
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _msg = _internal_mutable_focus_absolute();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GripperCameraParams.focus_absolute)
  return _msg;
}
inline void GripperCameraParams::set_allocated_focus_absolute(::PROTOBUF_NAMESPACE_ID::FloatValue* focus_absolute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.focus_absolute_);
  }
  if (focus_absolute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(focus_absolute));
    if (message_arena != submessage_arena) {
      focus_absolute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, focus_absolute, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.focus_absolute_ = focus_absolute;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GripperCameraParams.focus_absolute)
}

// .bosdyn.api.RoiParameters focus_roi = 14;
inline bool GripperCameraParams::_internal_has_focus_roi() const {
  return this != internal_default_instance() && _impl_.focus_roi_ != nullptr;
}
inline bool GripperCameraParams::has_focus_roi() const {
  return _internal_has_focus_roi();
}
inline void GripperCameraParams::clear_focus_roi() {
  if (GetArenaForAllocation() == nullptr && _impl_.focus_roi_ != nullptr) {
    delete _impl_.focus_roi_;
  }
  _impl_.focus_roi_ = nullptr;
}
inline const ::bosdyn::api::RoiParameters& GripperCameraParams::_internal_focus_roi() const {
  const ::bosdyn::api::RoiParameters* p = _impl_.focus_roi_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RoiParameters&>(
      ::bosdyn::api::_RoiParameters_default_instance_);
}
inline const ::bosdyn::api::RoiParameters& GripperCameraParams::focus_roi() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GripperCameraParams.focus_roi)
  return _internal_focus_roi();
}
inline void GripperCameraParams::unsafe_arena_set_allocated_focus_roi(
    ::bosdyn::api::RoiParameters* focus_roi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.focus_roi_);
  }
  _impl_.focus_roi_ = focus_roi;
  if (focus_roi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GripperCameraParams.focus_roi)
}
inline ::bosdyn::api::RoiParameters* GripperCameraParams::release_focus_roi() {
  
  ::bosdyn::api::RoiParameters* temp = _impl_.focus_roi_;
  _impl_.focus_roi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RoiParameters* GripperCameraParams::unsafe_arena_release_focus_roi() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GripperCameraParams.focus_roi)
  
  ::bosdyn::api::RoiParameters* temp = _impl_.focus_roi_;
  _impl_.focus_roi_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RoiParameters* GripperCameraParams::_internal_mutable_focus_roi() {
  
  if (_impl_.focus_roi_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RoiParameters>(GetArenaForAllocation());
    _impl_.focus_roi_ = p;
  }
  return _impl_.focus_roi_;
}
inline ::bosdyn::api::RoiParameters* GripperCameraParams::mutable_focus_roi() {
  ::bosdyn::api::RoiParameters* _msg = _internal_mutable_focus_roi();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GripperCameraParams.focus_roi)
  return _msg;
}
inline void GripperCameraParams::set_allocated_focus_roi(::bosdyn::api::RoiParameters* focus_roi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.focus_roi_;
  }
  if (focus_roi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(focus_roi);
    if (message_arena != submessage_arena) {
      focus_roi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, focus_roi, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.focus_roi_ = focus_roi;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GripperCameraParams.focus_roi)
}

// .google.protobuf.BoolValue draw_focus_roi_rectangle = 18;
inline bool GripperCameraParams::_internal_has_draw_focus_roi_rectangle() const {
  return this != internal_default_instance() && _impl_.draw_focus_roi_rectangle_ != nullptr;
}
inline bool GripperCameraParams::has_draw_focus_roi_rectangle() const {
  return _internal_has_draw_focus_roi_rectangle();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& GripperCameraParams::_internal_draw_focus_roi_rectangle() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.draw_focus_roi_rectangle_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& GripperCameraParams::draw_focus_roi_rectangle() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GripperCameraParams.draw_focus_roi_rectangle)
  return _internal_draw_focus_roi_rectangle();
}
inline void GripperCameraParams::unsafe_arena_set_allocated_draw_focus_roi_rectangle(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* draw_focus_roi_rectangle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.draw_focus_roi_rectangle_);
  }
  _impl_.draw_focus_roi_rectangle_ = draw_focus_roi_rectangle;
  if (draw_focus_roi_rectangle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GripperCameraParams.draw_focus_roi_rectangle)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* GripperCameraParams::release_draw_focus_roi_rectangle() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.draw_focus_roi_rectangle_;
  _impl_.draw_focus_roi_rectangle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* GripperCameraParams::unsafe_arena_release_draw_focus_roi_rectangle() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GripperCameraParams.draw_focus_roi_rectangle)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.draw_focus_roi_rectangle_;
  _impl_.draw_focus_roi_rectangle_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* GripperCameraParams::_internal_mutable_draw_focus_roi_rectangle() {
  
  if (_impl_.draw_focus_roi_rectangle_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.draw_focus_roi_rectangle_ = p;
  }
  return _impl_.draw_focus_roi_rectangle_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* GripperCameraParams::mutable_draw_focus_roi_rectangle() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_draw_focus_roi_rectangle();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GripperCameraParams.draw_focus_roi_rectangle)
  return _msg;
}
inline void GripperCameraParams::set_allocated_draw_focus_roi_rectangle(::PROTOBUF_NAMESPACE_ID::BoolValue* draw_focus_roi_rectangle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.draw_focus_roi_rectangle_);
  }
  if (draw_focus_roi_rectangle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(draw_focus_roi_rectangle));
    if (message_arena != submessage_arena) {
      draw_focus_roi_rectangle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, draw_focus_roi_rectangle, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.draw_focus_roi_rectangle_ = draw_focus_roi_rectangle;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GripperCameraParams.draw_focus_roi_rectangle)
}

// .bosdyn.api.HdrParameters hdr = 17;
inline void GripperCameraParams::clear_hdr() {
  _impl_.hdr_ = 0;
}
inline ::bosdyn::api::HdrParameters GripperCameraParams::_internal_hdr() const {
  return static_cast< ::bosdyn::api::HdrParameters >(_impl_.hdr_);
}
inline ::bosdyn::api::HdrParameters GripperCameraParams::hdr() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GripperCameraParams.hdr)
  return _internal_hdr();
}
inline void GripperCameraParams::_internal_set_hdr(::bosdyn::api::HdrParameters value) {
  
  _impl_.hdr_ = value;
}
inline void GripperCameraParams::set_hdr(::bosdyn::api::HdrParameters value) {
  _internal_set_hdr(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.GripperCameraParams.hdr)
}

// .bosdyn.api.GripperCameraParams.LedMode led_mode = 19;
inline void GripperCameraParams::clear_led_mode() {
  _impl_.led_mode_ = 0;
}
inline ::bosdyn::api::GripperCameraParams_LedMode GripperCameraParams::_internal_led_mode() const {
  return static_cast< ::bosdyn::api::GripperCameraParams_LedMode >(_impl_.led_mode_);
}
inline ::bosdyn::api::GripperCameraParams_LedMode GripperCameraParams::led_mode() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GripperCameraParams.led_mode)
  return _internal_led_mode();
}
inline void GripperCameraParams::_internal_set_led_mode(::bosdyn::api::GripperCameraParams_LedMode value) {
  
  _impl_.led_mode_ = value;
}
inline void GripperCameraParams::set_led_mode(::bosdyn::api::GripperCameraParams_LedMode value) {
  _internal_set_led_mode(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.GripperCameraParams.led_mode)
}

// .google.protobuf.FloatValue led_torch_brightness = 20;
inline bool GripperCameraParams::_internal_has_led_torch_brightness() const {
  return this != internal_default_instance() && _impl_.led_torch_brightness_ != nullptr;
}
inline bool GripperCameraParams::has_led_torch_brightness() const {
  return _internal_has_led_torch_brightness();
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& GripperCameraParams::_internal_led_torch_brightness() const {
  const ::PROTOBUF_NAMESPACE_ID::FloatValue* p = _impl_.led_torch_brightness_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FloatValue&>(
      ::PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& GripperCameraParams::led_torch_brightness() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GripperCameraParams.led_torch_brightness)
  return _internal_led_torch_brightness();
}
inline void GripperCameraParams::unsafe_arena_set_allocated_led_torch_brightness(
    ::PROTOBUF_NAMESPACE_ID::FloatValue* led_torch_brightness) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.led_torch_brightness_);
  }
  _impl_.led_torch_brightness_ = led_torch_brightness;
  if (led_torch_brightness) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GripperCameraParams.led_torch_brightness)
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GripperCameraParams::release_led_torch_brightness() {
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = _impl_.led_torch_brightness_;
  _impl_.led_torch_brightness_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GripperCameraParams::unsafe_arena_release_led_torch_brightness() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GripperCameraParams.led_torch_brightness)
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = _impl_.led_torch_brightness_;
  _impl_.led_torch_brightness_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GripperCameraParams::_internal_mutable_led_torch_brightness() {
  
  if (_impl_.led_torch_brightness_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FloatValue>(GetArenaForAllocation());
    _impl_.led_torch_brightness_ = p;
  }
  return _impl_.led_torch_brightness_;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GripperCameraParams::mutable_led_torch_brightness() {
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _msg = _internal_mutable_led_torch_brightness();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GripperCameraParams.led_torch_brightness)
  return _msg;
}
inline void GripperCameraParams::set_allocated_led_torch_brightness(::PROTOBUF_NAMESPACE_ID::FloatValue* led_torch_brightness) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.led_torch_brightness_);
  }
  if (led_torch_brightness) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(led_torch_brightness));
    if (message_arena != submessage_arena) {
      led_torch_brightness = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, led_torch_brightness, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.led_torch_brightness_ = led_torch_brightness;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GripperCameraParams.led_torch_brightness)
}

// -------------------------------------------------------------------

// RoiParameters

// .bosdyn.api.Vec2 roi_percentage_in_image = 1;
inline bool RoiParameters::_internal_has_roi_percentage_in_image() const {
  return this != internal_default_instance() && _impl_.roi_percentage_in_image_ != nullptr;
}
inline bool RoiParameters::has_roi_percentage_in_image() const {
  return _internal_has_roi_percentage_in_image();
}
inline const ::bosdyn::api::Vec2& RoiParameters::_internal_roi_percentage_in_image() const {
  const ::bosdyn::api::Vec2* p = _impl_.roi_percentage_in_image_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec2&>(
      ::bosdyn::api::_Vec2_default_instance_);
}
inline const ::bosdyn::api::Vec2& RoiParameters::roi_percentage_in_image() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RoiParameters.roi_percentage_in_image)
  return _internal_roi_percentage_in_image();
}
inline void RoiParameters::unsafe_arena_set_allocated_roi_percentage_in_image(
    ::bosdyn::api::Vec2* roi_percentage_in_image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.roi_percentage_in_image_);
  }
  _impl_.roi_percentage_in_image_ = roi_percentage_in_image;
  if (roi_percentage_in_image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.RoiParameters.roi_percentage_in_image)
}
inline ::bosdyn::api::Vec2* RoiParameters::release_roi_percentage_in_image() {
  
  ::bosdyn::api::Vec2* temp = _impl_.roi_percentage_in_image_;
  _impl_.roi_percentage_in_image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec2* RoiParameters::unsafe_arena_release_roi_percentage_in_image() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RoiParameters.roi_percentage_in_image)
  
  ::bosdyn::api::Vec2* temp = _impl_.roi_percentage_in_image_;
  _impl_.roi_percentage_in_image_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec2* RoiParameters::_internal_mutable_roi_percentage_in_image() {
  
  if (_impl_.roi_percentage_in_image_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec2>(GetArenaForAllocation());
    _impl_.roi_percentage_in_image_ = p;
  }
  return _impl_.roi_percentage_in_image_;
}
inline ::bosdyn::api::Vec2* RoiParameters::mutable_roi_percentage_in_image() {
  ::bosdyn::api::Vec2* _msg = _internal_mutable_roi_percentage_in_image();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RoiParameters.roi_percentage_in_image)
  return _msg;
}
inline void RoiParameters::set_allocated_roi_percentage_in_image(::bosdyn::api::Vec2* roi_percentage_in_image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.roi_percentage_in_image_);
  }
  if (roi_percentage_in_image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roi_percentage_in_image));
    if (message_arena != submessage_arena) {
      roi_percentage_in_image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roi_percentage_in_image, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.roi_percentage_in_image_ = roi_percentage_in_image;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RoiParameters.roi_percentage_in_image)
}

// .bosdyn.api.RoiParameters.RoiWindowSize window_size = 2;
inline void RoiParameters::clear_window_size() {
  _impl_.window_size_ = 0;
}
inline ::bosdyn::api::RoiParameters_RoiWindowSize RoiParameters::_internal_window_size() const {
  return static_cast< ::bosdyn::api::RoiParameters_RoiWindowSize >(_impl_.window_size_);
}
inline ::bosdyn::api::RoiParameters_RoiWindowSize RoiParameters::window_size() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RoiParameters.window_size)
  return _internal_window_size();
}
inline void RoiParameters::_internal_set_window_size(::bosdyn::api::RoiParameters_RoiWindowSize value) {
  
  _impl_.window_size_ = value;
}
inline void RoiParameters::set_window_size(::bosdyn::api::RoiParameters_RoiWindowSize value) {
  _internal_set_window_size(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.RoiParameters.window_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::GripperCameraParams_CameraMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::GripperCameraParams_CameraMode>() {
  return ::bosdyn::api::GripperCameraParams_CameraMode_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::GripperCameraParams_LedMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::GripperCameraParams_LedMode>() {
  return ::bosdyn::api::GripperCameraParams_LedMode_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::RoiParameters_RoiWindowSize> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::RoiParameters_RoiWindowSize>() {
  return ::bosdyn::api::RoiParameters_RoiWindowSize_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::HdrParameters> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::HdrParameters>() {
  return ::bosdyn::api::HdrParameters_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fgripper_5fcamera_5fparam_2eproto

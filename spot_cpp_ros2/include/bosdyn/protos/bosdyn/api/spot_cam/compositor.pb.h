// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/spot_cam/compositor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/header.pb.h"
#include "bosdyn/api/spot_cam/camera.pb.h"
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
namespace bosdyn {
namespace api {
namespace spot_cam {
class GetIrColormapRequest;
struct GetIrColormapRequestDefaultTypeInternal;
extern GetIrColormapRequestDefaultTypeInternal _GetIrColormapRequest_default_instance_;
class GetIrColormapResponse;
struct GetIrColormapResponseDefaultTypeInternal;
extern GetIrColormapResponseDefaultTypeInternal _GetIrColormapResponse_default_instance_;
class GetScreenRequest;
struct GetScreenRequestDefaultTypeInternal;
extern GetScreenRequestDefaultTypeInternal _GetScreenRequest_default_instance_;
class GetScreenResponse;
struct GetScreenResponseDefaultTypeInternal;
extern GetScreenResponseDefaultTypeInternal _GetScreenResponse_default_instance_;
class GetVisibleCamerasRequest;
struct GetVisibleCamerasRequestDefaultTypeInternal;
extern GetVisibleCamerasRequestDefaultTypeInternal _GetVisibleCamerasRequest_default_instance_;
class GetVisibleCamerasResponse;
struct GetVisibleCamerasResponseDefaultTypeInternal;
extern GetVisibleCamerasResponseDefaultTypeInternal _GetVisibleCamerasResponse_default_instance_;
class GetVisibleCamerasResponse_Stream;
struct GetVisibleCamerasResponse_StreamDefaultTypeInternal;
extern GetVisibleCamerasResponse_StreamDefaultTypeInternal _GetVisibleCamerasResponse_Stream_default_instance_;
class GetVisibleCamerasResponse_Stream_Window;
struct GetVisibleCamerasResponse_Stream_WindowDefaultTypeInternal;
extern GetVisibleCamerasResponse_Stream_WindowDefaultTypeInternal _GetVisibleCamerasResponse_Stream_Window_default_instance_;
class IrColorMap;
struct IrColorMapDefaultTypeInternal;
extern IrColorMapDefaultTypeInternal _IrColorMap_default_instance_;
class IrColorMap_ScalingPair;
struct IrColorMap_ScalingPairDefaultTypeInternal;
extern IrColorMap_ScalingPairDefaultTypeInternal _IrColorMap_ScalingPair_default_instance_;
class IrMeterOverlay;
struct IrMeterOverlayDefaultTypeInternal;
extern IrMeterOverlayDefaultTypeInternal _IrMeterOverlay_default_instance_;
class IrMeterOverlay_NormalizedCoordinates;
struct IrMeterOverlay_NormalizedCoordinatesDefaultTypeInternal;
extern IrMeterOverlay_NormalizedCoordinatesDefaultTypeInternal _IrMeterOverlay_NormalizedCoordinates_default_instance_;
class ListScreensRequest;
struct ListScreensRequestDefaultTypeInternal;
extern ListScreensRequestDefaultTypeInternal _ListScreensRequest_default_instance_;
class ListScreensResponse;
struct ListScreensResponseDefaultTypeInternal;
extern ListScreensResponseDefaultTypeInternal _ListScreensResponse_default_instance_;
class ScreenDescription;
struct ScreenDescriptionDefaultTypeInternal;
extern ScreenDescriptionDefaultTypeInternal _ScreenDescription_default_instance_;
class SetIrColormapRequest;
struct SetIrColormapRequestDefaultTypeInternal;
extern SetIrColormapRequestDefaultTypeInternal _SetIrColormapRequest_default_instance_;
class SetIrColormapResponse;
struct SetIrColormapResponseDefaultTypeInternal;
extern SetIrColormapResponseDefaultTypeInternal _SetIrColormapResponse_default_instance_;
class SetIrMeterOverlayRequest;
struct SetIrMeterOverlayRequestDefaultTypeInternal;
extern SetIrMeterOverlayRequestDefaultTypeInternal _SetIrMeterOverlayRequest_default_instance_;
class SetIrMeterOverlayResponse;
struct SetIrMeterOverlayResponseDefaultTypeInternal;
extern SetIrMeterOverlayResponseDefaultTypeInternal _SetIrMeterOverlayResponse_default_instance_;
class SetScreenRequest;
struct SetScreenRequestDefaultTypeInternal;
extern SetScreenRequestDefaultTypeInternal _SetScreenRequest_default_instance_;
class SetScreenResponse;
struct SetScreenResponseDefaultTypeInternal;
extern SetScreenResponseDefaultTypeInternal _SetScreenResponse_default_instance_;
}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::spot_cam::GetIrColormapRequest* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetIrColormapRequest>(Arena*);
template<> ::bosdyn::api::spot_cam::GetIrColormapResponse* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetIrColormapResponse>(Arena*);
template<> ::bosdyn::api::spot_cam::GetScreenRequest* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetScreenRequest>(Arena*);
template<> ::bosdyn::api::spot_cam::GetScreenResponse* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetScreenResponse>(Arena*);
template<> ::bosdyn::api::spot_cam::GetVisibleCamerasRequest* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetVisibleCamerasRequest>(Arena*);
template<> ::bosdyn::api::spot_cam::GetVisibleCamerasResponse* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetVisibleCamerasResponse>(Arena*);
template<> ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream>(Arena*);
template<> ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window>(Arena*);
template<> ::bosdyn::api::spot_cam::IrColorMap* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::IrColorMap>(Arena*);
template<> ::bosdyn::api::spot_cam::IrColorMap_ScalingPair* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::IrColorMap_ScalingPair>(Arena*);
template<> ::bosdyn::api::spot_cam::IrMeterOverlay* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::IrMeterOverlay>(Arena*);
template<> ::bosdyn::api::spot_cam::IrMeterOverlay_NormalizedCoordinates* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::IrMeterOverlay_NormalizedCoordinates>(Arena*);
template<> ::bosdyn::api::spot_cam::ListScreensRequest* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::ListScreensRequest>(Arena*);
template<> ::bosdyn::api::spot_cam::ListScreensResponse* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::ListScreensResponse>(Arena*);
template<> ::bosdyn::api::spot_cam::ScreenDescription* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::ScreenDescription>(Arena*);
template<> ::bosdyn::api::spot_cam::SetIrColormapRequest* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::SetIrColormapRequest>(Arena*);
template<> ::bosdyn::api::spot_cam::SetIrColormapResponse* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::SetIrColormapResponse>(Arena*);
template<> ::bosdyn::api::spot_cam::SetIrMeterOverlayRequest* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::SetIrMeterOverlayRequest>(Arena*);
template<> ::bosdyn::api::spot_cam::SetIrMeterOverlayResponse* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::SetIrMeterOverlayResponse>(Arena*);
template<> ::bosdyn::api::spot_cam::SetScreenRequest* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::SetScreenRequest>(Arena*);
template<> ::bosdyn::api::spot_cam::SetScreenResponse* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::SetScreenResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {
namespace spot_cam {

enum IrColorMap_ColorMap : int {
  IrColorMap_ColorMap_COLORMAP_UNKNOWN = 0,
  IrColorMap_ColorMap_COLORMAP_GREYSCALE = 1,
  IrColorMap_ColorMap_COLORMAP_JET = 2,
  IrColorMap_ColorMap_COLORMAP_INFERNO = 3,
  IrColorMap_ColorMap_COLORMAP_TURBO = 4,
  IrColorMap_ColorMap_IrColorMap_ColorMap_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  IrColorMap_ColorMap_IrColorMap_ColorMap_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool IrColorMap_ColorMap_IsValid(int value);
constexpr IrColorMap_ColorMap IrColorMap_ColorMap_ColorMap_MIN = IrColorMap_ColorMap_COLORMAP_UNKNOWN;
constexpr IrColorMap_ColorMap IrColorMap_ColorMap_ColorMap_MAX = IrColorMap_ColorMap_COLORMAP_TURBO;
constexpr int IrColorMap_ColorMap_ColorMap_ARRAYSIZE = IrColorMap_ColorMap_ColorMap_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IrColorMap_ColorMap_descriptor();
template<typename T>
inline const std::string& IrColorMap_ColorMap_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IrColorMap_ColorMap>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IrColorMap_ColorMap_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IrColorMap_ColorMap_descriptor(), enum_t_value);
}
inline bool IrColorMap_ColorMap_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IrColorMap_ColorMap* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IrColorMap_ColorMap>(
    IrColorMap_ColorMap_descriptor(), name, value);
}
// ===================================================================

class ScreenDescription final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.ScreenDescription) */ {
 public:
  inline ScreenDescription() : ScreenDescription(nullptr) {}
  ~ScreenDescription() override;
  explicit PROTOBUF_CONSTEXPR ScreenDescription(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScreenDescription(const ScreenDescription& from);
  ScreenDescription(ScreenDescription&& from) noexcept
    : ScreenDescription() {
    *this = ::std::move(from);
  }

  inline ScreenDescription& operator=(const ScreenDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScreenDescription& operator=(ScreenDescription&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScreenDescription& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScreenDescription* internal_default_instance() {
    return reinterpret_cast<const ScreenDescription*>(
               &_ScreenDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ScreenDescription& a, ScreenDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(ScreenDescription* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScreenDescription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScreenDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScreenDescription>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScreenDescription& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScreenDescription& from) {
    ScreenDescription::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScreenDescription* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.ScreenDescription";
  }
  protected:
  explicit ScreenDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.ScreenDescription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
};
// -------------------------------------------------------------------

class GetScreenRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetScreenRequest) */ {
 public:
  inline GetScreenRequest() : GetScreenRequest(nullptr) {}
  ~GetScreenRequest() override;
  explicit PROTOBUF_CONSTEXPR GetScreenRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetScreenRequest(const GetScreenRequest& from);
  GetScreenRequest(GetScreenRequest&& from) noexcept
    : GetScreenRequest() {
    *this = ::std::move(from);
  }

  inline GetScreenRequest& operator=(const GetScreenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetScreenRequest& operator=(GetScreenRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetScreenRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetScreenRequest* internal_default_instance() {
    return reinterpret_cast<const GetScreenRequest*>(
               &_GetScreenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetScreenRequest& a, GetScreenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetScreenRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetScreenRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetScreenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetScreenRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetScreenRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetScreenRequest& from) {
    GetScreenRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetScreenRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetScreenRequest";
  }
  protected:
  explicit GetScreenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetScreenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::RequestHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
};
// -------------------------------------------------------------------

class GetScreenResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetScreenResponse) */ {
 public:
  inline GetScreenResponse() : GetScreenResponse(nullptr) {}
  ~GetScreenResponse() override;
  explicit PROTOBUF_CONSTEXPR GetScreenResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetScreenResponse(const GetScreenResponse& from);
  GetScreenResponse(GetScreenResponse&& from) noexcept
    : GetScreenResponse() {
    *this = ::std::move(from);
  }

  inline GetScreenResponse& operator=(const GetScreenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetScreenResponse& operator=(GetScreenResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetScreenResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetScreenResponse* internal_default_instance() {
    return reinterpret_cast<const GetScreenResponse*>(
               &_GetScreenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetScreenResponse& a, GetScreenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetScreenResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetScreenResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetScreenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetScreenResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetScreenResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetScreenResponse& from) {
    GetScreenResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetScreenResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetScreenResponse";
  }
  protected:
  explicit GetScreenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetScreenResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::bosdyn::api::ResponseHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
};
// -------------------------------------------------------------------

class GetVisibleCamerasRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetVisibleCamerasRequest) */ {
 public:
  inline GetVisibleCamerasRequest() : GetVisibleCamerasRequest(nullptr) {}
  ~GetVisibleCamerasRequest() override;
  explicit PROTOBUF_CONSTEXPR GetVisibleCamerasRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVisibleCamerasRequest(const GetVisibleCamerasRequest& from);
  GetVisibleCamerasRequest(GetVisibleCamerasRequest&& from) noexcept
    : GetVisibleCamerasRequest() {
    *this = ::std::move(from);
  }

  inline GetVisibleCamerasRequest& operator=(const GetVisibleCamerasRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVisibleCamerasRequest& operator=(GetVisibleCamerasRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVisibleCamerasRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVisibleCamerasRequest* internal_default_instance() {
    return reinterpret_cast<const GetVisibleCamerasRequest*>(
               &_GetVisibleCamerasRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetVisibleCamerasRequest& a, GetVisibleCamerasRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVisibleCamerasRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVisibleCamerasRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVisibleCamerasRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVisibleCamerasRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVisibleCamerasRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetVisibleCamerasRequest& from) {
    GetVisibleCamerasRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVisibleCamerasRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetVisibleCamerasRequest";
  }
  protected:
  explicit GetVisibleCamerasRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetVisibleCamerasRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::RequestHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
};
// -------------------------------------------------------------------

class GetVisibleCamerasResponse_Stream_Window final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window) */ {
 public:
  inline GetVisibleCamerasResponse_Stream_Window() : GetVisibleCamerasResponse_Stream_Window(nullptr) {}
  ~GetVisibleCamerasResponse_Stream_Window() override;
  explicit PROTOBUF_CONSTEXPR GetVisibleCamerasResponse_Stream_Window(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVisibleCamerasResponse_Stream_Window(const GetVisibleCamerasResponse_Stream_Window& from);
  GetVisibleCamerasResponse_Stream_Window(GetVisibleCamerasResponse_Stream_Window&& from) noexcept
    : GetVisibleCamerasResponse_Stream_Window() {
    *this = ::std::move(from);
  }

  inline GetVisibleCamerasResponse_Stream_Window& operator=(const GetVisibleCamerasResponse_Stream_Window& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVisibleCamerasResponse_Stream_Window& operator=(GetVisibleCamerasResponse_Stream_Window&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVisibleCamerasResponse_Stream_Window& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVisibleCamerasResponse_Stream_Window* internal_default_instance() {
    return reinterpret_cast<const GetVisibleCamerasResponse_Stream_Window*>(
               &_GetVisibleCamerasResponse_Stream_Window_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetVisibleCamerasResponse_Stream_Window& a, GetVisibleCamerasResponse_Stream_Window& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVisibleCamerasResponse_Stream_Window* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVisibleCamerasResponse_Stream_Window* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVisibleCamerasResponse_Stream_Window* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVisibleCamerasResponse_Stream_Window>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVisibleCamerasResponse_Stream_Window& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetVisibleCamerasResponse_Stream_Window& from) {
    GetVisibleCamerasResponse_Stream_Window::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVisibleCamerasResponse_Stream_Window* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window";
  }
  protected:
  explicit GetVisibleCamerasResponse_Stream_Window(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXoffsetFieldNumber = 1,
    kYoffsetFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // int32 xoffset = 1;
  void clear_xoffset();
  int32_t xoffset() const;
  void set_xoffset(int32_t value);
  private:
  int32_t _internal_xoffset() const;
  void _internal_set_xoffset(int32_t value);
  public:

  // int32 yoffset = 2;
  void clear_yoffset();
  int32_t yoffset() const;
  void set_yoffset(int32_t value);
  private:
  int32_t _internal_yoffset() const;
  void _internal_set_yoffset(int32_t value);
  public:

  // int32 width = 3;
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 height = 4;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xoffset_;
    int32_t yoffset_;
    int32_t width_;
    int32_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
};
// -------------------------------------------------------------------

class GetVisibleCamerasResponse_Stream final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream) */ {
 public:
  inline GetVisibleCamerasResponse_Stream() : GetVisibleCamerasResponse_Stream(nullptr) {}
  ~GetVisibleCamerasResponse_Stream() override;
  explicit PROTOBUF_CONSTEXPR GetVisibleCamerasResponse_Stream(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVisibleCamerasResponse_Stream(const GetVisibleCamerasResponse_Stream& from);
  GetVisibleCamerasResponse_Stream(GetVisibleCamerasResponse_Stream&& from) noexcept
    : GetVisibleCamerasResponse_Stream() {
    *this = ::std::move(from);
  }

  inline GetVisibleCamerasResponse_Stream& operator=(const GetVisibleCamerasResponse_Stream& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVisibleCamerasResponse_Stream& operator=(GetVisibleCamerasResponse_Stream&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVisibleCamerasResponse_Stream& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVisibleCamerasResponse_Stream* internal_default_instance() {
    return reinterpret_cast<const GetVisibleCamerasResponse_Stream*>(
               &_GetVisibleCamerasResponse_Stream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetVisibleCamerasResponse_Stream& a, GetVisibleCamerasResponse_Stream& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVisibleCamerasResponse_Stream* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVisibleCamerasResponse_Stream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVisibleCamerasResponse_Stream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVisibleCamerasResponse_Stream>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVisibleCamerasResponse_Stream& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetVisibleCamerasResponse_Stream& from) {
    GetVisibleCamerasResponse_Stream::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVisibleCamerasResponse_Stream* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream";
  }
  protected:
  explicit GetVisibleCamerasResponse_Stream(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetVisibleCamerasResponse_Stream_Window Window;

  // accessors -------------------------------------------------------

  enum : int {
    kWindowFieldNumber = 1,
    kCameraFieldNumber = 2,
  };
  // .bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window window = 1;
  bool has_window() const;
  private:
  bool _internal_has_window() const;
  public:
  void clear_window();
  const ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window& window() const;
  PROTOBUF_NODISCARD ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* release_window();
  ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* mutable_window();
  void set_allocated_window(::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* window);
  private:
  const ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window& _internal_window() const;
  ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* _internal_mutable_window();
  public:
  void unsafe_arena_set_allocated_window(
      ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* window);
  ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* unsafe_arena_release_window();

  // .bosdyn.api.spot_cam.Camera camera = 2;
  bool has_camera() const;
  private:
  bool _internal_has_camera() const;
  public:
  void clear_camera();
  const ::bosdyn::api::spot_cam::Camera& camera() const;
  PROTOBUF_NODISCARD ::bosdyn::api::spot_cam::Camera* release_camera();
  ::bosdyn::api::spot_cam::Camera* mutable_camera();
  void set_allocated_camera(::bosdyn::api::spot_cam::Camera* camera);
  private:
  const ::bosdyn::api::spot_cam::Camera& _internal_camera() const;
  ::bosdyn::api::spot_cam::Camera* _internal_mutable_camera();
  public:
  void unsafe_arena_set_allocated_camera(
      ::bosdyn::api::spot_cam::Camera* camera);
  ::bosdyn::api::spot_cam::Camera* unsafe_arena_release_camera();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* window_;
    ::bosdyn::api::spot_cam::Camera* camera_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
};
// -------------------------------------------------------------------

class GetVisibleCamerasResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetVisibleCamerasResponse) */ {
 public:
  inline GetVisibleCamerasResponse() : GetVisibleCamerasResponse(nullptr) {}
  ~GetVisibleCamerasResponse() override;
  explicit PROTOBUF_CONSTEXPR GetVisibleCamerasResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVisibleCamerasResponse(const GetVisibleCamerasResponse& from);
  GetVisibleCamerasResponse(GetVisibleCamerasResponse&& from) noexcept
    : GetVisibleCamerasResponse() {
    *this = ::std::move(from);
  }

  inline GetVisibleCamerasResponse& operator=(const GetVisibleCamerasResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVisibleCamerasResponse& operator=(GetVisibleCamerasResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVisibleCamerasResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVisibleCamerasResponse* internal_default_instance() {
    return reinterpret_cast<const GetVisibleCamerasResponse*>(
               &_GetVisibleCamerasResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetVisibleCamerasResponse& a, GetVisibleCamerasResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVisibleCamerasResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVisibleCamerasResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVisibleCamerasResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVisibleCamerasResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVisibleCamerasResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetVisibleCamerasResponse& from) {
    GetVisibleCamerasResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVisibleCamerasResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetVisibleCamerasResponse";
  }
  protected:
  explicit GetVisibleCamerasResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetVisibleCamerasResponse_Stream Stream;

  // accessors -------------------------------------------------------

  enum : int {
    kStreamsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream streams = 2;
  int streams_size() const;
  private:
  int _internal_streams_size() const;
  public:
  void clear_streams();
  ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream* mutable_streams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream >*
      mutable_streams();
  private:
  const ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream& _internal_streams(int index) const;
  ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream* _internal_add_streams();
  public:
  const ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream& streams(int index) const;
  ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream* add_streams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream >&
      streams() const;

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetVisibleCamerasResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream > streams_;
    ::bosdyn::api::ResponseHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
};
// -------------------------------------------------------------------

class ListScreensRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.ListScreensRequest) */ {
 public:
  inline ListScreensRequest() : ListScreensRequest(nullptr) {}
  ~ListScreensRequest() override;
  explicit PROTOBUF_CONSTEXPR ListScreensRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListScreensRequest(const ListScreensRequest& from);
  ListScreensRequest(ListScreensRequest&& from) noexcept
    : ListScreensRequest() {
    *this = ::std::move(from);
  }

  inline ListScreensRequest& operator=(const ListScreensRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListScreensRequest& operator=(ListScreensRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListScreensRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListScreensRequest* internal_default_instance() {
    return reinterpret_cast<const ListScreensRequest*>(
               &_ListScreensRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ListScreensRequest& a, ListScreensRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListScreensRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListScreensRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListScreensRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListScreensRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListScreensRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListScreensRequest& from) {
    ListScreensRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListScreensRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.ListScreensRequest";
  }
  protected:
  explicit ListScreensRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.ListScreensRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::RequestHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
};
// -------------------------------------------------------------------

class ListScreensResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.ListScreensResponse) */ {
 public:
  inline ListScreensResponse() : ListScreensResponse(nullptr) {}
  ~ListScreensResponse() override;
  explicit PROTOBUF_CONSTEXPR ListScreensResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListScreensResponse(const ListScreensResponse& from);
  ListScreensResponse(ListScreensResponse&& from) noexcept
    : ListScreensResponse() {
    *this = ::std::move(from);
  }

  inline ListScreensResponse& operator=(const ListScreensResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListScreensResponse& operator=(ListScreensResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListScreensResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListScreensResponse* internal_default_instance() {
    return reinterpret_cast<const ListScreensResponse*>(
               &_ListScreensResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ListScreensResponse& a, ListScreensResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListScreensResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListScreensResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListScreensResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListScreensResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListScreensResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListScreensResponse& from) {
    ListScreensResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListScreensResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.ListScreensResponse";
  }
  protected:
  explicit ListScreensResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScreensFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .bosdyn.api.spot_cam.ScreenDescription screens = 2;
  int screens_size() const;
  private:
  int _internal_screens_size() const;
  public:
  void clear_screens();
  ::bosdyn::api::spot_cam::ScreenDescription* mutable_screens(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::ScreenDescription >*
      mutable_screens();
  private:
  const ::bosdyn::api::spot_cam::ScreenDescription& _internal_screens(int index) const;
  ::bosdyn::api::spot_cam::ScreenDescription* _internal_add_screens();
  public:
  const ::bosdyn::api::spot_cam::ScreenDescription& screens(int index) const;
  ::bosdyn::api::spot_cam::ScreenDescription* add_screens();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::ScreenDescription >&
      screens() const;

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.ListScreensResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::ScreenDescription > screens_;
    ::bosdyn::api::ResponseHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
};
// -------------------------------------------------------------------

class SetScreenRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.SetScreenRequest) */ {
 public:
  inline SetScreenRequest() : SetScreenRequest(nullptr) {}
  ~SetScreenRequest() override;
  explicit PROTOBUF_CONSTEXPR SetScreenRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetScreenRequest(const SetScreenRequest& from);
  SetScreenRequest(SetScreenRequest&& from) noexcept
    : SetScreenRequest() {
    *this = ::std::move(from);
  }

  inline SetScreenRequest& operator=(const SetScreenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetScreenRequest& operator=(SetScreenRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetScreenRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetScreenRequest* internal_default_instance() {
    return reinterpret_cast<const SetScreenRequest*>(
               &_SetScreenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SetScreenRequest& a, SetScreenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetScreenRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetScreenRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetScreenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetScreenRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetScreenRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetScreenRequest& from) {
    SetScreenRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetScreenRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.SetScreenRequest";
  }
  protected:
  explicit SetScreenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.SetScreenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::bosdyn::api::RequestHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
};
// -------------------------------------------------------------------

class SetScreenResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.SetScreenResponse) */ {
 public:
  inline SetScreenResponse() : SetScreenResponse(nullptr) {}
  ~SetScreenResponse() override;
  explicit PROTOBUF_CONSTEXPR SetScreenResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetScreenResponse(const SetScreenResponse& from);
  SetScreenResponse(SetScreenResponse&& from) noexcept
    : SetScreenResponse() {
    *this = ::std::move(from);
  }

  inline SetScreenResponse& operator=(const SetScreenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetScreenResponse& operator=(SetScreenResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetScreenResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetScreenResponse* internal_default_instance() {
    return reinterpret_cast<const SetScreenResponse*>(
               &_SetScreenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SetScreenResponse& a, SetScreenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetScreenResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetScreenResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetScreenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetScreenResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetScreenResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetScreenResponse& from) {
    SetScreenResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetScreenResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.SetScreenResponse";
  }
  protected:
  explicit SetScreenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.SetScreenResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::bosdyn::api::ResponseHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
};
// -------------------------------------------------------------------

class IrColorMap_ScalingPair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.IrColorMap.ScalingPair) */ {
 public:
  inline IrColorMap_ScalingPair() : IrColorMap_ScalingPair(nullptr) {}
  ~IrColorMap_ScalingPair() override;
  explicit PROTOBUF_CONSTEXPR IrColorMap_ScalingPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IrColorMap_ScalingPair(const IrColorMap_ScalingPair& from);
  IrColorMap_ScalingPair(IrColorMap_ScalingPair&& from) noexcept
    : IrColorMap_ScalingPair() {
    *this = ::std::move(from);
  }

  inline IrColorMap_ScalingPair& operator=(const IrColorMap_ScalingPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline IrColorMap_ScalingPair& operator=(IrColorMap_ScalingPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IrColorMap_ScalingPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const IrColorMap_ScalingPair* internal_default_instance() {
    return reinterpret_cast<const IrColorMap_ScalingPair*>(
               &_IrColorMap_ScalingPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(IrColorMap_ScalingPair& a, IrColorMap_ScalingPair& b) {
    a.Swap(&b);
  }
  inline void Swap(IrColorMap_ScalingPair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IrColorMap_ScalingPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IrColorMap_ScalingPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IrColorMap_ScalingPair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IrColorMap_ScalingPair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IrColorMap_ScalingPair& from) {
    IrColorMap_ScalingPair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IrColorMap_ScalingPair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.IrColorMap.ScalingPair";
  }
  protected:
  explicit IrColorMap_ScalingPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinFieldNumber = 1,
    kMaxFieldNumber = 2,
  };
  // double min = 1;
  void clear_min();
  double min() const;
  void set_min(double value);
  private:
  double _internal_min() const;
  void _internal_set_min(double value);
  public:

  // double max = 2;
  void clear_max();
  double max() const;
  void set_max(double value);
  private:
  double _internal_max() const;
  void _internal_set_max(double value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.IrColorMap.ScalingPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double min_;
    double max_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
};
// -------------------------------------------------------------------

class IrColorMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.IrColorMap) */ {
 public:
  inline IrColorMap() : IrColorMap(nullptr) {}
  ~IrColorMap() override;
  explicit PROTOBUF_CONSTEXPR IrColorMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IrColorMap(const IrColorMap& from);
  IrColorMap(IrColorMap&& from) noexcept
    : IrColorMap() {
    *this = ::std::move(from);
  }

  inline IrColorMap& operator=(const IrColorMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline IrColorMap& operator=(IrColorMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IrColorMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const IrColorMap* internal_default_instance() {
    return reinterpret_cast<const IrColorMap*>(
               &_IrColorMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(IrColorMap& a, IrColorMap& b) {
    a.Swap(&b);
  }
  inline void Swap(IrColorMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IrColorMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IrColorMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IrColorMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IrColorMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IrColorMap& from) {
    IrColorMap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IrColorMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.IrColorMap";
  }
  protected:
  explicit IrColorMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef IrColorMap_ScalingPair ScalingPair;

  typedef IrColorMap_ColorMap ColorMap;
  static constexpr ColorMap COLORMAP_UNKNOWN =
    IrColorMap_ColorMap_COLORMAP_UNKNOWN;
  static constexpr ColorMap COLORMAP_GREYSCALE =
    IrColorMap_ColorMap_COLORMAP_GREYSCALE;
  static constexpr ColorMap COLORMAP_JET =
    IrColorMap_ColorMap_COLORMAP_JET;
  static constexpr ColorMap COLORMAP_INFERNO =
    IrColorMap_ColorMap_COLORMAP_INFERNO;
  static constexpr ColorMap COLORMAP_TURBO =
    IrColorMap_ColorMap_COLORMAP_TURBO;
  static inline bool ColorMap_IsValid(int value) {
    return IrColorMap_ColorMap_IsValid(value);
  }
  static constexpr ColorMap ColorMap_MIN =
    IrColorMap_ColorMap_ColorMap_MIN;
  static constexpr ColorMap ColorMap_MAX =
    IrColorMap_ColorMap_ColorMap_MAX;
  static constexpr int ColorMap_ARRAYSIZE =
    IrColorMap_ColorMap_ColorMap_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ColorMap_descriptor() {
    return IrColorMap_ColorMap_descriptor();
  }
  template<typename T>
  static inline const std::string& ColorMap_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ColorMap>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ColorMap_Name.");
    return IrColorMap_ColorMap_Name(enum_t_value);
  }
  static inline bool ColorMap_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ColorMap* value) {
    return IrColorMap_ColorMap_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kScaleFieldNumber = 2,
    kAutoScaleFieldNumber = 3,
    kColormapFieldNumber = 1,
  };
  // .bosdyn.api.spot_cam.IrColorMap.ScalingPair scale = 2;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  const ::bosdyn::api::spot_cam::IrColorMap_ScalingPair& scale() const;
  PROTOBUF_NODISCARD ::bosdyn::api::spot_cam::IrColorMap_ScalingPair* release_scale();
  ::bosdyn::api::spot_cam::IrColorMap_ScalingPair* mutable_scale();
  void set_allocated_scale(::bosdyn::api::spot_cam::IrColorMap_ScalingPair* scale);
  private:
  const ::bosdyn::api::spot_cam::IrColorMap_ScalingPair& _internal_scale() const;
  ::bosdyn::api::spot_cam::IrColorMap_ScalingPair* _internal_mutable_scale();
  public:
  void unsafe_arena_set_allocated_scale(
      ::bosdyn::api::spot_cam::IrColorMap_ScalingPair* scale);
  ::bosdyn::api::spot_cam::IrColorMap_ScalingPair* unsafe_arena_release_scale();

  // .google.protobuf.BoolValue auto_scale = 3;
  bool has_auto_scale() const;
  private:
  bool _internal_has_auto_scale() const;
  public:
  void clear_auto_scale();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& auto_scale() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_auto_scale();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_auto_scale();
  void set_allocated_auto_scale(::PROTOBUF_NAMESPACE_ID::BoolValue* auto_scale);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_auto_scale() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_auto_scale();
  public:
  void unsafe_arena_set_allocated_auto_scale(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* auto_scale);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_auto_scale();

  // .bosdyn.api.spot_cam.IrColorMap.ColorMap colormap = 1;
  void clear_colormap();
  ::bosdyn::api::spot_cam::IrColorMap_ColorMap colormap() const;
  void set_colormap(::bosdyn::api::spot_cam::IrColorMap_ColorMap value);
  private:
  ::bosdyn::api::spot_cam::IrColorMap_ColorMap _internal_colormap() const;
  void _internal_set_colormap(::bosdyn::api::spot_cam::IrColorMap_ColorMap value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.IrColorMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::spot_cam::IrColorMap_ScalingPair* scale_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* auto_scale_;
    int colormap_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
};
// -------------------------------------------------------------------

class SetIrColormapRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.SetIrColormapRequest) */ {
 public:
  inline SetIrColormapRequest() : SetIrColormapRequest(nullptr) {}
  ~SetIrColormapRequest() override;
  explicit PROTOBUF_CONSTEXPR SetIrColormapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetIrColormapRequest(const SetIrColormapRequest& from);
  SetIrColormapRequest(SetIrColormapRequest&& from) noexcept
    : SetIrColormapRequest() {
    *this = ::std::move(from);
  }

  inline SetIrColormapRequest& operator=(const SetIrColormapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetIrColormapRequest& operator=(SetIrColormapRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetIrColormapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetIrColormapRequest* internal_default_instance() {
    return reinterpret_cast<const SetIrColormapRequest*>(
               &_SetIrColormapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SetIrColormapRequest& a, SetIrColormapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetIrColormapRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetIrColormapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetIrColormapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetIrColormapRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetIrColormapRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetIrColormapRequest& from) {
    SetIrColormapRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetIrColormapRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.SetIrColormapRequest";
  }
  protected:
  explicit SetIrColormapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kMapFieldNumber = 2,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // .bosdyn.api.spot_cam.IrColorMap map = 2;
  bool has_map() const;
  private:
  bool _internal_has_map() const;
  public:
  void clear_map();
  const ::bosdyn::api::spot_cam::IrColorMap& map() const;
  PROTOBUF_NODISCARD ::bosdyn::api::spot_cam::IrColorMap* release_map();
  ::bosdyn::api::spot_cam::IrColorMap* mutable_map();
  void set_allocated_map(::bosdyn::api::spot_cam::IrColorMap* map);
  private:
  const ::bosdyn::api::spot_cam::IrColorMap& _internal_map() const;
  ::bosdyn::api::spot_cam::IrColorMap* _internal_mutable_map();
  public:
  void unsafe_arena_set_allocated_map(
      ::bosdyn::api::spot_cam::IrColorMap* map);
  ::bosdyn::api::spot_cam::IrColorMap* unsafe_arena_release_map();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.SetIrColormapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::RequestHeader* header_;
    ::bosdyn::api::spot_cam::IrColorMap* map_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
};
// -------------------------------------------------------------------

class SetIrColormapResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.SetIrColormapResponse) */ {
 public:
  inline SetIrColormapResponse() : SetIrColormapResponse(nullptr) {}
  ~SetIrColormapResponse() override;
  explicit PROTOBUF_CONSTEXPR SetIrColormapResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetIrColormapResponse(const SetIrColormapResponse& from);
  SetIrColormapResponse(SetIrColormapResponse&& from) noexcept
    : SetIrColormapResponse() {
    *this = ::std::move(from);
  }

  inline SetIrColormapResponse& operator=(const SetIrColormapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetIrColormapResponse& operator=(SetIrColormapResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetIrColormapResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetIrColormapResponse* internal_default_instance() {
    return reinterpret_cast<const SetIrColormapResponse*>(
               &_SetIrColormapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SetIrColormapResponse& a, SetIrColormapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetIrColormapResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetIrColormapResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetIrColormapResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetIrColormapResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetIrColormapResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetIrColormapResponse& from) {
    SetIrColormapResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetIrColormapResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.SetIrColormapResponse";
  }
  protected:
  explicit SetIrColormapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.SetIrColormapResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::ResponseHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
};
// -------------------------------------------------------------------

class GetIrColormapRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetIrColormapRequest) */ {
 public:
  inline GetIrColormapRequest() : GetIrColormapRequest(nullptr) {}
  ~GetIrColormapRequest() override;
  explicit PROTOBUF_CONSTEXPR GetIrColormapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetIrColormapRequest(const GetIrColormapRequest& from);
  GetIrColormapRequest(GetIrColormapRequest&& from) noexcept
    : GetIrColormapRequest() {
    *this = ::std::move(from);
  }

  inline GetIrColormapRequest& operator=(const GetIrColormapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIrColormapRequest& operator=(GetIrColormapRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetIrColormapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetIrColormapRequest* internal_default_instance() {
    return reinterpret_cast<const GetIrColormapRequest*>(
               &_GetIrColormapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetIrColormapRequest& a, GetIrColormapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIrColormapRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIrColormapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetIrColormapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetIrColormapRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetIrColormapRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetIrColormapRequest& from) {
    GetIrColormapRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIrColormapRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetIrColormapRequest";
  }
  protected:
  explicit GetIrColormapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetIrColormapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::RequestHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
};
// -------------------------------------------------------------------

class GetIrColormapResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetIrColormapResponse) */ {
 public:
  inline GetIrColormapResponse() : GetIrColormapResponse(nullptr) {}
  ~GetIrColormapResponse() override;
  explicit PROTOBUF_CONSTEXPR GetIrColormapResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetIrColormapResponse(const GetIrColormapResponse& from);
  GetIrColormapResponse(GetIrColormapResponse&& from) noexcept
    : GetIrColormapResponse() {
    *this = ::std::move(from);
  }

  inline GetIrColormapResponse& operator=(const GetIrColormapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIrColormapResponse& operator=(GetIrColormapResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetIrColormapResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetIrColormapResponse* internal_default_instance() {
    return reinterpret_cast<const GetIrColormapResponse*>(
               &_GetIrColormapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetIrColormapResponse& a, GetIrColormapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIrColormapResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIrColormapResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetIrColormapResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetIrColormapResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetIrColormapResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetIrColormapResponse& from) {
    GetIrColormapResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIrColormapResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetIrColormapResponse";
  }
  protected:
  explicit GetIrColormapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kMapFieldNumber = 2,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.spot_cam.IrColorMap map = 2;
  bool has_map() const;
  private:
  bool _internal_has_map() const;
  public:
  void clear_map();
  const ::bosdyn::api::spot_cam::IrColorMap& map() const;
  PROTOBUF_NODISCARD ::bosdyn::api::spot_cam::IrColorMap* release_map();
  ::bosdyn::api::spot_cam::IrColorMap* mutable_map();
  void set_allocated_map(::bosdyn::api::spot_cam::IrColorMap* map);
  private:
  const ::bosdyn::api::spot_cam::IrColorMap& _internal_map() const;
  ::bosdyn::api::spot_cam::IrColorMap* _internal_mutable_map();
  public:
  void unsafe_arena_set_allocated_map(
      ::bosdyn::api::spot_cam::IrColorMap* map);
  ::bosdyn::api::spot_cam::IrColorMap* unsafe_arena_release_map();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetIrColormapResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::ResponseHeader* header_;
    ::bosdyn::api::spot_cam::IrColorMap* map_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
};
// -------------------------------------------------------------------

class IrMeterOverlay_NormalizedCoordinates final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.IrMeterOverlay.NormalizedCoordinates) */ {
 public:
  inline IrMeterOverlay_NormalizedCoordinates() : IrMeterOverlay_NormalizedCoordinates(nullptr) {}
  ~IrMeterOverlay_NormalizedCoordinates() override;
  explicit PROTOBUF_CONSTEXPR IrMeterOverlay_NormalizedCoordinates(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IrMeterOverlay_NormalizedCoordinates(const IrMeterOverlay_NormalizedCoordinates& from);
  IrMeterOverlay_NormalizedCoordinates(IrMeterOverlay_NormalizedCoordinates&& from) noexcept
    : IrMeterOverlay_NormalizedCoordinates() {
    *this = ::std::move(from);
  }

  inline IrMeterOverlay_NormalizedCoordinates& operator=(const IrMeterOverlay_NormalizedCoordinates& from) {
    CopyFrom(from);
    return *this;
  }
  inline IrMeterOverlay_NormalizedCoordinates& operator=(IrMeterOverlay_NormalizedCoordinates&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IrMeterOverlay_NormalizedCoordinates& default_instance() {
    return *internal_default_instance();
  }
  static inline const IrMeterOverlay_NormalizedCoordinates* internal_default_instance() {
    return reinterpret_cast<const IrMeterOverlay_NormalizedCoordinates*>(
               &_IrMeterOverlay_NormalizedCoordinates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(IrMeterOverlay_NormalizedCoordinates& a, IrMeterOverlay_NormalizedCoordinates& b) {
    a.Swap(&b);
  }
  inline void Swap(IrMeterOverlay_NormalizedCoordinates* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IrMeterOverlay_NormalizedCoordinates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IrMeterOverlay_NormalizedCoordinates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IrMeterOverlay_NormalizedCoordinates>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IrMeterOverlay_NormalizedCoordinates& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IrMeterOverlay_NormalizedCoordinates& from) {
    IrMeterOverlay_NormalizedCoordinates::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IrMeterOverlay_NormalizedCoordinates* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.IrMeterOverlay.NormalizedCoordinates";
  }
  protected:
  explicit IrMeterOverlay_NormalizedCoordinates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.IrMeterOverlay.NormalizedCoordinates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_;
    double y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
};
// -------------------------------------------------------------------

class IrMeterOverlay final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.IrMeterOverlay) */ {
 public:
  inline IrMeterOverlay() : IrMeterOverlay(nullptr) {}
  ~IrMeterOverlay() override;
  explicit PROTOBUF_CONSTEXPR IrMeterOverlay(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IrMeterOverlay(const IrMeterOverlay& from);
  IrMeterOverlay(IrMeterOverlay&& from) noexcept
    : IrMeterOverlay() {
    *this = ::std::move(from);
  }

  inline IrMeterOverlay& operator=(const IrMeterOverlay& from) {
    CopyFrom(from);
    return *this;
  }
  inline IrMeterOverlay& operator=(IrMeterOverlay&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IrMeterOverlay& default_instance() {
    return *internal_default_instance();
  }
  static inline const IrMeterOverlay* internal_default_instance() {
    return reinterpret_cast<const IrMeterOverlay*>(
               &_IrMeterOverlay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(IrMeterOverlay& a, IrMeterOverlay& b) {
    a.Swap(&b);
  }
  inline void Swap(IrMeterOverlay* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IrMeterOverlay* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IrMeterOverlay* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IrMeterOverlay>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IrMeterOverlay& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IrMeterOverlay& from) {
    IrMeterOverlay::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IrMeterOverlay* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.IrMeterOverlay";
  }
  protected:
  explicit IrMeterOverlay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef IrMeterOverlay_NormalizedCoordinates NormalizedCoordinates;

  // accessors -------------------------------------------------------

  enum : int {
    kCoordsFieldNumber = 2,
    kEnableFieldNumber = 1,
  };
  // .bosdyn.api.spot_cam.IrMeterOverlay.NormalizedCoordinates coords = 2;
  bool has_coords() const;
  private:
  bool _internal_has_coords() const;
  public:
  void clear_coords();
  const ::bosdyn::api::spot_cam::IrMeterOverlay_NormalizedCoordinates& coords() const;
  PROTOBUF_NODISCARD ::bosdyn::api::spot_cam::IrMeterOverlay_NormalizedCoordinates* release_coords();
  ::bosdyn::api::spot_cam::IrMeterOverlay_NormalizedCoordinates* mutable_coords();
  void set_allocated_coords(::bosdyn::api::spot_cam::IrMeterOverlay_NormalizedCoordinates* coords);
  private:
  const ::bosdyn::api::spot_cam::IrMeterOverlay_NormalizedCoordinates& _internal_coords() const;
  ::bosdyn::api::spot_cam::IrMeterOverlay_NormalizedCoordinates* _internal_mutable_coords();
  public:
  void unsafe_arena_set_allocated_coords(
      ::bosdyn::api::spot_cam::IrMeterOverlay_NormalizedCoordinates* coords);
  ::bosdyn::api::spot_cam::IrMeterOverlay_NormalizedCoordinates* unsafe_arena_release_coords();

  // bool enable = 1;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.IrMeterOverlay)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::spot_cam::IrMeterOverlay_NormalizedCoordinates* coords_;
    bool enable_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
};
// -------------------------------------------------------------------

class SetIrMeterOverlayRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.SetIrMeterOverlayRequest) */ {
 public:
  inline SetIrMeterOverlayRequest() : SetIrMeterOverlayRequest(nullptr) {}
  ~SetIrMeterOverlayRequest() override;
  explicit PROTOBUF_CONSTEXPR SetIrMeterOverlayRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetIrMeterOverlayRequest(const SetIrMeterOverlayRequest& from);
  SetIrMeterOverlayRequest(SetIrMeterOverlayRequest&& from) noexcept
    : SetIrMeterOverlayRequest() {
    *this = ::std::move(from);
  }

  inline SetIrMeterOverlayRequest& operator=(const SetIrMeterOverlayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetIrMeterOverlayRequest& operator=(SetIrMeterOverlayRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetIrMeterOverlayRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetIrMeterOverlayRequest* internal_default_instance() {
    return reinterpret_cast<const SetIrMeterOverlayRequest*>(
               &_SetIrMeterOverlayRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SetIrMeterOverlayRequest& a, SetIrMeterOverlayRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetIrMeterOverlayRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetIrMeterOverlayRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetIrMeterOverlayRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetIrMeterOverlayRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetIrMeterOverlayRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetIrMeterOverlayRequest& from) {
    SetIrMeterOverlayRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetIrMeterOverlayRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.SetIrMeterOverlayRequest";
  }
  protected:
  explicit SetIrMeterOverlayRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kOverlayFieldNumber = 2,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // .bosdyn.api.spot_cam.IrMeterOverlay overlay = 2;
  bool has_overlay() const;
  private:
  bool _internal_has_overlay() const;
  public:
  void clear_overlay();
  const ::bosdyn::api::spot_cam::IrMeterOverlay& overlay() const;
  PROTOBUF_NODISCARD ::bosdyn::api::spot_cam::IrMeterOverlay* release_overlay();
  ::bosdyn::api::spot_cam::IrMeterOverlay* mutable_overlay();
  void set_allocated_overlay(::bosdyn::api::spot_cam::IrMeterOverlay* overlay);
  private:
  const ::bosdyn::api::spot_cam::IrMeterOverlay& _internal_overlay() const;
  ::bosdyn::api::spot_cam::IrMeterOverlay* _internal_mutable_overlay();
  public:
  void unsafe_arena_set_allocated_overlay(
      ::bosdyn::api::spot_cam::IrMeterOverlay* overlay);
  ::bosdyn::api::spot_cam::IrMeterOverlay* unsafe_arena_release_overlay();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.SetIrMeterOverlayRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::RequestHeader* header_;
    ::bosdyn::api::spot_cam::IrMeterOverlay* overlay_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
};
// -------------------------------------------------------------------

class SetIrMeterOverlayResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.SetIrMeterOverlayResponse) */ {
 public:
  inline SetIrMeterOverlayResponse() : SetIrMeterOverlayResponse(nullptr) {}
  ~SetIrMeterOverlayResponse() override;
  explicit PROTOBUF_CONSTEXPR SetIrMeterOverlayResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetIrMeterOverlayResponse(const SetIrMeterOverlayResponse& from);
  SetIrMeterOverlayResponse(SetIrMeterOverlayResponse&& from) noexcept
    : SetIrMeterOverlayResponse() {
    *this = ::std::move(from);
  }

  inline SetIrMeterOverlayResponse& operator=(const SetIrMeterOverlayResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetIrMeterOverlayResponse& operator=(SetIrMeterOverlayResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetIrMeterOverlayResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetIrMeterOverlayResponse* internal_default_instance() {
    return reinterpret_cast<const SetIrMeterOverlayResponse*>(
               &_SetIrMeterOverlayResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SetIrMeterOverlayResponse& a, SetIrMeterOverlayResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetIrMeterOverlayResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetIrMeterOverlayResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetIrMeterOverlayResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetIrMeterOverlayResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetIrMeterOverlayResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetIrMeterOverlayResponse& from) {
    SetIrMeterOverlayResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetIrMeterOverlayResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.SetIrMeterOverlayResponse";
  }
  protected:
  explicit SetIrMeterOverlayResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.SetIrMeterOverlayResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::ResponseHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ScreenDescription

// string name = 1;
inline void ScreenDescription::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ScreenDescription::name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.ScreenDescription.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ScreenDescription::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.ScreenDescription.name)
}
inline std::string* ScreenDescription::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.ScreenDescription.name)
  return _s;
}
inline const std::string& ScreenDescription::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ScreenDescription::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ScreenDescription::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ScreenDescription::release_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.ScreenDescription.name)
  return _impl_.name_.Release();
}
inline void ScreenDescription::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.ScreenDescription.name)
}

// -------------------------------------------------------------------

// GetScreenRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool GetScreenRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool GetScreenRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& GetScreenRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RequestHeader&>(
      ::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& GetScreenRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetScreenRequest.header)
  return _internal_header();
}
inline void GetScreenRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetScreenRequest.header)
}
inline ::bosdyn::api::RequestHeader* GetScreenRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetScreenRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetScreenRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetScreenRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::RequestHeader* GetScreenRequest::mutable_header() {
  ::bosdyn::api::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetScreenRequest.header)
  return _msg;
}
inline void GetScreenRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetScreenRequest.header)
}

// -------------------------------------------------------------------

// GetScreenResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool GetScreenResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool GetScreenResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& GetScreenResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ResponseHeader&>(
      ::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& GetScreenResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetScreenResponse.header)
  return _internal_header();
}
inline void GetScreenResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetScreenResponse.header)
}
inline ::bosdyn::api::ResponseHeader* GetScreenResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetScreenResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetScreenResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetScreenResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::ResponseHeader* GetScreenResponse::mutable_header() {
  ::bosdyn::api::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetScreenResponse.header)
  return _msg;
}
inline void GetScreenResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetScreenResponse.header)
}

// string name = 2;
inline void GetScreenResponse::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetScreenResponse::name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetScreenResponse.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetScreenResponse::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.GetScreenResponse.name)
}
inline std::string* GetScreenResponse::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetScreenResponse.name)
  return _s;
}
inline const std::string& GetScreenResponse::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetScreenResponse::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetScreenResponse::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetScreenResponse::release_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetScreenResponse.name)
  return _impl_.name_.Release();
}
inline void GetScreenResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetScreenResponse.name)
}

// -------------------------------------------------------------------

// GetVisibleCamerasRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool GetVisibleCamerasRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool GetVisibleCamerasRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& GetVisibleCamerasRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RequestHeader&>(
      ::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& GetVisibleCamerasRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetVisibleCamerasRequest.header)
  return _internal_header();
}
inline void GetVisibleCamerasRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetVisibleCamerasRequest.header)
}
inline ::bosdyn::api::RequestHeader* GetVisibleCamerasRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetVisibleCamerasRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetVisibleCamerasRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetVisibleCamerasRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::RequestHeader* GetVisibleCamerasRequest::mutable_header() {
  ::bosdyn::api::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetVisibleCamerasRequest.header)
  return _msg;
}
inline void GetVisibleCamerasRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetVisibleCamerasRequest.header)
}

// -------------------------------------------------------------------

// GetVisibleCamerasResponse_Stream_Window

// int32 xoffset = 1;
inline void GetVisibleCamerasResponse_Stream_Window::clear_xoffset() {
  _impl_.xoffset_ = 0;
}
inline int32_t GetVisibleCamerasResponse_Stream_Window::_internal_xoffset() const {
  return _impl_.xoffset_;
}
inline int32_t GetVisibleCamerasResponse_Stream_Window::xoffset() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window.xoffset)
  return _internal_xoffset();
}
inline void GetVisibleCamerasResponse_Stream_Window::_internal_set_xoffset(int32_t value) {
  
  _impl_.xoffset_ = value;
}
inline void GetVisibleCamerasResponse_Stream_Window::set_xoffset(int32_t value) {
  _internal_set_xoffset(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window.xoffset)
}

// int32 yoffset = 2;
inline void GetVisibleCamerasResponse_Stream_Window::clear_yoffset() {
  _impl_.yoffset_ = 0;
}
inline int32_t GetVisibleCamerasResponse_Stream_Window::_internal_yoffset() const {
  return _impl_.yoffset_;
}
inline int32_t GetVisibleCamerasResponse_Stream_Window::yoffset() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window.yoffset)
  return _internal_yoffset();
}
inline void GetVisibleCamerasResponse_Stream_Window::_internal_set_yoffset(int32_t value) {
  
  _impl_.yoffset_ = value;
}
inline void GetVisibleCamerasResponse_Stream_Window::set_yoffset(int32_t value) {
  _internal_set_yoffset(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window.yoffset)
}

// int32 width = 3;
inline void GetVisibleCamerasResponse_Stream_Window::clear_width() {
  _impl_.width_ = 0;
}
inline int32_t GetVisibleCamerasResponse_Stream_Window::_internal_width() const {
  return _impl_.width_;
}
inline int32_t GetVisibleCamerasResponse_Stream_Window::width() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window.width)
  return _internal_width();
}
inline void GetVisibleCamerasResponse_Stream_Window::_internal_set_width(int32_t value) {
  
  _impl_.width_ = value;
}
inline void GetVisibleCamerasResponse_Stream_Window::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window.width)
}

// int32 height = 4;
inline void GetVisibleCamerasResponse_Stream_Window::clear_height() {
  _impl_.height_ = 0;
}
inline int32_t GetVisibleCamerasResponse_Stream_Window::_internal_height() const {
  return _impl_.height_;
}
inline int32_t GetVisibleCamerasResponse_Stream_Window::height() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window.height)
  return _internal_height();
}
inline void GetVisibleCamerasResponse_Stream_Window::_internal_set_height(int32_t value) {
  
  _impl_.height_ = value;
}
inline void GetVisibleCamerasResponse_Stream_Window::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window.height)
}

// -------------------------------------------------------------------

// GetVisibleCamerasResponse_Stream

// .bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window window = 1;
inline bool GetVisibleCamerasResponse_Stream::_internal_has_window() const {
  return this != internal_default_instance() && _impl_.window_ != nullptr;
}
inline bool GetVisibleCamerasResponse_Stream::has_window() const {
  return _internal_has_window();
}
inline void GetVisibleCamerasResponse_Stream::clear_window() {
  if (GetArenaForAllocation() == nullptr && _impl_.window_ != nullptr) {
    delete _impl_.window_;
  }
  _impl_.window_ = nullptr;
}
inline const ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window& GetVisibleCamerasResponse_Stream::_internal_window() const {
  const ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* p = _impl_.window_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window&>(
      ::bosdyn::api::spot_cam::_GetVisibleCamerasResponse_Stream_Window_default_instance_);
}
inline const ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window& GetVisibleCamerasResponse_Stream::window() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.window)
  return _internal_window();
}
inline void GetVisibleCamerasResponse_Stream::unsafe_arena_set_allocated_window(
    ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* window) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.window_);
  }
  _impl_.window_ = window;
  if (window) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.window)
}
inline ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* GetVisibleCamerasResponse_Stream::release_window() {
  
  ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* temp = _impl_.window_;
  _impl_.window_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* GetVisibleCamerasResponse_Stream::unsafe_arena_release_window() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.window)
  
  ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* temp = _impl_.window_;
  _impl_.window_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* GetVisibleCamerasResponse_Stream::_internal_mutable_window() {
  
  if (_impl_.window_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window>(GetArenaForAllocation());
    _impl_.window_ = p;
  }
  return _impl_.window_;
}
inline ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* GetVisibleCamerasResponse_Stream::mutable_window() {
  ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* _msg = _internal_mutable_window();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.window)
  return _msg;
}
inline void GetVisibleCamerasResponse_Stream::set_allocated_window(::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.window_;
  }
  if (window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(window);
    if (message_arena != submessage_arena) {
      window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.window_ = window;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.window)
}

// .bosdyn.api.spot_cam.Camera camera = 2;
inline bool GetVisibleCamerasResponse_Stream::_internal_has_camera() const {
  return this != internal_default_instance() && _impl_.camera_ != nullptr;
}
inline bool GetVisibleCamerasResponse_Stream::has_camera() const {
  return _internal_has_camera();
}
inline const ::bosdyn::api::spot_cam::Camera& GetVisibleCamerasResponse_Stream::_internal_camera() const {
  const ::bosdyn::api::spot_cam::Camera* p = _impl_.camera_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::spot_cam::Camera&>(
      ::bosdyn::api::spot_cam::_Camera_default_instance_);
}
inline const ::bosdyn::api::spot_cam::Camera& GetVisibleCamerasResponse_Stream::camera() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.camera)
  return _internal_camera();
}
inline void GetVisibleCamerasResponse_Stream::unsafe_arena_set_allocated_camera(
    ::bosdyn::api::spot_cam::Camera* camera) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_);
  }
  _impl_.camera_ = camera;
  if (camera) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.camera)
}
inline ::bosdyn::api::spot_cam::Camera* GetVisibleCamerasResponse_Stream::release_camera() {
  
  ::bosdyn::api::spot_cam::Camera* temp = _impl_.camera_;
  _impl_.camera_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::spot_cam::Camera* GetVisibleCamerasResponse_Stream::unsafe_arena_release_camera() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.camera)
  
  ::bosdyn::api::spot_cam::Camera* temp = _impl_.camera_;
  _impl_.camera_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot_cam::Camera* GetVisibleCamerasResponse_Stream::_internal_mutable_camera() {
  
  if (_impl_.camera_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot_cam::Camera>(GetArenaForAllocation());
    _impl_.camera_ = p;
  }
  return _impl_.camera_;
}
inline ::bosdyn::api::spot_cam::Camera* GetVisibleCamerasResponse_Stream::mutable_camera() {
  ::bosdyn::api::spot_cam::Camera* _msg = _internal_mutable_camera();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.camera)
  return _msg;
}
inline void GetVisibleCamerasResponse_Stream::set_allocated_camera(::bosdyn::api::spot_cam::Camera* camera) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_);
  }
  if (camera) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera));
    if (message_arena != submessage_arena) {
      camera = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camera_ = camera;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.camera)
}

// -------------------------------------------------------------------

// GetVisibleCamerasResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool GetVisibleCamerasResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool GetVisibleCamerasResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& GetVisibleCamerasResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ResponseHeader&>(
      ::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& GetVisibleCamerasResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetVisibleCamerasResponse.header)
  return _internal_header();
}
inline void GetVisibleCamerasResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetVisibleCamerasResponse.header)
}
inline ::bosdyn::api::ResponseHeader* GetVisibleCamerasResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetVisibleCamerasResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetVisibleCamerasResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetVisibleCamerasResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::ResponseHeader* GetVisibleCamerasResponse::mutable_header() {
  ::bosdyn::api::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetVisibleCamerasResponse.header)
  return _msg;
}
inline void GetVisibleCamerasResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetVisibleCamerasResponse.header)
}

// repeated .bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream streams = 2;
inline int GetVisibleCamerasResponse::_internal_streams_size() const {
  return _impl_.streams_.size();
}
inline int GetVisibleCamerasResponse::streams_size() const {
  return _internal_streams_size();
}
inline void GetVisibleCamerasResponse::clear_streams() {
  _impl_.streams_.Clear();
}
inline ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream* GetVisibleCamerasResponse::mutable_streams(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetVisibleCamerasResponse.streams)
  return _impl_.streams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream >*
GetVisibleCamerasResponse::mutable_streams() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.spot_cam.GetVisibleCamerasResponse.streams)
  return &_impl_.streams_;
}
inline const ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream& GetVisibleCamerasResponse::_internal_streams(int index) const {
  return _impl_.streams_.Get(index);
}
inline const ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream& GetVisibleCamerasResponse::streams(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetVisibleCamerasResponse.streams)
  return _internal_streams(index);
}
inline ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream* GetVisibleCamerasResponse::_internal_add_streams() {
  return _impl_.streams_.Add();
}
inline ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream* GetVisibleCamerasResponse::add_streams() {
  ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream* _add = _internal_add_streams();
  // @@protoc_insertion_point(field_add:bosdyn.api.spot_cam.GetVisibleCamerasResponse.streams)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream >&
GetVisibleCamerasResponse::streams() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.spot_cam.GetVisibleCamerasResponse.streams)
  return _impl_.streams_;
}

// -------------------------------------------------------------------

// ListScreensRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool ListScreensRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool ListScreensRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& ListScreensRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RequestHeader&>(
      ::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& ListScreensRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.ListScreensRequest.header)
  return _internal_header();
}
inline void ListScreensRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.ListScreensRequest.header)
}
inline ::bosdyn::api::RequestHeader* ListScreensRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RequestHeader* ListScreensRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.ListScreensRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* ListScreensRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::RequestHeader* ListScreensRequest::mutable_header() {
  ::bosdyn::api::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.ListScreensRequest.header)
  return _msg;
}
inline void ListScreensRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.ListScreensRequest.header)
}

// -------------------------------------------------------------------

// ListScreensResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool ListScreensResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool ListScreensResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& ListScreensResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ResponseHeader&>(
      ::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& ListScreensResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.ListScreensResponse.header)
  return _internal_header();
}
inline void ListScreensResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.ListScreensResponse.header)
}
inline ::bosdyn::api::ResponseHeader* ListScreensResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ResponseHeader* ListScreensResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.ListScreensResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* ListScreensResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::ResponseHeader* ListScreensResponse::mutable_header() {
  ::bosdyn::api::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.ListScreensResponse.header)
  return _msg;
}
inline void ListScreensResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.ListScreensResponse.header)
}

// repeated .bosdyn.api.spot_cam.ScreenDescription screens = 2;
inline int ListScreensResponse::_internal_screens_size() const {
  return _impl_.screens_.size();
}
inline int ListScreensResponse::screens_size() const {
  return _internal_screens_size();
}
inline void ListScreensResponse::clear_screens() {
  _impl_.screens_.Clear();
}
inline ::bosdyn::api::spot_cam::ScreenDescription* ListScreensResponse::mutable_screens(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.ListScreensResponse.screens)
  return _impl_.screens_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::ScreenDescription >*
ListScreensResponse::mutable_screens() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.spot_cam.ListScreensResponse.screens)
  return &_impl_.screens_;
}
inline const ::bosdyn::api::spot_cam::ScreenDescription& ListScreensResponse::_internal_screens(int index) const {
  return _impl_.screens_.Get(index);
}
inline const ::bosdyn::api::spot_cam::ScreenDescription& ListScreensResponse::screens(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.ListScreensResponse.screens)
  return _internal_screens(index);
}
inline ::bosdyn::api::spot_cam::ScreenDescription* ListScreensResponse::_internal_add_screens() {
  return _impl_.screens_.Add();
}
inline ::bosdyn::api::spot_cam::ScreenDescription* ListScreensResponse::add_screens() {
  ::bosdyn::api::spot_cam::ScreenDescription* _add = _internal_add_screens();
  // @@protoc_insertion_point(field_add:bosdyn.api.spot_cam.ListScreensResponse.screens)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::ScreenDescription >&
ListScreensResponse::screens() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.spot_cam.ListScreensResponse.screens)
  return _impl_.screens_;
}

// -------------------------------------------------------------------

// SetScreenRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool SetScreenRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool SetScreenRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& SetScreenRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RequestHeader&>(
      ::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& SetScreenRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.SetScreenRequest.header)
  return _internal_header();
}
inline void SetScreenRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.SetScreenRequest.header)
}
inline ::bosdyn::api::RequestHeader* SetScreenRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RequestHeader* SetScreenRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.SetScreenRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* SetScreenRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::RequestHeader* SetScreenRequest::mutable_header() {
  ::bosdyn::api::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.SetScreenRequest.header)
  return _msg;
}
inline void SetScreenRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.SetScreenRequest.header)
}

// string name = 2;
inline void SetScreenRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SetScreenRequest::name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.SetScreenRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetScreenRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.SetScreenRequest.name)
}
inline std::string* SetScreenRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.SetScreenRequest.name)
  return _s;
}
inline const std::string& SetScreenRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SetScreenRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SetScreenRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SetScreenRequest::release_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.SetScreenRequest.name)
  return _impl_.name_.Release();
}
inline void SetScreenRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.SetScreenRequest.name)
}

// -------------------------------------------------------------------

// SetScreenResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool SetScreenResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool SetScreenResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& SetScreenResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ResponseHeader&>(
      ::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& SetScreenResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.SetScreenResponse.header)
  return _internal_header();
}
inline void SetScreenResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.SetScreenResponse.header)
}
inline ::bosdyn::api::ResponseHeader* SetScreenResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ResponseHeader* SetScreenResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.SetScreenResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* SetScreenResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::ResponseHeader* SetScreenResponse::mutable_header() {
  ::bosdyn::api::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.SetScreenResponse.header)
  return _msg;
}
inline void SetScreenResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.SetScreenResponse.header)
}

// string name = 2;
inline void SetScreenResponse::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SetScreenResponse::name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.SetScreenResponse.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetScreenResponse::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.SetScreenResponse.name)
}
inline std::string* SetScreenResponse::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.SetScreenResponse.name)
  return _s;
}
inline const std::string& SetScreenResponse::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SetScreenResponse::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SetScreenResponse::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SetScreenResponse::release_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.SetScreenResponse.name)
  return _impl_.name_.Release();
}
inline void SetScreenResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.SetScreenResponse.name)
}

// -------------------------------------------------------------------

// IrColorMap_ScalingPair

// double min = 1;
inline void IrColorMap_ScalingPair::clear_min() {
  _impl_.min_ = 0;
}
inline double IrColorMap_ScalingPair::_internal_min() const {
  return _impl_.min_;
}
inline double IrColorMap_ScalingPair::min() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.IrColorMap.ScalingPair.min)
  return _internal_min();
}
inline void IrColorMap_ScalingPair::_internal_set_min(double value) {
  
  _impl_.min_ = value;
}
inline void IrColorMap_ScalingPair::set_min(double value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.IrColorMap.ScalingPair.min)
}

// double max = 2;
inline void IrColorMap_ScalingPair::clear_max() {
  _impl_.max_ = 0;
}
inline double IrColorMap_ScalingPair::_internal_max() const {
  return _impl_.max_;
}
inline double IrColorMap_ScalingPair::max() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.IrColorMap.ScalingPair.max)
  return _internal_max();
}
inline void IrColorMap_ScalingPair::_internal_set_max(double value) {
  
  _impl_.max_ = value;
}
inline void IrColorMap_ScalingPair::set_max(double value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.IrColorMap.ScalingPair.max)
}

// -------------------------------------------------------------------

// IrColorMap

// .bosdyn.api.spot_cam.IrColorMap.ColorMap colormap = 1;
inline void IrColorMap::clear_colormap() {
  _impl_.colormap_ = 0;
}
inline ::bosdyn::api::spot_cam::IrColorMap_ColorMap IrColorMap::_internal_colormap() const {
  return static_cast< ::bosdyn::api::spot_cam::IrColorMap_ColorMap >(_impl_.colormap_);
}
inline ::bosdyn::api::spot_cam::IrColorMap_ColorMap IrColorMap::colormap() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.IrColorMap.colormap)
  return _internal_colormap();
}
inline void IrColorMap::_internal_set_colormap(::bosdyn::api::spot_cam::IrColorMap_ColorMap value) {
  
  _impl_.colormap_ = value;
}
inline void IrColorMap::set_colormap(::bosdyn::api::spot_cam::IrColorMap_ColorMap value) {
  _internal_set_colormap(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.IrColorMap.colormap)
}

// .bosdyn.api.spot_cam.IrColorMap.ScalingPair scale = 2;
inline bool IrColorMap::_internal_has_scale() const {
  return this != internal_default_instance() && _impl_.scale_ != nullptr;
}
inline bool IrColorMap::has_scale() const {
  return _internal_has_scale();
}
inline void IrColorMap::clear_scale() {
  if (GetArenaForAllocation() == nullptr && _impl_.scale_ != nullptr) {
    delete _impl_.scale_;
  }
  _impl_.scale_ = nullptr;
}
inline const ::bosdyn::api::spot_cam::IrColorMap_ScalingPair& IrColorMap::_internal_scale() const {
  const ::bosdyn::api::spot_cam::IrColorMap_ScalingPair* p = _impl_.scale_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::spot_cam::IrColorMap_ScalingPair&>(
      ::bosdyn::api::spot_cam::_IrColorMap_ScalingPair_default_instance_);
}
inline const ::bosdyn::api::spot_cam::IrColorMap_ScalingPair& IrColorMap::scale() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.IrColorMap.scale)
  return _internal_scale();
}
inline void IrColorMap::unsafe_arena_set_allocated_scale(
    ::bosdyn::api::spot_cam::IrColorMap_ScalingPair* scale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scale_);
  }
  _impl_.scale_ = scale;
  if (scale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.IrColorMap.scale)
}
inline ::bosdyn::api::spot_cam::IrColorMap_ScalingPair* IrColorMap::release_scale() {
  
  ::bosdyn::api::spot_cam::IrColorMap_ScalingPair* temp = _impl_.scale_;
  _impl_.scale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::spot_cam::IrColorMap_ScalingPair* IrColorMap::unsafe_arena_release_scale() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.IrColorMap.scale)
  
  ::bosdyn::api::spot_cam::IrColorMap_ScalingPair* temp = _impl_.scale_;
  _impl_.scale_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot_cam::IrColorMap_ScalingPair* IrColorMap::_internal_mutable_scale() {
  
  if (_impl_.scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot_cam::IrColorMap_ScalingPair>(GetArenaForAllocation());
    _impl_.scale_ = p;
  }
  return _impl_.scale_;
}
inline ::bosdyn::api::spot_cam::IrColorMap_ScalingPair* IrColorMap::mutable_scale() {
  ::bosdyn::api::spot_cam::IrColorMap_ScalingPair* _msg = _internal_mutable_scale();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.IrColorMap.scale)
  return _msg;
}
inline void IrColorMap::set_allocated_scale(::bosdyn::api::spot_cam::IrColorMap_ScalingPair* scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.scale_;
  }
  if (scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scale);
    if (message_arena != submessage_arena) {
      scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.IrColorMap.scale)
}

// .google.protobuf.BoolValue auto_scale = 3;
inline bool IrColorMap::_internal_has_auto_scale() const {
  return this != internal_default_instance() && _impl_.auto_scale_ != nullptr;
}
inline bool IrColorMap::has_auto_scale() const {
  return _internal_has_auto_scale();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& IrColorMap::_internal_auto_scale() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.auto_scale_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& IrColorMap::auto_scale() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.IrColorMap.auto_scale)
  return _internal_auto_scale();
}
inline void IrColorMap::unsafe_arena_set_allocated_auto_scale(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* auto_scale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.auto_scale_);
  }
  _impl_.auto_scale_ = auto_scale;
  if (auto_scale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.IrColorMap.auto_scale)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* IrColorMap::release_auto_scale() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.auto_scale_;
  _impl_.auto_scale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* IrColorMap::unsafe_arena_release_auto_scale() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.IrColorMap.auto_scale)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.auto_scale_;
  _impl_.auto_scale_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* IrColorMap::_internal_mutable_auto_scale() {
  
  if (_impl_.auto_scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.auto_scale_ = p;
  }
  return _impl_.auto_scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* IrColorMap::mutable_auto_scale() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_auto_scale();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.IrColorMap.auto_scale)
  return _msg;
}
inline void IrColorMap::set_allocated_auto_scale(::PROTOBUF_NAMESPACE_ID::BoolValue* auto_scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.auto_scale_);
  }
  if (auto_scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auto_scale));
    if (message_arena != submessage_arena) {
      auto_scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auto_scale, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.auto_scale_ = auto_scale;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.IrColorMap.auto_scale)
}

// -------------------------------------------------------------------

// SetIrColormapRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool SetIrColormapRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool SetIrColormapRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& SetIrColormapRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RequestHeader&>(
      ::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& SetIrColormapRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.SetIrColormapRequest.header)
  return _internal_header();
}
inline void SetIrColormapRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.SetIrColormapRequest.header)
}
inline ::bosdyn::api::RequestHeader* SetIrColormapRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RequestHeader* SetIrColormapRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.SetIrColormapRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* SetIrColormapRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::RequestHeader* SetIrColormapRequest::mutable_header() {
  ::bosdyn::api::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.SetIrColormapRequest.header)
  return _msg;
}
inline void SetIrColormapRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.SetIrColormapRequest.header)
}

// .bosdyn.api.spot_cam.IrColorMap map = 2;
inline bool SetIrColormapRequest::_internal_has_map() const {
  return this != internal_default_instance() && _impl_.map_ != nullptr;
}
inline bool SetIrColormapRequest::has_map() const {
  return _internal_has_map();
}
inline void SetIrColormapRequest::clear_map() {
  if (GetArenaForAllocation() == nullptr && _impl_.map_ != nullptr) {
    delete _impl_.map_;
  }
  _impl_.map_ = nullptr;
}
inline const ::bosdyn::api::spot_cam::IrColorMap& SetIrColormapRequest::_internal_map() const {
  const ::bosdyn::api::spot_cam::IrColorMap* p = _impl_.map_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::spot_cam::IrColorMap&>(
      ::bosdyn::api::spot_cam::_IrColorMap_default_instance_);
}
inline const ::bosdyn::api::spot_cam::IrColorMap& SetIrColormapRequest::map() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.SetIrColormapRequest.map)
  return _internal_map();
}
inline void SetIrColormapRequest::unsafe_arena_set_allocated_map(
    ::bosdyn::api::spot_cam::IrColorMap* map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.map_);
  }
  _impl_.map_ = map;
  if (map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.SetIrColormapRequest.map)
}
inline ::bosdyn::api::spot_cam::IrColorMap* SetIrColormapRequest::release_map() {
  
  ::bosdyn::api::spot_cam::IrColorMap* temp = _impl_.map_;
  _impl_.map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::spot_cam::IrColorMap* SetIrColormapRequest::unsafe_arena_release_map() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.SetIrColormapRequest.map)
  
  ::bosdyn::api::spot_cam::IrColorMap* temp = _impl_.map_;
  _impl_.map_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot_cam::IrColorMap* SetIrColormapRequest::_internal_mutable_map() {
  
  if (_impl_.map_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot_cam::IrColorMap>(GetArenaForAllocation());
    _impl_.map_ = p;
  }
  return _impl_.map_;
}
inline ::bosdyn::api::spot_cam::IrColorMap* SetIrColormapRequest::mutable_map() {
  ::bosdyn::api::spot_cam::IrColorMap* _msg = _internal_mutable_map();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.SetIrColormapRequest.map)
  return _msg;
}
inline void SetIrColormapRequest::set_allocated_map(::bosdyn::api::spot_cam::IrColorMap* map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.map_;
  }
  if (map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(map);
    if (message_arena != submessage_arena) {
      map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.map_ = map;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.SetIrColormapRequest.map)
}

// -------------------------------------------------------------------

// SetIrColormapResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool SetIrColormapResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool SetIrColormapResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& SetIrColormapResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ResponseHeader&>(
      ::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& SetIrColormapResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.SetIrColormapResponse.header)
  return _internal_header();
}
inline void SetIrColormapResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.SetIrColormapResponse.header)
}
inline ::bosdyn::api::ResponseHeader* SetIrColormapResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ResponseHeader* SetIrColormapResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.SetIrColormapResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* SetIrColormapResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::ResponseHeader* SetIrColormapResponse::mutable_header() {
  ::bosdyn::api::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.SetIrColormapResponse.header)
  return _msg;
}
inline void SetIrColormapResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.SetIrColormapResponse.header)
}

// -------------------------------------------------------------------

// GetIrColormapRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool GetIrColormapRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool GetIrColormapRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& GetIrColormapRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RequestHeader&>(
      ::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& GetIrColormapRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetIrColormapRequest.header)
  return _internal_header();
}
inline void GetIrColormapRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetIrColormapRequest.header)
}
inline ::bosdyn::api::RequestHeader* GetIrColormapRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetIrColormapRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetIrColormapRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetIrColormapRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::RequestHeader* GetIrColormapRequest::mutable_header() {
  ::bosdyn::api::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetIrColormapRequest.header)
  return _msg;
}
inline void GetIrColormapRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetIrColormapRequest.header)
}

// -------------------------------------------------------------------

// GetIrColormapResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool GetIrColormapResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool GetIrColormapResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& GetIrColormapResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ResponseHeader&>(
      ::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& GetIrColormapResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetIrColormapResponse.header)
  return _internal_header();
}
inline void GetIrColormapResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetIrColormapResponse.header)
}
inline ::bosdyn::api::ResponseHeader* GetIrColormapResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetIrColormapResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetIrColormapResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetIrColormapResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::ResponseHeader* GetIrColormapResponse::mutable_header() {
  ::bosdyn::api::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetIrColormapResponse.header)
  return _msg;
}
inline void GetIrColormapResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetIrColormapResponse.header)
}

// .bosdyn.api.spot_cam.IrColorMap map = 2;
inline bool GetIrColormapResponse::_internal_has_map() const {
  return this != internal_default_instance() && _impl_.map_ != nullptr;
}
inline bool GetIrColormapResponse::has_map() const {
  return _internal_has_map();
}
inline void GetIrColormapResponse::clear_map() {
  if (GetArenaForAllocation() == nullptr && _impl_.map_ != nullptr) {
    delete _impl_.map_;
  }
  _impl_.map_ = nullptr;
}
inline const ::bosdyn::api::spot_cam::IrColorMap& GetIrColormapResponse::_internal_map() const {
  const ::bosdyn::api::spot_cam::IrColorMap* p = _impl_.map_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::spot_cam::IrColorMap&>(
      ::bosdyn::api::spot_cam::_IrColorMap_default_instance_);
}
inline const ::bosdyn::api::spot_cam::IrColorMap& GetIrColormapResponse::map() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetIrColormapResponse.map)
  return _internal_map();
}
inline void GetIrColormapResponse::unsafe_arena_set_allocated_map(
    ::bosdyn::api::spot_cam::IrColorMap* map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.map_);
  }
  _impl_.map_ = map;
  if (map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetIrColormapResponse.map)
}
inline ::bosdyn::api::spot_cam::IrColorMap* GetIrColormapResponse::release_map() {
  
  ::bosdyn::api::spot_cam::IrColorMap* temp = _impl_.map_;
  _impl_.map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::spot_cam::IrColorMap* GetIrColormapResponse::unsafe_arena_release_map() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetIrColormapResponse.map)
  
  ::bosdyn::api::spot_cam::IrColorMap* temp = _impl_.map_;
  _impl_.map_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot_cam::IrColorMap* GetIrColormapResponse::_internal_mutable_map() {
  
  if (_impl_.map_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot_cam::IrColorMap>(GetArenaForAllocation());
    _impl_.map_ = p;
  }
  return _impl_.map_;
}
inline ::bosdyn::api::spot_cam::IrColorMap* GetIrColormapResponse::mutable_map() {
  ::bosdyn::api::spot_cam::IrColorMap* _msg = _internal_mutable_map();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetIrColormapResponse.map)
  return _msg;
}
inline void GetIrColormapResponse::set_allocated_map(::bosdyn::api::spot_cam::IrColorMap* map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.map_;
  }
  if (map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(map);
    if (message_arena != submessage_arena) {
      map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.map_ = map;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetIrColormapResponse.map)
}

// -------------------------------------------------------------------

// IrMeterOverlay_NormalizedCoordinates

// double x = 1;
inline void IrMeterOverlay_NormalizedCoordinates::clear_x() {
  _impl_.x_ = 0;
}
inline double IrMeterOverlay_NormalizedCoordinates::_internal_x() const {
  return _impl_.x_;
}
inline double IrMeterOverlay_NormalizedCoordinates::x() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.IrMeterOverlay.NormalizedCoordinates.x)
  return _internal_x();
}
inline void IrMeterOverlay_NormalizedCoordinates::_internal_set_x(double value) {
  
  _impl_.x_ = value;
}
inline void IrMeterOverlay_NormalizedCoordinates::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.IrMeterOverlay.NormalizedCoordinates.x)
}

// double y = 2;
inline void IrMeterOverlay_NormalizedCoordinates::clear_y() {
  _impl_.y_ = 0;
}
inline double IrMeterOverlay_NormalizedCoordinates::_internal_y() const {
  return _impl_.y_;
}
inline double IrMeterOverlay_NormalizedCoordinates::y() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.IrMeterOverlay.NormalizedCoordinates.y)
  return _internal_y();
}
inline void IrMeterOverlay_NormalizedCoordinates::_internal_set_y(double value) {
  
  _impl_.y_ = value;
}
inline void IrMeterOverlay_NormalizedCoordinates::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.IrMeterOverlay.NormalizedCoordinates.y)
}

// -------------------------------------------------------------------

// IrMeterOverlay

// bool enable = 1;
inline void IrMeterOverlay::clear_enable() {
  _impl_.enable_ = false;
}
inline bool IrMeterOverlay::_internal_enable() const {
  return _impl_.enable_;
}
inline bool IrMeterOverlay::enable() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.IrMeterOverlay.enable)
  return _internal_enable();
}
inline void IrMeterOverlay::_internal_set_enable(bool value) {
  
  _impl_.enable_ = value;
}
inline void IrMeterOverlay::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.IrMeterOverlay.enable)
}

// .bosdyn.api.spot_cam.IrMeterOverlay.NormalizedCoordinates coords = 2;
inline bool IrMeterOverlay::_internal_has_coords() const {
  return this != internal_default_instance() && _impl_.coords_ != nullptr;
}
inline bool IrMeterOverlay::has_coords() const {
  return _internal_has_coords();
}
inline void IrMeterOverlay::clear_coords() {
  if (GetArenaForAllocation() == nullptr && _impl_.coords_ != nullptr) {
    delete _impl_.coords_;
  }
  _impl_.coords_ = nullptr;
}
inline const ::bosdyn::api::spot_cam::IrMeterOverlay_NormalizedCoordinates& IrMeterOverlay::_internal_coords() const {
  const ::bosdyn::api::spot_cam::IrMeterOverlay_NormalizedCoordinates* p = _impl_.coords_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::spot_cam::IrMeterOverlay_NormalizedCoordinates&>(
      ::bosdyn::api::spot_cam::_IrMeterOverlay_NormalizedCoordinates_default_instance_);
}
inline const ::bosdyn::api::spot_cam::IrMeterOverlay_NormalizedCoordinates& IrMeterOverlay::coords() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.IrMeterOverlay.coords)
  return _internal_coords();
}
inline void IrMeterOverlay::unsafe_arena_set_allocated_coords(
    ::bosdyn::api::spot_cam::IrMeterOverlay_NormalizedCoordinates* coords) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coords_);
  }
  _impl_.coords_ = coords;
  if (coords) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.IrMeterOverlay.coords)
}
inline ::bosdyn::api::spot_cam::IrMeterOverlay_NormalizedCoordinates* IrMeterOverlay::release_coords() {
  
  ::bosdyn::api::spot_cam::IrMeterOverlay_NormalizedCoordinates* temp = _impl_.coords_;
  _impl_.coords_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::spot_cam::IrMeterOverlay_NormalizedCoordinates* IrMeterOverlay::unsafe_arena_release_coords() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.IrMeterOverlay.coords)
  
  ::bosdyn::api::spot_cam::IrMeterOverlay_NormalizedCoordinates* temp = _impl_.coords_;
  _impl_.coords_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot_cam::IrMeterOverlay_NormalizedCoordinates* IrMeterOverlay::_internal_mutable_coords() {
  
  if (_impl_.coords_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot_cam::IrMeterOverlay_NormalizedCoordinates>(GetArenaForAllocation());
    _impl_.coords_ = p;
  }
  return _impl_.coords_;
}
inline ::bosdyn::api::spot_cam::IrMeterOverlay_NormalizedCoordinates* IrMeterOverlay::mutable_coords() {
  ::bosdyn::api::spot_cam::IrMeterOverlay_NormalizedCoordinates* _msg = _internal_mutable_coords();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.IrMeterOverlay.coords)
  return _msg;
}
inline void IrMeterOverlay::set_allocated_coords(::bosdyn::api::spot_cam::IrMeterOverlay_NormalizedCoordinates* coords) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.coords_;
  }
  if (coords) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(coords);
    if (message_arena != submessage_arena) {
      coords = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coords, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.coords_ = coords;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.IrMeterOverlay.coords)
}

// -------------------------------------------------------------------

// SetIrMeterOverlayRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool SetIrMeterOverlayRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool SetIrMeterOverlayRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& SetIrMeterOverlayRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RequestHeader&>(
      ::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& SetIrMeterOverlayRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.SetIrMeterOverlayRequest.header)
  return _internal_header();
}
inline void SetIrMeterOverlayRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.SetIrMeterOverlayRequest.header)
}
inline ::bosdyn::api::RequestHeader* SetIrMeterOverlayRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RequestHeader* SetIrMeterOverlayRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.SetIrMeterOverlayRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* SetIrMeterOverlayRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::RequestHeader* SetIrMeterOverlayRequest::mutable_header() {
  ::bosdyn::api::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.SetIrMeterOverlayRequest.header)
  return _msg;
}
inline void SetIrMeterOverlayRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.SetIrMeterOverlayRequest.header)
}

// .bosdyn.api.spot_cam.IrMeterOverlay overlay = 2;
inline bool SetIrMeterOverlayRequest::_internal_has_overlay() const {
  return this != internal_default_instance() && _impl_.overlay_ != nullptr;
}
inline bool SetIrMeterOverlayRequest::has_overlay() const {
  return _internal_has_overlay();
}
inline void SetIrMeterOverlayRequest::clear_overlay() {
  if (GetArenaForAllocation() == nullptr && _impl_.overlay_ != nullptr) {
    delete _impl_.overlay_;
  }
  _impl_.overlay_ = nullptr;
}
inline const ::bosdyn::api::spot_cam::IrMeterOverlay& SetIrMeterOverlayRequest::_internal_overlay() const {
  const ::bosdyn::api::spot_cam::IrMeterOverlay* p = _impl_.overlay_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::spot_cam::IrMeterOverlay&>(
      ::bosdyn::api::spot_cam::_IrMeterOverlay_default_instance_);
}
inline const ::bosdyn::api::spot_cam::IrMeterOverlay& SetIrMeterOverlayRequest::overlay() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.SetIrMeterOverlayRequest.overlay)
  return _internal_overlay();
}
inline void SetIrMeterOverlayRequest::unsafe_arena_set_allocated_overlay(
    ::bosdyn::api::spot_cam::IrMeterOverlay* overlay) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.overlay_);
  }
  _impl_.overlay_ = overlay;
  if (overlay) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.SetIrMeterOverlayRequest.overlay)
}
inline ::bosdyn::api::spot_cam::IrMeterOverlay* SetIrMeterOverlayRequest::release_overlay() {
  
  ::bosdyn::api::spot_cam::IrMeterOverlay* temp = _impl_.overlay_;
  _impl_.overlay_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::spot_cam::IrMeterOverlay* SetIrMeterOverlayRequest::unsafe_arena_release_overlay() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.SetIrMeterOverlayRequest.overlay)
  
  ::bosdyn::api::spot_cam::IrMeterOverlay* temp = _impl_.overlay_;
  _impl_.overlay_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot_cam::IrMeterOverlay* SetIrMeterOverlayRequest::_internal_mutable_overlay() {
  
  if (_impl_.overlay_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot_cam::IrMeterOverlay>(GetArenaForAllocation());
    _impl_.overlay_ = p;
  }
  return _impl_.overlay_;
}
inline ::bosdyn::api::spot_cam::IrMeterOverlay* SetIrMeterOverlayRequest::mutable_overlay() {
  ::bosdyn::api::spot_cam::IrMeterOverlay* _msg = _internal_mutable_overlay();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.SetIrMeterOverlayRequest.overlay)
  return _msg;
}
inline void SetIrMeterOverlayRequest::set_allocated_overlay(::bosdyn::api::spot_cam::IrMeterOverlay* overlay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.overlay_;
  }
  if (overlay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(overlay);
    if (message_arena != submessage_arena) {
      overlay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overlay, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.overlay_ = overlay;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.SetIrMeterOverlayRequest.overlay)
}

// -------------------------------------------------------------------

// SetIrMeterOverlayResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool SetIrMeterOverlayResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool SetIrMeterOverlayResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& SetIrMeterOverlayResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ResponseHeader&>(
      ::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& SetIrMeterOverlayResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.SetIrMeterOverlayResponse.header)
  return _internal_header();
}
inline void SetIrMeterOverlayResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.SetIrMeterOverlayResponse.header)
}
inline ::bosdyn::api::ResponseHeader* SetIrMeterOverlayResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ResponseHeader* SetIrMeterOverlayResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.SetIrMeterOverlayResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* SetIrMeterOverlayResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::ResponseHeader* SetIrMeterOverlayResponse::mutable_header() {
  ::bosdyn::api::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.SetIrMeterOverlayResponse.header)
  return _msg;
}
inline void SetIrMeterOverlayResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.SetIrMeterOverlayResponse.header)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::spot_cam::IrColorMap_ColorMap> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::spot_cam::IrColorMap_ColorMap>() {
  return ::bosdyn::api::spot_cam::IrColorMap_ColorMap_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto

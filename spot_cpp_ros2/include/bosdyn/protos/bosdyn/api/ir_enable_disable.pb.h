// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/ir_enable_disable.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fir_5fenable_5fdisable_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fir_5fenable_5fdisable_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fir_5fenable_5fdisable_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fir_5fenable_5fdisable_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fir_5fenable_5fdisable_2eproto;
namespace bosdyn {
namespace api {
class IREnableDisableRequest;
struct IREnableDisableRequestDefaultTypeInternal;
extern IREnableDisableRequestDefaultTypeInternal _IREnableDisableRequest_default_instance_;
class IREnableDisableResponse;
struct IREnableDisableResponseDefaultTypeInternal;
extern IREnableDisableResponseDefaultTypeInternal _IREnableDisableResponse_default_instance_;
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::IREnableDisableRequest* Arena::CreateMaybeMessage<::bosdyn::api::IREnableDisableRequest>(Arena*);
template<> ::bosdyn::api::IREnableDisableResponse* Arena::CreateMaybeMessage<::bosdyn::api::IREnableDisableResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {

enum IREnableDisableRequest_Request : int {
  IREnableDisableRequest_Request_REQUEST_UNKNOWN = 0,
  IREnableDisableRequest_Request_REQUEST_OFF = 1,
  IREnableDisableRequest_Request_REQUEST_ON = 2,
  IREnableDisableRequest_Request_IREnableDisableRequest_Request_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  IREnableDisableRequest_Request_IREnableDisableRequest_Request_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool IREnableDisableRequest_Request_IsValid(int value);
constexpr IREnableDisableRequest_Request IREnableDisableRequest_Request_Request_MIN = IREnableDisableRequest_Request_REQUEST_UNKNOWN;
constexpr IREnableDisableRequest_Request IREnableDisableRequest_Request_Request_MAX = IREnableDisableRequest_Request_REQUEST_ON;
constexpr int IREnableDisableRequest_Request_Request_ARRAYSIZE = IREnableDisableRequest_Request_Request_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IREnableDisableRequest_Request_descriptor();
template<typename T>
inline const std::string& IREnableDisableRequest_Request_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IREnableDisableRequest_Request>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IREnableDisableRequest_Request_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IREnableDisableRequest_Request_descriptor(), enum_t_value);
}
inline bool IREnableDisableRequest_Request_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IREnableDisableRequest_Request* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IREnableDisableRequest_Request>(
    IREnableDisableRequest_Request_descriptor(), name, value);
}
// ===================================================================

class IREnableDisableRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.IREnableDisableRequest) */ {
 public:
  inline IREnableDisableRequest() : IREnableDisableRequest(nullptr) {}
  ~IREnableDisableRequest() override;
  explicit PROTOBUF_CONSTEXPR IREnableDisableRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IREnableDisableRequest(const IREnableDisableRequest& from);
  IREnableDisableRequest(IREnableDisableRequest&& from) noexcept
    : IREnableDisableRequest() {
    *this = ::std::move(from);
  }

  inline IREnableDisableRequest& operator=(const IREnableDisableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IREnableDisableRequest& operator=(IREnableDisableRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IREnableDisableRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const IREnableDisableRequest* internal_default_instance() {
    return reinterpret_cast<const IREnableDisableRequest*>(
               &_IREnableDisableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IREnableDisableRequest& a, IREnableDisableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IREnableDisableRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IREnableDisableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IREnableDisableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IREnableDisableRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IREnableDisableRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IREnableDisableRequest& from) {
    IREnableDisableRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IREnableDisableRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.IREnableDisableRequest";
  }
  protected:
  explicit IREnableDisableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef IREnableDisableRequest_Request Request;
  static constexpr Request REQUEST_UNKNOWN =
    IREnableDisableRequest_Request_REQUEST_UNKNOWN;
  static constexpr Request REQUEST_OFF =
    IREnableDisableRequest_Request_REQUEST_OFF;
  static constexpr Request REQUEST_ON =
    IREnableDisableRequest_Request_REQUEST_ON;
  static inline bool Request_IsValid(int value) {
    return IREnableDisableRequest_Request_IsValid(value);
  }
  static constexpr Request Request_MIN =
    IREnableDisableRequest_Request_Request_MIN;
  static constexpr Request Request_MAX =
    IREnableDisableRequest_Request_Request_MAX;
  static constexpr int Request_ARRAYSIZE =
    IREnableDisableRequest_Request_Request_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Request_descriptor() {
    return IREnableDisableRequest_Request_descriptor();
  }
  template<typename T>
  static inline const std::string& Request_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Request>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Request_Name.");
    return IREnableDisableRequest_Request_Name(enum_t_value);
  }
  static inline bool Request_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Request* value) {
    return IREnableDisableRequest_Request_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kRequestFieldNumber = 2,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // .bosdyn.api.IREnableDisableRequest.Request request = 2;
  void clear_request();
  ::bosdyn::api::IREnableDisableRequest_Request request() const;
  void set_request(::bosdyn::api::IREnableDisableRequest_Request value);
  private:
  ::bosdyn::api::IREnableDisableRequest_Request _internal_request() const;
  void _internal_set_request(::bosdyn::api::IREnableDisableRequest_Request value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.IREnableDisableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::RequestHeader* header_;
    int request_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fir_5fenable_5fdisable_2eproto;
};
// -------------------------------------------------------------------

class IREnableDisableResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.IREnableDisableResponse) */ {
 public:
  inline IREnableDisableResponse() : IREnableDisableResponse(nullptr) {}
  ~IREnableDisableResponse() override;
  explicit PROTOBUF_CONSTEXPR IREnableDisableResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IREnableDisableResponse(const IREnableDisableResponse& from);
  IREnableDisableResponse(IREnableDisableResponse&& from) noexcept
    : IREnableDisableResponse() {
    *this = ::std::move(from);
  }

  inline IREnableDisableResponse& operator=(const IREnableDisableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IREnableDisableResponse& operator=(IREnableDisableResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IREnableDisableResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const IREnableDisableResponse* internal_default_instance() {
    return reinterpret_cast<const IREnableDisableResponse*>(
               &_IREnableDisableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IREnableDisableResponse& a, IREnableDisableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IREnableDisableResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IREnableDisableResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IREnableDisableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IREnableDisableResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IREnableDisableResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IREnableDisableResponse& from) {
    IREnableDisableResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IREnableDisableResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.IREnableDisableResponse";
  }
  protected:
  explicit IREnableDisableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.IREnableDisableResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::ResponseHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fir_5fenable_5fdisable_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IREnableDisableRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool IREnableDisableRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool IREnableDisableRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& IREnableDisableRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RequestHeader&>(
      ::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& IREnableDisableRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.IREnableDisableRequest.header)
  return _internal_header();
}
inline void IREnableDisableRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.IREnableDisableRequest.header)
}
inline ::bosdyn::api::RequestHeader* IREnableDisableRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RequestHeader* IREnableDisableRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.IREnableDisableRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* IREnableDisableRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::RequestHeader* IREnableDisableRequest::mutable_header() {
  ::bosdyn::api::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.IREnableDisableRequest.header)
  return _msg;
}
inline void IREnableDisableRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.IREnableDisableRequest.header)
}

// .bosdyn.api.IREnableDisableRequest.Request request = 2;
inline void IREnableDisableRequest::clear_request() {
  _impl_.request_ = 0;
}
inline ::bosdyn::api::IREnableDisableRequest_Request IREnableDisableRequest::_internal_request() const {
  return static_cast< ::bosdyn::api::IREnableDisableRequest_Request >(_impl_.request_);
}
inline ::bosdyn::api::IREnableDisableRequest_Request IREnableDisableRequest::request() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.IREnableDisableRequest.request)
  return _internal_request();
}
inline void IREnableDisableRequest::_internal_set_request(::bosdyn::api::IREnableDisableRequest_Request value) {
  
  _impl_.request_ = value;
}
inline void IREnableDisableRequest::set_request(::bosdyn::api::IREnableDisableRequest_Request value) {
  _internal_set_request(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.IREnableDisableRequest.request)
}

// -------------------------------------------------------------------

// IREnableDisableResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool IREnableDisableResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool IREnableDisableResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& IREnableDisableResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ResponseHeader&>(
      ::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& IREnableDisableResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.IREnableDisableResponse.header)
  return _internal_header();
}
inline void IREnableDisableResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.IREnableDisableResponse.header)
}
inline ::bosdyn::api::ResponseHeader* IREnableDisableResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ResponseHeader* IREnableDisableResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.IREnableDisableResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* IREnableDisableResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::ResponseHeader* IREnableDisableResponse::mutable_header() {
  ::bosdyn::api::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.IREnableDisableResponse.header)
  return _msg;
}
inline void IREnableDisableResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.IREnableDisableResponse.header)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::IREnableDisableRequest_Request> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::IREnableDisableRequest_Request>() {
  return ::bosdyn::api::IREnableDisableRequest_Request_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fir_5fenable_5fdisable_2eproto

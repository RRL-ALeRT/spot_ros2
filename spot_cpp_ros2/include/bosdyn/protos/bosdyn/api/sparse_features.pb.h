// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/sparse_features.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fsparse_5ffeatures_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fsparse_5ffeatures_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fsparse_5ffeatures_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fsparse_5ffeatures_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fsparse_5ffeatures_2eproto;
namespace bosdyn {
namespace api {
class Keypoint;
struct KeypointDefaultTypeInternal;
extern KeypointDefaultTypeInternal _Keypoint_default_instance_;
class KeypointMatches;
struct KeypointMatchesDefaultTypeInternal;
extern KeypointMatchesDefaultTypeInternal _KeypointMatches_default_instance_;
class KeypointSet;
struct KeypointSetDefaultTypeInternal;
extern KeypointSetDefaultTypeInternal _KeypointSet_default_instance_;
class Match;
struct MatchDefaultTypeInternal;
extern MatchDefaultTypeInternal _Match_default_instance_;
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::Keypoint* Arena::CreateMaybeMessage<::bosdyn::api::Keypoint>(Arena*);
template<> ::bosdyn::api::KeypointMatches* Arena::CreateMaybeMessage<::bosdyn::api::KeypointMatches>(Arena*);
template<> ::bosdyn::api::KeypointSet* Arena::CreateMaybeMessage<::bosdyn::api::KeypointSet>(Arena*);
template<> ::bosdyn::api::Match* Arena::CreateMaybeMessage<::bosdyn::api::Match>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {

enum KeypointSet_KeypointType : int {
  KeypointSet_KeypointType_KEYPOINT_UNKNOWN = 0,
  KeypointSet_KeypointType_KEYPOINT_SIMPLE = 1,
  KeypointSet_KeypointType_KEYPOINT_ORB = 2,
  KeypointSet_KeypointType_KeypointSet_KeypointType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  KeypointSet_KeypointType_KeypointSet_KeypointType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool KeypointSet_KeypointType_IsValid(int value);
constexpr KeypointSet_KeypointType KeypointSet_KeypointType_KeypointType_MIN = KeypointSet_KeypointType_KEYPOINT_UNKNOWN;
constexpr KeypointSet_KeypointType KeypointSet_KeypointType_KeypointType_MAX = KeypointSet_KeypointType_KEYPOINT_ORB;
constexpr int KeypointSet_KeypointType_KeypointType_ARRAYSIZE = KeypointSet_KeypointType_KeypointType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KeypointSet_KeypointType_descriptor();
template<typename T>
inline const std::string& KeypointSet_KeypointType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KeypointSet_KeypointType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KeypointSet_KeypointType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KeypointSet_KeypointType_descriptor(), enum_t_value);
}
inline bool KeypointSet_KeypointType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KeypointSet_KeypointType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KeypointSet_KeypointType>(
    KeypointSet_KeypointType_descriptor(), name, value);
}
// ===================================================================

class Keypoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.Keypoint) */ {
 public:
  inline Keypoint() : Keypoint(nullptr) {}
  ~Keypoint() override;
  explicit PROTOBUF_CONSTEXPR Keypoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Keypoint(const Keypoint& from);
  Keypoint(Keypoint&& from) noexcept
    : Keypoint() {
    *this = ::std::move(from);
  }

  inline Keypoint& operator=(const Keypoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Keypoint& operator=(Keypoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Keypoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const Keypoint* internal_default_instance() {
    return reinterpret_cast<const Keypoint*>(
               &_Keypoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Keypoint& a, Keypoint& b) {
    a.Swap(&b);
  }
  inline void Swap(Keypoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Keypoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Keypoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Keypoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Keypoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Keypoint& from) {
    Keypoint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Keypoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.Keypoint";
  }
  protected:
  explicit Keypoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBinaryDescriptorFieldNumber = 3,
    kCoordinatesFieldNumber = 2,
    kScoreFieldNumber = 4,
    kSizeFieldNumber = 5,
    kAngleFieldNumber = 6,
  };
  // bytes binary_descriptor = 3;
  void clear_binary_descriptor();
  const std::string& binary_descriptor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_binary_descriptor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_binary_descriptor();
  PROTOBUF_NODISCARD std::string* release_binary_descriptor();
  void set_allocated_binary_descriptor(std::string* binary_descriptor);
  private:
  const std::string& _internal_binary_descriptor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_binary_descriptor(const std::string& value);
  std::string* _internal_mutable_binary_descriptor();
  public:

  // .bosdyn.api.Vec2 coordinates = 2;
  bool has_coordinates() const;
  private:
  bool _internal_has_coordinates() const;
  public:
  void clear_coordinates();
  const ::bosdyn::api::Vec2& coordinates() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec2* release_coordinates();
  ::bosdyn::api::Vec2* mutable_coordinates();
  void set_allocated_coordinates(::bosdyn::api::Vec2* coordinates);
  private:
  const ::bosdyn::api::Vec2& _internal_coordinates() const;
  ::bosdyn::api::Vec2* _internal_mutable_coordinates();
  public:
  void unsafe_arena_set_allocated_coordinates(
      ::bosdyn::api::Vec2* coordinates);
  ::bosdyn::api::Vec2* unsafe_arena_release_coordinates();

  // float score = 4;
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // float size = 5;
  void clear_size();
  float size() const;
  void set_size(float value);
  private:
  float _internal_size() const;
  void _internal_set_size(float value);
  public:

  // float angle = 6;
  void clear_angle();
  float angle() const;
  void set_angle(float value);
  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.Keypoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr binary_descriptor_;
    ::bosdyn::api::Vec2* coordinates_;
    float score_;
    float size_;
    float angle_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fsparse_5ffeatures_2eproto;
};
// -------------------------------------------------------------------

class KeypointSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.KeypointSet) */ {
 public:
  inline KeypointSet() : KeypointSet(nullptr) {}
  ~KeypointSet() override;
  explicit PROTOBUF_CONSTEXPR KeypointSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeypointSet(const KeypointSet& from);
  KeypointSet(KeypointSet&& from) noexcept
    : KeypointSet() {
    *this = ::std::move(from);
  }

  inline KeypointSet& operator=(const KeypointSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeypointSet& operator=(KeypointSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeypointSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeypointSet* internal_default_instance() {
    return reinterpret_cast<const KeypointSet*>(
               &_KeypointSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KeypointSet& a, KeypointSet& b) {
    a.Swap(&b);
  }
  inline void Swap(KeypointSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeypointSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeypointSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeypointSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeypointSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KeypointSet& from) {
    KeypointSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeypointSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.KeypointSet";
  }
  protected:
  explicit KeypointSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef KeypointSet_KeypointType KeypointType;
  static constexpr KeypointType KEYPOINT_UNKNOWN =
    KeypointSet_KeypointType_KEYPOINT_UNKNOWN;
  static constexpr KeypointType KEYPOINT_SIMPLE =
    KeypointSet_KeypointType_KEYPOINT_SIMPLE;
  static constexpr KeypointType KEYPOINT_ORB =
    KeypointSet_KeypointType_KEYPOINT_ORB;
  static inline bool KeypointType_IsValid(int value) {
    return KeypointSet_KeypointType_IsValid(value);
  }
  static constexpr KeypointType KeypointType_MIN =
    KeypointSet_KeypointType_KeypointType_MIN;
  static constexpr KeypointType KeypointType_MAX =
    KeypointSet_KeypointType_KeypointType_MAX;
  static constexpr int KeypointType_ARRAYSIZE =
    KeypointSet_KeypointType_KeypointType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  KeypointType_descriptor() {
    return KeypointSet_KeypointType_descriptor();
  }
  template<typename T>
  static inline const std::string& KeypointType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, KeypointType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function KeypointType_Name.");
    return KeypointSet_KeypointType_Name(enum_t_value);
  }
  static inline bool KeypointType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      KeypointType* value) {
    return KeypointSet_KeypointType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKeypointsFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // repeated .bosdyn.api.Keypoint keypoints = 2;
  int keypoints_size() const;
  private:
  int _internal_keypoints_size() const;
  public:
  void clear_keypoints();
  ::bosdyn::api::Keypoint* mutable_keypoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Keypoint >*
      mutable_keypoints();
  private:
  const ::bosdyn::api::Keypoint& _internal_keypoints(int index) const;
  ::bosdyn::api::Keypoint* _internal_add_keypoints();
  public:
  const ::bosdyn::api::Keypoint& keypoints(int index) const;
  ::bosdyn::api::Keypoint* add_keypoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Keypoint >&
      keypoints() const;

  // .bosdyn.api.KeypointSet.KeypointType type = 3;
  void clear_type();
  ::bosdyn::api::KeypointSet_KeypointType type() const;
  void set_type(::bosdyn::api::KeypointSet_KeypointType value);
  private:
  ::bosdyn::api::KeypointSet_KeypointType _internal_type() const;
  void _internal_set_type(::bosdyn::api::KeypointSet_KeypointType value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.KeypointSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Keypoint > keypoints_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fsparse_5ffeatures_2eproto;
};
// -------------------------------------------------------------------

class Match final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.Match) */ {
 public:
  inline Match() : Match(nullptr) {}
  ~Match() override;
  explicit PROTOBUF_CONSTEXPR Match(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Match(const Match& from);
  Match(Match&& from) noexcept
    : Match() {
    *this = ::std::move(from);
  }

  inline Match& operator=(const Match& from) {
    CopyFrom(from);
    return *this;
  }
  inline Match& operator=(Match&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Match& default_instance() {
    return *internal_default_instance();
  }
  static inline const Match* internal_default_instance() {
    return reinterpret_cast<const Match*>(
               &_Match_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Match& a, Match& b) {
    a.Swap(&b);
  }
  inline void Swap(Match* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Match* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Match* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Match>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Match& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Match& from) {
    Match::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Match* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.Match";
  }
  protected:
  explicit Match(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceIndexFieldNumber = 2,
    kLiveIndexFieldNumber = 3,
    kDistanceFieldNumber = 4,
  };
  // int32 reference_index = 2;
  void clear_reference_index();
  int32_t reference_index() const;
  void set_reference_index(int32_t value);
  private:
  int32_t _internal_reference_index() const;
  void _internal_set_reference_index(int32_t value);
  public:

  // int32 live_index = 3;
  void clear_live_index();
  int32_t live_index() const;
  void set_live_index(int32_t value);
  private:
  int32_t _internal_live_index() const;
  void _internal_set_live_index(int32_t value);
  public:

  // float distance = 4;
  void clear_distance();
  float distance() const;
  void set_distance(float value);
  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.Match)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t reference_index_;
    int32_t live_index_;
    float distance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fsparse_5ffeatures_2eproto;
};
// -------------------------------------------------------------------

class KeypointMatches final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.KeypointMatches) */ {
 public:
  inline KeypointMatches() : KeypointMatches(nullptr) {}
  ~KeypointMatches() override;
  explicit PROTOBUF_CONSTEXPR KeypointMatches(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeypointMatches(const KeypointMatches& from);
  KeypointMatches(KeypointMatches&& from) noexcept
    : KeypointMatches() {
    *this = ::std::move(from);
  }

  inline KeypointMatches& operator=(const KeypointMatches& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeypointMatches& operator=(KeypointMatches&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeypointMatches& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeypointMatches* internal_default_instance() {
    return reinterpret_cast<const KeypointMatches*>(
               &_KeypointMatches_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(KeypointMatches& a, KeypointMatches& b) {
    a.Swap(&b);
  }
  inline void Swap(KeypointMatches* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeypointMatches* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeypointMatches* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeypointMatches>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeypointMatches& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KeypointMatches& from) {
    KeypointMatches::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeypointMatches* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.KeypointMatches";
  }
  protected:
  explicit KeypointMatches(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchesFieldNumber = 4,
    kReferenceKeypointsFieldNumber = 2,
    kLiveKeypointsFieldNumber = 3,
  };
  // repeated .bosdyn.api.Match matches = 4;
  int matches_size() const;
  private:
  int _internal_matches_size() const;
  public:
  void clear_matches();
  ::bosdyn::api::Match* mutable_matches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Match >*
      mutable_matches();
  private:
  const ::bosdyn::api::Match& _internal_matches(int index) const;
  ::bosdyn::api::Match* _internal_add_matches();
  public:
  const ::bosdyn::api::Match& matches(int index) const;
  ::bosdyn::api::Match* add_matches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Match >&
      matches() const;

  // .bosdyn.api.KeypointSet reference_keypoints = 2;
  bool has_reference_keypoints() const;
  private:
  bool _internal_has_reference_keypoints() const;
  public:
  void clear_reference_keypoints();
  const ::bosdyn::api::KeypointSet& reference_keypoints() const;
  PROTOBUF_NODISCARD ::bosdyn::api::KeypointSet* release_reference_keypoints();
  ::bosdyn::api::KeypointSet* mutable_reference_keypoints();
  void set_allocated_reference_keypoints(::bosdyn::api::KeypointSet* reference_keypoints);
  private:
  const ::bosdyn::api::KeypointSet& _internal_reference_keypoints() const;
  ::bosdyn::api::KeypointSet* _internal_mutable_reference_keypoints();
  public:
  void unsafe_arena_set_allocated_reference_keypoints(
      ::bosdyn::api::KeypointSet* reference_keypoints);
  ::bosdyn::api::KeypointSet* unsafe_arena_release_reference_keypoints();

  // .bosdyn.api.KeypointSet live_keypoints = 3;
  bool has_live_keypoints() const;
  private:
  bool _internal_has_live_keypoints() const;
  public:
  void clear_live_keypoints();
  const ::bosdyn::api::KeypointSet& live_keypoints() const;
  PROTOBUF_NODISCARD ::bosdyn::api::KeypointSet* release_live_keypoints();
  ::bosdyn::api::KeypointSet* mutable_live_keypoints();
  void set_allocated_live_keypoints(::bosdyn::api::KeypointSet* live_keypoints);
  private:
  const ::bosdyn::api::KeypointSet& _internal_live_keypoints() const;
  ::bosdyn::api::KeypointSet* _internal_mutable_live_keypoints();
  public:
  void unsafe_arena_set_allocated_live_keypoints(
      ::bosdyn::api::KeypointSet* live_keypoints);
  ::bosdyn::api::KeypointSet* unsafe_arena_release_live_keypoints();

  // @@protoc_insertion_point(class_scope:bosdyn.api.KeypointMatches)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Match > matches_;
    ::bosdyn::api::KeypointSet* reference_keypoints_;
    ::bosdyn::api::KeypointSet* live_keypoints_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fsparse_5ffeatures_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Keypoint

// .bosdyn.api.Vec2 coordinates = 2;
inline bool Keypoint::_internal_has_coordinates() const {
  return this != internal_default_instance() && _impl_.coordinates_ != nullptr;
}
inline bool Keypoint::has_coordinates() const {
  return _internal_has_coordinates();
}
inline const ::bosdyn::api::Vec2& Keypoint::_internal_coordinates() const {
  const ::bosdyn::api::Vec2* p = _impl_.coordinates_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec2&>(
      ::bosdyn::api::_Vec2_default_instance_);
}
inline const ::bosdyn::api::Vec2& Keypoint::coordinates() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Keypoint.coordinates)
  return _internal_coordinates();
}
inline void Keypoint::unsafe_arena_set_allocated_coordinates(
    ::bosdyn::api::Vec2* coordinates) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coordinates_);
  }
  _impl_.coordinates_ = coordinates;
  if (coordinates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.Keypoint.coordinates)
}
inline ::bosdyn::api::Vec2* Keypoint::release_coordinates() {
  
  ::bosdyn::api::Vec2* temp = _impl_.coordinates_;
  _impl_.coordinates_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec2* Keypoint::unsafe_arena_release_coordinates() {
  // @@protoc_insertion_point(field_release:bosdyn.api.Keypoint.coordinates)
  
  ::bosdyn::api::Vec2* temp = _impl_.coordinates_;
  _impl_.coordinates_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec2* Keypoint::_internal_mutable_coordinates() {
  
  if (_impl_.coordinates_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec2>(GetArenaForAllocation());
    _impl_.coordinates_ = p;
  }
  return _impl_.coordinates_;
}
inline ::bosdyn::api::Vec2* Keypoint::mutable_coordinates() {
  ::bosdyn::api::Vec2* _msg = _internal_mutable_coordinates();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.Keypoint.coordinates)
  return _msg;
}
inline void Keypoint::set_allocated_coordinates(::bosdyn::api::Vec2* coordinates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coordinates_);
  }
  if (coordinates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinates));
    if (message_arena != submessage_arena) {
      coordinates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinates, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.coordinates_ = coordinates;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.Keypoint.coordinates)
}

// bytes binary_descriptor = 3;
inline void Keypoint::clear_binary_descriptor() {
  _impl_.binary_descriptor_.ClearToEmpty();
}
inline const std::string& Keypoint::binary_descriptor() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Keypoint.binary_descriptor)
  return _internal_binary_descriptor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Keypoint::set_binary_descriptor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.binary_descriptor_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.Keypoint.binary_descriptor)
}
inline std::string* Keypoint::mutable_binary_descriptor() {
  std::string* _s = _internal_mutable_binary_descriptor();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.Keypoint.binary_descriptor)
  return _s;
}
inline const std::string& Keypoint::_internal_binary_descriptor() const {
  return _impl_.binary_descriptor_.Get();
}
inline void Keypoint::_internal_set_binary_descriptor(const std::string& value) {
  
  _impl_.binary_descriptor_.Set(value, GetArenaForAllocation());
}
inline std::string* Keypoint::_internal_mutable_binary_descriptor() {
  
  return _impl_.binary_descriptor_.Mutable(GetArenaForAllocation());
}
inline std::string* Keypoint::release_binary_descriptor() {
  // @@protoc_insertion_point(field_release:bosdyn.api.Keypoint.binary_descriptor)
  return _impl_.binary_descriptor_.Release();
}
inline void Keypoint::set_allocated_binary_descriptor(std::string* binary_descriptor) {
  if (binary_descriptor != nullptr) {
    
  } else {
    
  }
  _impl_.binary_descriptor_.SetAllocated(binary_descriptor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.binary_descriptor_.IsDefault()) {
    _impl_.binary_descriptor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.Keypoint.binary_descriptor)
}

// float score = 4;
inline void Keypoint::clear_score() {
  _impl_.score_ = 0;
}
inline float Keypoint::_internal_score() const {
  return _impl_.score_;
}
inline float Keypoint::score() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Keypoint.score)
  return _internal_score();
}
inline void Keypoint::_internal_set_score(float value) {
  
  _impl_.score_ = value;
}
inline void Keypoint::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.Keypoint.score)
}

// float size = 5;
inline void Keypoint::clear_size() {
  _impl_.size_ = 0;
}
inline float Keypoint::_internal_size() const {
  return _impl_.size_;
}
inline float Keypoint::size() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Keypoint.size)
  return _internal_size();
}
inline void Keypoint::_internal_set_size(float value) {
  
  _impl_.size_ = value;
}
inline void Keypoint::set_size(float value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.Keypoint.size)
}

// float angle = 6;
inline void Keypoint::clear_angle() {
  _impl_.angle_ = 0;
}
inline float Keypoint::_internal_angle() const {
  return _impl_.angle_;
}
inline float Keypoint::angle() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Keypoint.angle)
  return _internal_angle();
}
inline void Keypoint::_internal_set_angle(float value) {
  
  _impl_.angle_ = value;
}
inline void Keypoint::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.Keypoint.angle)
}

// -------------------------------------------------------------------

// KeypointSet

// repeated .bosdyn.api.Keypoint keypoints = 2;
inline int KeypointSet::_internal_keypoints_size() const {
  return _impl_.keypoints_.size();
}
inline int KeypointSet::keypoints_size() const {
  return _internal_keypoints_size();
}
inline void KeypointSet::clear_keypoints() {
  _impl_.keypoints_.Clear();
}
inline ::bosdyn::api::Keypoint* KeypointSet::mutable_keypoints(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.KeypointSet.keypoints)
  return _impl_.keypoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Keypoint >*
KeypointSet::mutable_keypoints() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.KeypointSet.keypoints)
  return &_impl_.keypoints_;
}
inline const ::bosdyn::api::Keypoint& KeypointSet::_internal_keypoints(int index) const {
  return _impl_.keypoints_.Get(index);
}
inline const ::bosdyn::api::Keypoint& KeypointSet::keypoints(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.KeypointSet.keypoints)
  return _internal_keypoints(index);
}
inline ::bosdyn::api::Keypoint* KeypointSet::_internal_add_keypoints() {
  return _impl_.keypoints_.Add();
}
inline ::bosdyn::api::Keypoint* KeypointSet::add_keypoints() {
  ::bosdyn::api::Keypoint* _add = _internal_add_keypoints();
  // @@protoc_insertion_point(field_add:bosdyn.api.KeypointSet.keypoints)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Keypoint >&
KeypointSet::keypoints() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.KeypointSet.keypoints)
  return _impl_.keypoints_;
}

// .bosdyn.api.KeypointSet.KeypointType type = 3;
inline void KeypointSet::clear_type() {
  _impl_.type_ = 0;
}
inline ::bosdyn::api::KeypointSet_KeypointType KeypointSet::_internal_type() const {
  return static_cast< ::bosdyn::api::KeypointSet_KeypointType >(_impl_.type_);
}
inline ::bosdyn::api::KeypointSet_KeypointType KeypointSet::type() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.KeypointSet.type)
  return _internal_type();
}
inline void KeypointSet::_internal_set_type(::bosdyn::api::KeypointSet_KeypointType value) {
  
  _impl_.type_ = value;
}
inline void KeypointSet::set_type(::bosdyn::api::KeypointSet_KeypointType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.KeypointSet.type)
}

// -------------------------------------------------------------------

// Match

// int32 reference_index = 2;
inline void Match::clear_reference_index() {
  _impl_.reference_index_ = 0;
}
inline int32_t Match::_internal_reference_index() const {
  return _impl_.reference_index_;
}
inline int32_t Match::reference_index() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Match.reference_index)
  return _internal_reference_index();
}
inline void Match::_internal_set_reference_index(int32_t value) {
  
  _impl_.reference_index_ = value;
}
inline void Match::set_reference_index(int32_t value) {
  _internal_set_reference_index(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.Match.reference_index)
}

// int32 live_index = 3;
inline void Match::clear_live_index() {
  _impl_.live_index_ = 0;
}
inline int32_t Match::_internal_live_index() const {
  return _impl_.live_index_;
}
inline int32_t Match::live_index() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Match.live_index)
  return _internal_live_index();
}
inline void Match::_internal_set_live_index(int32_t value) {
  
  _impl_.live_index_ = value;
}
inline void Match::set_live_index(int32_t value) {
  _internal_set_live_index(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.Match.live_index)
}

// float distance = 4;
inline void Match::clear_distance() {
  _impl_.distance_ = 0;
}
inline float Match::_internal_distance() const {
  return _impl_.distance_;
}
inline float Match::distance() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Match.distance)
  return _internal_distance();
}
inline void Match::_internal_set_distance(float value) {
  
  _impl_.distance_ = value;
}
inline void Match::set_distance(float value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.Match.distance)
}

// -------------------------------------------------------------------

// KeypointMatches

// .bosdyn.api.KeypointSet reference_keypoints = 2;
inline bool KeypointMatches::_internal_has_reference_keypoints() const {
  return this != internal_default_instance() && _impl_.reference_keypoints_ != nullptr;
}
inline bool KeypointMatches::has_reference_keypoints() const {
  return _internal_has_reference_keypoints();
}
inline void KeypointMatches::clear_reference_keypoints() {
  if (GetArenaForAllocation() == nullptr && _impl_.reference_keypoints_ != nullptr) {
    delete _impl_.reference_keypoints_;
  }
  _impl_.reference_keypoints_ = nullptr;
}
inline const ::bosdyn::api::KeypointSet& KeypointMatches::_internal_reference_keypoints() const {
  const ::bosdyn::api::KeypointSet* p = _impl_.reference_keypoints_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::KeypointSet&>(
      ::bosdyn::api::_KeypointSet_default_instance_);
}
inline const ::bosdyn::api::KeypointSet& KeypointMatches::reference_keypoints() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.KeypointMatches.reference_keypoints)
  return _internal_reference_keypoints();
}
inline void KeypointMatches::unsafe_arena_set_allocated_reference_keypoints(
    ::bosdyn::api::KeypointSet* reference_keypoints) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reference_keypoints_);
  }
  _impl_.reference_keypoints_ = reference_keypoints;
  if (reference_keypoints) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.KeypointMatches.reference_keypoints)
}
inline ::bosdyn::api::KeypointSet* KeypointMatches::release_reference_keypoints() {
  
  ::bosdyn::api::KeypointSet* temp = _impl_.reference_keypoints_;
  _impl_.reference_keypoints_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::KeypointSet* KeypointMatches::unsafe_arena_release_reference_keypoints() {
  // @@protoc_insertion_point(field_release:bosdyn.api.KeypointMatches.reference_keypoints)
  
  ::bosdyn::api::KeypointSet* temp = _impl_.reference_keypoints_;
  _impl_.reference_keypoints_ = nullptr;
  return temp;
}
inline ::bosdyn::api::KeypointSet* KeypointMatches::_internal_mutable_reference_keypoints() {
  
  if (_impl_.reference_keypoints_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::KeypointSet>(GetArenaForAllocation());
    _impl_.reference_keypoints_ = p;
  }
  return _impl_.reference_keypoints_;
}
inline ::bosdyn::api::KeypointSet* KeypointMatches::mutable_reference_keypoints() {
  ::bosdyn::api::KeypointSet* _msg = _internal_mutable_reference_keypoints();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.KeypointMatches.reference_keypoints)
  return _msg;
}
inline void KeypointMatches::set_allocated_reference_keypoints(::bosdyn::api::KeypointSet* reference_keypoints) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.reference_keypoints_;
  }
  if (reference_keypoints) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reference_keypoints);
    if (message_arena != submessage_arena) {
      reference_keypoints = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference_keypoints, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reference_keypoints_ = reference_keypoints;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.KeypointMatches.reference_keypoints)
}

// .bosdyn.api.KeypointSet live_keypoints = 3;
inline bool KeypointMatches::_internal_has_live_keypoints() const {
  return this != internal_default_instance() && _impl_.live_keypoints_ != nullptr;
}
inline bool KeypointMatches::has_live_keypoints() const {
  return _internal_has_live_keypoints();
}
inline void KeypointMatches::clear_live_keypoints() {
  if (GetArenaForAllocation() == nullptr && _impl_.live_keypoints_ != nullptr) {
    delete _impl_.live_keypoints_;
  }
  _impl_.live_keypoints_ = nullptr;
}
inline const ::bosdyn::api::KeypointSet& KeypointMatches::_internal_live_keypoints() const {
  const ::bosdyn::api::KeypointSet* p = _impl_.live_keypoints_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::KeypointSet&>(
      ::bosdyn::api::_KeypointSet_default_instance_);
}
inline const ::bosdyn::api::KeypointSet& KeypointMatches::live_keypoints() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.KeypointMatches.live_keypoints)
  return _internal_live_keypoints();
}
inline void KeypointMatches::unsafe_arena_set_allocated_live_keypoints(
    ::bosdyn::api::KeypointSet* live_keypoints) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.live_keypoints_);
  }
  _impl_.live_keypoints_ = live_keypoints;
  if (live_keypoints) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.KeypointMatches.live_keypoints)
}
inline ::bosdyn::api::KeypointSet* KeypointMatches::release_live_keypoints() {
  
  ::bosdyn::api::KeypointSet* temp = _impl_.live_keypoints_;
  _impl_.live_keypoints_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::KeypointSet* KeypointMatches::unsafe_arena_release_live_keypoints() {
  // @@protoc_insertion_point(field_release:bosdyn.api.KeypointMatches.live_keypoints)
  
  ::bosdyn::api::KeypointSet* temp = _impl_.live_keypoints_;
  _impl_.live_keypoints_ = nullptr;
  return temp;
}
inline ::bosdyn::api::KeypointSet* KeypointMatches::_internal_mutable_live_keypoints() {
  
  if (_impl_.live_keypoints_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::KeypointSet>(GetArenaForAllocation());
    _impl_.live_keypoints_ = p;
  }
  return _impl_.live_keypoints_;
}
inline ::bosdyn::api::KeypointSet* KeypointMatches::mutable_live_keypoints() {
  ::bosdyn::api::KeypointSet* _msg = _internal_mutable_live_keypoints();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.KeypointMatches.live_keypoints)
  return _msg;
}
inline void KeypointMatches::set_allocated_live_keypoints(::bosdyn::api::KeypointSet* live_keypoints) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.live_keypoints_;
  }
  if (live_keypoints) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(live_keypoints);
    if (message_arena != submessage_arena) {
      live_keypoints = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, live_keypoints, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.live_keypoints_ = live_keypoints;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.KeypointMatches.live_keypoints)
}

// repeated .bosdyn.api.Match matches = 4;
inline int KeypointMatches::_internal_matches_size() const {
  return _impl_.matches_.size();
}
inline int KeypointMatches::matches_size() const {
  return _internal_matches_size();
}
inline void KeypointMatches::clear_matches() {
  _impl_.matches_.Clear();
}
inline ::bosdyn::api::Match* KeypointMatches::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.KeypointMatches.matches)
  return _impl_.matches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Match >*
KeypointMatches::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.KeypointMatches.matches)
  return &_impl_.matches_;
}
inline const ::bosdyn::api::Match& KeypointMatches::_internal_matches(int index) const {
  return _impl_.matches_.Get(index);
}
inline const ::bosdyn::api::Match& KeypointMatches::matches(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.KeypointMatches.matches)
  return _internal_matches(index);
}
inline ::bosdyn::api::Match* KeypointMatches::_internal_add_matches() {
  return _impl_.matches_.Add();
}
inline ::bosdyn::api::Match* KeypointMatches::add_matches() {
  ::bosdyn::api::Match* _add = _internal_add_matches();
  // @@protoc_insertion_point(field_add:bosdyn.api.KeypointMatches.matches)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Match >&
KeypointMatches::matches() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.KeypointMatches.matches)
  return _impl_.matches_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::KeypointSet_KeypointType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::KeypointSet_KeypointType>() {
  return ::bosdyn::api::KeypointSet_KeypointType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fsparse_5ffeatures_2eproto

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bosdyn/api/autowalk/autowalk_service.proto
// Original file comments:
// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).
//
#ifndef GRPC_bosdyn_2fapi_2fautowalk_2fautowalk_5fservice_2eproto__INCLUDED
#define GRPC_bosdyn_2fapi_2fautowalk_2fautowalk_5fservice_2eproto__INCLUDED

#include "bosdyn/api/autowalk/autowalk_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace bosdyn {
namespace api {
namespace autowalk {

class AutowalkService final {
 public:
  static constexpr char const* service_full_name() {
    return "bosdyn.api.autowalk.AutowalkService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Compile a walk into a mission.
    // Input DataChunks should deserialize into a CompileAutowalkRequest.
    // Output DataChunks should deserialize into a CompileAutowalkResponse.
    // This rpc is stateless.
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>> CompileAutowalk(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>>(CompileAutowalkRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>> AsyncCompileAutowalk(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>>(AsyncCompileAutowalkRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>> PrepareAsyncCompileAutowalk(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>>(PrepareAsyncCompileAutowalkRaw(context, cq));
    }
    // Compile a walk into a mission then load to mission service.
    // Input DataChunks should deserialize into a LoadAutowalkRequest.
    // Output DataChunks should deserialize into a LoadAutowalkResponse.
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>> LoadAutowalk(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>>(LoadAutowalkRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>> AsyncLoadAutowalk(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>>(AsyncLoadAutowalkRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>> PrepareAsyncLoadAutowalk(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>>(PrepareAsyncLoadAutowalkRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Compile a walk into a mission.
      // Input DataChunks should deserialize into a CompileAutowalkRequest.
      // Output DataChunks should deserialize into a CompileAutowalkResponse.
      // This rpc is stateless.
      virtual void CompileAutowalk(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::bosdyn::api::DataChunk,::bosdyn::api::DataChunk>* reactor) = 0;
      // Compile a walk into a mission then load to mission service.
      // Input DataChunks should deserialize into a LoadAutowalkRequest.
      // Output DataChunks should deserialize into a LoadAutowalkResponse.
      virtual void LoadAutowalk(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::bosdyn::api::DataChunk,::bosdyn::api::DataChunk>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderWriterInterface< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>* CompileAutowalkRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>* AsyncCompileAutowalkRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>* PrepareAsyncCompileAutowalkRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>* LoadAutowalkRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>* AsyncLoadAutowalkRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>* PrepareAsyncLoadAutowalkRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReaderWriter< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>> CompileAutowalk(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>>(CompileAutowalkRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>> AsyncCompileAutowalk(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>>(AsyncCompileAutowalkRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>> PrepareAsyncCompileAutowalk(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>>(PrepareAsyncCompileAutowalkRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>> LoadAutowalk(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>>(LoadAutowalkRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>> AsyncLoadAutowalk(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>>(AsyncLoadAutowalkRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>> PrepareAsyncLoadAutowalk(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>>(PrepareAsyncLoadAutowalkRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CompileAutowalk(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::bosdyn::api::DataChunk,::bosdyn::api::DataChunk>* reactor) override;
      void LoadAutowalk(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::bosdyn::api::DataChunk,::bosdyn::api::DataChunk>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReaderWriter< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>* CompileAutowalkRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>* AsyncCompileAutowalkRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>* PrepareAsyncCompileAutowalkRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>* LoadAutowalkRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>* AsyncLoadAutowalkRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>* PrepareAsyncLoadAutowalkRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CompileAutowalk_;
    const ::grpc::internal::RpcMethod rpcmethod_LoadAutowalk_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Compile a walk into a mission.
    // Input DataChunks should deserialize into a CompileAutowalkRequest.
    // Output DataChunks should deserialize into a CompileAutowalkResponse.
    // This rpc is stateless.
    virtual ::grpc::Status CompileAutowalk(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>* stream);
    // Compile a walk into a mission then load to mission service.
    // Input DataChunks should deserialize into a LoadAutowalkRequest.
    // Output DataChunks should deserialize into a LoadAutowalkResponse.
    virtual ::grpc::Status LoadAutowalk(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_CompileAutowalk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CompileAutowalk() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CompileAutowalk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompileAutowalk(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCompileAutowalk(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadAutowalk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LoadAutowalk() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_LoadAutowalk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadAutowalk(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadAutowalk(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CompileAutowalk<WithAsyncMethod_LoadAutowalk<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CompileAutowalk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CompileAutowalk() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->CompileAutowalk(context); }));
    }
    ~WithCallbackMethod_CompileAutowalk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompileAutowalk(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>* CompileAutowalk(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LoadAutowalk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LoadAutowalk() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->LoadAutowalk(context); }));
    }
    ~WithCallbackMethod_LoadAutowalk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadAutowalk(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>* LoadAutowalk(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_CompileAutowalk<WithCallbackMethod_LoadAutowalk<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CompileAutowalk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CompileAutowalk() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CompileAutowalk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompileAutowalk(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoadAutowalk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LoadAutowalk() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_LoadAutowalk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadAutowalk(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CompileAutowalk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CompileAutowalk() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CompileAutowalk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompileAutowalk(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCompileAutowalk(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LoadAutowalk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LoadAutowalk() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_LoadAutowalk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadAutowalk(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadAutowalk(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CompileAutowalk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CompileAutowalk() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->CompileAutowalk(context); }));
    }
    ~WithRawCallbackMethod_CompileAutowalk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompileAutowalk(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* CompileAutowalk(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LoadAutowalk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LoadAutowalk() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->LoadAutowalk(context); }));
    }
    ~WithRawCallbackMethod_LoadAutowalk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadAutowalk(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::bosdyn::api::DataChunk, ::bosdyn::api::DataChunk>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* LoadAutowalk(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};

}  // namespace autowalk
}  // namespace api
}  // namespace bosdyn


#endif  // GRPC_bosdyn_2fapi_2fautowalk_2fautowalk_5fservice_2eproto__INCLUDED

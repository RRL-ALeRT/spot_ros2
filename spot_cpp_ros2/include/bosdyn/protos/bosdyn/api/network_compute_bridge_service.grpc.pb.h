// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bosdyn/api/network_compute_bridge_service.proto
// Original file comments:
// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).
//
#ifndef GRPC_bosdyn_2fapi_2fnetwork_5fcompute_5fbridge_5fservice_2eproto__INCLUDED
#define GRPC_bosdyn_2fapi_2fnetwork_5fcompute_5fbridge_5fservice_2eproto__INCLUDED

#include "bosdyn/api/network_compute_bridge_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace bosdyn {
namespace api {

// RPCs for sending images or other data to networked server for computation.
class NetworkComputeBridge final {
 public:
  static constexpr char const* service_full_name() {
    return "bosdyn.api.NetworkComputeBridge";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status NetworkCompute(::grpc::ClientContext* context, const ::bosdyn::api::NetworkComputeRequest& request, ::bosdyn::api::NetworkComputeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::NetworkComputeResponse>> AsyncNetworkCompute(::grpc::ClientContext* context, const ::bosdyn::api::NetworkComputeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::NetworkComputeResponse>>(AsyncNetworkComputeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::NetworkComputeResponse>> PrepareAsyncNetworkCompute(::grpc::ClientContext* context, const ::bosdyn::api::NetworkComputeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::NetworkComputeResponse>>(PrepareAsyncNetworkComputeRaw(context, request, cq));
    }
    virtual ::grpc::Status ListAvailableModels(::grpc::ClientContext* context, const ::bosdyn::api::ListAvailableModelsRequest& request, ::bosdyn::api::ListAvailableModelsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::ListAvailableModelsResponse>> AsyncListAvailableModels(::grpc::ClientContext* context, const ::bosdyn::api::ListAvailableModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::ListAvailableModelsResponse>>(AsyncListAvailableModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::ListAvailableModelsResponse>> PrepareAsyncListAvailableModels(::grpc::ClientContext* context, const ::bosdyn::api::ListAvailableModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::ListAvailableModelsResponse>>(PrepareAsyncListAvailableModelsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void NetworkCompute(::grpc::ClientContext* context, const ::bosdyn::api::NetworkComputeRequest* request, ::bosdyn::api::NetworkComputeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NetworkCompute(::grpc::ClientContext* context, const ::bosdyn::api::NetworkComputeRequest* request, ::bosdyn::api::NetworkComputeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListAvailableModels(::grpc::ClientContext* context, const ::bosdyn::api::ListAvailableModelsRequest* request, ::bosdyn::api::ListAvailableModelsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListAvailableModels(::grpc::ClientContext* context, const ::bosdyn::api::ListAvailableModelsRequest* request, ::bosdyn::api::ListAvailableModelsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::NetworkComputeResponse>* AsyncNetworkComputeRaw(::grpc::ClientContext* context, const ::bosdyn::api::NetworkComputeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::NetworkComputeResponse>* PrepareAsyncNetworkComputeRaw(::grpc::ClientContext* context, const ::bosdyn::api::NetworkComputeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::ListAvailableModelsResponse>* AsyncListAvailableModelsRaw(::grpc::ClientContext* context, const ::bosdyn::api::ListAvailableModelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::ListAvailableModelsResponse>* PrepareAsyncListAvailableModelsRaw(::grpc::ClientContext* context, const ::bosdyn::api::ListAvailableModelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status NetworkCompute(::grpc::ClientContext* context, const ::bosdyn::api::NetworkComputeRequest& request, ::bosdyn::api::NetworkComputeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::NetworkComputeResponse>> AsyncNetworkCompute(::grpc::ClientContext* context, const ::bosdyn::api::NetworkComputeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::NetworkComputeResponse>>(AsyncNetworkComputeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::NetworkComputeResponse>> PrepareAsyncNetworkCompute(::grpc::ClientContext* context, const ::bosdyn::api::NetworkComputeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::NetworkComputeResponse>>(PrepareAsyncNetworkComputeRaw(context, request, cq));
    }
    ::grpc::Status ListAvailableModels(::grpc::ClientContext* context, const ::bosdyn::api::ListAvailableModelsRequest& request, ::bosdyn::api::ListAvailableModelsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::ListAvailableModelsResponse>> AsyncListAvailableModels(::grpc::ClientContext* context, const ::bosdyn::api::ListAvailableModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::ListAvailableModelsResponse>>(AsyncListAvailableModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::ListAvailableModelsResponse>> PrepareAsyncListAvailableModels(::grpc::ClientContext* context, const ::bosdyn::api::ListAvailableModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::ListAvailableModelsResponse>>(PrepareAsyncListAvailableModelsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void NetworkCompute(::grpc::ClientContext* context, const ::bosdyn::api::NetworkComputeRequest* request, ::bosdyn::api::NetworkComputeResponse* response, std::function<void(::grpc::Status)>) override;
      void NetworkCompute(::grpc::ClientContext* context, const ::bosdyn::api::NetworkComputeRequest* request, ::bosdyn::api::NetworkComputeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListAvailableModels(::grpc::ClientContext* context, const ::bosdyn::api::ListAvailableModelsRequest* request, ::bosdyn::api::ListAvailableModelsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListAvailableModels(::grpc::ClientContext* context, const ::bosdyn::api::ListAvailableModelsRequest* request, ::bosdyn::api::ListAvailableModelsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::NetworkComputeResponse>* AsyncNetworkComputeRaw(::grpc::ClientContext* context, const ::bosdyn::api::NetworkComputeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::NetworkComputeResponse>* PrepareAsyncNetworkComputeRaw(::grpc::ClientContext* context, const ::bosdyn::api::NetworkComputeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::ListAvailableModelsResponse>* AsyncListAvailableModelsRaw(::grpc::ClientContext* context, const ::bosdyn::api::ListAvailableModelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::ListAvailableModelsResponse>* PrepareAsyncListAvailableModelsRaw(::grpc::ClientContext* context, const ::bosdyn::api::ListAvailableModelsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_NetworkCompute_;
    const ::grpc::internal::RpcMethod rpcmethod_ListAvailableModels_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status NetworkCompute(::grpc::ServerContext* context, const ::bosdyn::api::NetworkComputeRequest* request, ::bosdyn::api::NetworkComputeResponse* response);
    virtual ::grpc::Status ListAvailableModels(::grpc::ServerContext* context, const ::bosdyn::api::ListAvailableModelsRequest* request, ::bosdyn::api::ListAvailableModelsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_NetworkCompute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NetworkCompute() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_NetworkCompute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NetworkCompute(::grpc::ServerContext* /*context*/, const ::bosdyn::api::NetworkComputeRequest* /*request*/, ::bosdyn::api::NetworkComputeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNetworkCompute(::grpc::ServerContext* context, ::bosdyn::api::NetworkComputeRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::NetworkComputeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListAvailableModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListAvailableModels() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListAvailableModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAvailableModels(::grpc::ServerContext* /*context*/, const ::bosdyn::api::ListAvailableModelsRequest* /*request*/, ::bosdyn::api::ListAvailableModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAvailableModels(::grpc::ServerContext* context, ::bosdyn::api::ListAvailableModelsRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::ListAvailableModelsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_NetworkCompute<WithAsyncMethod_ListAvailableModels<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_NetworkCompute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NetworkCompute() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::NetworkComputeRequest, ::bosdyn::api::NetworkComputeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::NetworkComputeRequest* request, ::bosdyn::api::NetworkComputeResponse* response) { return this->NetworkCompute(context, request, response); }));}
    void SetMessageAllocatorFor_NetworkCompute(
        ::grpc::MessageAllocator< ::bosdyn::api::NetworkComputeRequest, ::bosdyn::api::NetworkComputeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::NetworkComputeRequest, ::bosdyn::api::NetworkComputeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NetworkCompute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NetworkCompute(::grpc::ServerContext* /*context*/, const ::bosdyn::api::NetworkComputeRequest* /*request*/, ::bosdyn::api::NetworkComputeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NetworkCompute(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::NetworkComputeRequest* /*request*/, ::bosdyn::api::NetworkComputeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListAvailableModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListAvailableModels() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::ListAvailableModelsRequest, ::bosdyn::api::ListAvailableModelsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::ListAvailableModelsRequest* request, ::bosdyn::api::ListAvailableModelsResponse* response) { return this->ListAvailableModels(context, request, response); }));}
    void SetMessageAllocatorFor_ListAvailableModels(
        ::grpc::MessageAllocator< ::bosdyn::api::ListAvailableModelsRequest, ::bosdyn::api::ListAvailableModelsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::ListAvailableModelsRequest, ::bosdyn::api::ListAvailableModelsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListAvailableModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAvailableModels(::grpc::ServerContext* /*context*/, const ::bosdyn::api::ListAvailableModelsRequest* /*request*/, ::bosdyn::api::ListAvailableModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListAvailableModels(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::ListAvailableModelsRequest* /*request*/, ::bosdyn::api::ListAvailableModelsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_NetworkCompute<WithCallbackMethod_ListAvailableModels<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_NetworkCompute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NetworkCompute() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_NetworkCompute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NetworkCompute(::grpc::ServerContext* /*context*/, const ::bosdyn::api::NetworkComputeRequest* /*request*/, ::bosdyn::api::NetworkComputeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListAvailableModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListAvailableModels() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListAvailableModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAvailableModels(::grpc::ServerContext* /*context*/, const ::bosdyn::api::ListAvailableModelsRequest* /*request*/, ::bosdyn::api::ListAvailableModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_NetworkCompute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NetworkCompute() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_NetworkCompute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NetworkCompute(::grpc::ServerContext* /*context*/, const ::bosdyn::api::NetworkComputeRequest* /*request*/, ::bosdyn::api::NetworkComputeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNetworkCompute(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListAvailableModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListAvailableModels() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListAvailableModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAvailableModels(::grpc::ServerContext* /*context*/, const ::bosdyn::api::ListAvailableModelsRequest* /*request*/, ::bosdyn::api::ListAvailableModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAvailableModels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NetworkCompute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NetworkCompute() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NetworkCompute(context, request, response); }));
    }
    ~WithRawCallbackMethod_NetworkCompute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NetworkCompute(::grpc::ServerContext* /*context*/, const ::bosdyn::api::NetworkComputeRequest* /*request*/, ::bosdyn::api::NetworkComputeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NetworkCompute(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListAvailableModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListAvailableModels() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListAvailableModels(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListAvailableModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAvailableModels(::grpc::ServerContext* /*context*/, const ::bosdyn::api::ListAvailableModelsRequest* /*request*/, ::bosdyn::api::ListAvailableModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListAvailableModels(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NetworkCompute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NetworkCompute() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::NetworkComputeRequest, ::bosdyn::api::NetworkComputeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::NetworkComputeRequest, ::bosdyn::api::NetworkComputeResponse>* streamer) {
                       return this->StreamedNetworkCompute(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NetworkCompute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NetworkCompute(::grpc::ServerContext* /*context*/, const ::bosdyn::api::NetworkComputeRequest* /*request*/, ::bosdyn::api::NetworkComputeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNetworkCompute(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::NetworkComputeRequest,::bosdyn::api::NetworkComputeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListAvailableModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListAvailableModels() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::ListAvailableModelsRequest, ::bosdyn::api::ListAvailableModelsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::ListAvailableModelsRequest, ::bosdyn::api::ListAvailableModelsResponse>* streamer) {
                       return this->StreamedListAvailableModels(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListAvailableModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListAvailableModels(::grpc::ServerContext* /*context*/, const ::bosdyn::api::ListAvailableModelsRequest* /*request*/, ::bosdyn::api::ListAvailableModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListAvailableModels(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::ListAvailableModelsRequest,::bosdyn::api::ListAvailableModelsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_NetworkCompute<WithStreamedUnaryMethod_ListAvailableModels<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_NetworkCompute<WithStreamedUnaryMethod_ListAvailableModels<Service > > StreamedService;
};

// Set of RPCs for workers of the network compute bridge.  This is seperate from the RPCs for the
// on-robot network compute bridge so that if they need to diverge in the future it is possible
// to do so.
class NetworkComputeBridgeWorker final {
 public:
  static constexpr char const* service_full_name() {
    return "bosdyn.api.NetworkComputeBridgeWorker";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status NetworkCompute(::grpc::ClientContext* context, const ::bosdyn::api::NetworkComputeRequest& request, ::bosdyn::api::NetworkComputeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::NetworkComputeResponse>> AsyncNetworkCompute(::grpc::ClientContext* context, const ::bosdyn::api::NetworkComputeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::NetworkComputeResponse>>(AsyncNetworkComputeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::NetworkComputeResponse>> PrepareAsyncNetworkCompute(::grpc::ClientContext* context, const ::bosdyn::api::NetworkComputeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::NetworkComputeResponse>>(PrepareAsyncNetworkComputeRaw(context, request, cq));
    }
    virtual ::grpc::Status ListAvailableModels(::grpc::ClientContext* context, const ::bosdyn::api::ListAvailableModelsRequest& request, ::bosdyn::api::ListAvailableModelsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::ListAvailableModelsResponse>> AsyncListAvailableModels(::grpc::ClientContext* context, const ::bosdyn::api::ListAvailableModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::ListAvailableModelsResponse>>(AsyncListAvailableModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::ListAvailableModelsResponse>> PrepareAsyncListAvailableModels(::grpc::ClientContext* context, const ::bosdyn::api::ListAvailableModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::ListAvailableModelsResponse>>(PrepareAsyncListAvailableModelsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void NetworkCompute(::grpc::ClientContext* context, const ::bosdyn::api::NetworkComputeRequest* request, ::bosdyn::api::NetworkComputeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NetworkCompute(::grpc::ClientContext* context, const ::bosdyn::api::NetworkComputeRequest* request, ::bosdyn::api::NetworkComputeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListAvailableModels(::grpc::ClientContext* context, const ::bosdyn::api::ListAvailableModelsRequest* request, ::bosdyn::api::ListAvailableModelsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListAvailableModels(::grpc::ClientContext* context, const ::bosdyn::api::ListAvailableModelsRequest* request, ::bosdyn::api::ListAvailableModelsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::NetworkComputeResponse>* AsyncNetworkComputeRaw(::grpc::ClientContext* context, const ::bosdyn::api::NetworkComputeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::NetworkComputeResponse>* PrepareAsyncNetworkComputeRaw(::grpc::ClientContext* context, const ::bosdyn::api::NetworkComputeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::ListAvailableModelsResponse>* AsyncListAvailableModelsRaw(::grpc::ClientContext* context, const ::bosdyn::api::ListAvailableModelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::ListAvailableModelsResponse>* PrepareAsyncListAvailableModelsRaw(::grpc::ClientContext* context, const ::bosdyn::api::ListAvailableModelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status NetworkCompute(::grpc::ClientContext* context, const ::bosdyn::api::NetworkComputeRequest& request, ::bosdyn::api::NetworkComputeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::NetworkComputeResponse>> AsyncNetworkCompute(::grpc::ClientContext* context, const ::bosdyn::api::NetworkComputeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::NetworkComputeResponse>>(AsyncNetworkComputeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::NetworkComputeResponse>> PrepareAsyncNetworkCompute(::grpc::ClientContext* context, const ::bosdyn::api::NetworkComputeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::NetworkComputeResponse>>(PrepareAsyncNetworkComputeRaw(context, request, cq));
    }
    ::grpc::Status ListAvailableModels(::grpc::ClientContext* context, const ::bosdyn::api::ListAvailableModelsRequest& request, ::bosdyn::api::ListAvailableModelsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::ListAvailableModelsResponse>> AsyncListAvailableModels(::grpc::ClientContext* context, const ::bosdyn::api::ListAvailableModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::ListAvailableModelsResponse>>(AsyncListAvailableModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::ListAvailableModelsResponse>> PrepareAsyncListAvailableModels(::grpc::ClientContext* context, const ::bosdyn::api::ListAvailableModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::ListAvailableModelsResponse>>(PrepareAsyncListAvailableModelsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void NetworkCompute(::grpc::ClientContext* context, const ::bosdyn::api::NetworkComputeRequest* request, ::bosdyn::api::NetworkComputeResponse* response, std::function<void(::grpc::Status)>) override;
      void NetworkCompute(::grpc::ClientContext* context, const ::bosdyn::api::NetworkComputeRequest* request, ::bosdyn::api::NetworkComputeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListAvailableModels(::grpc::ClientContext* context, const ::bosdyn::api::ListAvailableModelsRequest* request, ::bosdyn::api::ListAvailableModelsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListAvailableModels(::grpc::ClientContext* context, const ::bosdyn::api::ListAvailableModelsRequest* request, ::bosdyn::api::ListAvailableModelsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::NetworkComputeResponse>* AsyncNetworkComputeRaw(::grpc::ClientContext* context, const ::bosdyn::api::NetworkComputeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::NetworkComputeResponse>* PrepareAsyncNetworkComputeRaw(::grpc::ClientContext* context, const ::bosdyn::api::NetworkComputeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::ListAvailableModelsResponse>* AsyncListAvailableModelsRaw(::grpc::ClientContext* context, const ::bosdyn::api::ListAvailableModelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::ListAvailableModelsResponse>* PrepareAsyncListAvailableModelsRaw(::grpc::ClientContext* context, const ::bosdyn::api::ListAvailableModelsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_NetworkCompute_;
    const ::grpc::internal::RpcMethod rpcmethod_ListAvailableModels_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status NetworkCompute(::grpc::ServerContext* context, const ::bosdyn::api::NetworkComputeRequest* request, ::bosdyn::api::NetworkComputeResponse* response);
    virtual ::grpc::Status ListAvailableModels(::grpc::ServerContext* context, const ::bosdyn::api::ListAvailableModelsRequest* request, ::bosdyn::api::ListAvailableModelsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_NetworkCompute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NetworkCompute() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_NetworkCompute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NetworkCompute(::grpc::ServerContext* /*context*/, const ::bosdyn::api::NetworkComputeRequest* /*request*/, ::bosdyn::api::NetworkComputeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNetworkCompute(::grpc::ServerContext* context, ::bosdyn::api::NetworkComputeRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::NetworkComputeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListAvailableModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListAvailableModels() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListAvailableModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAvailableModels(::grpc::ServerContext* /*context*/, const ::bosdyn::api::ListAvailableModelsRequest* /*request*/, ::bosdyn::api::ListAvailableModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAvailableModels(::grpc::ServerContext* context, ::bosdyn::api::ListAvailableModelsRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::ListAvailableModelsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_NetworkCompute<WithAsyncMethod_ListAvailableModels<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_NetworkCompute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NetworkCompute() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::NetworkComputeRequest, ::bosdyn::api::NetworkComputeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::NetworkComputeRequest* request, ::bosdyn::api::NetworkComputeResponse* response) { return this->NetworkCompute(context, request, response); }));}
    void SetMessageAllocatorFor_NetworkCompute(
        ::grpc::MessageAllocator< ::bosdyn::api::NetworkComputeRequest, ::bosdyn::api::NetworkComputeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::NetworkComputeRequest, ::bosdyn::api::NetworkComputeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NetworkCompute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NetworkCompute(::grpc::ServerContext* /*context*/, const ::bosdyn::api::NetworkComputeRequest* /*request*/, ::bosdyn::api::NetworkComputeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NetworkCompute(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::NetworkComputeRequest* /*request*/, ::bosdyn::api::NetworkComputeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListAvailableModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListAvailableModels() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::ListAvailableModelsRequest, ::bosdyn::api::ListAvailableModelsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::ListAvailableModelsRequest* request, ::bosdyn::api::ListAvailableModelsResponse* response) { return this->ListAvailableModels(context, request, response); }));}
    void SetMessageAllocatorFor_ListAvailableModels(
        ::grpc::MessageAllocator< ::bosdyn::api::ListAvailableModelsRequest, ::bosdyn::api::ListAvailableModelsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::ListAvailableModelsRequest, ::bosdyn::api::ListAvailableModelsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListAvailableModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAvailableModels(::grpc::ServerContext* /*context*/, const ::bosdyn::api::ListAvailableModelsRequest* /*request*/, ::bosdyn::api::ListAvailableModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListAvailableModels(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::ListAvailableModelsRequest* /*request*/, ::bosdyn::api::ListAvailableModelsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_NetworkCompute<WithCallbackMethod_ListAvailableModels<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_NetworkCompute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NetworkCompute() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_NetworkCompute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NetworkCompute(::grpc::ServerContext* /*context*/, const ::bosdyn::api::NetworkComputeRequest* /*request*/, ::bosdyn::api::NetworkComputeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListAvailableModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListAvailableModels() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListAvailableModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAvailableModels(::grpc::ServerContext* /*context*/, const ::bosdyn::api::ListAvailableModelsRequest* /*request*/, ::bosdyn::api::ListAvailableModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_NetworkCompute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NetworkCompute() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_NetworkCompute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NetworkCompute(::grpc::ServerContext* /*context*/, const ::bosdyn::api::NetworkComputeRequest* /*request*/, ::bosdyn::api::NetworkComputeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNetworkCompute(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListAvailableModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListAvailableModels() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListAvailableModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAvailableModels(::grpc::ServerContext* /*context*/, const ::bosdyn::api::ListAvailableModelsRequest* /*request*/, ::bosdyn::api::ListAvailableModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAvailableModels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NetworkCompute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NetworkCompute() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NetworkCompute(context, request, response); }));
    }
    ~WithRawCallbackMethod_NetworkCompute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NetworkCompute(::grpc::ServerContext* /*context*/, const ::bosdyn::api::NetworkComputeRequest* /*request*/, ::bosdyn::api::NetworkComputeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NetworkCompute(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListAvailableModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListAvailableModels() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListAvailableModels(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListAvailableModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAvailableModels(::grpc::ServerContext* /*context*/, const ::bosdyn::api::ListAvailableModelsRequest* /*request*/, ::bosdyn::api::ListAvailableModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListAvailableModels(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NetworkCompute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NetworkCompute() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::NetworkComputeRequest, ::bosdyn::api::NetworkComputeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::NetworkComputeRequest, ::bosdyn::api::NetworkComputeResponse>* streamer) {
                       return this->StreamedNetworkCompute(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NetworkCompute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NetworkCompute(::grpc::ServerContext* /*context*/, const ::bosdyn::api::NetworkComputeRequest* /*request*/, ::bosdyn::api::NetworkComputeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNetworkCompute(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::NetworkComputeRequest,::bosdyn::api::NetworkComputeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListAvailableModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListAvailableModels() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::ListAvailableModelsRequest, ::bosdyn::api::ListAvailableModelsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::ListAvailableModelsRequest, ::bosdyn::api::ListAvailableModelsResponse>* streamer) {
                       return this->StreamedListAvailableModels(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListAvailableModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListAvailableModels(::grpc::ServerContext* /*context*/, const ::bosdyn::api::ListAvailableModelsRequest* /*request*/, ::bosdyn::api::ListAvailableModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListAvailableModels(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::ListAvailableModelsRequest,::bosdyn::api::ListAvailableModelsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_NetworkCompute<WithStreamedUnaryMethod_ListAvailableModels<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_NetworkCompute<WithStreamedUnaryMethod_ListAvailableModels<Service > > StreamedService;
};

}  // namespace api
}  // namespace bosdyn


#endif  // GRPC_bosdyn_2fapi_2fnetwork_5fcompute_5fbridge_5fservice_2eproto__INCLUDED

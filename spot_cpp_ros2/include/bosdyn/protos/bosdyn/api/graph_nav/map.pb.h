// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/graph_nav/map.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/geometry.pb.h"
#include "bosdyn/api/image.pb.h"
#include "bosdyn/api/local_grid.pb.h"
#include "bosdyn/api/payload.pb.h"
#include "bosdyn/api/point_cloud.pb.h"
#include "bosdyn/api/robot_id.pb.h"
#include "bosdyn/api/robot_state.pb.h"
#include "bosdyn/api/spot/robot_command.pb.h"
#include "bosdyn/api/stairs.pb.h"
#include "bosdyn/api/world_object.pb.h"
#include <google/protobuf/any.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
namespace bosdyn {
namespace api {
namespace graph_nav {
class Anchor;
struct AnchorDefaultTypeInternal;
extern AnchorDefaultTypeInternal _Anchor_default_instance_;
class AnchoredWorldObject;
struct AnchoredWorldObjectDefaultTypeInternal;
extern AnchoredWorldObjectDefaultTypeInternal _AnchoredWorldObject_default_instance_;
class Anchoring;
struct AnchoringDefaultTypeInternal;
extern AnchoringDefaultTypeInternal _Anchoring_default_instance_;
class AreaCallbackData;
struct AreaCallbackDataDefaultTypeInternal;
extern AreaCallbackDataDefaultTypeInternal _AreaCallbackData_default_instance_;
class AreaCallbackRegion;
struct AreaCallbackRegionDefaultTypeInternal;
extern AreaCallbackRegionDefaultTypeInternal _AreaCallbackRegion_default_instance_;
class ClientMetadata;
struct ClientMetadataDefaultTypeInternal;
extern ClientMetadataDefaultTypeInternal _ClientMetadata_default_instance_;
class Edge;
struct EdgeDefaultTypeInternal;
extern EdgeDefaultTypeInternal _Edge_default_instance_;
class EdgeSnapshot;
struct EdgeSnapshotDefaultTypeInternal;
extern EdgeSnapshotDefaultTypeInternal _EdgeSnapshot_default_instance_;
class EdgeSnapshot_AreaCallbacksEntry_DoNotUse;
struct EdgeSnapshot_AreaCallbacksEntry_DoNotUseDefaultTypeInternal;
extern EdgeSnapshot_AreaCallbacksEntry_DoNotUseDefaultTypeInternal _EdgeSnapshot_AreaCallbacksEntry_DoNotUse_default_instance_;
class EdgeSnapshot_Stance;
struct EdgeSnapshot_StanceDefaultTypeInternal;
extern EdgeSnapshot_StanceDefaultTypeInternal _EdgeSnapshot_Stance_default_instance_;
class Edge_Annotations;
struct Edge_AnnotationsDefaultTypeInternal;
extern Edge_AnnotationsDefaultTypeInternal _Edge_Annotations_default_instance_;
class Edge_Annotations_AreaCallbacksEntry_DoNotUse;
struct Edge_Annotations_AreaCallbacksEntry_DoNotUseDefaultTypeInternal;
extern Edge_Annotations_AreaCallbacksEntry_DoNotUseDefaultTypeInternal _Edge_Annotations_AreaCallbacksEntry_DoNotUse_default_instance_;
class Edge_Annotations_StairData;
struct Edge_Annotations_StairDataDefaultTypeInternal;
extern Edge_Annotations_StairDataDefaultTypeInternal _Edge_Annotations_StairData_default_instance_;
class Edge_Id;
struct Edge_IdDefaultTypeInternal;
extern Edge_IdDefaultTypeInternal _Edge_Id_default_instance_;
class Graph;
struct GraphDefaultTypeInternal;
extern GraphDefaultTypeInternal _Graph_default_instance_;
class Waypoint;
struct WaypointDefaultTypeInternal;
extern WaypointDefaultTypeInternal _Waypoint_default_instance_;
class WaypointSnapshot;
struct WaypointSnapshotDefaultTypeInternal;
extern WaypointSnapshotDefaultTypeInternal _WaypointSnapshot_default_instance_;
class Waypoint_Annotations;
struct Waypoint_AnnotationsDefaultTypeInternal;
extern Waypoint_AnnotationsDefaultTypeInternal _Waypoint_Annotations_default_instance_;
class Waypoint_Annotations_LocalizeRegion;
struct Waypoint_Annotations_LocalizeRegionDefaultTypeInternal;
extern Waypoint_Annotations_LocalizeRegionDefaultTypeInternal _Waypoint_Annotations_LocalizeRegion_default_instance_;
class Waypoint_Annotations_LocalizeRegion_Circle2D;
struct Waypoint_Annotations_LocalizeRegion_Circle2DDefaultTypeInternal;
extern Waypoint_Annotations_LocalizeRegion_Circle2DDefaultTypeInternal _Waypoint_Annotations_LocalizeRegion_Circle2D_default_instance_;
class Waypoint_Annotations_LocalizeRegion_Default;
struct Waypoint_Annotations_LocalizeRegion_DefaultDefaultTypeInternal;
extern Waypoint_Annotations_LocalizeRegion_DefaultDefaultTypeInternal _Waypoint_Annotations_LocalizeRegion_Default_default_instance_;
class Waypoint_Annotations_LocalizeRegion_Empty;
struct Waypoint_Annotations_LocalizeRegion_EmptyDefaultTypeInternal;
extern Waypoint_Annotations_LocalizeRegion_EmptyDefaultTypeInternal _Waypoint_Annotations_LocalizeRegion_Empty_default_instance_;
}  // namespace graph_nav
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::graph_nav::Anchor* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::Anchor>(Arena*);
template<> ::bosdyn::api::graph_nav::AnchoredWorldObject* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::AnchoredWorldObject>(Arena*);
template<> ::bosdyn::api::graph_nav::Anchoring* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::Anchoring>(Arena*);
template<> ::bosdyn::api::graph_nav::AreaCallbackData* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::AreaCallbackData>(Arena*);
template<> ::bosdyn::api::graph_nav::AreaCallbackRegion* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::AreaCallbackRegion>(Arena*);
template<> ::bosdyn::api::graph_nav::ClientMetadata* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::ClientMetadata>(Arena*);
template<> ::bosdyn::api::graph_nav::Edge* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::Edge>(Arena*);
template<> ::bosdyn::api::graph_nav::EdgeSnapshot* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::EdgeSnapshot>(Arena*);
template<> ::bosdyn::api::graph_nav::EdgeSnapshot_AreaCallbacksEntry_DoNotUse* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::EdgeSnapshot_AreaCallbacksEntry_DoNotUse>(Arena*);
template<> ::bosdyn::api::graph_nav::EdgeSnapshot_Stance* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::EdgeSnapshot_Stance>(Arena*);
template<> ::bosdyn::api::graph_nav::Edge_Annotations* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::Edge_Annotations>(Arena*);
template<> ::bosdyn::api::graph_nav::Edge_Annotations_AreaCallbacksEntry_DoNotUse* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::Edge_Annotations_AreaCallbacksEntry_DoNotUse>(Arena*);
template<> ::bosdyn::api::graph_nav::Edge_Annotations_StairData* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::Edge_Annotations_StairData>(Arena*);
template<> ::bosdyn::api::graph_nav::Edge_Id* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::Edge_Id>(Arena*);
template<> ::bosdyn::api::graph_nav::Graph* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::Graph>(Arena*);
template<> ::bosdyn::api::graph_nav::Waypoint* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::Waypoint>(Arena*);
template<> ::bosdyn::api::graph_nav::WaypointSnapshot* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::WaypointSnapshot>(Arena*);
template<> ::bosdyn::api::graph_nav::Waypoint_Annotations* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::Waypoint_Annotations>(Arena*);
template<> ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion>(Arena*);
template<> ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D>(Arena*);
template<> ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default>(Arena*);
template<> ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {
namespace graph_nav {

enum Waypoint_WaypointSource : int {
  Waypoint_WaypointSource_WAYPOINT_SOURCE_UNKNOWN = 0,
  Waypoint_WaypointSource_WAYPOINT_SOURCE_ROBOT_PATH = 1,
  Waypoint_WaypointSource_WAYPOINT_SOURCE_USER_REQUEST = 2,
  Waypoint_WaypointSource_WAYPOINT_SOURCE_ALTERNATE_ROUTE_FINDING = 3,
  Waypoint_WaypointSource_Waypoint_WaypointSource_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Waypoint_WaypointSource_Waypoint_WaypointSource_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Waypoint_WaypointSource_IsValid(int value);
constexpr Waypoint_WaypointSource Waypoint_WaypointSource_WaypointSource_MIN = Waypoint_WaypointSource_WAYPOINT_SOURCE_UNKNOWN;
constexpr Waypoint_WaypointSource Waypoint_WaypointSource_WaypointSource_MAX = Waypoint_WaypointSource_WAYPOINT_SOURCE_ALTERNATE_ROUTE_FINDING;
constexpr int Waypoint_WaypointSource_WaypointSource_ARRAYSIZE = Waypoint_WaypointSource_WaypointSource_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Waypoint_WaypointSource_descriptor();
template<typename T>
inline const std::string& Waypoint_WaypointSource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Waypoint_WaypointSource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Waypoint_WaypointSource_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Waypoint_WaypointSource_descriptor(), enum_t_value);
}
inline bool Waypoint_WaypointSource_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Waypoint_WaypointSource* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Waypoint_WaypointSource>(
    Waypoint_WaypointSource_descriptor(), name, value);
}
enum Edge_Annotations_DirectionConstraint : int {
  Edge_Annotations_DirectionConstraint_DIRECTION_CONSTRAINT_UNKNOWN = 0,
  Edge_Annotations_DirectionConstraint_DIRECTION_CONSTRAINT_NO_TURN = 1,
  Edge_Annotations_DirectionConstraint_DIRECTION_CONSTRAINT_FORWARD = 2,
  Edge_Annotations_DirectionConstraint_DIRECTION_CONSTRAINT_REVERSE = 3,
  Edge_Annotations_DirectionConstraint_DIRECTION_CONSTRAINT_NONE = 4,
  Edge_Annotations_DirectionConstraint_Edge_Annotations_DirectionConstraint_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Edge_Annotations_DirectionConstraint_Edge_Annotations_DirectionConstraint_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Edge_Annotations_DirectionConstraint_IsValid(int value);
constexpr Edge_Annotations_DirectionConstraint Edge_Annotations_DirectionConstraint_DirectionConstraint_MIN = Edge_Annotations_DirectionConstraint_DIRECTION_CONSTRAINT_UNKNOWN;
constexpr Edge_Annotations_DirectionConstraint Edge_Annotations_DirectionConstraint_DirectionConstraint_MAX = Edge_Annotations_DirectionConstraint_DIRECTION_CONSTRAINT_NONE;
constexpr int Edge_Annotations_DirectionConstraint_DirectionConstraint_ARRAYSIZE = Edge_Annotations_DirectionConstraint_DirectionConstraint_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Edge_Annotations_DirectionConstraint_descriptor();
template<typename T>
inline const std::string& Edge_Annotations_DirectionConstraint_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Edge_Annotations_DirectionConstraint>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Edge_Annotations_DirectionConstraint_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Edge_Annotations_DirectionConstraint_descriptor(), enum_t_value);
}
inline bool Edge_Annotations_DirectionConstraint_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Edge_Annotations_DirectionConstraint* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Edge_Annotations_DirectionConstraint>(
    Edge_Annotations_DirectionConstraint_descriptor(), name, value);
}
enum Edge_Annotations_PathFollowingMode : int {
  Edge_Annotations_PathFollowingMode_PATH_MODE_UNKNOWN = 0,
  Edge_Annotations_PathFollowingMode_PATH_MODE_DEFAULT = 1,
  Edge_Annotations_PathFollowingMode_PATH_MODE_STRICT = 2,
  Edge_Annotations_PathFollowingMode_Edge_Annotations_PathFollowingMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Edge_Annotations_PathFollowingMode_Edge_Annotations_PathFollowingMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Edge_Annotations_PathFollowingMode_IsValid(int value);
constexpr Edge_Annotations_PathFollowingMode Edge_Annotations_PathFollowingMode_PathFollowingMode_MIN = Edge_Annotations_PathFollowingMode_PATH_MODE_UNKNOWN;
constexpr Edge_Annotations_PathFollowingMode Edge_Annotations_PathFollowingMode_PathFollowingMode_MAX = Edge_Annotations_PathFollowingMode_PATH_MODE_STRICT;
constexpr int Edge_Annotations_PathFollowingMode_PathFollowingMode_ARRAYSIZE = Edge_Annotations_PathFollowingMode_PathFollowingMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Edge_Annotations_PathFollowingMode_descriptor();
template<typename T>
inline const std::string& Edge_Annotations_PathFollowingMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Edge_Annotations_PathFollowingMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Edge_Annotations_PathFollowingMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Edge_Annotations_PathFollowingMode_descriptor(), enum_t_value);
}
inline bool Edge_Annotations_PathFollowingMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Edge_Annotations_PathFollowingMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Edge_Annotations_PathFollowingMode>(
    Edge_Annotations_PathFollowingMode_descriptor(), name, value);
}
enum Edge_Annotations_GroundClutterAvoidanceMode : int {
  Edge_Annotations_GroundClutterAvoidanceMode_GROUND_CLUTTER_UNKNOWN = 0,
  Edge_Annotations_GroundClutterAvoidanceMode_GROUND_CLUTTER_OFF = 1,
  Edge_Annotations_GroundClutterAvoidanceMode_GROUND_CLUTTER_FROM_FOOTFALLS = 2,
  Edge_Annotations_GroundClutterAvoidanceMode_Edge_Annotations_GroundClutterAvoidanceMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Edge_Annotations_GroundClutterAvoidanceMode_Edge_Annotations_GroundClutterAvoidanceMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Edge_Annotations_GroundClutterAvoidanceMode_IsValid(int value);
constexpr Edge_Annotations_GroundClutterAvoidanceMode Edge_Annotations_GroundClutterAvoidanceMode_GroundClutterAvoidanceMode_MIN = Edge_Annotations_GroundClutterAvoidanceMode_GROUND_CLUTTER_UNKNOWN;
constexpr Edge_Annotations_GroundClutterAvoidanceMode Edge_Annotations_GroundClutterAvoidanceMode_GroundClutterAvoidanceMode_MAX = Edge_Annotations_GroundClutterAvoidanceMode_GROUND_CLUTTER_FROM_FOOTFALLS;
constexpr int Edge_Annotations_GroundClutterAvoidanceMode_GroundClutterAvoidanceMode_ARRAYSIZE = Edge_Annotations_GroundClutterAvoidanceMode_GroundClutterAvoidanceMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Edge_Annotations_GroundClutterAvoidanceMode_descriptor();
template<typename T>
inline const std::string& Edge_Annotations_GroundClutterAvoidanceMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Edge_Annotations_GroundClutterAvoidanceMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Edge_Annotations_GroundClutterAvoidanceMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Edge_Annotations_GroundClutterAvoidanceMode_descriptor(), enum_t_value);
}
inline bool Edge_Annotations_GroundClutterAvoidanceMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Edge_Annotations_GroundClutterAvoidanceMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Edge_Annotations_GroundClutterAvoidanceMode>(
    Edge_Annotations_GroundClutterAvoidanceMode_descriptor(), name, value);
}
enum Edge_EdgeSource : int {
  Edge_EdgeSource_EDGE_SOURCE_UNKNOWN = 0,
  Edge_EdgeSource_EDGE_SOURCE_ODOMETRY = 1,
  Edge_EdgeSource_EDGE_SOURCE_SMALL_LOOP_CLOSURE = 2,
  Edge_EdgeSource_EDGE_SOURCE_FIDUCIAL_LOOP_CLOSURE = 3,
  Edge_EdgeSource_EDGE_SOURCE_ALTERNATE_ROUTE_FINDING = 4,
  Edge_EdgeSource_EDGE_SOURCE_USER_REQUEST = 5,
  Edge_EdgeSource_Edge_EdgeSource_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Edge_EdgeSource_Edge_EdgeSource_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Edge_EdgeSource_IsValid(int value);
constexpr Edge_EdgeSource Edge_EdgeSource_EdgeSource_MIN = Edge_EdgeSource_EDGE_SOURCE_UNKNOWN;
constexpr Edge_EdgeSource Edge_EdgeSource_EdgeSource_MAX = Edge_EdgeSource_EDGE_SOURCE_USER_REQUEST;
constexpr int Edge_EdgeSource_EdgeSource_ARRAYSIZE = Edge_EdgeSource_EdgeSource_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Edge_EdgeSource_descriptor();
template<typename T>
inline const std::string& Edge_EdgeSource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Edge_EdgeSource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Edge_EdgeSource_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Edge_EdgeSource_descriptor(), enum_t_value);
}
inline bool Edge_EdgeSource_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Edge_EdgeSource* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Edge_EdgeSource>(
    Edge_EdgeSource_descriptor(), name, value);
}
enum AnnotationState : int {
  ANNOTATION_STATE_UNKNOWN = 0,
  ANNOTATION_STATE_SET = 1,
  ANNOTATION_STATE_NONE = 2,
  AnnotationState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AnnotationState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AnnotationState_IsValid(int value);
constexpr AnnotationState AnnotationState_MIN = ANNOTATION_STATE_UNKNOWN;
constexpr AnnotationState AnnotationState_MAX = ANNOTATION_STATE_NONE;
constexpr int AnnotationState_ARRAYSIZE = AnnotationState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnnotationState_descriptor();
template<typename T>
inline const std::string& AnnotationState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AnnotationState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AnnotationState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AnnotationState_descriptor(), enum_t_value);
}
inline bool AnnotationState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AnnotationState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AnnotationState>(
    AnnotationState_descriptor(), name, value);
}
// ===================================================================

class Waypoint_Annotations_LocalizeRegion_Default final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Default) */ {
 public:
  inline Waypoint_Annotations_LocalizeRegion_Default() : Waypoint_Annotations_LocalizeRegion_Default(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Waypoint_Annotations_LocalizeRegion_Default(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Waypoint_Annotations_LocalizeRegion_Default(const Waypoint_Annotations_LocalizeRegion_Default& from);
  Waypoint_Annotations_LocalizeRegion_Default(Waypoint_Annotations_LocalizeRegion_Default&& from) noexcept
    : Waypoint_Annotations_LocalizeRegion_Default() {
    *this = ::std::move(from);
  }

  inline Waypoint_Annotations_LocalizeRegion_Default& operator=(const Waypoint_Annotations_LocalizeRegion_Default& from) {
    CopyFrom(from);
    return *this;
  }
  inline Waypoint_Annotations_LocalizeRegion_Default& operator=(Waypoint_Annotations_LocalizeRegion_Default&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Waypoint_Annotations_LocalizeRegion_Default& default_instance() {
    return *internal_default_instance();
  }
  static inline const Waypoint_Annotations_LocalizeRegion_Default* internal_default_instance() {
    return reinterpret_cast<const Waypoint_Annotations_LocalizeRegion_Default*>(
               &_Waypoint_Annotations_LocalizeRegion_Default_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Waypoint_Annotations_LocalizeRegion_Default& a, Waypoint_Annotations_LocalizeRegion_Default& b) {
    a.Swap(&b);
  }
  inline void Swap(Waypoint_Annotations_LocalizeRegion_Default* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Waypoint_Annotations_LocalizeRegion_Default* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Waypoint_Annotations_LocalizeRegion_Default* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Waypoint_Annotations_LocalizeRegion_Default>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Waypoint_Annotations_LocalizeRegion_Default& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Waypoint_Annotations_LocalizeRegion_Default& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Default";
  }
  protected:
  explicit Waypoint_Annotations_LocalizeRegion_Default(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Default)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class Waypoint_Annotations_LocalizeRegion_Empty final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Empty) */ {
 public:
  inline Waypoint_Annotations_LocalizeRegion_Empty() : Waypoint_Annotations_LocalizeRegion_Empty(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Waypoint_Annotations_LocalizeRegion_Empty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Waypoint_Annotations_LocalizeRegion_Empty(const Waypoint_Annotations_LocalizeRegion_Empty& from);
  Waypoint_Annotations_LocalizeRegion_Empty(Waypoint_Annotations_LocalizeRegion_Empty&& from) noexcept
    : Waypoint_Annotations_LocalizeRegion_Empty() {
    *this = ::std::move(from);
  }

  inline Waypoint_Annotations_LocalizeRegion_Empty& operator=(const Waypoint_Annotations_LocalizeRegion_Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Waypoint_Annotations_LocalizeRegion_Empty& operator=(Waypoint_Annotations_LocalizeRegion_Empty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Waypoint_Annotations_LocalizeRegion_Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Waypoint_Annotations_LocalizeRegion_Empty* internal_default_instance() {
    return reinterpret_cast<const Waypoint_Annotations_LocalizeRegion_Empty*>(
               &_Waypoint_Annotations_LocalizeRegion_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Waypoint_Annotations_LocalizeRegion_Empty& a, Waypoint_Annotations_LocalizeRegion_Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Waypoint_Annotations_LocalizeRegion_Empty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Waypoint_Annotations_LocalizeRegion_Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Waypoint_Annotations_LocalizeRegion_Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Waypoint_Annotations_LocalizeRegion_Empty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Waypoint_Annotations_LocalizeRegion_Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Waypoint_Annotations_LocalizeRegion_Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Empty";
  }
  protected:
  explicit Waypoint_Annotations_LocalizeRegion_Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class Waypoint_Annotations_LocalizeRegion_Circle2D final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Circle2D) */ {
 public:
  inline Waypoint_Annotations_LocalizeRegion_Circle2D() : Waypoint_Annotations_LocalizeRegion_Circle2D(nullptr) {}
  ~Waypoint_Annotations_LocalizeRegion_Circle2D() override;
  explicit PROTOBUF_CONSTEXPR Waypoint_Annotations_LocalizeRegion_Circle2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Waypoint_Annotations_LocalizeRegion_Circle2D(const Waypoint_Annotations_LocalizeRegion_Circle2D& from);
  Waypoint_Annotations_LocalizeRegion_Circle2D(Waypoint_Annotations_LocalizeRegion_Circle2D&& from) noexcept
    : Waypoint_Annotations_LocalizeRegion_Circle2D() {
    *this = ::std::move(from);
  }

  inline Waypoint_Annotations_LocalizeRegion_Circle2D& operator=(const Waypoint_Annotations_LocalizeRegion_Circle2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Waypoint_Annotations_LocalizeRegion_Circle2D& operator=(Waypoint_Annotations_LocalizeRegion_Circle2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Waypoint_Annotations_LocalizeRegion_Circle2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Waypoint_Annotations_LocalizeRegion_Circle2D* internal_default_instance() {
    return reinterpret_cast<const Waypoint_Annotations_LocalizeRegion_Circle2D*>(
               &_Waypoint_Annotations_LocalizeRegion_Circle2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Waypoint_Annotations_LocalizeRegion_Circle2D& a, Waypoint_Annotations_LocalizeRegion_Circle2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Waypoint_Annotations_LocalizeRegion_Circle2D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Waypoint_Annotations_LocalizeRegion_Circle2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Waypoint_Annotations_LocalizeRegion_Circle2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Waypoint_Annotations_LocalizeRegion_Circle2D>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Waypoint_Annotations_LocalizeRegion_Circle2D& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Waypoint_Annotations_LocalizeRegion_Circle2D& from) {
    Waypoint_Annotations_LocalizeRegion_Circle2D::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Waypoint_Annotations_LocalizeRegion_Circle2D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Circle2D";
  }
  protected:
  explicit Waypoint_Annotations_LocalizeRegion_Circle2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDist2DFieldNumber = 1,
  };
  // double dist_2d = 1;
  void clear_dist_2d();
  double dist_2d() const;
  void set_dist_2d(double value);
  private:
  double _internal_dist_2d() const;
  void _internal_set_dist_2d(double value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Circle2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double dist_2d_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class Waypoint_Annotations_LocalizeRegion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion) */ {
 public:
  inline Waypoint_Annotations_LocalizeRegion() : Waypoint_Annotations_LocalizeRegion(nullptr) {}
  ~Waypoint_Annotations_LocalizeRegion() override;
  explicit PROTOBUF_CONSTEXPR Waypoint_Annotations_LocalizeRegion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Waypoint_Annotations_LocalizeRegion(const Waypoint_Annotations_LocalizeRegion& from);
  Waypoint_Annotations_LocalizeRegion(Waypoint_Annotations_LocalizeRegion&& from) noexcept
    : Waypoint_Annotations_LocalizeRegion() {
    *this = ::std::move(from);
  }

  inline Waypoint_Annotations_LocalizeRegion& operator=(const Waypoint_Annotations_LocalizeRegion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Waypoint_Annotations_LocalizeRegion& operator=(Waypoint_Annotations_LocalizeRegion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Waypoint_Annotations_LocalizeRegion& default_instance() {
    return *internal_default_instance();
  }
  enum RegionCase {
    kDefaultRegion = 2,
    kEmpty = 3,
    kCircle = 4,
    REGION_NOT_SET = 0,
  };

  static inline const Waypoint_Annotations_LocalizeRegion* internal_default_instance() {
    return reinterpret_cast<const Waypoint_Annotations_LocalizeRegion*>(
               &_Waypoint_Annotations_LocalizeRegion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Waypoint_Annotations_LocalizeRegion& a, Waypoint_Annotations_LocalizeRegion& b) {
    a.Swap(&b);
  }
  inline void Swap(Waypoint_Annotations_LocalizeRegion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Waypoint_Annotations_LocalizeRegion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Waypoint_Annotations_LocalizeRegion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Waypoint_Annotations_LocalizeRegion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Waypoint_Annotations_LocalizeRegion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Waypoint_Annotations_LocalizeRegion& from) {
    Waypoint_Annotations_LocalizeRegion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Waypoint_Annotations_LocalizeRegion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion";
  }
  protected:
  explicit Waypoint_Annotations_LocalizeRegion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Waypoint_Annotations_LocalizeRegion_Default Default;
  typedef Waypoint_Annotations_LocalizeRegion_Empty Empty;
  typedef Waypoint_Annotations_LocalizeRegion_Circle2D Circle2D;

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kDefaultRegionFieldNumber = 2,
    kEmptyFieldNumber = 3,
    kCircleFieldNumber = 4,
  };
  // .bosdyn.api.graph_nav.AnnotationState state = 1;
  void clear_state();
  ::bosdyn::api::graph_nav::AnnotationState state() const;
  void set_state(::bosdyn::api::graph_nav::AnnotationState value);
  private:
  ::bosdyn::api::graph_nav::AnnotationState _internal_state() const;
  void _internal_set_state(::bosdyn::api::graph_nav::AnnotationState value);
  public:

  // .bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Default default_region = 2;
  bool has_default_region() const;
  private:
  bool _internal_has_default_region() const;
  public:
  void clear_default_region();
  const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default& default_region() const;
  PROTOBUF_NODISCARD ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default* release_default_region();
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default* mutable_default_region();
  void set_allocated_default_region(::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default* default_region);
  private:
  const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default& _internal_default_region() const;
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default* _internal_mutable_default_region();
  public:
  void unsafe_arena_set_allocated_default_region(
      ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default* default_region);
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default* unsafe_arena_release_default_region();

  // .bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Empty empty = 3;
  bool has_empty() const;
  private:
  bool _internal_has_empty() const;
  public:
  void clear_empty();
  const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty& empty() const;
  PROTOBUF_NODISCARD ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty* release_empty();
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty* mutable_empty();
  void set_allocated_empty(::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty* empty);
  private:
  const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty& _internal_empty() const;
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty* _internal_mutable_empty();
  public:
  void unsafe_arena_set_allocated_empty(
      ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty* empty);
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty* unsafe_arena_release_empty();

  // .bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Circle2D circle = 4;
  bool has_circle() const;
  private:
  bool _internal_has_circle() const;
  public:
  void clear_circle();
  const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D& circle() const;
  PROTOBUF_NODISCARD ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D* release_circle();
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D* mutable_circle();
  void set_allocated_circle(::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D* circle);
  private:
  const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D& _internal_circle() const;
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D* _internal_mutable_circle();
  public:
  void unsafe_arena_set_allocated_circle(
      ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D* circle);
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D* unsafe_arena_release_circle();

  void clear_region();
  RegionCase region_case() const;
  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion)
 private:
  class _Internal;
  void set_has_default_region();
  void set_has_empty();
  void set_has_circle();

  inline bool has_region() const;
  inline void clear_has_region();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int state_;
    union RegionUnion {
      constexpr RegionUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default* default_region_;
      ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty* empty_;
      ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D* circle_;
    } region_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class Waypoint_Annotations final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.Waypoint.Annotations) */ {
 public:
  inline Waypoint_Annotations() : Waypoint_Annotations(nullptr) {}
  ~Waypoint_Annotations() override;
  explicit PROTOBUF_CONSTEXPR Waypoint_Annotations(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Waypoint_Annotations(const Waypoint_Annotations& from);
  Waypoint_Annotations(Waypoint_Annotations&& from) noexcept
    : Waypoint_Annotations() {
    *this = ::std::move(from);
  }

  inline Waypoint_Annotations& operator=(const Waypoint_Annotations& from) {
    CopyFrom(from);
    return *this;
  }
  inline Waypoint_Annotations& operator=(Waypoint_Annotations&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Waypoint_Annotations& default_instance() {
    return *internal_default_instance();
  }
  static inline const Waypoint_Annotations* internal_default_instance() {
    return reinterpret_cast<const Waypoint_Annotations*>(
               &_Waypoint_Annotations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Waypoint_Annotations& a, Waypoint_Annotations& b) {
    a.Swap(&b);
  }
  inline void Swap(Waypoint_Annotations* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Waypoint_Annotations* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Waypoint_Annotations* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Waypoint_Annotations>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Waypoint_Annotations& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Waypoint_Annotations& from) {
    Waypoint_Annotations::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Waypoint_Annotations* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.Waypoint.Annotations";
  }
  protected:
  explicit Waypoint_Annotations(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Waypoint_Annotations_LocalizeRegion LocalizeRegion;

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIcpVarianceFieldNumber = 2,
    kScanMatchRegionFieldNumber = 3,
    kCreationTimeFieldNumber = 4,
    kClientMetadataFieldNumber = 6,
    kWaypointSourceFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .bosdyn.api.SE3Covariance icp_variance = 2;
  bool has_icp_variance() const;
  private:
  bool _internal_has_icp_variance() const;
  public:
  void clear_icp_variance();
  const ::bosdyn::api::SE3Covariance& icp_variance() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SE3Covariance* release_icp_variance();
  ::bosdyn::api::SE3Covariance* mutable_icp_variance();
  void set_allocated_icp_variance(::bosdyn::api::SE3Covariance* icp_variance);
  private:
  const ::bosdyn::api::SE3Covariance& _internal_icp_variance() const;
  ::bosdyn::api::SE3Covariance* _internal_mutable_icp_variance();
  public:
  void unsafe_arena_set_allocated_icp_variance(
      ::bosdyn::api::SE3Covariance* icp_variance);
  ::bosdyn::api::SE3Covariance* unsafe_arena_release_icp_variance();

  // .bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion scan_match_region = 3;
  bool has_scan_match_region() const;
  private:
  bool _internal_has_scan_match_region() const;
  public:
  void clear_scan_match_region();
  const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion& scan_match_region() const;
  PROTOBUF_NODISCARD ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* release_scan_match_region();
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* mutable_scan_match_region();
  void set_allocated_scan_match_region(::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* scan_match_region);
  private:
  const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion& _internal_scan_match_region() const;
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* _internal_mutable_scan_match_region();
  public:
  void unsafe_arena_set_allocated_scan_match_region(
      ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* scan_match_region);
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* unsafe_arena_release_scan_match_region();

  // .google.protobuf.Timestamp creation_time = 4;
  bool has_creation_time() const;
  private:
  bool _internal_has_creation_time() const;
  public:
  void clear_creation_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& creation_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_creation_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_creation_time();
  void set_allocated_creation_time(::PROTOBUF_NAMESPACE_ID::Timestamp* creation_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_creation_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_creation_time();
  public:
  void unsafe_arena_set_allocated_creation_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* creation_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_creation_time();

  // .bosdyn.api.graph_nav.ClientMetadata client_metadata = 6;
  bool has_client_metadata() const;
  private:
  bool _internal_has_client_metadata() const;
  public:
  void clear_client_metadata();
  const ::bosdyn::api::graph_nav::ClientMetadata& client_metadata() const;
  PROTOBUF_NODISCARD ::bosdyn::api::graph_nav::ClientMetadata* release_client_metadata();
  ::bosdyn::api::graph_nav::ClientMetadata* mutable_client_metadata();
  void set_allocated_client_metadata(::bosdyn::api::graph_nav::ClientMetadata* client_metadata);
  private:
  const ::bosdyn::api::graph_nav::ClientMetadata& _internal_client_metadata() const;
  ::bosdyn::api::graph_nav::ClientMetadata* _internal_mutable_client_metadata();
  public:
  void unsafe_arena_set_allocated_client_metadata(
      ::bosdyn::api::graph_nav::ClientMetadata* client_metadata);
  ::bosdyn::api::graph_nav::ClientMetadata* unsafe_arena_release_client_metadata();

  // .bosdyn.api.graph_nav.Waypoint.WaypointSource waypoint_source = 5;
  void clear_waypoint_source();
  ::bosdyn::api::graph_nav::Waypoint_WaypointSource waypoint_source() const;
  void set_waypoint_source(::bosdyn::api::graph_nav::Waypoint_WaypointSource value);
  private:
  ::bosdyn::api::graph_nav::Waypoint_WaypointSource _internal_waypoint_source() const;
  void _internal_set_waypoint_source(::bosdyn::api::graph_nav::Waypoint_WaypointSource value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.Waypoint.Annotations)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::bosdyn::api::SE3Covariance* icp_variance_;
    ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* scan_match_region_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* creation_time_;
    ::bosdyn::api::graph_nav::ClientMetadata* client_metadata_;
    int waypoint_source_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class Waypoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.Waypoint) */ {
 public:
  inline Waypoint() : Waypoint(nullptr) {}
  ~Waypoint() override;
  explicit PROTOBUF_CONSTEXPR Waypoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Waypoint(const Waypoint& from);
  Waypoint(Waypoint&& from) noexcept
    : Waypoint() {
    *this = ::std::move(from);
  }

  inline Waypoint& operator=(const Waypoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Waypoint& operator=(Waypoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Waypoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const Waypoint* internal_default_instance() {
    return reinterpret_cast<const Waypoint*>(
               &_Waypoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Waypoint& a, Waypoint& b) {
    a.Swap(&b);
  }
  inline void Swap(Waypoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Waypoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Waypoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Waypoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Waypoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Waypoint& from) {
    Waypoint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Waypoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.Waypoint";
  }
  protected:
  explicit Waypoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Waypoint_Annotations Annotations;

  typedef Waypoint_WaypointSource WaypointSource;
  static constexpr WaypointSource WAYPOINT_SOURCE_UNKNOWN =
    Waypoint_WaypointSource_WAYPOINT_SOURCE_UNKNOWN;
  static constexpr WaypointSource WAYPOINT_SOURCE_ROBOT_PATH =
    Waypoint_WaypointSource_WAYPOINT_SOURCE_ROBOT_PATH;
  static constexpr WaypointSource WAYPOINT_SOURCE_USER_REQUEST =
    Waypoint_WaypointSource_WAYPOINT_SOURCE_USER_REQUEST;
  static constexpr WaypointSource WAYPOINT_SOURCE_ALTERNATE_ROUTE_FINDING =
    Waypoint_WaypointSource_WAYPOINT_SOURCE_ALTERNATE_ROUTE_FINDING;
  static inline bool WaypointSource_IsValid(int value) {
    return Waypoint_WaypointSource_IsValid(value);
  }
  static constexpr WaypointSource WaypointSource_MIN =
    Waypoint_WaypointSource_WaypointSource_MIN;
  static constexpr WaypointSource WaypointSource_MAX =
    Waypoint_WaypointSource_WaypointSource_MAX;
  static constexpr int WaypointSource_ARRAYSIZE =
    Waypoint_WaypointSource_WaypointSource_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  WaypointSource_descriptor() {
    return Waypoint_WaypointSource_descriptor();
  }
  template<typename T>
  static inline const std::string& WaypointSource_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WaypointSource>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WaypointSource_Name.");
    return Waypoint_WaypointSource_Name(enum_t_value);
  }
  static inline bool WaypointSource_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WaypointSource* value) {
    return Waypoint_WaypointSource_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSnapshotIdFieldNumber = 2,
    kWaypointTformKoFieldNumber = 3,
    kAnnotationsFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string snapshot_id = 2;
  void clear_snapshot_id();
  const std::string& snapshot_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_snapshot_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_snapshot_id();
  PROTOBUF_NODISCARD std::string* release_snapshot_id();
  void set_allocated_snapshot_id(std::string* snapshot_id);
  private:
  const std::string& _internal_snapshot_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_snapshot_id(const std::string& value);
  std::string* _internal_mutable_snapshot_id();
  public:

  // .bosdyn.api.SE3Pose waypoint_tform_ko = 3;
  bool has_waypoint_tform_ko() const;
  private:
  bool _internal_has_waypoint_tform_ko() const;
  public:
  void clear_waypoint_tform_ko();
  const ::bosdyn::api::SE3Pose& waypoint_tform_ko() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SE3Pose* release_waypoint_tform_ko();
  ::bosdyn::api::SE3Pose* mutable_waypoint_tform_ko();
  void set_allocated_waypoint_tform_ko(::bosdyn::api::SE3Pose* waypoint_tform_ko);
  private:
  const ::bosdyn::api::SE3Pose& _internal_waypoint_tform_ko() const;
  ::bosdyn::api::SE3Pose* _internal_mutable_waypoint_tform_ko();
  public:
  void unsafe_arena_set_allocated_waypoint_tform_ko(
      ::bosdyn::api::SE3Pose* waypoint_tform_ko);
  ::bosdyn::api::SE3Pose* unsafe_arena_release_waypoint_tform_ko();

  // .bosdyn.api.graph_nav.Waypoint.Annotations annotations = 4;
  bool has_annotations() const;
  private:
  bool _internal_has_annotations() const;
  public:
  void clear_annotations();
  const ::bosdyn::api::graph_nav::Waypoint_Annotations& annotations() const;
  PROTOBUF_NODISCARD ::bosdyn::api::graph_nav::Waypoint_Annotations* release_annotations();
  ::bosdyn::api::graph_nav::Waypoint_Annotations* mutable_annotations();
  void set_allocated_annotations(::bosdyn::api::graph_nav::Waypoint_Annotations* annotations);
  private:
  const ::bosdyn::api::graph_nav::Waypoint_Annotations& _internal_annotations() const;
  ::bosdyn::api::graph_nav::Waypoint_Annotations* _internal_mutable_annotations();
  public:
  void unsafe_arena_set_allocated_annotations(
      ::bosdyn::api::graph_nav::Waypoint_Annotations* annotations);
  ::bosdyn::api::graph_nav::Waypoint_Annotations* unsafe_arena_release_annotations();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.Waypoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshot_id_;
    ::bosdyn::api::SE3Pose* waypoint_tform_ko_;
    ::bosdyn::api::graph_nav::Waypoint_Annotations* annotations_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class ClientMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.ClientMetadata) */ {
 public:
  inline ClientMetadata() : ClientMetadata(nullptr) {}
  ~ClientMetadata() override;
  explicit PROTOBUF_CONSTEXPR ClientMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientMetadata(const ClientMetadata& from);
  ClientMetadata(ClientMetadata&& from) noexcept
    : ClientMetadata() {
    *this = ::std::move(from);
  }

  inline ClientMetadata& operator=(const ClientMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMetadata& operator=(ClientMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientMetadata* internal_default_instance() {
    return reinterpret_cast<const ClientMetadata*>(
               &_ClientMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ClientMetadata& a, ClientMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientMetadata& from) {
    ClientMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.ClientMetadata";
  }
  protected:
  explicit ClientMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionNameFieldNumber = 1,
    kClientUsernameFieldNumber = 2,
    kClientSoftwareVersionFieldNumber = 3,
    kClientIdFieldNumber = 4,
    kClientTypeFieldNumber = 5,
  };
  // string session_name = 1;
  void clear_session_name();
  const std::string& session_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_name();
  PROTOBUF_NODISCARD std::string* release_session_name();
  void set_allocated_session_name(std::string* session_name);
  private:
  const std::string& _internal_session_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_name(const std::string& value);
  std::string* _internal_mutable_session_name();
  public:

  // string client_username = 2;
  void clear_client_username();
  const std::string& client_username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_username();
  PROTOBUF_NODISCARD std::string* release_client_username();
  void set_allocated_client_username(std::string* client_username);
  private:
  const std::string& _internal_client_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_username(const std::string& value);
  std::string* _internal_mutable_client_username();
  public:

  // string client_software_version = 3;
  void clear_client_software_version();
  const std::string& client_software_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_software_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_software_version();
  PROTOBUF_NODISCARD std::string* release_client_software_version();
  void set_allocated_client_software_version(std::string* client_software_version);
  private:
  const std::string& _internal_client_software_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_software_version(const std::string& value);
  std::string* _internal_mutable_client_software_version();
  public:

  // string client_id = 4;
  void clear_client_id();
  const std::string& client_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string client_type = 5;
  void clear_client_type();
  const std::string& client_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_type();
  PROTOBUF_NODISCARD std::string* release_client_type();
  void set_allocated_client_type(std::string* client_type);
  private:
  const std::string& _internal_client_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_type(const std::string& value);
  std::string* _internal_mutable_client_type();
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.ClientMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_software_version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class WaypointSnapshot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.WaypointSnapshot) */ {
 public:
  inline WaypointSnapshot() : WaypointSnapshot(nullptr) {}
  ~WaypointSnapshot() override;
  explicit PROTOBUF_CONSTEXPR WaypointSnapshot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WaypointSnapshot(const WaypointSnapshot& from);
  WaypointSnapshot(WaypointSnapshot&& from) noexcept
    : WaypointSnapshot() {
    *this = ::std::move(from);
  }

  inline WaypointSnapshot& operator=(const WaypointSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaypointSnapshot& operator=(WaypointSnapshot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WaypointSnapshot& default_instance() {
    return *internal_default_instance();
  }
  static inline const WaypointSnapshot* internal_default_instance() {
    return reinterpret_cast<const WaypointSnapshot*>(
               &_WaypointSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(WaypointSnapshot& a, WaypointSnapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(WaypointSnapshot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaypointSnapshot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WaypointSnapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WaypointSnapshot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WaypointSnapshot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WaypointSnapshot& from) {
    WaypointSnapshot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaypointSnapshot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.WaypointSnapshot";
  }
  protected:
  explicit WaypointSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagesFieldNumber = 2,
    kObjectsFieldNumber = 4,
    kRobotLocalGridsFieldNumber = 6,
    kPayloadsFieldNumber = 12,
    kIdFieldNumber = 1,
    kVersionIdFieldNumber = 9,
    kPointCloudFieldNumber = 3,
    kRobotStateFieldNumber = 5,
    kBodyTformRemotePointCloudSensorFieldNumber = 11,
    kRobotIdFieldNumber = 14,
    kRecordingStartedOnFieldNumber = 15,
    kIsPointCloudProcessedFieldNumber = 8,
    kHasRemotePointCloudSensorFieldNumber = 10,
  };
  // repeated .bosdyn.api.ImageResponse images = 2;
  int images_size() const;
  private:
  int _internal_images_size() const;
  public:
  void clear_images();
  ::bosdyn::api::ImageResponse* mutable_images(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::ImageResponse >*
      mutable_images();
  private:
  const ::bosdyn::api::ImageResponse& _internal_images(int index) const;
  ::bosdyn::api::ImageResponse* _internal_add_images();
  public:
  const ::bosdyn::api::ImageResponse& images(int index) const;
  ::bosdyn::api::ImageResponse* add_images();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::ImageResponse >&
      images() const;

  // repeated .bosdyn.api.WorldObject objects = 4;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::bosdyn::api::WorldObject* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::WorldObject >*
      mutable_objects();
  private:
  const ::bosdyn::api::WorldObject& _internal_objects(int index) const;
  ::bosdyn::api::WorldObject* _internal_add_objects();
  public:
  const ::bosdyn::api::WorldObject& objects(int index) const;
  ::bosdyn::api::WorldObject* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::WorldObject >&
      objects() const;

  // repeated .bosdyn.api.LocalGrid robot_local_grids = 6;
  int robot_local_grids_size() const;
  private:
  int _internal_robot_local_grids_size() const;
  public:
  void clear_robot_local_grids();
  ::bosdyn::api::LocalGrid* mutable_robot_local_grids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LocalGrid >*
      mutable_robot_local_grids();
  private:
  const ::bosdyn::api::LocalGrid& _internal_robot_local_grids(int index) const;
  ::bosdyn::api::LocalGrid* _internal_add_robot_local_grids();
  public:
  const ::bosdyn::api::LocalGrid& robot_local_grids(int index) const;
  ::bosdyn::api::LocalGrid* add_robot_local_grids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LocalGrid >&
      robot_local_grids() const;

  // repeated .bosdyn.api.Payload payloads = 12;
  int payloads_size() const;
  private:
  int _internal_payloads_size() const;
  public:
  void clear_payloads();
  ::bosdyn::api::Payload* mutable_payloads(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Payload >*
      mutable_payloads();
  private:
  const ::bosdyn::api::Payload& _internal_payloads(int index) const;
  ::bosdyn::api::Payload* _internal_add_payloads();
  public:
  const ::bosdyn::api::Payload& payloads(int index) const;
  ::bosdyn::api::Payload* add_payloads();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Payload >&
      payloads() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string version_id = 9;
  void clear_version_id();
  const std::string& version_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version_id();
  PROTOBUF_NODISCARD std::string* release_version_id();
  void set_allocated_version_id(std::string* version_id);
  private:
  const std::string& _internal_version_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version_id(const std::string& value);
  std::string* _internal_mutable_version_id();
  public:

  // .bosdyn.api.PointCloud point_cloud = 3;
  bool has_point_cloud() const;
  private:
  bool _internal_has_point_cloud() const;
  public:
  void clear_point_cloud();
  const ::bosdyn::api::PointCloud& point_cloud() const;
  PROTOBUF_NODISCARD ::bosdyn::api::PointCloud* release_point_cloud();
  ::bosdyn::api::PointCloud* mutable_point_cloud();
  void set_allocated_point_cloud(::bosdyn::api::PointCloud* point_cloud);
  private:
  const ::bosdyn::api::PointCloud& _internal_point_cloud() const;
  ::bosdyn::api::PointCloud* _internal_mutable_point_cloud();
  public:
  void unsafe_arena_set_allocated_point_cloud(
      ::bosdyn::api::PointCloud* point_cloud);
  ::bosdyn::api::PointCloud* unsafe_arena_release_point_cloud();

  // .bosdyn.api.RobotState robot_state = 5;
  bool has_robot_state() const;
  private:
  bool _internal_has_robot_state() const;
  public:
  void clear_robot_state();
  const ::bosdyn::api::RobotState& robot_state() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RobotState* release_robot_state();
  ::bosdyn::api::RobotState* mutable_robot_state();
  void set_allocated_robot_state(::bosdyn::api::RobotState* robot_state);
  private:
  const ::bosdyn::api::RobotState& _internal_robot_state() const;
  ::bosdyn::api::RobotState* _internal_mutable_robot_state();
  public:
  void unsafe_arena_set_allocated_robot_state(
      ::bosdyn::api::RobotState* robot_state);
  ::bosdyn::api::RobotState* unsafe_arena_release_robot_state();

  // .bosdyn.api.SE3Pose body_tform_remote_point_cloud_sensor = 11;
  bool has_body_tform_remote_point_cloud_sensor() const;
  private:
  bool _internal_has_body_tform_remote_point_cloud_sensor() const;
  public:
  void clear_body_tform_remote_point_cloud_sensor();
  const ::bosdyn::api::SE3Pose& body_tform_remote_point_cloud_sensor() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SE3Pose* release_body_tform_remote_point_cloud_sensor();
  ::bosdyn::api::SE3Pose* mutable_body_tform_remote_point_cloud_sensor();
  void set_allocated_body_tform_remote_point_cloud_sensor(::bosdyn::api::SE3Pose* body_tform_remote_point_cloud_sensor);
  private:
  const ::bosdyn::api::SE3Pose& _internal_body_tform_remote_point_cloud_sensor() const;
  ::bosdyn::api::SE3Pose* _internal_mutable_body_tform_remote_point_cloud_sensor();
  public:
  void unsafe_arena_set_allocated_body_tform_remote_point_cloud_sensor(
      ::bosdyn::api::SE3Pose* body_tform_remote_point_cloud_sensor);
  ::bosdyn::api::SE3Pose* unsafe_arena_release_body_tform_remote_point_cloud_sensor();

  // .bosdyn.api.RobotId robot_id = 14;
  bool has_robot_id() const;
  private:
  bool _internal_has_robot_id() const;
  public:
  void clear_robot_id();
  const ::bosdyn::api::RobotId& robot_id() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RobotId* release_robot_id();
  ::bosdyn::api::RobotId* mutable_robot_id();
  void set_allocated_robot_id(::bosdyn::api::RobotId* robot_id);
  private:
  const ::bosdyn::api::RobotId& _internal_robot_id() const;
  ::bosdyn::api::RobotId* _internal_mutable_robot_id();
  public:
  void unsafe_arena_set_allocated_robot_id(
      ::bosdyn::api::RobotId* robot_id);
  ::bosdyn::api::RobotId* unsafe_arena_release_robot_id();

  // .google.protobuf.Timestamp recording_started_on = 15;
  bool has_recording_started_on() const;
  private:
  bool _internal_has_recording_started_on() const;
  public:
  void clear_recording_started_on();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& recording_started_on() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_recording_started_on();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_recording_started_on();
  void set_allocated_recording_started_on(::PROTOBUF_NAMESPACE_ID::Timestamp* recording_started_on);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_recording_started_on() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_recording_started_on();
  public:
  void unsafe_arena_set_allocated_recording_started_on(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* recording_started_on);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_recording_started_on();

  // bool is_point_cloud_processed = 8;
  void clear_is_point_cloud_processed();
  bool is_point_cloud_processed() const;
  void set_is_point_cloud_processed(bool value);
  private:
  bool _internal_is_point_cloud_processed() const;
  void _internal_set_is_point_cloud_processed(bool value);
  public:

  // bool has_remote_point_cloud_sensor = 10;
  void clear_has_remote_point_cloud_sensor();
  bool has_remote_point_cloud_sensor() const;
  void set_has_remote_point_cloud_sensor(bool value);
  private:
  bool _internal_has_remote_point_cloud_sensor() const;
  void _internal_set_has_remote_point_cloud_sensor(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.WaypointSnapshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::ImageResponse > images_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::WorldObject > objects_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LocalGrid > robot_local_grids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Payload > payloads_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_id_;
    ::bosdyn::api::PointCloud* point_cloud_;
    ::bosdyn::api::RobotState* robot_state_;
    ::bosdyn::api::SE3Pose* body_tform_remote_point_cloud_sensor_;
    ::bosdyn::api::RobotId* robot_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* recording_started_on_;
    bool is_point_cloud_processed_;
    bool has_remote_point_cloud_sensor_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class Edge_Id final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.Edge.Id) */ {
 public:
  inline Edge_Id() : Edge_Id(nullptr) {}
  ~Edge_Id() override;
  explicit PROTOBUF_CONSTEXPR Edge_Id(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Edge_Id(const Edge_Id& from);
  Edge_Id(Edge_Id&& from) noexcept
    : Edge_Id() {
    *this = ::std::move(from);
  }

  inline Edge_Id& operator=(const Edge_Id& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge_Id& operator=(Edge_Id&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Edge_Id& default_instance() {
    return *internal_default_instance();
  }
  static inline const Edge_Id* internal_default_instance() {
    return reinterpret_cast<const Edge_Id*>(
               &_Edge_Id_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Edge_Id& a, Edge_Id& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge_Id* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Edge_Id* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Edge_Id* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Edge_Id>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Edge_Id& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Edge_Id& from) {
    Edge_Id::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge_Id* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.Edge.Id";
  }
  protected:
  explicit Edge_Id(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromWaypointFieldNumber = 1,
    kToWaypointFieldNumber = 2,
  };
  // string from_waypoint = 1;
  void clear_from_waypoint();
  const std::string& from_waypoint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from_waypoint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from_waypoint();
  PROTOBUF_NODISCARD std::string* release_from_waypoint();
  void set_allocated_from_waypoint(std::string* from_waypoint);
  private:
  const std::string& _internal_from_waypoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from_waypoint(const std::string& value);
  std::string* _internal_mutable_from_waypoint();
  public:

  // string to_waypoint = 2;
  void clear_to_waypoint();
  const std::string& to_waypoint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_waypoint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_waypoint();
  PROTOBUF_NODISCARD std::string* release_to_waypoint();
  void set_allocated_to_waypoint(std::string* to_waypoint);
  private:
  const std::string& _internal_to_waypoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_waypoint(const std::string& value);
  std::string* _internal_mutable_to_waypoint();
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.Edge.Id)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_waypoint_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_waypoint_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class Edge_Annotations_StairData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.Edge.Annotations.StairData) */ {
 public:
  inline Edge_Annotations_StairData() : Edge_Annotations_StairData(nullptr) {}
  ~Edge_Annotations_StairData() override;
  explicit PROTOBUF_CONSTEXPR Edge_Annotations_StairData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Edge_Annotations_StairData(const Edge_Annotations_StairData& from);
  Edge_Annotations_StairData(Edge_Annotations_StairData&& from) noexcept
    : Edge_Annotations_StairData() {
    *this = ::std::move(from);
  }

  inline Edge_Annotations_StairData& operator=(const Edge_Annotations_StairData& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge_Annotations_StairData& operator=(Edge_Annotations_StairData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Edge_Annotations_StairData& default_instance() {
    return *internal_default_instance();
  }
  static inline const Edge_Annotations_StairData* internal_default_instance() {
    return reinterpret_cast<const Edge_Annotations_StairData*>(
               &_Edge_Annotations_StairData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Edge_Annotations_StairData& a, Edge_Annotations_StairData& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge_Annotations_StairData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Edge_Annotations_StairData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Edge_Annotations_StairData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Edge_Annotations_StairData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Edge_Annotations_StairData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Edge_Annotations_StairData& from) {
    Edge_Annotations_StairData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge_Annotations_StairData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.Edge.Annotations.StairData";
  }
  protected:
  explicit Edge_Annotations_StairData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStraightStaircaseFieldNumber = 2,
    kStateFieldNumber = 1,
  };
  // .bosdyn.api.StraightStaircase straight_staircase = 2;
  bool has_straight_staircase() const;
  private:
  bool _internal_has_straight_staircase() const;
  public:
  void clear_straight_staircase();
  const ::bosdyn::api::StraightStaircase& straight_staircase() const;
  PROTOBUF_NODISCARD ::bosdyn::api::StraightStaircase* release_straight_staircase();
  ::bosdyn::api::StraightStaircase* mutable_straight_staircase();
  void set_allocated_straight_staircase(::bosdyn::api::StraightStaircase* straight_staircase);
  private:
  const ::bosdyn::api::StraightStaircase& _internal_straight_staircase() const;
  ::bosdyn::api::StraightStaircase* _internal_mutable_straight_staircase();
  public:
  void unsafe_arena_set_allocated_straight_staircase(
      ::bosdyn::api::StraightStaircase* straight_staircase);
  ::bosdyn::api::StraightStaircase* unsafe_arena_release_straight_staircase();

  // .bosdyn.api.graph_nav.AnnotationState state = 1;
  void clear_state();
  ::bosdyn::api::graph_nav::AnnotationState state() const;
  void set_state(::bosdyn::api::graph_nav::AnnotationState value);
  private:
  ::bosdyn::api::graph_nav::AnnotationState _internal_state() const;
  void _internal_set_state(::bosdyn::api::graph_nav::AnnotationState value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.Edge.Annotations.StairData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::StraightStaircase* straight_staircase_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class Edge_Annotations_AreaCallbacksEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Edge_Annotations_AreaCallbacksEntry_DoNotUse, 
    std::string, ::bosdyn::api::graph_nav::AreaCallbackRegion,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Edge_Annotations_AreaCallbacksEntry_DoNotUse, 
    std::string, ::bosdyn::api::graph_nav::AreaCallbackRegion,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Edge_Annotations_AreaCallbacksEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Edge_Annotations_AreaCallbacksEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Edge_Annotations_AreaCallbacksEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Edge_Annotations_AreaCallbacksEntry_DoNotUse& other);
  static const Edge_Annotations_AreaCallbacksEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Edge_Annotations_AreaCallbacksEntry_DoNotUse*>(&_Edge_Annotations_AreaCallbacksEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "bosdyn.api.graph_nav.Edge.Annotations.AreaCallbacksEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};

// -------------------------------------------------------------------

class Edge_Annotations final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.Edge.Annotations) */ {
 public:
  inline Edge_Annotations() : Edge_Annotations(nullptr) {}
  ~Edge_Annotations() override;
  explicit PROTOBUF_CONSTEXPR Edge_Annotations(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Edge_Annotations(const Edge_Annotations& from);
  Edge_Annotations(Edge_Annotations&& from) noexcept
    : Edge_Annotations() {
    *this = ::std::move(from);
  }

  inline Edge_Annotations& operator=(const Edge_Annotations& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge_Annotations& operator=(Edge_Annotations&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Edge_Annotations& default_instance() {
    return *internal_default_instance();
  }
  static inline const Edge_Annotations* internal_default_instance() {
    return reinterpret_cast<const Edge_Annotations*>(
               &_Edge_Annotations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Edge_Annotations& a, Edge_Annotations& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge_Annotations* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Edge_Annotations* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Edge_Annotations* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Edge_Annotations>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Edge_Annotations& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Edge_Annotations& from) {
    Edge_Annotations::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge_Annotations* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.Edge.Annotations";
  }
  protected:
  explicit Edge_Annotations(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Edge_Annotations_StairData StairData;

  typedef Edge_Annotations_DirectionConstraint DirectionConstraint;
  static constexpr DirectionConstraint DIRECTION_CONSTRAINT_UNKNOWN =
    Edge_Annotations_DirectionConstraint_DIRECTION_CONSTRAINT_UNKNOWN;
  static constexpr DirectionConstraint DIRECTION_CONSTRAINT_NO_TURN =
    Edge_Annotations_DirectionConstraint_DIRECTION_CONSTRAINT_NO_TURN;
  static constexpr DirectionConstraint DIRECTION_CONSTRAINT_FORWARD =
    Edge_Annotations_DirectionConstraint_DIRECTION_CONSTRAINT_FORWARD;
  static constexpr DirectionConstraint DIRECTION_CONSTRAINT_REVERSE =
    Edge_Annotations_DirectionConstraint_DIRECTION_CONSTRAINT_REVERSE;
  static constexpr DirectionConstraint DIRECTION_CONSTRAINT_NONE =
    Edge_Annotations_DirectionConstraint_DIRECTION_CONSTRAINT_NONE;
  static inline bool DirectionConstraint_IsValid(int value) {
    return Edge_Annotations_DirectionConstraint_IsValid(value);
  }
  static constexpr DirectionConstraint DirectionConstraint_MIN =
    Edge_Annotations_DirectionConstraint_DirectionConstraint_MIN;
  static constexpr DirectionConstraint DirectionConstraint_MAX =
    Edge_Annotations_DirectionConstraint_DirectionConstraint_MAX;
  static constexpr int DirectionConstraint_ARRAYSIZE =
    Edge_Annotations_DirectionConstraint_DirectionConstraint_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DirectionConstraint_descriptor() {
    return Edge_Annotations_DirectionConstraint_descriptor();
  }
  template<typename T>
  static inline const std::string& DirectionConstraint_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DirectionConstraint>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DirectionConstraint_Name.");
    return Edge_Annotations_DirectionConstraint_Name(enum_t_value);
  }
  static inline bool DirectionConstraint_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DirectionConstraint* value) {
    return Edge_Annotations_DirectionConstraint_Parse(name, value);
  }

  typedef Edge_Annotations_PathFollowingMode PathFollowingMode;
  static constexpr PathFollowingMode PATH_MODE_UNKNOWN =
    Edge_Annotations_PathFollowingMode_PATH_MODE_UNKNOWN;
  static constexpr PathFollowingMode PATH_MODE_DEFAULT =
    Edge_Annotations_PathFollowingMode_PATH_MODE_DEFAULT;
  static constexpr PathFollowingMode PATH_MODE_STRICT =
    Edge_Annotations_PathFollowingMode_PATH_MODE_STRICT;
  static inline bool PathFollowingMode_IsValid(int value) {
    return Edge_Annotations_PathFollowingMode_IsValid(value);
  }
  static constexpr PathFollowingMode PathFollowingMode_MIN =
    Edge_Annotations_PathFollowingMode_PathFollowingMode_MIN;
  static constexpr PathFollowingMode PathFollowingMode_MAX =
    Edge_Annotations_PathFollowingMode_PathFollowingMode_MAX;
  static constexpr int PathFollowingMode_ARRAYSIZE =
    Edge_Annotations_PathFollowingMode_PathFollowingMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PathFollowingMode_descriptor() {
    return Edge_Annotations_PathFollowingMode_descriptor();
  }
  template<typename T>
  static inline const std::string& PathFollowingMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PathFollowingMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PathFollowingMode_Name.");
    return Edge_Annotations_PathFollowingMode_Name(enum_t_value);
  }
  static inline bool PathFollowingMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PathFollowingMode* value) {
    return Edge_Annotations_PathFollowingMode_Parse(name, value);
  }

  typedef Edge_Annotations_GroundClutterAvoidanceMode GroundClutterAvoidanceMode;
  static constexpr GroundClutterAvoidanceMode GROUND_CLUTTER_UNKNOWN =
    Edge_Annotations_GroundClutterAvoidanceMode_GROUND_CLUTTER_UNKNOWN;
  static constexpr GroundClutterAvoidanceMode GROUND_CLUTTER_OFF =
    Edge_Annotations_GroundClutterAvoidanceMode_GROUND_CLUTTER_OFF;
  static constexpr GroundClutterAvoidanceMode GROUND_CLUTTER_FROM_FOOTFALLS =
    Edge_Annotations_GroundClutterAvoidanceMode_GROUND_CLUTTER_FROM_FOOTFALLS;
  static inline bool GroundClutterAvoidanceMode_IsValid(int value) {
    return Edge_Annotations_GroundClutterAvoidanceMode_IsValid(value);
  }
  static constexpr GroundClutterAvoidanceMode GroundClutterAvoidanceMode_MIN =
    Edge_Annotations_GroundClutterAvoidanceMode_GroundClutterAvoidanceMode_MIN;
  static constexpr GroundClutterAvoidanceMode GroundClutterAvoidanceMode_MAX =
    Edge_Annotations_GroundClutterAvoidanceMode_GroundClutterAvoidanceMode_MAX;
  static constexpr int GroundClutterAvoidanceMode_ARRAYSIZE =
    Edge_Annotations_GroundClutterAvoidanceMode_GroundClutterAvoidanceMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  GroundClutterAvoidanceMode_descriptor() {
    return Edge_Annotations_GroundClutterAvoidanceMode_descriptor();
  }
  template<typename T>
  static inline const std::string& GroundClutterAvoidanceMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GroundClutterAvoidanceMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GroundClutterAvoidanceMode_Name.");
    return Edge_Annotations_GroundClutterAvoidanceMode_Name(enum_t_value);
  }
  static inline bool GroundClutterAvoidanceMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      GroundClutterAvoidanceMode* value) {
    return Edge_Annotations_GroundClutterAvoidanceMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAreaCallbacksFieldNumber = 16,
    kVelLimitFieldNumber = 1,
    kStairsFieldNumber = 2,
    kRequireAlignmentFieldNumber = 5,
    kFlatGroundFieldNumber = 6,
    kGroundMuHintFieldNumber = 7,
    kGratedFloorFieldNumber = 8,
    kOverrideMobilityParamsFieldNumber = 9,
    kMobilityParamsFieldNumber = 10,
    kCostFieldNumber = 11,
    kDirectionConstraintFieldNumber = 4,
    kEdgeSourceFieldNumber = 12,
    kPathFollowingModeFieldNumber = 14,
    kDisableAlternateRouteFindingFieldNumber = 13,
    kDisableDirectedExplorationFieldNumber = 15,
    kGroundClutterModeFieldNumber = 17,
  };
  // map<string, .bosdyn.api.graph_nav.AreaCallbackRegion> area_callbacks = 16;
  int area_callbacks_size() const;
  private:
  int _internal_area_callbacks_size() const;
  public:
  void clear_area_callbacks();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::graph_nav::AreaCallbackRegion >&
      _internal_area_callbacks() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::graph_nav::AreaCallbackRegion >*
      _internal_mutable_area_callbacks();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::graph_nav::AreaCallbackRegion >&
      area_callbacks() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::graph_nav::AreaCallbackRegion >*
      mutable_area_callbacks();

  // .bosdyn.api.SE2VelocityLimit vel_limit = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_vel_limit() const;
  private:
  bool _internal_has_vel_limit() const;
  public:
  PROTOBUF_DEPRECATED void clear_vel_limit();
  PROTOBUF_DEPRECATED const ::bosdyn::api::SE2VelocityLimit& vel_limit() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::bosdyn::api::SE2VelocityLimit* release_vel_limit();
  PROTOBUF_DEPRECATED ::bosdyn::api::SE2VelocityLimit* mutable_vel_limit();
  PROTOBUF_DEPRECATED void set_allocated_vel_limit(::bosdyn::api::SE2VelocityLimit* vel_limit);
  private:
  const ::bosdyn::api::SE2VelocityLimit& _internal_vel_limit() const;
  ::bosdyn::api::SE2VelocityLimit* _internal_mutable_vel_limit();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_vel_limit(
      ::bosdyn::api::SE2VelocityLimit* vel_limit);
  PROTOBUF_DEPRECATED ::bosdyn::api::SE2VelocityLimit* unsafe_arena_release_vel_limit();

  // .bosdyn.api.graph_nav.Edge.Annotations.StairData stairs = 2;
  bool has_stairs() const;
  private:
  bool _internal_has_stairs() const;
  public:
  void clear_stairs();
  const ::bosdyn::api::graph_nav::Edge_Annotations_StairData& stairs() const;
  PROTOBUF_NODISCARD ::bosdyn::api::graph_nav::Edge_Annotations_StairData* release_stairs();
  ::bosdyn::api::graph_nav::Edge_Annotations_StairData* mutable_stairs();
  void set_allocated_stairs(::bosdyn::api::graph_nav::Edge_Annotations_StairData* stairs);
  private:
  const ::bosdyn::api::graph_nav::Edge_Annotations_StairData& _internal_stairs() const;
  ::bosdyn::api::graph_nav::Edge_Annotations_StairData* _internal_mutable_stairs();
  public:
  void unsafe_arena_set_allocated_stairs(
      ::bosdyn::api::graph_nav::Edge_Annotations_StairData* stairs);
  ::bosdyn::api::graph_nav::Edge_Annotations_StairData* unsafe_arena_release_stairs();

  // .google.protobuf.BoolValue require_alignment = 5;
  bool has_require_alignment() const;
  private:
  bool _internal_has_require_alignment() const;
  public:
  void clear_require_alignment();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& require_alignment() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_require_alignment();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_require_alignment();
  void set_allocated_require_alignment(::PROTOBUF_NAMESPACE_ID::BoolValue* require_alignment);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_require_alignment() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_require_alignment();
  public:
  void unsafe_arena_set_allocated_require_alignment(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* require_alignment);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_require_alignment();

  // .google.protobuf.BoolValue flat_ground = 6;
  bool has_flat_ground() const;
  private:
  bool _internal_has_flat_ground() const;
  public:
  void clear_flat_ground();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& flat_ground() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_flat_ground();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_flat_ground();
  void set_allocated_flat_ground(::PROTOBUF_NAMESPACE_ID::BoolValue* flat_ground);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_flat_ground() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_flat_ground();
  public:
  void unsafe_arena_set_allocated_flat_ground(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* flat_ground);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_flat_ground();

  // .google.protobuf.DoubleValue ground_mu_hint = 7 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_ground_mu_hint() const;
  private:
  bool _internal_has_ground_mu_hint() const;
  public:
  PROTOBUF_DEPRECATED void clear_ground_mu_hint();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ground_mu_hint() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_ground_mu_hint();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_ground_mu_hint();
  PROTOBUF_DEPRECATED void set_allocated_ground_mu_hint(::PROTOBUF_NAMESPACE_ID::DoubleValue* ground_mu_hint);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_ground_mu_hint() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_ground_mu_hint();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_ground_mu_hint(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* ground_mu_hint);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_ground_mu_hint();

  // .google.protobuf.BoolValue grated_floor = 8 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_grated_floor() const;
  private:
  bool _internal_has_grated_floor() const;
  public:
  PROTOBUF_DEPRECATED void clear_grated_floor();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::BoolValue& grated_floor() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::BoolValue* release_grated_floor();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_grated_floor();
  PROTOBUF_DEPRECATED void set_allocated_grated_floor(::PROTOBUF_NAMESPACE_ID::BoolValue* grated_floor);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_grated_floor() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_grated_floor();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_grated_floor(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* grated_floor);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_grated_floor();

  // .google.protobuf.FieldMask override_mobility_params = 9;
  bool has_override_mobility_params() const;
  private:
  bool _internal_has_override_mobility_params() const;
  public:
  void clear_override_mobility_params();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& override_mobility_params() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_override_mobility_params();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_override_mobility_params();
  void set_allocated_override_mobility_params(::PROTOBUF_NAMESPACE_ID::FieldMask* override_mobility_params);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_override_mobility_params() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_override_mobility_params();
  public:
  void unsafe_arena_set_allocated_override_mobility_params(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* override_mobility_params);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_override_mobility_params();

  // .bosdyn.api.spot.MobilityParams mobility_params = 10;
  bool has_mobility_params() const;
  private:
  bool _internal_has_mobility_params() const;
  public:
  void clear_mobility_params();
  const ::bosdyn::api::spot::MobilityParams& mobility_params() const;
  PROTOBUF_NODISCARD ::bosdyn::api::spot::MobilityParams* release_mobility_params();
  ::bosdyn::api::spot::MobilityParams* mutable_mobility_params();
  void set_allocated_mobility_params(::bosdyn::api::spot::MobilityParams* mobility_params);
  private:
  const ::bosdyn::api::spot::MobilityParams& _internal_mobility_params() const;
  ::bosdyn::api::spot::MobilityParams* _internal_mutable_mobility_params();
  public:
  void unsafe_arena_set_allocated_mobility_params(
      ::bosdyn::api::spot::MobilityParams* mobility_params);
  ::bosdyn::api::spot::MobilityParams* unsafe_arena_release_mobility_params();

  // .google.protobuf.DoubleValue cost = 11;
  bool has_cost() const;
  private:
  bool _internal_has_cost() const;
  public:
  void clear_cost();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& cost() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_cost();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_cost();
  void set_allocated_cost(::PROTOBUF_NAMESPACE_ID::DoubleValue* cost);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_cost() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_cost();
  public:
  void unsafe_arena_set_allocated_cost(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* cost);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_cost();

  // .bosdyn.api.graph_nav.Edge.Annotations.DirectionConstraint direction_constraint = 4;
  void clear_direction_constraint();
  ::bosdyn::api::graph_nav::Edge_Annotations_DirectionConstraint direction_constraint() const;
  void set_direction_constraint(::bosdyn::api::graph_nav::Edge_Annotations_DirectionConstraint value);
  private:
  ::bosdyn::api::graph_nav::Edge_Annotations_DirectionConstraint _internal_direction_constraint() const;
  void _internal_set_direction_constraint(::bosdyn::api::graph_nav::Edge_Annotations_DirectionConstraint value);
  public:

  // .bosdyn.api.graph_nav.Edge.EdgeSource edge_source = 12;
  void clear_edge_source();
  ::bosdyn::api::graph_nav::Edge_EdgeSource edge_source() const;
  void set_edge_source(::bosdyn::api::graph_nav::Edge_EdgeSource value);
  private:
  ::bosdyn::api::graph_nav::Edge_EdgeSource _internal_edge_source() const;
  void _internal_set_edge_source(::bosdyn::api::graph_nav::Edge_EdgeSource value);
  public:

  // .bosdyn.api.graph_nav.Edge.Annotations.PathFollowingMode path_following_mode = 14;
  void clear_path_following_mode();
  ::bosdyn::api::graph_nav::Edge_Annotations_PathFollowingMode path_following_mode() const;
  void set_path_following_mode(::bosdyn::api::graph_nav::Edge_Annotations_PathFollowingMode value);
  private:
  ::bosdyn::api::graph_nav::Edge_Annotations_PathFollowingMode _internal_path_following_mode() const;
  void _internal_set_path_following_mode(::bosdyn::api::graph_nav::Edge_Annotations_PathFollowingMode value);
  public:

  // bool disable_alternate_route_finding = 13;
  void clear_disable_alternate_route_finding();
  bool disable_alternate_route_finding() const;
  void set_disable_alternate_route_finding(bool value);
  private:
  bool _internal_disable_alternate_route_finding() const;
  void _internal_set_disable_alternate_route_finding(bool value);
  public:

  // bool disable_directed_exploration = 15;
  void clear_disable_directed_exploration();
  bool disable_directed_exploration() const;
  void set_disable_directed_exploration(bool value);
  private:
  bool _internal_disable_directed_exploration() const;
  void _internal_set_disable_directed_exploration(bool value);
  public:

  // .bosdyn.api.graph_nav.Edge.Annotations.GroundClutterAvoidanceMode ground_clutter_mode = 17;
  void clear_ground_clutter_mode();
  ::bosdyn::api::graph_nav::Edge_Annotations_GroundClutterAvoidanceMode ground_clutter_mode() const;
  void set_ground_clutter_mode(::bosdyn::api::graph_nav::Edge_Annotations_GroundClutterAvoidanceMode value);
  private:
  ::bosdyn::api::graph_nav::Edge_Annotations_GroundClutterAvoidanceMode _internal_ground_clutter_mode() const;
  void _internal_set_ground_clutter_mode(::bosdyn::api::graph_nav::Edge_Annotations_GroundClutterAvoidanceMode value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.Edge.Annotations)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Edge_Annotations_AreaCallbacksEntry_DoNotUse,
        std::string, ::bosdyn::api::graph_nav::AreaCallbackRegion,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> area_callbacks_;
    ::bosdyn::api::SE2VelocityLimit* vel_limit_;
    ::bosdyn::api::graph_nav::Edge_Annotations_StairData* stairs_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* require_alignment_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* flat_ground_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* ground_mu_hint_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* grated_floor_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* override_mobility_params_;
    ::bosdyn::api::spot::MobilityParams* mobility_params_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* cost_;
    int direction_constraint_;
    int edge_source_;
    int path_following_mode_;
    bool disable_alternate_route_finding_;
    bool disable_directed_exploration_;
    int ground_clutter_mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class Edge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.Edge) */ {
 public:
  inline Edge() : Edge(nullptr) {}
  ~Edge() override;
  explicit PROTOBUF_CONSTEXPR Edge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Edge(const Edge& from);
  Edge(Edge&& from) noexcept
    : Edge() {
    *this = ::std::move(from);
  }

  inline Edge& operator=(const Edge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge& operator=(Edge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Edge& default_instance() {
    return *internal_default_instance();
  }
  static inline const Edge* internal_default_instance() {
    return reinterpret_cast<const Edge*>(
               &_Edge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Edge& a, Edge& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Edge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Edge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Edge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Edge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Edge& from) {
    Edge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.Edge";
  }
  protected:
  explicit Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Edge_Id Id;
  typedef Edge_Annotations Annotations;

  typedef Edge_EdgeSource EdgeSource;
  static constexpr EdgeSource EDGE_SOURCE_UNKNOWN =
    Edge_EdgeSource_EDGE_SOURCE_UNKNOWN;
  static constexpr EdgeSource EDGE_SOURCE_ODOMETRY =
    Edge_EdgeSource_EDGE_SOURCE_ODOMETRY;
  static constexpr EdgeSource EDGE_SOURCE_SMALL_LOOP_CLOSURE =
    Edge_EdgeSource_EDGE_SOURCE_SMALL_LOOP_CLOSURE;
  static constexpr EdgeSource EDGE_SOURCE_FIDUCIAL_LOOP_CLOSURE =
    Edge_EdgeSource_EDGE_SOURCE_FIDUCIAL_LOOP_CLOSURE;
  static constexpr EdgeSource EDGE_SOURCE_ALTERNATE_ROUTE_FINDING =
    Edge_EdgeSource_EDGE_SOURCE_ALTERNATE_ROUTE_FINDING;
  static constexpr EdgeSource EDGE_SOURCE_USER_REQUEST =
    Edge_EdgeSource_EDGE_SOURCE_USER_REQUEST;
  static inline bool EdgeSource_IsValid(int value) {
    return Edge_EdgeSource_IsValid(value);
  }
  static constexpr EdgeSource EdgeSource_MIN =
    Edge_EdgeSource_EdgeSource_MIN;
  static constexpr EdgeSource EdgeSource_MAX =
    Edge_EdgeSource_EdgeSource_MAX;
  static constexpr int EdgeSource_ARRAYSIZE =
    Edge_EdgeSource_EdgeSource_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EdgeSource_descriptor() {
    return Edge_EdgeSource_descriptor();
  }
  template<typename T>
  static inline const std::string& EdgeSource_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EdgeSource>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EdgeSource_Name.");
    return Edge_EdgeSource_Name(enum_t_value);
  }
  static inline bool EdgeSource_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EdgeSource* value) {
    return Edge_EdgeSource_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotIdFieldNumber = 2,
    kIdFieldNumber = 1,
    kFromTformToFieldNumber = 3,
    kAnnotationsFieldNumber = 4,
  };
  // string snapshot_id = 2;
  void clear_snapshot_id();
  const std::string& snapshot_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_snapshot_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_snapshot_id();
  PROTOBUF_NODISCARD std::string* release_snapshot_id();
  void set_allocated_snapshot_id(std::string* snapshot_id);
  private:
  const std::string& _internal_snapshot_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_snapshot_id(const std::string& value);
  std::string* _internal_mutable_snapshot_id();
  public:

  // .bosdyn.api.graph_nav.Edge.Id id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::bosdyn::api::graph_nav::Edge_Id& id() const;
  PROTOBUF_NODISCARD ::bosdyn::api::graph_nav::Edge_Id* release_id();
  ::bosdyn::api::graph_nav::Edge_Id* mutable_id();
  void set_allocated_id(::bosdyn::api::graph_nav::Edge_Id* id);
  private:
  const ::bosdyn::api::graph_nav::Edge_Id& _internal_id() const;
  ::bosdyn::api::graph_nav::Edge_Id* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::bosdyn::api::graph_nav::Edge_Id* id);
  ::bosdyn::api::graph_nav::Edge_Id* unsafe_arena_release_id();

  // .bosdyn.api.SE3Pose from_tform_to = 3;
  bool has_from_tform_to() const;
  private:
  bool _internal_has_from_tform_to() const;
  public:
  void clear_from_tform_to();
  const ::bosdyn::api::SE3Pose& from_tform_to() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SE3Pose* release_from_tform_to();
  ::bosdyn::api::SE3Pose* mutable_from_tform_to();
  void set_allocated_from_tform_to(::bosdyn::api::SE3Pose* from_tform_to);
  private:
  const ::bosdyn::api::SE3Pose& _internal_from_tform_to() const;
  ::bosdyn::api::SE3Pose* _internal_mutable_from_tform_to();
  public:
  void unsafe_arena_set_allocated_from_tform_to(
      ::bosdyn::api::SE3Pose* from_tform_to);
  ::bosdyn::api::SE3Pose* unsafe_arena_release_from_tform_to();

  // .bosdyn.api.graph_nav.Edge.Annotations annotations = 4;
  bool has_annotations() const;
  private:
  bool _internal_has_annotations() const;
  public:
  void clear_annotations();
  const ::bosdyn::api::graph_nav::Edge_Annotations& annotations() const;
  PROTOBUF_NODISCARD ::bosdyn::api::graph_nav::Edge_Annotations* release_annotations();
  ::bosdyn::api::graph_nav::Edge_Annotations* mutable_annotations();
  void set_allocated_annotations(::bosdyn::api::graph_nav::Edge_Annotations* annotations);
  private:
  const ::bosdyn::api::graph_nav::Edge_Annotations& _internal_annotations() const;
  ::bosdyn::api::graph_nav::Edge_Annotations* _internal_mutable_annotations();
  public:
  void unsafe_arena_set_allocated_annotations(
      ::bosdyn::api::graph_nav::Edge_Annotations* annotations);
  ::bosdyn::api::graph_nav::Edge_Annotations* unsafe_arena_release_annotations();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.Edge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshot_id_;
    ::bosdyn::api::graph_nav::Edge_Id* id_;
    ::bosdyn::api::SE3Pose* from_tform_to_;
    ::bosdyn::api::graph_nav::Edge_Annotations* annotations_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class EdgeSnapshot_Stance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.EdgeSnapshot.Stance) */ {
 public:
  inline EdgeSnapshot_Stance() : EdgeSnapshot_Stance(nullptr) {}
  ~EdgeSnapshot_Stance() override;
  explicit PROTOBUF_CONSTEXPR EdgeSnapshot_Stance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EdgeSnapshot_Stance(const EdgeSnapshot_Stance& from);
  EdgeSnapshot_Stance(EdgeSnapshot_Stance&& from) noexcept
    : EdgeSnapshot_Stance() {
    *this = ::std::move(from);
  }

  inline EdgeSnapshot_Stance& operator=(const EdgeSnapshot_Stance& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeSnapshot_Stance& operator=(EdgeSnapshot_Stance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdgeSnapshot_Stance& default_instance() {
    return *internal_default_instance();
  }
  static inline const EdgeSnapshot_Stance* internal_default_instance() {
    return reinterpret_cast<const EdgeSnapshot_Stance*>(
               &_EdgeSnapshot_Stance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(EdgeSnapshot_Stance& a, EdgeSnapshot_Stance& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgeSnapshot_Stance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgeSnapshot_Stance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EdgeSnapshot_Stance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EdgeSnapshot_Stance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EdgeSnapshot_Stance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EdgeSnapshot_Stance& from) {
    EdgeSnapshot_Stance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeSnapshot_Stance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.EdgeSnapshot.Stance";
  }
  protected:
  explicit EdgeSnapshot_Stance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFootStatesFieldNumber = 2,
    kTimestampFieldNumber = 1,
    kKoTformBodyFieldNumber = 3,
    kPlanarGroundFieldNumber = 4,
    kVisionTformBodyFieldNumber = 5,
  };
  // repeated .bosdyn.api.FootState foot_states = 2;
  int foot_states_size() const;
  private:
  int _internal_foot_states_size() const;
  public:
  void clear_foot_states();
  ::bosdyn::api::FootState* mutable_foot_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::FootState >*
      mutable_foot_states();
  private:
  const ::bosdyn::api::FootState& _internal_foot_states(int index) const;
  ::bosdyn::api::FootState* _internal_add_foot_states();
  public:
  const ::bosdyn::api::FootState& foot_states(int index) const;
  ::bosdyn::api::FootState* add_foot_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::FootState >&
      foot_states() const;

  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .bosdyn.api.SE3Pose ko_tform_body = 3;
  bool has_ko_tform_body() const;
  private:
  bool _internal_has_ko_tform_body() const;
  public:
  void clear_ko_tform_body();
  const ::bosdyn::api::SE3Pose& ko_tform_body() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SE3Pose* release_ko_tform_body();
  ::bosdyn::api::SE3Pose* mutable_ko_tform_body();
  void set_allocated_ko_tform_body(::bosdyn::api::SE3Pose* ko_tform_body);
  private:
  const ::bosdyn::api::SE3Pose& _internal_ko_tform_body() const;
  ::bosdyn::api::SE3Pose* _internal_mutable_ko_tform_body();
  public:
  void unsafe_arena_set_allocated_ko_tform_body(
      ::bosdyn::api::SE3Pose* ko_tform_body);
  ::bosdyn::api::SE3Pose* unsafe_arena_release_ko_tform_body();

  // .google.protobuf.BoolValue planar_ground = 4;
  bool has_planar_ground() const;
  private:
  bool _internal_has_planar_ground() const;
  public:
  void clear_planar_ground();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& planar_ground() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_planar_ground();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_planar_ground();
  void set_allocated_planar_ground(::PROTOBUF_NAMESPACE_ID::BoolValue* planar_ground);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_planar_ground() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_planar_ground();
  public:
  void unsafe_arena_set_allocated_planar_ground(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* planar_ground);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_planar_ground();

  // .bosdyn.api.SE3Pose vision_tform_body = 5;
  bool has_vision_tform_body() const;
  private:
  bool _internal_has_vision_tform_body() const;
  public:
  void clear_vision_tform_body();
  const ::bosdyn::api::SE3Pose& vision_tform_body() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SE3Pose* release_vision_tform_body();
  ::bosdyn::api::SE3Pose* mutable_vision_tform_body();
  void set_allocated_vision_tform_body(::bosdyn::api::SE3Pose* vision_tform_body);
  private:
  const ::bosdyn::api::SE3Pose& _internal_vision_tform_body() const;
  ::bosdyn::api::SE3Pose* _internal_mutable_vision_tform_body();
  public:
  void unsafe_arena_set_allocated_vision_tform_body(
      ::bosdyn::api::SE3Pose* vision_tform_body);
  ::bosdyn::api::SE3Pose* unsafe_arena_release_vision_tform_body();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.EdgeSnapshot.Stance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::FootState > foot_states_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
    ::bosdyn::api::SE3Pose* ko_tform_body_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* planar_ground_;
    ::bosdyn::api::SE3Pose* vision_tform_body_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class EdgeSnapshot_AreaCallbacksEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<EdgeSnapshot_AreaCallbacksEntry_DoNotUse, 
    std::string, ::bosdyn::api::graph_nav::AreaCallbackData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<EdgeSnapshot_AreaCallbacksEntry_DoNotUse, 
    std::string, ::bosdyn::api::graph_nav::AreaCallbackData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  EdgeSnapshot_AreaCallbacksEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR EdgeSnapshot_AreaCallbacksEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit EdgeSnapshot_AreaCallbacksEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const EdgeSnapshot_AreaCallbacksEntry_DoNotUse& other);
  static const EdgeSnapshot_AreaCallbacksEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const EdgeSnapshot_AreaCallbacksEntry_DoNotUse*>(&_EdgeSnapshot_AreaCallbacksEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "bosdyn.api.graph_nav.EdgeSnapshot.AreaCallbacksEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};

// -------------------------------------------------------------------

class EdgeSnapshot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.EdgeSnapshot) */ {
 public:
  inline EdgeSnapshot() : EdgeSnapshot(nullptr) {}
  ~EdgeSnapshot() override;
  explicit PROTOBUF_CONSTEXPR EdgeSnapshot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EdgeSnapshot(const EdgeSnapshot& from);
  EdgeSnapshot(EdgeSnapshot&& from) noexcept
    : EdgeSnapshot() {
    *this = ::std::move(from);
  }

  inline EdgeSnapshot& operator=(const EdgeSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeSnapshot& operator=(EdgeSnapshot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdgeSnapshot& default_instance() {
    return *internal_default_instance();
  }
  static inline const EdgeSnapshot* internal_default_instance() {
    return reinterpret_cast<const EdgeSnapshot*>(
               &_EdgeSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(EdgeSnapshot& a, EdgeSnapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgeSnapshot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgeSnapshot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EdgeSnapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EdgeSnapshot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EdgeSnapshot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EdgeSnapshot& from) {
    EdgeSnapshot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeSnapshot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.EdgeSnapshot";
  }
  protected:
  explicit EdgeSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EdgeSnapshot_Stance Stance;

  // accessors -------------------------------------------------------

  enum : int {
    kStancesFieldNumber = 2,
    kAreaCallbacksFieldNumber = 16,
    kIdFieldNumber = 1,
  };
  // repeated .bosdyn.api.graph_nav.EdgeSnapshot.Stance stances = 2;
  int stances_size() const;
  private:
  int _internal_stances_size() const;
  public:
  void clear_stances();
  ::bosdyn::api::graph_nav::EdgeSnapshot_Stance* mutable_stances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::EdgeSnapshot_Stance >*
      mutable_stances();
  private:
  const ::bosdyn::api::graph_nav::EdgeSnapshot_Stance& _internal_stances(int index) const;
  ::bosdyn::api::graph_nav::EdgeSnapshot_Stance* _internal_add_stances();
  public:
  const ::bosdyn::api::graph_nav::EdgeSnapshot_Stance& stances(int index) const;
  ::bosdyn::api::graph_nav::EdgeSnapshot_Stance* add_stances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::EdgeSnapshot_Stance >&
      stances() const;

  // map<string, .bosdyn.api.graph_nav.AreaCallbackData> area_callbacks = 16;
  int area_callbacks_size() const;
  private:
  int _internal_area_callbacks_size() const;
  public:
  void clear_area_callbacks();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::graph_nav::AreaCallbackData >&
      _internal_area_callbacks() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::graph_nav::AreaCallbackData >*
      _internal_mutable_area_callbacks();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::graph_nav::AreaCallbackData >&
      area_callbacks() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::graph_nav::AreaCallbackData >*
      mutable_area_callbacks();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.EdgeSnapshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::EdgeSnapshot_Stance > stances_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        EdgeSnapshot_AreaCallbacksEntry_DoNotUse,
        std::string, ::bosdyn::api::graph_nav::AreaCallbackData,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> area_callbacks_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class Anchor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.Anchor) */ {
 public:
  inline Anchor() : Anchor(nullptr) {}
  ~Anchor() override;
  explicit PROTOBUF_CONSTEXPR Anchor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Anchor(const Anchor& from);
  Anchor(Anchor&& from) noexcept
    : Anchor() {
    *this = ::std::move(from);
  }

  inline Anchor& operator=(const Anchor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Anchor& operator=(Anchor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Anchor& default_instance() {
    return *internal_default_instance();
  }
  static inline const Anchor* internal_default_instance() {
    return reinterpret_cast<const Anchor*>(
               &_Anchor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Anchor& a, Anchor& b) {
    a.Swap(&b);
  }
  inline void Swap(Anchor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Anchor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Anchor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Anchor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Anchor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Anchor& from) {
    Anchor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Anchor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.Anchor";
  }
  protected:
  explicit Anchor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSeedTformWaypointFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .bosdyn.api.SE3Pose seed_tform_waypoint = 2;
  bool has_seed_tform_waypoint() const;
  private:
  bool _internal_has_seed_tform_waypoint() const;
  public:
  void clear_seed_tform_waypoint();
  const ::bosdyn::api::SE3Pose& seed_tform_waypoint() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SE3Pose* release_seed_tform_waypoint();
  ::bosdyn::api::SE3Pose* mutable_seed_tform_waypoint();
  void set_allocated_seed_tform_waypoint(::bosdyn::api::SE3Pose* seed_tform_waypoint);
  private:
  const ::bosdyn::api::SE3Pose& _internal_seed_tform_waypoint() const;
  ::bosdyn::api::SE3Pose* _internal_mutable_seed_tform_waypoint();
  public:
  void unsafe_arena_set_allocated_seed_tform_waypoint(
      ::bosdyn::api::SE3Pose* seed_tform_waypoint);
  ::bosdyn::api::SE3Pose* unsafe_arena_release_seed_tform_waypoint();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.Anchor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::bosdyn::api::SE3Pose* seed_tform_waypoint_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class AnchoredWorldObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.AnchoredWorldObject) */ {
 public:
  inline AnchoredWorldObject() : AnchoredWorldObject(nullptr) {}
  ~AnchoredWorldObject() override;
  explicit PROTOBUF_CONSTEXPR AnchoredWorldObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnchoredWorldObject(const AnchoredWorldObject& from);
  AnchoredWorldObject(AnchoredWorldObject&& from) noexcept
    : AnchoredWorldObject() {
    *this = ::std::move(from);
  }

  inline AnchoredWorldObject& operator=(const AnchoredWorldObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnchoredWorldObject& operator=(AnchoredWorldObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnchoredWorldObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnchoredWorldObject* internal_default_instance() {
    return reinterpret_cast<const AnchoredWorldObject*>(
               &_AnchoredWorldObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(AnchoredWorldObject& a, AnchoredWorldObject& b) {
    a.Swap(&b);
  }
  inline void Swap(AnchoredWorldObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnchoredWorldObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnchoredWorldObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnchoredWorldObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnchoredWorldObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AnchoredWorldObject& from) {
    AnchoredWorldObject::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnchoredWorldObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.AnchoredWorldObject";
  }
  protected:
  explicit AnchoredWorldObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSeedTformObjectFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .bosdyn.api.SE3Pose seed_tform_object = 2;
  bool has_seed_tform_object() const;
  private:
  bool _internal_has_seed_tform_object() const;
  public:
  void clear_seed_tform_object();
  const ::bosdyn::api::SE3Pose& seed_tform_object() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SE3Pose* release_seed_tform_object();
  ::bosdyn::api::SE3Pose* mutable_seed_tform_object();
  void set_allocated_seed_tform_object(::bosdyn::api::SE3Pose* seed_tform_object);
  private:
  const ::bosdyn::api::SE3Pose& _internal_seed_tform_object() const;
  ::bosdyn::api::SE3Pose* _internal_mutable_seed_tform_object();
  public:
  void unsafe_arena_set_allocated_seed_tform_object(
      ::bosdyn::api::SE3Pose* seed_tform_object);
  ::bosdyn::api::SE3Pose* unsafe_arena_release_seed_tform_object();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.AnchoredWorldObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::bosdyn::api::SE3Pose* seed_tform_object_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class Anchoring final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.Anchoring) */ {
 public:
  inline Anchoring() : Anchoring(nullptr) {}
  ~Anchoring() override;
  explicit PROTOBUF_CONSTEXPR Anchoring(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Anchoring(const Anchoring& from);
  Anchoring(Anchoring&& from) noexcept
    : Anchoring() {
    *this = ::std::move(from);
  }

  inline Anchoring& operator=(const Anchoring& from) {
    CopyFrom(from);
    return *this;
  }
  inline Anchoring& operator=(Anchoring&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Anchoring& default_instance() {
    return *internal_default_instance();
  }
  static inline const Anchoring* internal_default_instance() {
    return reinterpret_cast<const Anchoring*>(
               &_Anchoring_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Anchoring& a, Anchoring& b) {
    a.Swap(&b);
  }
  inline void Swap(Anchoring* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Anchoring* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Anchoring* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Anchoring>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Anchoring& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Anchoring& from) {
    Anchoring::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Anchoring* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.Anchoring";
  }
  protected:
  explicit Anchoring(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnchorsFieldNumber = 1,
    kObjectsFieldNumber = 2,
  };
  // repeated .bosdyn.api.graph_nav.Anchor anchors = 1;
  int anchors_size() const;
  private:
  int _internal_anchors_size() const;
  public:
  void clear_anchors();
  ::bosdyn::api::graph_nav::Anchor* mutable_anchors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Anchor >*
      mutable_anchors();
  private:
  const ::bosdyn::api::graph_nav::Anchor& _internal_anchors(int index) const;
  ::bosdyn::api::graph_nav::Anchor* _internal_add_anchors();
  public:
  const ::bosdyn::api::graph_nav::Anchor& anchors(int index) const;
  ::bosdyn::api::graph_nav::Anchor* add_anchors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Anchor >&
      anchors() const;

  // repeated .bosdyn.api.graph_nav.AnchoredWorldObject objects = 2;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::bosdyn::api::graph_nav::AnchoredWorldObject* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::AnchoredWorldObject >*
      mutable_objects();
  private:
  const ::bosdyn::api::graph_nav::AnchoredWorldObject& _internal_objects(int index) const;
  ::bosdyn::api::graph_nav::AnchoredWorldObject* _internal_add_objects();
  public:
  const ::bosdyn::api::graph_nav::AnchoredWorldObject& objects(int index) const;
  ::bosdyn::api::graph_nav::AnchoredWorldObject* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::AnchoredWorldObject >&
      objects() const;

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.Anchoring)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Anchor > anchors_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::AnchoredWorldObject > objects_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class AreaCallbackRegion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.AreaCallbackRegion) */ {
 public:
  inline AreaCallbackRegion() : AreaCallbackRegion(nullptr) {}
  ~AreaCallbackRegion() override;
  explicit PROTOBUF_CONSTEXPR AreaCallbackRegion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AreaCallbackRegion(const AreaCallbackRegion& from);
  AreaCallbackRegion(AreaCallbackRegion&& from) noexcept
    : AreaCallbackRegion() {
    *this = ::std::move(from);
  }

  inline AreaCallbackRegion& operator=(const AreaCallbackRegion& from) {
    CopyFrom(from);
    return *this;
  }
  inline AreaCallbackRegion& operator=(AreaCallbackRegion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AreaCallbackRegion& default_instance() {
    return *internal_default_instance();
  }
  static inline const AreaCallbackRegion* internal_default_instance() {
    return reinterpret_cast<const AreaCallbackRegion*>(
               &_AreaCallbackRegion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(AreaCallbackRegion& a, AreaCallbackRegion& b) {
    a.Swap(&b);
  }
  inline void Swap(AreaCallbackRegion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AreaCallbackRegion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AreaCallbackRegion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AreaCallbackRegion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AreaCallbackRegion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AreaCallbackRegion& from) {
    AreaCallbackRegion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AreaCallbackRegion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.AreaCallbackRegion";
  }
  protected:
  explicit AreaCallbackRegion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
    kDescriptionFieldNumber = 3,
  };
  // string service_name = 1;
  void clear_service_name();
  const std::string& service_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_name();
  PROTOBUF_NODISCARD std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.AreaCallbackRegion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class AreaCallbackData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.AreaCallbackData) */ {
 public:
  inline AreaCallbackData() : AreaCallbackData(nullptr) {}
  ~AreaCallbackData() override;
  explicit PROTOBUF_CONSTEXPR AreaCallbackData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AreaCallbackData(const AreaCallbackData& from);
  AreaCallbackData(AreaCallbackData&& from) noexcept
    : AreaCallbackData() {
    *this = ::std::move(from);
  }

  inline AreaCallbackData& operator=(const AreaCallbackData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AreaCallbackData& operator=(AreaCallbackData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AreaCallbackData& default_instance() {
    return *internal_default_instance();
  }
  static inline const AreaCallbackData* internal_default_instance() {
    return reinterpret_cast<const AreaCallbackData*>(
               &_AreaCallbackData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(AreaCallbackData& a, AreaCallbackData& b) {
    a.Swap(&b);
  }
  inline void Swap(AreaCallbackData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AreaCallbackData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AreaCallbackData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AreaCallbackData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AreaCallbackData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AreaCallbackData& from) {
    AreaCallbackData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AreaCallbackData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.AreaCallbackData";
  }
  protected:
  explicit AreaCallbackData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigDataFieldNumber = 1,
  };
  // .google.protobuf.Any config_data = 1;
  bool has_config_data() const;
  private:
  bool _internal_has_config_data() const;
  public:
  void clear_config_data();
  const ::PROTOBUF_NAMESPACE_ID::Any& config_data() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_config_data();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_config_data();
  void set_allocated_config_data(::PROTOBUF_NAMESPACE_ID::Any* config_data);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_config_data() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_config_data();
  public:
  void unsafe_arena_set_allocated_config_data(
      ::PROTOBUF_NAMESPACE_ID::Any* config_data);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_config_data();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.AreaCallbackData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Any* config_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class Graph final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.Graph) */ {
 public:
  inline Graph() : Graph(nullptr) {}
  ~Graph() override;
  explicit PROTOBUF_CONSTEXPR Graph(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Graph(const Graph& from);
  Graph(Graph&& from) noexcept
    : Graph() {
    *this = ::std::move(from);
  }

  inline Graph& operator=(const Graph& from) {
    CopyFrom(from);
    return *this;
  }
  inline Graph& operator=(Graph&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Graph& default_instance() {
    return *internal_default_instance();
  }
  static inline const Graph* internal_default_instance() {
    return reinterpret_cast<const Graph*>(
               &_Graph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Graph& a, Graph& b) {
    a.Swap(&b);
  }
  inline void Swap(Graph* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Graph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Graph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Graph>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Graph& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Graph& from) {
    Graph::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Graph* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.Graph";
  }
  protected:
  explicit Graph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWaypointsFieldNumber = 1,
    kEdgesFieldNumber = 2,
    kAnchoringFieldNumber = 3,
  };
  // repeated .bosdyn.api.graph_nav.Waypoint waypoints = 1;
  int waypoints_size() const;
  private:
  int _internal_waypoints_size() const;
  public:
  void clear_waypoints();
  ::bosdyn::api::graph_nav::Waypoint* mutable_waypoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Waypoint >*
      mutable_waypoints();
  private:
  const ::bosdyn::api::graph_nav::Waypoint& _internal_waypoints(int index) const;
  ::bosdyn::api::graph_nav::Waypoint* _internal_add_waypoints();
  public:
  const ::bosdyn::api::graph_nav::Waypoint& waypoints(int index) const;
  ::bosdyn::api::graph_nav::Waypoint* add_waypoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Waypoint >&
      waypoints() const;

  // repeated .bosdyn.api.graph_nav.Edge edges = 2;
  int edges_size() const;
  private:
  int _internal_edges_size() const;
  public:
  void clear_edges();
  ::bosdyn::api::graph_nav::Edge* mutable_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Edge >*
      mutable_edges();
  private:
  const ::bosdyn::api::graph_nav::Edge& _internal_edges(int index) const;
  ::bosdyn::api::graph_nav::Edge* _internal_add_edges();
  public:
  const ::bosdyn::api::graph_nav::Edge& edges(int index) const;
  ::bosdyn::api::graph_nav::Edge* add_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Edge >&
      edges() const;

  // .bosdyn.api.graph_nav.Anchoring anchoring = 3;
  bool has_anchoring() const;
  private:
  bool _internal_has_anchoring() const;
  public:
  void clear_anchoring();
  const ::bosdyn::api::graph_nav::Anchoring& anchoring() const;
  PROTOBUF_NODISCARD ::bosdyn::api::graph_nav::Anchoring* release_anchoring();
  ::bosdyn::api::graph_nav::Anchoring* mutable_anchoring();
  void set_allocated_anchoring(::bosdyn::api::graph_nav::Anchoring* anchoring);
  private:
  const ::bosdyn::api::graph_nav::Anchoring& _internal_anchoring() const;
  ::bosdyn::api::graph_nav::Anchoring* _internal_mutable_anchoring();
  public:
  void unsafe_arena_set_allocated_anchoring(
      ::bosdyn::api::graph_nav::Anchoring* anchoring);
  ::bosdyn::api::graph_nav::Anchoring* unsafe_arena_release_anchoring();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.Graph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Waypoint > waypoints_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Edge > edges_;
    ::bosdyn::api::graph_nav::Anchoring* anchoring_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Waypoint_Annotations_LocalizeRegion_Default

// -------------------------------------------------------------------

// Waypoint_Annotations_LocalizeRegion_Empty

// -------------------------------------------------------------------

// Waypoint_Annotations_LocalizeRegion_Circle2D

// double dist_2d = 1;
inline void Waypoint_Annotations_LocalizeRegion_Circle2D::clear_dist_2d() {
  _impl_.dist_2d_ = 0;
}
inline double Waypoint_Annotations_LocalizeRegion_Circle2D::_internal_dist_2d() const {
  return _impl_.dist_2d_;
}
inline double Waypoint_Annotations_LocalizeRegion_Circle2D::dist_2d() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Circle2D.dist_2d)
  return _internal_dist_2d();
}
inline void Waypoint_Annotations_LocalizeRegion_Circle2D::_internal_set_dist_2d(double value) {
  
  _impl_.dist_2d_ = value;
}
inline void Waypoint_Annotations_LocalizeRegion_Circle2D::set_dist_2d(double value) {
  _internal_set_dist_2d(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Circle2D.dist_2d)
}

// -------------------------------------------------------------------

// Waypoint_Annotations_LocalizeRegion

// .bosdyn.api.graph_nav.AnnotationState state = 1;
inline void Waypoint_Annotations_LocalizeRegion::clear_state() {
  _impl_.state_ = 0;
}
inline ::bosdyn::api::graph_nav::AnnotationState Waypoint_Annotations_LocalizeRegion::_internal_state() const {
  return static_cast< ::bosdyn::api::graph_nav::AnnotationState >(_impl_.state_);
}
inline ::bosdyn::api::graph_nav::AnnotationState Waypoint_Annotations_LocalizeRegion::state() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.state)
  return _internal_state();
}
inline void Waypoint_Annotations_LocalizeRegion::_internal_set_state(::bosdyn::api::graph_nav::AnnotationState value) {
  
  _impl_.state_ = value;
}
inline void Waypoint_Annotations_LocalizeRegion::set_state(::bosdyn::api::graph_nav::AnnotationState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.state)
}

// .bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Default default_region = 2;
inline bool Waypoint_Annotations_LocalizeRegion::_internal_has_default_region() const {
  return region_case() == kDefaultRegion;
}
inline bool Waypoint_Annotations_LocalizeRegion::has_default_region() const {
  return _internal_has_default_region();
}
inline void Waypoint_Annotations_LocalizeRegion::set_has_default_region() {
  _impl_._oneof_case_[0] = kDefaultRegion;
}
inline void Waypoint_Annotations_LocalizeRegion::clear_default_region() {
  if (_internal_has_default_region()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.region_.default_region_;
    }
    clear_has_region();
  }
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default* Waypoint_Annotations_LocalizeRegion::release_default_region() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.default_region)
  if (_internal_has_default_region()) {
    clear_has_region();
    ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default* temp = _impl_.region_.default_region_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.region_.default_region_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default& Waypoint_Annotations_LocalizeRegion::_internal_default_region() const {
  return _internal_has_default_region()
      ? *_impl_.region_.default_region_
      : reinterpret_cast< ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default&>(::bosdyn::api::graph_nav::_Waypoint_Annotations_LocalizeRegion_Default_default_instance_);
}
inline const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default& Waypoint_Annotations_LocalizeRegion::default_region() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.default_region)
  return _internal_default_region();
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default* Waypoint_Annotations_LocalizeRegion::unsafe_arena_release_default_region() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.default_region)
  if (_internal_has_default_region()) {
    clear_has_region();
    ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default* temp = _impl_.region_.default_region_;
    _impl_.region_.default_region_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Waypoint_Annotations_LocalizeRegion::unsafe_arena_set_allocated_default_region(::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default* default_region) {
  clear_region();
  if (default_region) {
    set_has_default_region();
    _impl_.region_.default_region_ = default_region;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.default_region)
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default* Waypoint_Annotations_LocalizeRegion::_internal_mutable_default_region() {
  if (!_internal_has_default_region()) {
    clear_region();
    set_has_default_region();
    _impl_.region_.default_region_ = CreateMaybeMessage< ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default >(GetArenaForAllocation());
  }
  return _impl_.region_.default_region_;
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default* Waypoint_Annotations_LocalizeRegion::mutable_default_region() {
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default* _msg = _internal_mutable_default_region();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.default_region)
  return _msg;
}

// .bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Empty empty = 3;
inline bool Waypoint_Annotations_LocalizeRegion::_internal_has_empty() const {
  return region_case() == kEmpty;
}
inline bool Waypoint_Annotations_LocalizeRegion::has_empty() const {
  return _internal_has_empty();
}
inline void Waypoint_Annotations_LocalizeRegion::set_has_empty() {
  _impl_._oneof_case_[0] = kEmpty;
}
inline void Waypoint_Annotations_LocalizeRegion::clear_empty() {
  if (_internal_has_empty()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.region_.empty_;
    }
    clear_has_region();
  }
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty* Waypoint_Annotations_LocalizeRegion::release_empty() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.empty)
  if (_internal_has_empty()) {
    clear_has_region();
    ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty* temp = _impl_.region_.empty_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.region_.empty_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty& Waypoint_Annotations_LocalizeRegion::_internal_empty() const {
  return _internal_has_empty()
      ? *_impl_.region_.empty_
      : reinterpret_cast< ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty&>(::bosdyn::api::graph_nav::_Waypoint_Annotations_LocalizeRegion_Empty_default_instance_);
}
inline const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty& Waypoint_Annotations_LocalizeRegion::empty() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.empty)
  return _internal_empty();
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty* Waypoint_Annotations_LocalizeRegion::unsafe_arena_release_empty() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.empty)
  if (_internal_has_empty()) {
    clear_has_region();
    ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty* temp = _impl_.region_.empty_;
    _impl_.region_.empty_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Waypoint_Annotations_LocalizeRegion::unsafe_arena_set_allocated_empty(::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty* empty) {
  clear_region();
  if (empty) {
    set_has_empty();
    _impl_.region_.empty_ = empty;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.empty)
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty* Waypoint_Annotations_LocalizeRegion::_internal_mutable_empty() {
  if (!_internal_has_empty()) {
    clear_region();
    set_has_empty();
    _impl_.region_.empty_ = CreateMaybeMessage< ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty >(GetArenaForAllocation());
  }
  return _impl_.region_.empty_;
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty* Waypoint_Annotations_LocalizeRegion::mutable_empty() {
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty* _msg = _internal_mutable_empty();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.empty)
  return _msg;
}

// .bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Circle2D circle = 4;
inline bool Waypoint_Annotations_LocalizeRegion::_internal_has_circle() const {
  return region_case() == kCircle;
}
inline bool Waypoint_Annotations_LocalizeRegion::has_circle() const {
  return _internal_has_circle();
}
inline void Waypoint_Annotations_LocalizeRegion::set_has_circle() {
  _impl_._oneof_case_[0] = kCircle;
}
inline void Waypoint_Annotations_LocalizeRegion::clear_circle() {
  if (_internal_has_circle()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.region_.circle_;
    }
    clear_has_region();
  }
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D* Waypoint_Annotations_LocalizeRegion::release_circle() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.circle)
  if (_internal_has_circle()) {
    clear_has_region();
    ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D* temp = _impl_.region_.circle_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.region_.circle_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D& Waypoint_Annotations_LocalizeRegion::_internal_circle() const {
  return _internal_has_circle()
      ? *_impl_.region_.circle_
      : reinterpret_cast< ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D&>(::bosdyn::api::graph_nav::_Waypoint_Annotations_LocalizeRegion_Circle2D_default_instance_);
}
inline const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D& Waypoint_Annotations_LocalizeRegion::circle() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.circle)
  return _internal_circle();
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D* Waypoint_Annotations_LocalizeRegion::unsafe_arena_release_circle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.circle)
  if (_internal_has_circle()) {
    clear_has_region();
    ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D* temp = _impl_.region_.circle_;
    _impl_.region_.circle_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Waypoint_Annotations_LocalizeRegion::unsafe_arena_set_allocated_circle(::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D* circle) {
  clear_region();
  if (circle) {
    set_has_circle();
    _impl_.region_.circle_ = circle;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.circle)
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D* Waypoint_Annotations_LocalizeRegion::_internal_mutable_circle() {
  if (!_internal_has_circle()) {
    clear_region();
    set_has_circle();
    _impl_.region_.circle_ = CreateMaybeMessage< ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D >(GetArenaForAllocation());
  }
  return _impl_.region_.circle_;
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D* Waypoint_Annotations_LocalizeRegion::mutable_circle() {
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D* _msg = _internal_mutable_circle();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.circle)
  return _msg;
}

inline bool Waypoint_Annotations_LocalizeRegion::has_region() const {
  return region_case() != REGION_NOT_SET;
}
inline void Waypoint_Annotations_LocalizeRegion::clear_has_region() {
  _impl_._oneof_case_[0] = REGION_NOT_SET;
}
inline Waypoint_Annotations_LocalizeRegion::RegionCase Waypoint_Annotations_LocalizeRegion::region_case() const {
  return Waypoint_Annotations_LocalizeRegion::RegionCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Waypoint_Annotations

// string name = 1;
inline void Waypoint_Annotations::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Waypoint_Annotations::name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Waypoint.Annotations.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Waypoint_Annotations::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.Waypoint.Annotations.name)
}
inline std::string* Waypoint_Annotations::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Waypoint.Annotations.name)
  return _s;
}
inline const std::string& Waypoint_Annotations::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Waypoint_Annotations::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Waypoint_Annotations::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Waypoint_Annotations::release_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Waypoint.Annotations.name)
  return _impl_.name_.Release();
}
inline void Waypoint_Annotations::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Waypoint.Annotations.name)
}

// .google.protobuf.Timestamp creation_time = 4;
inline bool Waypoint_Annotations::_internal_has_creation_time() const {
  return this != internal_default_instance() && _impl_.creation_time_ != nullptr;
}
inline bool Waypoint_Annotations::has_creation_time() const {
  return _internal_has_creation_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Waypoint_Annotations::_internal_creation_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.creation_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Waypoint_Annotations::creation_time() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Waypoint.Annotations.creation_time)
  return _internal_creation_time();
}
inline void Waypoint_Annotations::unsafe_arena_set_allocated_creation_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* creation_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.creation_time_);
  }
  _impl_.creation_time_ = creation_time;
  if (creation_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Waypoint.Annotations.creation_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Waypoint_Annotations::release_creation_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.creation_time_;
  _impl_.creation_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Waypoint_Annotations::unsafe_arena_release_creation_time() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Waypoint.Annotations.creation_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.creation_time_;
  _impl_.creation_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Waypoint_Annotations::_internal_mutable_creation_time() {
  
  if (_impl_.creation_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.creation_time_ = p;
  }
  return _impl_.creation_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Waypoint_Annotations::mutable_creation_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_creation_time();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Waypoint.Annotations.creation_time)
  return _msg;
}
inline void Waypoint_Annotations::set_allocated_creation_time(::PROTOBUF_NAMESPACE_ID::Timestamp* creation_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.creation_time_);
  }
  if (creation_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(creation_time));
    if (message_arena != submessage_arena) {
      creation_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, creation_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.creation_time_ = creation_time;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Waypoint.Annotations.creation_time)
}

// .bosdyn.api.SE3Covariance icp_variance = 2;
inline bool Waypoint_Annotations::_internal_has_icp_variance() const {
  return this != internal_default_instance() && _impl_.icp_variance_ != nullptr;
}
inline bool Waypoint_Annotations::has_icp_variance() const {
  return _internal_has_icp_variance();
}
inline const ::bosdyn::api::SE3Covariance& Waypoint_Annotations::_internal_icp_variance() const {
  const ::bosdyn::api::SE3Covariance* p = _impl_.icp_variance_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::SE3Covariance&>(
      ::bosdyn::api::_SE3Covariance_default_instance_);
}
inline const ::bosdyn::api::SE3Covariance& Waypoint_Annotations::icp_variance() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Waypoint.Annotations.icp_variance)
  return _internal_icp_variance();
}
inline void Waypoint_Annotations::unsafe_arena_set_allocated_icp_variance(
    ::bosdyn::api::SE3Covariance* icp_variance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.icp_variance_);
  }
  _impl_.icp_variance_ = icp_variance;
  if (icp_variance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Waypoint.Annotations.icp_variance)
}
inline ::bosdyn::api::SE3Covariance* Waypoint_Annotations::release_icp_variance() {
  
  ::bosdyn::api::SE3Covariance* temp = _impl_.icp_variance_;
  _impl_.icp_variance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::SE3Covariance* Waypoint_Annotations::unsafe_arena_release_icp_variance() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Waypoint.Annotations.icp_variance)
  
  ::bosdyn::api::SE3Covariance* temp = _impl_.icp_variance_;
  _impl_.icp_variance_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Covariance* Waypoint_Annotations::_internal_mutable_icp_variance() {
  
  if (_impl_.icp_variance_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Covariance>(GetArenaForAllocation());
    _impl_.icp_variance_ = p;
  }
  return _impl_.icp_variance_;
}
inline ::bosdyn::api::SE3Covariance* Waypoint_Annotations::mutable_icp_variance() {
  ::bosdyn::api::SE3Covariance* _msg = _internal_mutable_icp_variance();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Waypoint.Annotations.icp_variance)
  return _msg;
}
inline void Waypoint_Annotations::set_allocated_icp_variance(::bosdyn::api::SE3Covariance* icp_variance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.icp_variance_);
  }
  if (icp_variance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(icp_variance));
    if (message_arena != submessage_arena) {
      icp_variance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, icp_variance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.icp_variance_ = icp_variance;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Waypoint.Annotations.icp_variance)
}

// .bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion scan_match_region = 3;
inline bool Waypoint_Annotations::_internal_has_scan_match_region() const {
  return this != internal_default_instance() && _impl_.scan_match_region_ != nullptr;
}
inline bool Waypoint_Annotations::has_scan_match_region() const {
  return _internal_has_scan_match_region();
}
inline void Waypoint_Annotations::clear_scan_match_region() {
  if (GetArenaForAllocation() == nullptr && _impl_.scan_match_region_ != nullptr) {
    delete _impl_.scan_match_region_;
  }
  _impl_.scan_match_region_ = nullptr;
}
inline const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion& Waypoint_Annotations::_internal_scan_match_region() const {
  const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* p = _impl_.scan_match_region_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion&>(
      ::bosdyn::api::graph_nav::_Waypoint_Annotations_LocalizeRegion_default_instance_);
}
inline const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion& Waypoint_Annotations::scan_match_region() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Waypoint.Annotations.scan_match_region)
  return _internal_scan_match_region();
}
inline void Waypoint_Annotations::unsafe_arena_set_allocated_scan_match_region(
    ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* scan_match_region) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scan_match_region_);
  }
  _impl_.scan_match_region_ = scan_match_region;
  if (scan_match_region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Waypoint.Annotations.scan_match_region)
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* Waypoint_Annotations::release_scan_match_region() {
  
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* temp = _impl_.scan_match_region_;
  _impl_.scan_match_region_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* Waypoint_Annotations::unsafe_arena_release_scan_match_region() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Waypoint.Annotations.scan_match_region)
  
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* temp = _impl_.scan_match_region_;
  _impl_.scan_match_region_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* Waypoint_Annotations::_internal_mutable_scan_match_region() {
  
  if (_impl_.scan_match_region_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion>(GetArenaForAllocation());
    _impl_.scan_match_region_ = p;
  }
  return _impl_.scan_match_region_;
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* Waypoint_Annotations::mutable_scan_match_region() {
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* _msg = _internal_mutable_scan_match_region();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Waypoint.Annotations.scan_match_region)
  return _msg;
}
inline void Waypoint_Annotations::set_allocated_scan_match_region(::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* scan_match_region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.scan_match_region_;
  }
  if (scan_match_region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scan_match_region);
    if (message_arena != submessage_arena) {
      scan_match_region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scan_match_region, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scan_match_region_ = scan_match_region;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Waypoint.Annotations.scan_match_region)
}

// .bosdyn.api.graph_nav.Waypoint.WaypointSource waypoint_source = 5;
inline void Waypoint_Annotations::clear_waypoint_source() {
  _impl_.waypoint_source_ = 0;
}
inline ::bosdyn::api::graph_nav::Waypoint_WaypointSource Waypoint_Annotations::_internal_waypoint_source() const {
  return static_cast< ::bosdyn::api::graph_nav::Waypoint_WaypointSource >(_impl_.waypoint_source_);
}
inline ::bosdyn::api::graph_nav::Waypoint_WaypointSource Waypoint_Annotations::waypoint_source() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Waypoint.Annotations.waypoint_source)
  return _internal_waypoint_source();
}
inline void Waypoint_Annotations::_internal_set_waypoint_source(::bosdyn::api::graph_nav::Waypoint_WaypointSource value) {
  
  _impl_.waypoint_source_ = value;
}
inline void Waypoint_Annotations::set_waypoint_source(::bosdyn::api::graph_nav::Waypoint_WaypointSource value) {
  _internal_set_waypoint_source(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.Waypoint.Annotations.waypoint_source)
}

// .bosdyn.api.graph_nav.ClientMetadata client_metadata = 6;
inline bool Waypoint_Annotations::_internal_has_client_metadata() const {
  return this != internal_default_instance() && _impl_.client_metadata_ != nullptr;
}
inline bool Waypoint_Annotations::has_client_metadata() const {
  return _internal_has_client_metadata();
}
inline void Waypoint_Annotations::clear_client_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.client_metadata_ != nullptr) {
    delete _impl_.client_metadata_;
  }
  _impl_.client_metadata_ = nullptr;
}
inline const ::bosdyn::api::graph_nav::ClientMetadata& Waypoint_Annotations::_internal_client_metadata() const {
  const ::bosdyn::api::graph_nav::ClientMetadata* p = _impl_.client_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::graph_nav::ClientMetadata&>(
      ::bosdyn::api::graph_nav::_ClientMetadata_default_instance_);
}
inline const ::bosdyn::api::graph_nav::ClientMetadata& Waypoint_Annotations::client_metadata() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Waypoint.Annotations.client_metadata)
  return _internal_client_metadata();
}
inline void Waypoint_Annotations::unsafe_arena_set_allocated_client_metadata(
    ::bosdyn::api::graph_nav::ClientMetadata* client_metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_metadata_);
  }
  _impl_.client_metadata_ = client_metadata;
  if (client_metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Waypoint.Annotations.client_metadata)
}
inline ::bosdyn::api::graph_nav::ClientMetadata* Waypoint_Annotations::release_client_metadata() {
  
  ::bosdyn::api::graph_nav::ClientMetadata* temp = _impl_.client_metadata_;
  _impl_.client_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::graph_nav::ClientMetadata* Waypoint_Annotations::unsafe_arena_release_client_metadata() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Waypoint.Annotations.client_metadata)
  
  ::bosdyn::api::graph_nav::ClientMetadata* temp = _impl_.client_metadata_;
  _impl_.client_metadata_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::ClientMetadata* Waypoint_Annotations::_internal_mutable_client_metadata() {
  
  if (_impl_.client_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::ClientMetadata>(GetArenaForAllocation());
    _impl_.client_metadata_ = p;
  }
  return _impl_.client_metadata_;
}
inline ::bosdyn::api::graph_nav::ClientMetadata* Waypoint_Annotations::mutable_client_metadata() {
  ::bosdyn::api::graph_nav::ClientMetadata* _msg = _internal_mutable_client_metadata();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Waypoint.Annotations.client_metadata)
  return _msg;
}
inline void Waypoint_Annotations::set_allocated_client_metadata(::bosdyn::api::graph_nav::ClientMetadata* client_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.client_metadata_;
  }
  if (client_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(client_metadata);
    if (message_arena != submessage_arena) {
      client_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_metadata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.client_metadata_ = client_metadata;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Waypoint.Annotations.client_metadata)
}

// -------------------------------------------------------------------

// Waypoint

// string id = 1;
inline void Waypoint::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Waypoint::id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Waypoint.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Waypoint::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.Waypoint.id)
}
inline std::string* Waypoint::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Waypoint.id)
  return _s;
}
inline const std::string& Waypoint::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Waypoint::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Waypoint::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* Waypoint::release_id() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Waypoint.id)
  return _impl_.id_.Release();
}
inline void Waypoint::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Waypoint.id)
}

// string snapshot_id = 2;
inline void Waypoint::clear_snapshot_id() {
  _impl_.snapshot_id_.ClearToEmpty();
}
inline const std::string& Waypoint::snapshot_id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Waypoint.snapshot_id)
  return _internal_snapshot_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Waypoint::set_snapshot_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.snapshot_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.Waypoint.snapshot_id)
}
inline std::string* Waypoint::mutable_snapshot_id() {
  std::string* _s = _internal_mutable_snapshot_id();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Waypoint.snapshot_id)
  return _s;
}
inline const std::string& Waypoint::_internal_snapshot_id() const {
  return _impl_.snapshot_id_.Get();
}
inline void Waypoint::_internal_set_snapshot_id(const std::string& value) {
  
  _impl_.snapshot_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Waypoint::_internal_mutable_snapshot_id() {
  
  return _impl_.snapshot_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Waypoint::release_snapshot_id() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Waypoint.snapshot_id)
  return _impl_.snapshot_id_.Release();
}
inline void Waypoint::set_allocated_snapshot_id(std::string* snapshot_id) {
  if (snapshot_id != nullptr) {
    
  } else {
    
  }
  _impl_.snapshot_id_.SetAllocated(snapshot_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.snapshot_id_.IsDefault()) {
    _impl_.snapshot_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Waypoint.snapshot_id)
}

// .bosdyn.api.SE3Pose waypoint_tform_ko = 3;
inline bool Waypoint::_internal_has_waypoint_tform_ko() const {
  return this != internal_default_instance() && _impl_.waypoint_tform_ko_ != nullptr;
}
inline bool Waypoint::has_waypoint_tform_ko() const {
  return _internal_has_waypoint_tform_ko();
}
inline const ::bosdyn::api::SE3Pose& Waypoint::_internal_waypoint_tform_ko() const {
  const ::bosdyn::api::SE3Pose* p = _impl_.waypoint_tform_ko_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::SE3Pose&>(
      ::bosdyn::api::_SE3Pose_default_instance_);
}
inline const ::bosdyn::api::SE3Pose& Waypoint::waypoint_tform_ko() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Waypoint.waypoint_tform_ko)
  return _internal_waypoint_tform_ko();
}
inline void Waypoint::unsafe_arena_set_allocated_waypoint_tform_ko(
    ::bosdyn::api::SE3Pose* waypoint_tform_ko) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.waypoint_tform_ko_);
  }
  _impl_.waypoint_tform_ko_ = waypoint_tform_ko;
  if (waypoint_tform_ko) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Waypoint.waypoint_tform_ko)
}
inline ::bosdyn::api::SE3Pose* Waypoint::release_waypoint_tform_ko() {
  
  ::bosdyn::api::SE3Pose* temp = _impl_.waypoint_tform_ko_;
  _impl_.waypoint_tform_ko_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::SE3Pose* Waypoint::unsafe_arena_release_waypoint_tform_ko() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Waypoint.waypoint_tform_ko)
  
  ::bosdyn::api::SE3Pose* temp = _impl_.waypoint_tform_ko_;
  _impl_.waypoint_tform_ko_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Pose* Waypoint::_internal_mutable_waypoint_tform_ko() {
  
  if (_impl_.waypoint_tform_ko_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Pose>(GetArenaForAllocation());
    _impl_.waypoint_tform_ko_ = p;
  }
  return _impl_.waypoint_tform_ko_;
}
inline ::bosdyn::api::SE3Pose* Waypoint::mutable_waypoint_tform_ko() {
  ::bosdyn::api::SE3Pose* _msg = _internal_mutable_waypoint_tform_ko();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Waypoint.waypoint_tform_ko)
  return _msg;
}
inline void Waypoint::set_allocated_waypoint_tform_ko(::bosdyn::api::SE3Pose* waypoint_tform_ko) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.waypoint_tform_ko_);
  }
  if (waypoint_tform_ko) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(waypoint_tform_ko));
    if (message_arena != submessage_arena) {
      waypoint_tform_ko = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, waypoint_tform_ko, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.waypoint_tform_ko_ = waypoint_tform_ko;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Waypoint.waypoint_tform_ko)
}

// .bosdyn.api.graph_nav.Waypoint.Annotations annotations = 4;
inline bool Waypoint::_internal_has_annotations() const {
  return this != internal_default_instance() && _impl_.annotations_ != nullptr;
}
inline bool Waypoint::has_annotations() const {
  return _internal_has_annotations();
}
inline void Waypoint::clear_annotations() {
  if (GetArenaForAllocation() == nullptr && _impl_.annotations_ != nullptr) {
    delete _impl_.annotations_;
  }
  _impl_.annotations_ = nullptr;
}
inline const ::bosdyn::api::graph_nav::Waypoint_Annotations& Waypoint::_internal_annotations() const {
  const ::bosdyn::api::graph_nav::Waypoint_Annotations* p = _impl_.annotations_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::graph_nav::Waypoint_Annotations&>(
      ::bosdyn::api::graph_nav::_Waypoint_Annotations_default_instance_);
}
inline const ::bosdyn::api::graph_nav::Waypoint_Annotations& Waypoint::annotations() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Waypoint.annotations)
  return _internal_annotations();
}
inline void Waypoint::unsafe_arena_set_allocated_annotations(
    ::bosdyn::api::graph_nav::Waypoint_Annotations* annotations) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.annotations_);
  }
  _impl_.annotations_ = annotations;
  if (annotations) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Waypoint.annotations)
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations* Waypoint::release_annotations() {
  
  ::bosdyn::api::graph_nav::Waypoint_Annotations* temp = _impl_.annotations_;
  _impl_.annotations_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations* Waypoint::unsafe_arena_release_annotations() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Waypoint.annotations)
  
  ::bosdyn::api::graph_nav::Waypoint_Annotations* temp = _impl_.annotations_;
  _impl_.annotations_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations* Waypoint::_internal_mutable_annotations() {
  
  if (_impl_.annotations_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::Waypoint_Annotations>(GetArenaForAllocation());
    _impl_.annotations_ = p;
  }
  return _impl_.annotations_;
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations* Waypoint::mutable_annotations() {
  ::bosdyn::api::graph_nav::Waypoint_Annotations* _msg = _internal_mutable_annotations();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Waypoint.annotations)
  return _msg;
}
inline void Waypoint::set_allocated_annotations(::bosdyn::api::graph_nav::Waypoint_Annotations* annotations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.annotations_;
  }
  if (annotations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(annotations);
    if (message_arena != submessage_arena) {
      annotations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotations, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.annotations_ = annotations;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Waypoint.annotations)
}

// -------------------------------------------------------------------

// ClientMetadata

// string session_name = 1;
inline void ClientMetadata::clear_session_name() {
  _impl_.session_name_.ClearToEmpty();
}
inline const std::string& ClientMetadata::session_name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ClientMetadata.session_name)
  return _internal_session_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientMetadata::set_session_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.session_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ClientMetadata.session_name)
}
inline std::string* ClientMetadata::mutable_session_name() {
  std::string* _s = _internal_mutable_session_name();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ClientMetadata.session_name)
  return _s;
}
inline const std::string& ClientMetadata::_internal_session_name() const {
  return _impl_.session_name_.Get();
}
inline void ClientMetadata::_internal_set_session_name(const std::string& value) {
  
  _impl_.session_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientMetadata::_internal_mutable_session_name() {
  
  return _impl_.session_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientMetadata::release_session_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ClientMetadata.session_name)
  return _impl_.session_name_.Release();
}
inline void ClientMetadata::set_allocated_session_name(std::string* session_name) {
  if (session_name != nullptr) {
    
  } else {
    
  }
  _impl_.session_name_.SetAllocated(session_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.session_name_.IsDefault()) {
    _impl_.session_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ClientMetadata.session_name)
}

// string client_username = 2;
inline void ClientMetadata::clear_client_username() {
  _impl_.client_username_.ClearToEmpty();
}
inline const std::string& ClientMetadata::client_username() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ClientMetadata.client_username)
  return _internal_client_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientMetadata::set_client_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ClientMetadata.client_username)
}
inline std::string* ClientMetadata::mutable_client_username() {
  std::string* _s = _internal_mutable_client_username();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ClientMetadata.client_username)
  return _s;
}
inline const std::string& ClientMetadata::_internal_client_username() const {
  return _impl_.client_username_.Get();
}
inline void ClientMetadata::_internal_set_client_username(const std::string& value) {
  
  _impl_.client_username_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientMetadata::_internal_mutable_client_username() {
  
  return _impl_.client_username_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientMetadata::release_client_username() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ClientMetadata.client_username)
  return _impl_.client_username_.Release();
}
inline void ClientMetadata::set_allocated_client_username(std::string* client_username) {
  if (client_username != nullptr) {
    
  } else {
    
  }
  _impl_.client_username_.SetAllocated(client_username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_username_.IsDefault()) {
    _impl_.client_username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ClientMetadata.client_username)
}

// string client_software_version = 3;
inline void ClientMetadata::clear_client_software_version() {
  _impl_.client_software_version_.ClearToEmpty();
}
inline const std::string& ClientMetadata::client_software_version() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ClientMetadata.client_software_version)
  return _internal_client_software_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientMetadata::set_client_software_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_software_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ClientMetadata.client_software_version)
}
inline std::string* ClientMetadata::mutable_client_software_version() {
  std::string* _s = _internal_mutable_client_software_version();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ClientMetadata.client_software_version)
  return _s;
}
inline const std::string& ClientMetadata::_internal_client_software_version() const {
  return _impl_.client_software_version_.Get();
}
inline void ClientMetadata::_internal_set_client_software_version(const std::string& value) {
  
  _impl_.client_software_version_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientMetadata::_internal_mutable_client_software_version() {
  
  return _impl_.client_software_version_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientMetadata::release_client_software_version() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ClientMetadata.client_software_version)
  return _impl_.client_software_version_.Release();
}
inline void ClientMetadata::set_allocated_client_software_version(std::string* client_software_version) {
  if (client_software_version != nullptr) {
    
  } else {
    
  }
  _impl_.client_software_version_.SetAllocated(client_software_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_software_version_.IsDefault()) {
    _impl_.client_software_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ClientMetadata.client_software_version)
}

// string client_id = 4;
inline void ClientMetadata::clear_client_id() {
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& ClientMetadata::client_id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ClientMetadata.client_id)
  return _internal_client_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientMetadata::set_client_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ClientMetadata.client_id)
}
inline std::string* ClientMetadata::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ClientMetadata.client_id)
  return _s;
}
inline const std::string& ClientMetadata::_internal_client_id() const {
  return _impl_.client_id_.Get();
}
inline void ClientMetadata::_internal_set_client_id(const std::string& value) {
  
  _impl_.client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientMetadata::_internal_mutable_client_id() {
  
  return _impl_.client_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientMetadata::release_client_id() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ClientMetadata.client_id)
  return _impl_.client_id_.Release();
}
inline void ClientMetadata::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  _impl_.client_id_.SetAllocated(client_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_id_.IsDefault()) {
    _impl_.client_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ClientMetadata.client_id)
}

// string client_type = 5;
inline void ClientMetadata::clear_client_type() {
  _impl_.client_type_.ClearToEmpty();
}
inline const std::string& ClientMetadata::client_type() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ClientMetadata.client_type)
  return _internal_client_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientMetadata::set_client_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.ClientMetadata.client_type)
}
inline std::string* ClientMetadata::mutable_client_type() {
  std::string* _s = _internal_mutable_client_type();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ClientMetadata.client_type)
  return _s;
}
inline const std::string& ClientMetadata::_internal_client_type() const {
  return _impl_.client_type_.Get();
}
inline void ClientMetadata::_internal_set_client_type(const std::string& value) {
  
  _impl_.client_type_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientMetadata::_internal_mutable_client_type() {
  
  return _impl_.client_type_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientMetadata::release_client_type() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ClientMetadata.client_type)
  return _impl_.client_type_.Release();
}
inline void ClientMetadata::set_allocated_client_type(std::string* client_type) {
  if (client_type != nullptr) {
    
  } else {
    
  }
  _impl_.client_type_.SetAllocated(client_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_type_.IsDefault()) {
    _impl_.client_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ClientMetadata.client_type)
}

// -------------------------------------------------------------------

// WaypointSnapshot

// string id = 1;
inline void WaypointSnapshot::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& WaypointSnapshot::id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.WaypointSnapshot.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WaypointSnapshot::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.WaypointSnapshot.id)
}
inline std::string* WaypointSnapshot::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.WaypointSnapshot.id)
  return _s;
}
inline const std::string& WaypointSnapshot::_internal_id() const {
  return _impl_.id_.Get();
}
inline void WaypointSnapshot::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* WaypointSnapshot::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* WaypointSnapshot::release_id() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.WaypointSnapshot.id)
  return _impl_.id_.Release();
}
inline void WaypointSnapshot::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.WaypointSnapshot.id)
}

// repeated .bosdyn.api.ImageResponse images = 2;
inline int WaypointSnapshot::_internal_images_size() const {
  return _impl_.images_.size();
}
inline int WaypointSnapshot::images_size() const {
  return _internal_images_size();
}
inline ::bosdyn::api::ImageResponse* WaypointSnapshot::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.WaypointSnapshot.images)
  return _impl_.images_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::ImageResponse >*
WaypointSnapshot::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.WaypointSnapshot.images)
  return &_impl_.images_;
}
inline const ::bosdyn::api::ImageResponse& WaypointSnapshot::_internal_images(int index) const {
  return _impl_.images_.Get(index);
}
inline const ::bosdyn::api::ImageResponse& WaypointSnapshot::images(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.WaypointSnapshot.images)
  return _internal_images(index);
}
inline ::bosdyn::api::ImageResponse* WaypointSnapshot::_internal_add_images() {
  return _impl_.images_.Add();
}
inline ::bosdyn::api::ImageResponse* WaypointSnapshot::add_images() {
  ::bosdyn::api::ImageResponse* _add = _internal_add_images();
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.WaypointSnapshot.images)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::ImageResponse >&
WaypointSnapshot::images() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.WaypointSnapshot.images)
  return _impl_.images_;
}

// .bosdyn.api.PointCloud point_cloud = 3;
inline bool WaypointSnapshot::_internal_has_point_cloud() const {
  return this != internal_default_instance() && _impl_.point_cloud_ != nullptr;
}
inline bool WaypointSnapshot::has_point_cloud() const {
  return _internal_has_point_cloud();
}
inline const ::bosdyn::api::PointCloud& WaypointSnapshot::_internal_point_cloud() const {
  const ::bosdyn::api::PointCloud* p = _impl_.point_cloud_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::PointCloud&>(
      ::bosdyn::api::_PointCloud_default_instance_);
}
inline const ::bosdyn::api::PointCloud& WaypointSnapshot::point_cloud() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.WaypointSnapshot.point_cloud)
  return _internal_point_cloud();
}
inline void WaypointSnapshot::unsafe_arena_set_allocated_point_cloud(
    ::bosdyn::api::PointCloud* point_cloud) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.point_cloud_);
  }
  _impl_.point_cloud_ = point_cloud;
  if (point_cloud) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.WaypointSnapshot.point_cloud)
}
inline ::bosdyn::api::PointCloud* WaypointSnapshot::release_point_cloud() {
  
  ::bosdyn::api::PointCloud* temp = _impl_.point_cloud_;
  _impl_.point_cloud_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::PointCloud* WaypointSnapshot::unsafe_arena_release_point_cloud() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.WaypointSnapshot.point_cloud)
  
  ::bosdyn::api::PointCloud* temp = _impl_.point_cloud_;
  _impl_.point_cloud_ = nullptr;
  return temp;
}
inline ::bosdyn::api::PointCloud* WaypointSnapshot::_internal_mutable_point_cloud() {
  
  if (_impl_.point_cloud_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::PointCloud>(GetArenaForAllocation());
    _impl_.point_cloud_ = p;
  }
  return _impl_.point_cloud_;
}
inline ::bosdyn::api::PointCloud* WaypointSnapshot::mutable_point_cloud() {
  ::bosdyn::api::PointCloud* _msg = _internal_mutable_point_cloud();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.WaypointSnapshot.point_cloud)
  return _msg;
}
inline void WaypointSnapshot::set_allocated_point_cloud(::bosdyn::api::PointCloud* point_cloud) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.point_cloud_);
  }
  if (point_cloud) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(point_cloud));
    if (message_arena != submessage_arena) {
      point_cloud = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point_cloud, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.point_cloud_ = point_cloud;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.WaypointSnapshot.point_cloud)
}

// repeated .bosdyn.api.WorldObject objects = 4;
inline int WaypointSnapshot::_internal_objects_size() const {
  return _impl_.objects_.size();
}
inline int WaypointSnapshot::objects_size() const {
  return _internal_objects_size();
}
inline ::bosdyn::api::WorldObject* WaypointSnapshot::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.WaypointSnapshot.objects)
  return _impl_.objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::WorldObject >*
WaypointSnapshot::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.WaypointSnapshot.objects)
  return &_impl_.objects_;
}
inline const ::bosdyn::api::WorldObject& WaypointSnapshot::_internal_objects(int index) const {
  return _impl_.objects_.Get(index);
}
inline const ::bosdyn::api::WorldObject& WaypointSnapshot::objects(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.WaypointSnapshot.objects)
  return _internal_objects(index);
}
inline ::bosdyn::api::WorldObject* WaypointSnapshot::_internal_add_objects() {
  return _impl_.objects_.Add();
}
inline ::bosdyn::api::WorldObject* WaypointSnapshot::add_objects() {
  ::bosdyn::api::WorldObject* _add = _internal_add_objects();
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.WaypointSnapshot.objects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::WorldObject >&
WaypointSnapshot::objects() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.WaypointSnapshot.objects)
  return _impl_.objects_;
}

// .bosdyn.api.RobotState robot_state = 5;
inline bool WaypointSnapshot::_internal_has_robot_state() const {
  return this != internal_default_instance() && _impl_.robot_state_ != nullptr;
}
inline bool WaypointSnapshot::has_robot_state() const {
  return _internal_has_robot_state();
}
inline const ::bosdyn::api::RobotState& WaypointSnapshot::_internal_robot_state() const {
  const ::bosdyn::api::RobotState* p = _impl_.robot_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RobotState&>(
      ::bosdyn::api::_RobotState_default_instance_);
}
inline const ::bosdyn::api::RobotState& WaypointSnapshot::robot_state() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.WaypointSnapshot.robot_state)
  return _internal_robot_state();
}
inline void WaypointSnapshot::unsafe_arena_set_allocated_robot_state(
    ::bosdyn::api::RobotState* robot_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.robot_state_);
  }
  _impl_.robot_state_ = robot_state;
  if (robot_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.WaypointSnapshot.robot_state)
}
inline ::bosdyn::api::RobotState* WaypointSnapshot::release_robot_state() {
  
  ::bosdyn::api::RobotState* temp = _impl_.robot_state_;
  _impl_.robot_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RobotState* WaypointSnapshot::unsafe_arena_release_robot_state() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.WaypointSnapshot.robot_state)
  
  ::bosdyn::api::RobotState* temp = _impl_.robot_state_;
  _impl_.robot_state_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RobotState* WaypointSnapshot::_internal_mutable_robot_state() {
  
  if (_impl_.robot_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RobotState>(GetArenaForAllocation());
    _impl_.robot_state_ = p;
  }
  return _impl_.robot_state_;
}
inline ::bosdyn::api::RobotState* WaypointSnapshot::mutable_robot_state() {
  ::bosdyn::api::RobotState* _msg = _internal_mutable_robot_state();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.WaypointSnapshot.robot_state)
  return _msg;
}
inline void WaypointSnapshot::set_allocated_robot_state(::bosdyn::api::RobotState* robot_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.robot_state_);
  }
  if (robot_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(robot_state));
    if (message_arena != submessage_arena) {
      robot_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, robot_state, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.robot_state_ = robot_state;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.WaypointSnapshot.robot_state)
}

// repeated .bosdyn.api.LocalGrid robot_local_grids = 6;
inline int WaypointSnapshot::_internal_robot_local_grids_size() const {
  return _impl_.robot_local_grids_.size();
}
inline int WaypointSnapshot::robot_local_grids_size() const {
  return _internal_robot_local_grids_size();
}
inline ::bosdyn::api::LocalGrid* WaypointSnapshot::mutable_robot_local_grids(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.WaypointSnapshot.robot_local_grids)
  return _impl_.robot_local_grids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LocalGrid >*
WaypointSnapshot::mutable_robot_local_grids() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.WaypointSnapshot.robot_local_grids)
  return &_impl_.robot_local_grids_;
}
inline const ::bosdyn::api::LocalGrid& WaypointSnapshot::_internal_robot_local_grids(int index) const {
  return _impl_.robot_local_grids_.Get(index);
}
inline const ::bosdyn::api::LocalGrid& WaypointSnapshot::robot_local_grids(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.WaypointSnapshot.robot_local_grids)
  return _internal_robot_local_grids(index);
}
inline ::bosdyn::api::LocalGrid* WaypointSnapshot::_internal_add_robot_local_grids() {
  return _impl_.robot_local_grids_.Add();
}
inline ::bosdyn::api::LocalGrid* WaypointSnapshot::add_robot_local_grids() {
  ::bosdyn::api::LocalGrid* _add = _internal_add_robot_local_grids();
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.WaypointSnapshot.robot_local_grids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LocalGrid >&
WaypointSnapshot::robot_local_grids() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.WaypointSnapshot.robot_local_grids)
  return _impl_.robot_local_grids_;
}

// bool is_point_cloud_processed = 8;
inline void WaypointSnapshot::clear_is_point_cloud_processed() {
  _impl_.is_point_cloud_processed_ = false;
}
inline bool WaypointSnapshot::_internal_is_point_cloud_processed() const {
  return _impl_.is_point_cloud_processed_;
}
inline bool WaypointSnapshot::is_point_cloud_processed() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.WaypointSnapshot.is_point_cloud_processed)
  return _internal_is_point_cloud_processed();
}
inline void WaypointSnapshot::_internal_set_is_point_cloud_processed(bool value) {
  
  _impl_.is_point_cloud_processed_ = value;
}
inline void WaypointSnapshot::set_is_point_cloud_processed(bool value) {
  _internal_set_is_point_cloud_processed(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.WaypointSnapshot.is_point_cloud_processed)
}

// string version_id = 9;
inline void WaypointSnapshot::clear_version_id() {
  _impl_.version_id_.ClearToEmpty();
}
inline const std::string& WaypointSnapshot::version_id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.WaypointSnapshot.version_id)
  return _internal_version_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WaypointSnapshot::set_version_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.WaypointSnapshot.version_id)
}
inline std::string* WaypointSnapshot::mutable_version_id() {
  std::string* _s = _internal_mutable_version_id();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.WaypointSnapshot.version_id)
  return _s;
}
inline const std::string& WaypointSnapshot::_internal_version_id() const {
  return _impl_.version_id_.Get();
}
inline void WaypointSnapshot::_internal_set_version_id(const std::string& value) {
  
  _impl_.version_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WaypointSnapshot::_internal_mutable_version_id() {
  
  return _impl_.version_id_.Mutable(GetArenaForAllocation());
}
inline std::string* WaypointSnapshot::release_version_id() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.WaypointSnapshot.version_id)
  return _impl_.version_id_.Release();
}
inline void WaypointSnapshot::set_allocated_version_id(std::string* version_id) {
  if (version_id != nullptr) {
    
  } else {
    
  }
  _impl_.version_id_.SetAllocated(version_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_id_.IsDefault()) {
    _impl_.version_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.WaypointSnapshot.version_id)
}

// bool has_remote_point_cloud_sensor = 10;
inline void WaypointSnapshot::clear_has_remote_point_cloud_sensor() {
  _impl_.has_remote_point_cloud_sensor_ = false;
}
inline bool WaypointSnapshot::_internal_has_remote_point_cloud_sensor() const {
  return _impl_.has_remote_point_cloud_sensor_;
}
inline bool WaypointSnapshot::has_remote_point_cloud_sensor() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.WaypointSnapshot.has_remote_point_cloud_sensor)
  return _internal_has_remote_point_cloud_sensor();
}
inline void WaypointSnapshot::_internal_set_has_remote_point_cloud_sensor(bool value) {
  
  _impl_.has_remote_point_cloud_sensor_ = value;
}
inline void WaypointSnapshot::set_has_remote_point_cloud_sensor(bool value) {
  _internal_set_has_remote_point_cloud_sensor(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.WaypointSnapshot.has_remote_point_cloud_sensor)
}

// .bosdyn.api.SE3Pose body_tform_remote_point_cloud_sensor = 11;
inline bool WaypointSnapshot::_internal_has_body_tform_remote_point_cloud_sensor() const {
  return this != internal_default_instance() && _impl_.body_tform_remote_point_cloud_sensor_ != nullptr;
}
inline bool WaypointSnapshot::has_body_tform_remote_point_cloud_sensor() const {
  return _internal_has_body_tform_remote_point_cloud_sensor();
}
inline const ::bosdyn::api::SE3Pose& WaypointSnapshot::_internal_body_tform_remote_point_cloud_sensor() const {
  const ::bosdyn::api::SE3Pose* p = _impl_.body_tform_remote_point_cloud_sensor_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::SE3Pose&>(
      ::bosdyn::api::_SE3Pose_default_instance_);
}
inline const ::bosdyn::api::SE3Pose& WaypointSnapshot::body_tform_remote_point_cloud_sensor() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.WaypointSnapshot.body_tform_remote_point_cloud_sensor)
  return _internal_body_tform_remote_point_cloud_sensor();
}
inline void WaypointSnapshot::unsafe_arena_set_allocated_body_tform_remote_point_cloud_sensor(
    ::bosdyn::api::SE3Pose* body_tform_remote_point_cloud_sensor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_tform_remote_point_cloud_sensor_);
  }
  _impl_.body_tform_remote_point_cloud_sensor_ = body_tform_remote_point_cloud_sensor;
  if (body_tform_remote_point_cloud_sensor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.WaypointSnapshot.body_tform_remote_point_cloud_sensor)
}
inline ::bosdyn::api::SE3Pose* WaypointSnapshot::release_body_tform_remote_point_cloud_sensor() {
  
  ::bosdyn::api::SE3Pose* temp = _impl_.body_tform_remote_point_cloud_sensor_;
  _impl_.body_tform_remote_point_cloud_sensor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::SE3Pose* WaypointSnapshot::unsafe_arena_release_body_tform_remote_point_cloud_sensor() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.WaypointSnapshot.body_tform_remote_point_cloud_sensor)
  
  ::bosdyn::api::SE3Pose* temp = _impl_.body_tform_remote_point_cloud_sensor_;
  _impl_.body_tform_remote_point_cloud_sensor_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Pose* WaypointSnapshot::_internal_mutable_body_tform_remote_point_cloud_sensor() {
  
  if (_impl_.body_tform_remote_point_cloud_sensor_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Pose>(GetArenaForAllocation());
    _impl_.body_tform_remote_point_cloud_sensor_ = p;
  }
  return _impl_.body_tform_remote_point_cloud_sensor_;
}
inline ::bosdyn::api::SE3Pose* WaypointSnapshot::mutable_body_tform_remote_point_cloud_sensor() {
  ::bosdyn::api::SE3Pose* _msg = _internal_mutable_body_tform_remote_point_cloud_sensor();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.WaypointSnapshot.body_tform_remote_point_cloud_sensor)
  return _msg;
}
inline void WaypointSnapshot::set_allocated_body_tform_remote_point_cloud_sensor(::bosdyn::api::SE3Pose* body_tform_remote_point_cloud_sensor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_tform_remote_point_cloud_sensor_);
  }
  if (body_tform_remote_point_cloud_sensor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_tform_remote_point_cloud_sensor));
    if (message_arena != submessage_arena) {
      body_tform_remote_point_cloud_sensor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body_tform_remote_point_cloud_sensor, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.body_tform_remote_point_cloud_sensor_ = body_tform_remote_point_cloud_sensor;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.WaypointSnapshot.body_tform_remote_point_cloud_sensor)
}

// repeated .bosdyn.api.Payload payloads = 12;
inline int WaypointSnapshot::_internal_payloads_size() const {
  return _impl_.payloads_.size();
}
inline int WaypointSnapshot::payloads_size() const {
  return _internal_payloads_size();
}
inline ::bosdyn::api::Payload* WaypointSnapshot::mutable_payloads(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.WaypointSnapshot.payloads)
  return _impl_.payloads_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Payload >*
WaypointSnapshot::mutable_payloads() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.WaypointSnapshot.payloads)
  return &_impl_.payloads_;
}
inline const ::bosdyn::api::Payload& WaypointSnapshot::_internal_payloads(int index) const {
  return _impl_.payloads_.Get(index);
}
inline const ::bosdyn::api::Payload& WaypointSnapshot::payloads(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.WaypointSnapshot.payloads)
  return _internal_payloads(index);
}
inline ::bosdyn::api::Payload* WaypointSnapshot::_internal_add_payloads() {
  return _impl_.payloads_.Add();
}
inline ::bosdyn::api::Payload* WaypointSnapshot::add_payloads() {
  ::bosdyn::api::Payload* _add = _internal_add_payloads();
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.WaypointSnapshot.payloads)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Payload >&
WaypointSnapshot::payloads() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.WaypointSnapshot.payloads)
  return _impl_.payloads_;
}

// .bosdyn.api.RobotId robot_id = 14;
inline bool WaypointSnapshot::_internal_has_robot_id() const {
  return this != internal_default_instance() && _impl_.robot_id_ != nullptr;
}
inline bool WaypointSnapshot::has_robot_id() const {
  return _internal_has_robot_id();
}
inline const ::bosdyn::api::RobotId& WaypointSnapshot::_internal_robot_id() const {
  const ::bosdyn::api::RobotId* p = _impl_.robot_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RobotId&>(
      ::bosdyn::api::_RobotId_default_instance_);
}
inline const ::bosdyn::api::RobotId& WaypointSnapshot::robot_id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.WaypointSnapshot.robot_id)
  return _internal_robot_id();
}
inline void WaypointSnapshot::unsafe_arena_set_allocated_robot_id(
    ::bosdyn::api::RobotId* robot_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.robot_id_);
  }
  _impl_.robot_id_ = robot_id;
  if (robot_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.WaypointSnapshot.robot_id)
}
inline ::bosdyn::api::RobotId* WaypointSnapshot::release_robot_id() {
  
  ::bosdyn::api::RobotId* temp = _impl_.robot_id_;
  _impl_.robot_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RobotId* WaypointSnapshot::unsafe_arena_release_robot_id() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.WaypointSnapshot.robot_id)
  
  ::bosdyn::api::RobotId* temp = _impl_.robot_id_;
  _impl_.robot_id_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RobotId* WaypointSnapshot::_internal_mutable_robot_id() {
  
  if (_impl_.robot_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RobotId>(GetArenaForAllocation());
    _impl_.robot_id_ = p;
  }
  return _impl_.robot_id_;
}
inline ::bosdyn::api::RobotId* WaypointSnapshot::mutable_robot_id() {
  ::bosdyn::api::RobotId* _msg = _internal_mutable_robot_id();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.WaypointSnapshot.robot_id)
  return _msg;
}
inline void WaypointSnapshot::set_allocated_robot_id(::bosdyn::api::RobotId* robot_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.robot_id_);
  }
  if (robot_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(robot_id));
    if (message_arena != submessage_arena) {
      robot_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, robot_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.robot_id_ = robot_id;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.WaypointSnapshot.robot_id)
}

// .google.protobuf.Timestamp recording_started_on = 15;
inline bool WaypointSnapshot::_internal_has_recording_started_on() const {
  return this != internal_default_instance() && _impl_.recording_started_on_ != nullptr;
}
inline bool WaypointSnapshot::has_recording_started_on() const {
  return _internal_has_recording_started_on();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& WaypointSnapshot::_internal_recording_started_on() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.recording_started_on_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& WaypointSnapshot::recording_started_on() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.WaypointSnapshot.recording_started_on)
  return _internal_recording_started_on();
}
inline void WaypointSnapshot::unsafe_arena_set_allocated_recording_started_on(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* recording_started_on) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recording_started_on_);
  }
  _impl_.recording_started_on_ = recording_started_on;
  if (recording_started_on) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.WaypointSnapshot.recording_started_on)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* WaypointSnapshot::release_recording_started_on() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.recording_started_on_;
  _impl_.recording_started_on_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* WaypointSnapshot::unsafe_arena_release_recording_started_on() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.WaypointSnapshot.recording_started_on)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.recording_started_on_;
  _impl_.recording_started_on_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* WaypointSnapshot::_internal_mutable_recording_started_on() {
  
  if (_impl_.recording_started_on_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.recording_started_on_ = p;
  }
  return _impl_.recording_started_on_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* WaypointSnapshot::mutable_recording_started_on() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_recording_started_on();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.WaypointSnapshot.recording_started_on)
  return _msg;
}
inline void WaypointSnapshot::set_allocated_recording_started_on(::PROTOBUF_NAMESPACE_ID::Timestamp* recording_started_on) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recording_started_on_);
  }
  if (recording_started_on) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recording_started_on));
    if (message_arena != submessage_arena) {
      recording_started_on = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recording_started_on, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recording_started_on_ = recording_started_on;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.WaypointSnapshot.recording_started_on)
}

// -------------------------------------------------------------------

// Edge_Id

// string from_waypoint = 1;
inline void Edge_Id::clear_from_waypoint() {
  _impl_.from_waypoint_.ClearToEmpty();
}
inline const std::string& Edge_Id::from_waypoint() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Id.from_waypoint)
  return _internal_from_waypoint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Edge_Id::set_from_waypoint(ArgT0&& arg0, ArgT... args) {
 
 _impl_.from_waypoint_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.Edge.Id.from_waypoint)
}
inline std::string* Edge_Id::mutable_from_waypoint() {
  std::string* _s = _internal_mutable_from_waypoint();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Edge.Id.from_waypoint)
  return _s;
}
inline const std::string& Edge_Id::_internal_from_waypoint() const {
  return _impl_.from_waypoint_.Get();
}
inline void Edge_Id::_internal_set_from_waypoint(const std::string& value) {
  
  _impl_.from_waypoint_.Set(value, GetArenaForAllocation());
}
inline std::string* Edge_Id::_internal_mutable_from_waypoint() {
  
  return _impl_.from_waypoint_.Mutable(GetArenaForAllocation());
}
inline std::string* Edge_Id::release_from_waypoint() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Edge.Id.from_waypoint)
  return _impl_.from_waypoint_.Release();
}
inline void Edge_Id::set_allocated_from_waypoint(std::string* from_waypoint) {
  if (from_waypoint != nullptr) {
    
  } else {
    
  }
  _impl_.from_waypoint_.SetAllocated(from_waypoint, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.from_waypoint_.IsDefault()) {
    _impl_.from_waypoint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Edge.Id.from_waypoint)
}

// string to_waypoint = 2;
inline void Edge_Id::clear_to_waypoint() {
  _impl_.to_waypoint_.ClearToEmpty();
}
inline const std::string& Edge_Id::to_waypoint() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Id.to_waypoint)
  return _internal_to_waypoint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Edge_Id::set_to_waypoint(ArgT0&& arg0, ArgT... args) {
 
 _impl_.to_waypoint_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.Edge.Id.to_waypoint)
}
inline std::string* Edge_Id::mutable_to_waypoint() {
  std::string* _s = _internal_mutable_to_waypoint();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Edge.Id.to_waypoint)
  return _s;
}
inline const std::string& Edge_Id::_internal_to_waypoint() const {
  return _impl_.to_waypoint_.Get();
}
inline void Edge_Id::_internal_set_to_waypoint(const std::string& value) {
  
  _impl_.to_waypoint_.Set(value, GetArenaForAllocation());
}
inline std::string* Edge_Id::_internal_mutable_to_waypoint() {
  
  return _impl_.to_waypoint_.Mutable(GetArenaForAllocation());
}
inline std::string* Edge_Id::release_to_waypoint() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Edge.Id.to_waypoint)
  return _impl_.to_waypoint_.Release();
}
inline void Edge_Id::set_allocated_to_waypoint(std::string* to_waypoint) {
  if (to_waypoint != nullptr) {
    
  } else {
    
  }
  _impl_.to_waypoint_.SetAllocated(to_waypoint, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.to_waypoint_.IsDefault()) {
    _impl_.to_waypoint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Edge.Id.to_waypoint)
}

// -------------------------------------------------------------------

// Edge_Annotations_StairData

// .bosdyn.api.graph_nav.AnnotationState state = 1;
inline void Edge_Annotations_StairData::clear_state() {
  _impl_.state_ = 0;
}
inline ::bosdyn::api::graph_nav::AnnotationState Edge_Annotations_StairData::_internal_state() const {
  return static_cast< ::bosdyn::api::graph_nav::AnnotationState >(_impl_.state_);
}
inline ::bosdyn::api::graph_nav::AnnotationState Edge_Annotations_StairData::state() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Annotations.StairData.state)
  return _internal_state();
}
inline void Edge_Annotations_StairData::_internal_set_state(::bosdyn::api::graph_nav::AnnotationState value) {
  
  _impl_.state_ = value;
}
inline void Edge_Annotations_StairData::set_state(::bosdyn::api::graph_nav::AnnotationState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.Edge.Annotations.StairData.state)
}

// .bosdyn.api.StraightStaircase straight_staircase = 2;
inline bool Edge_Annotations_StairData::_internal_has_straight_staircase() const {
  return this != internal_default_instance() && _impl_.straight_staircase_ != nullptr;
}
inline bool Edge_Annotations_StairData::has_straight_staircase() const {
  return _internal_has_straight_staircase();
}
inline const ::bosdyn::api::StraightStaircase& Edge_Annotations_StairData::_internal_straight_staircase() const {
  const ::bosdyn::api::StraightStaircase* p = _impl_.straight_staircase_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::StraightStaircase&>(
      ::bosdyn::api::_StraightStaircase_default_instance_);
}
inline const ::bosdyn::api::StraightStaircase& Edge_Annotations_StairData::straight_staircase() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Annotations.StairData.straight_staircase)
  return _internal_straight_staircase();
}
inline void Edge_Annotations_StairData::unsafe_arena_set_allocated_straight_staircase(
    ::bosdyn::api::StraightStaircase* straight_staircase) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.straight_staircase_);
  }
  _impl_.straight_staircase_ = straight_staircase;
  if (straight_staircase) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.StairData.straight_staircase)
}
inline ::bosdyn::api::StraightStaircase* Edge_Annotations_StairData::release_straight_staircase() {
  
  ::bosdyn::api::StraightStaircase* temp = _impl_.straight_staircase_;
  _impl_.straight_staircase_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::StraightStaircase* Edge_Annotations_StairData::unsafe_arena_release_straight_staircase() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Edge.Annotations.StairData.straight_staircase)
  
  ::bosdyn::api::StraightStaircase* temp = _impl_.straight_staircase_;
  _impl_.straight_staircase_ = nullptr;
  return temp;
}
inline ::bosdyn::api::StraightStaircase* Edge_Annotations_StairData::_internal_mutable_straight_staircase() {
  
  if (_impl_.straight_staircase_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::StraightStaircase>(GetArenaForAllocation());
    _impl_.straight_staircase_ = p;
  }
  return _impl_.straight_staircase_;
}
inline ::bosdyn::api::StraightStaircase* Edge_Annotations_StairData::mutable_straight_staircase() {
  ::bosdyn::api::StraightStaircase* _msg = _internal_mutable_straight_staircase();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Edge.Annotations.StairData.straight_staircase)
  return _msg;
}
inline void Edge_Annotations_StairData::set_allocated_straight_staircase(::bosdyn::api::StraightStaircase* straight_staircase) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.straight_staircase_);
  }
  if (straight_staircase) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(straight_staircase));
    if (message_arena != submessage_arena) {
      straight_staircase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, straight_staircase, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.straight_staircase_ = straight_staircase;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.StairData.straight_staircase)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Edge_Annotations

// .bosdyn.api.SE2VelocityLimit vel_limit = 1 [deprecated = true];
inline bool Edge_Annotations::_internal_has_vel_limit() const {
  return this != internal_default_instance() && _impl_.vel_limit_ != nullptr;
}
inline bool Edge_Annotations::has_vel_limit() const {
  return _internal_has_vel_limit();
}
inline const ::bosdyn::api::SE2VelocityLimit& Edge_Annotations::_internal_vel_limit() const {
  const ::bosdyn::api::SE2VelocityLimit* p = _impl_.vel_limit_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::SE2VelocityLimit&>(
      ::bosdyn::api::_SE2VelocityLimit_default_instance_);
}
inline const ::bosdyn::api::SE2VelocityLimit& Edge_Annotations::vel_limit() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Annotations.vel_limit)
  return _internal_vel_limit();
}
inline void Edge_Annotations::unsafe_arena_set_allocated_vel_limit(
    ::bosdyn::api::SE2VelocityLimit* vel_limit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vel_limit_);
  }
  _impl_.vel_limit_ = vel_limit;
  if (vel_limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.vel_limit)
}
inline ::bosdyn::api::SE2VelocityLimit* Edge_Annotations::release_vel_limit() {
  
  ::bosdyn::api::SE2VelocityLimit* temp = _impl_.vel_limit_;
  _impl_.vel_limit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::SE2VelocityLimit* Edge_Annotations::unsafe_arena_release_vel_limit() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Edge.Annotations.vel_limit)
  
  ::bosdyn::api::SE2VelocityLimit* temp = _impl_.vel_limit_;
  _impl_.vel_limit_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE2VelocityLimit* Edge_Annotations::_internal_mutable_vel_limit() {
  
  if (_impl_.vel_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE2VelocityLimit>(GetArenaForAllocation());
    _impl_.vel_limit_ = p;
  }
  return _impl_.vel_limit_;
}
inline ::bosdyn::api::SE2VelocityLimit* Edge_Annotations::mutable_vel_limit() {
  ::bosdyn::api::SE2VelocityLimit* _msg = _internal_mutable_vel_limit();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Edge.Annotations.vel_limit)
  return _msg;
}
inline void Edge_Annotations::set_allocated_vel_limit(::bosdyn::api::SE2VelocityLimit* vel_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vel_limit_);
  }
  if (vel_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_limit));
    if (message_arena != submessage_arena) {
      vel_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vel_limit, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vel_limit_ = vel_limit;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.vel_limit)
}

// .bosdyn.api.graph_nav.Edge.Annotations.StairData stairs = 2;
inline bool Edge_Annotations::_internal_has_stairs() const {
  return this != internal_default_instance() && _impl_.stairs_ != nullptr;
}
inline bool Edge_Annotations::has_stairs() const {
  return _internal_has_stairs();
}
inline void Edge_Annotations::clear_stairs() {
  if (GetArenaForAllocation() == nullptr && _impl_.stairs_ != nullptr) {
    delete _impl_.stairs_;
  }
  _impl_.stairs_ = nullptr;
}
inline const ::bosdyn::api::graph_nav::Edge_Annotations_StairData& Edge_Annotations::_internal_stairs() const {
  const ::bosdyn::api::graph_nav::Edge_Annotations_StairData* p = _impl_.stairs_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::graph_nav::Edge_Annotations_StairData&>(
      ::bosdyn::api::graph_nav::_Edge_Annotations_StairData_default_instance_);
}
inline const ::bosdyn::api::graph_nav::Edge_Annotations_StairData& Edge_Annotations::stairs() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Annotations.stairs)
  return _internal_stairs();
}
inline void Edge_Annotations::unsafe_arena_set_allocated_stairs(
    ::bosdyn::api::graph_nav::Edge_Annotations_StairData* stairs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stairs_);
  }
  _impl_.stairs_ = stairs;
  if (stairs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.stairs)
}
inline ::bosdyn::api::graph_nav::Edge_Annotations_StairData* Edge_Annotations::release_stairs() {
  
  ::bosdyn::api::graph_nav::Edge_Annotations_StairData* temp = _impl_.stairs_;
  _impl_.stairs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::graph_nav::Edge_Annotations_StairData* Edge_Annotations::unsafe_arena_release_stairs() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Edge.Annotations.stairs)
  
  ::bosdyn::api::graph_nav::Edge_Annotations_StairData* temp = _impl_.stairs_;
  _impl_.stairs_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::Edge_Annotations_StairData* Edge_Annotations::_internal_mutable_stairs() {
  
  if (_impl_.stairs_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::Edge_Annotations_StairData>(GetArenaForAllocation());
    _impl_.stairs_ = p;
  }
  return _impl_.stairs_;
}
inline ::bosdyn::api::graph_nav::Edge_Annotations_StairData* Edge_Annotations::mutable_stairs() {
  ::bosdyn::api::graph_nav::Edge_Annotations_StairData* _msg = _internal_mutable_stairs();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Edge.Annotations.stairs)
  return _msg;
}
inline void Edge_Annotations::set_allocated_stairs(::bosdyn::api::graph_nav::Edge_Annotations_StairData* stairs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stairs_;
  }
  if (stairs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stairs);
    if (message_arena != submessage_arena) {
      stairs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stairs, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stairs_ = stairs;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.stairs)
}

// .bosdyn.api.graph_nav.Edge.Annotations.DirectionConstraint direction_constraint = 4;
inline void Edge_Annotations::clear_direction_constraint() {
  _impl_.direction_constraint_ = 0;
}
inline ::bosdyn::api::graph_nav::Edge_Annotations_DirectionConstraint Edge_Annotations::_internal_direction_constraint() const {
  return static_cast< ::bosdyn::api::graph_nav::Edge_Annotations_DirectionConstraint >(_impl_.direction_constraint_);
}
inline ::bosdyn::api::graph_nav::Edge_Annotations_DirectionConstraint Edge_Annotations::direction_constraint() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Annotations.direction_constraint)
  return _internal_direction_constraint();
}
inline void Edge_Annotations::_internal_set_direction_constraint(::bosdyn::api::graph_nav::Edge_Annotations_DirectionConstraint value) {
  
  _impl_.direction_constraint_ = value;
}
inline void Edge_Annotations::set_direction_constraint(::bosdyn::api::graph_nav::Edge_Annotations_DirectionConstraint value) {
  _internal_set_direction_constraint(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.Edge.Annotations.direction_constraint)
}

// .google.protobuf.BoolValue require_alignment = 5;
inline bool Edge_Annotations::_internal_has_require_alignment() const {
  return this != internal_default_instance() && _impl_.require_alignment_ != nullptr;
}
inline bool Edge_Annotations::has_require_alignment() const {
  return _internal_has_require_alignment();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Edge_Annotations::_internal_require_alignment() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.require_alignment_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Edge_Annotations::require_alignment() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Annotations.require_alignment)
  return _internal_require_alignment();
}
inline void Edge_Annotations::unsafe_arena_set_allocated_require_alignment(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* require_alignment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.require_alignment_);
  }
  _impl_.require_alignment_ = require_alignment;
  if (require_alignment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.require_alignment)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Edge_Annotations::release_require_alignment() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.require_alignment_;
  _impl_.require_alignment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Edge_Annotations::unsafe_arena_release_require_alignment() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Edge.Annotations.require_alignment)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.require_alignment_;
  _impl_.require_alignment_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Edge_Annotations::_internal_mutable_require_alignment() {
  
  if (_impl_.require_alignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.require_alignment_ = p;
  }
  return _impl_.require_alignment_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Edge_Annotations::mutable_require_alignment() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_require_alignment();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Edge.Annotations.require_alignment)
  return _msg;
}
inline void Edge_Annotations::set_allocated_require_alignment(::PROTOBUF_NAMESPACE_ID::BoolValue* require_alignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.require_alignment_);
  }
  if (require_alignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(require_alignment));
    if (message_arena != submessage_arena) {
      require_alignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, require_alignment, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.require_alignment_ = require_alignment;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.require_alignment)
}

// .google.protobuf.BoolValue flat_ground = 6;
inline bool Edge_Annotations::_internal_has_flat_ground() const {
  return this != internal_default_instance() && _impl_.flat_ground_ != nullptr;
}
inline bool Edge_Annotations::has_flat_ground() const {
  return _internal_has_flat_ground();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Edge_Annotations::_internal_flat_ground() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.flat_ground_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Edge_Annotations::flat_ground() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Annotations.flat_ground)
  return _internal_flat_ground();
}
inline void Edge_Annotations::unsafe_arena_set_allocated_flat_ground(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* flat_ground) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.flat_ground_);
  }
  _impl_.flat_ground_ = flat_ground;
  if (flat_ground) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.flat_ground)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Edge_Annotations::release_flat_ground() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.flat_ground_;
  _impl_.flat_ground_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Edge_Annotations::unsafe_arena_release_flat_ground() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Edge.Annotations.flat_ground)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.flat_ground_;
  _impl_.flat_ground_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Edge_Annotations::_internal_mutable_flat_ground() {
  
  if (_impl_.flat_ground_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.flat_ground_ = p;
  }
  return _impl_.flat_ground_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Edge_Annotations::mutable_flat_ground() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_flat_ground();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Edge.Annotations.flat_ground)
  return _msg;
}
inline void Edge_Annotations::set_allocated_flat_ground(::PROTOBUF_NAMESPACE_ID::BoolValue* flat_ground) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.flat_ground_);
  }
  if (flat_ground) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flat_ground));
    if (message_arena != submessage_arena) {
      flat_ground = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flat_ground, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.flat_ground_ = flat_ground;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.flat_ground)
}

// .google.protobuf.DoubleValue ground_mu_hint = 7 [deprecated = true];
inline bool Edge_Annotations::_internal_has_ground_mu_hint() const {
  return this != internal_default_instance() && _impl_.ground_mu_hint_ != nullptr;
}
inline bool Edge_Annotations::has_ground_mu_hint() const {
  return _internal_has_ground_mu_hint();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Edge_Annotations::_internal_ground_mu_hint() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.ground_mu_hint_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Edge_Annotations::ground_mu_hint() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Annotations.ground_mu_hint)
  return _internal_ground_mu_hint();
}
inline void Edge_Annotations::unsafe_arena_set_allocated_ground_mu_hint(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* ground_mu_hint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ground_mu_hint_);
  }
  _impl_.ground_mu_hint_ = ground_mu_hint;
  if (ground_mu_hint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.ground_mu_hint)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Edge_Annotations::release_ground_mu_hint() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.ground_mu_hint_;
  _impl_.ground_mu_hint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Edge_Annotations::unsafe_arena_release_ground_mu_hint() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Edge.Annotations.ground_mu_hint)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.ground_mu_hint_;
  _impl_.ground_mu_hint_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Edge_Annotations::_internal_mutable_ground_mu_hint() {
  
  if (_impl_.ground_mu_hint_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.ground_mu_hint_ = p;
  }
  return _impl_.ground_mu_hint_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Edge_Annotations::mutable_ground_mu_hint() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_ground_mu_hint();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Edge.Annotations.ground_mu_hint)
  return _msg;
}
inline void Edge_Annotations::set_allocated_ground_mu_hint(::PROTOBUF_NAMESPACE_ID::DoubleValue* ground_mu_hint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ground_mu_hint_);
  }
  if (ground_mu_hint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ground_mu_hint));
    if (message_arena != submessage_arena) {
      ground_mu_hint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ground_mu_hint, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ground_mu_hint_ = ground_mu_hint;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.ground_mu_hint)
}

// .google.protobuf.BoolValue grated_floor = 8 [deprecated = true];
inline bool Edge_Annotations::_internal_has_grated_floor() const {
  return this != internal_default_instance() && _impl_.grated_floor_ != nullptr;
}
inline bool Edge_Annotations::has_grated_floor() const {
  return _internal_has_grated_floor();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Edge_Annotations::_internal_grated_floor() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.grated_floor_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Edge_Annotations::grated_floor() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Annotations.grated_floor)
  return _internal_grated_floor();
}
inline void Edge_Annotations::unsafe_arena_set_allocated_grated_floor(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* grated_floor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.grated_floor_);
  }
  _impl_.grated_floor_ = grated_floor;
  if (grated_floor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.grated_floor)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Edge_Annotations::release_grated_floor() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.grated_floor_;
  _impl_.grated_floor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Edge_Annotations::unsafe_arena_release_grated_floor() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Edge.Annotations.grated_floor)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.grated_floor_;
  _impl_.grated_floor_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Edge_Annotations::_internal_mutable_grated_floor() {
  
  if (_impl_.grated_floor_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.grated_floor_ = p;
  }
  return _impl_.grated_floor_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Edge_Annotations::mutable_grated_floor() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_grated_floor();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Edge.Annotations.grated_floor)
  return _msg;
}
inline void Edge_Annotations::set_allocated_grated_floor(::PROTOBUF_NAMESPACE_ID::BoolValue* grated_floor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.grated_floor_);
  }
  if (grated_floor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grated_floor));
    if (message_arena != submessage_arena) {
      grated_floor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grated_floor, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.grated_floor_ = grated_floor;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.grated_floor)
}

// .google.protobuf.FieldMask override_mobility_params = 9;
inline bool Edge_Annotations::_internal_has_override_mobility_params() const {
  return this != internal_default_instance() && _impl_.override_mobility_params_ != nullptr;
}
inline bool Edge_Annotations::has_override_mobility_params() const {
  return _internal_has_override_mobility_params();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& Edge_Annotations::_internal_override_mobility_params() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.override_mobility_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& Edge_Annotations::override_mobility_params() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Annotations.override_mobility_params)
  return _internal_override_mobility_params();
}
inline void Edge_Annotations::unsafe_arena_set_allocated_override_mobility_params(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* override_mobility_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.override_mobility_params_);
  }
  _impl_.override_mobility_params_ = override_mobility_params;
  if (override_mobility_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.override_mobility_params)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* Edge_Annotations::release_override_mobility_params() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.override_mobility_params_;
  _impl_.override_mobility_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* Edge_Annotations::unsafe_arena_release_override_mobility_params() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Edge.Annotations.override_mobility_params)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.override_mobility_params_;
  _impl_.override_mobility_params_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* Edge_Annotations::_internal_mutable_override_mobility_params() {
  
  if (_impl_.override_mobility_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.override_mobility_params_ = p;
  }
  return _impl_.override_mobility_params_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* Edge_Annotations::mutable_override_mobility_params() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_override_mobility_params();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Edge.Annotations.override_mobility_params)
  return _msg;
}
inline void Edge_Annotations::set_allocated_override_mobility_params(::PROTOBUF_NAMESPACE_ID::FieldMask* override_mobility_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.override_mobility_params_);
  }
  if (override_mobility_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(override_mobility_params));
    if (message_arena != submessage_arena) {
      override_mobility_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, override_mobility_params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.override_mobility_params_ = override_mobility_params;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.override_mobility_params)
}

// .bosdyn.api.spot.MobilityParams mobility_params = 10;
inline bool Edge_Annotations::_internal_has_mobility_params() const {
  return this != internal_default_instance() && _impl_.mobility_params_ != nullptr;
}
inline bool Edge_Annotations::has_mobility_params() const {
  return _internal_has_mobility_params();
}
inline const ::bosdyn::api::spot::MobilityParams& Edge_Annotations::_internal_mobility_params() const {
  const ::bosdyn::api::spot::MobilityParams* p = _impl_.mobility_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::spot::MobilityParams&>(
      ::bosdyn::api::spot::_MobilityParams_default_instance_);
}
inline const ::bosdyn::api::spot::MobilityParams& Edge_Annotations::mobility_params() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Annotations.mobility_params)
  return _internal_mobility_params();
}
inline void Edge_Annotations::unsafe_arena_set_allocated_mobility_params(
    ::bosdyn::api::spot::MobilityParams* mobility_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mobility_params_);
  }
  _impl_.mobility_params_ = mobility_params;
  if (mobility_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.mobility_params)
}
inline ::bosdyn::api::spot::MobilityParams* Edge_Annotations::release_mobility_params() {
  
  ::bosdyn::api::spot::MobilityParams* temp = _impl_.mobility_params_;
  _impl_.mobility_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::spot::MobilityParams* Edge_Annotations::unsafe_arena_release_mobility_params() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Edge.Annotations.mobility_params)
  
  ::bosdyn::api::spot::MobilityParams* temp = _impl_.mobility_params_;
  _impl_.mobility_params_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot::MobilityParams* Edge_Annotations::_internal_mutable_mobility_params() {
  
  if (_impl_.mobility_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot::MobilityParams>(GetArenaForAllocation());
    _impl_.mobility_params_ = p;
  }
  return _impl_.mobility_params_;
}
inline ::bosdyn::api::spot::MobilityParams* Edge_Annotations::mutable_mobility_params() {
  ::bosdyn::api::spot::MobilityParams* _msg = _internal_mutable_mobility_params();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Edge.Annotations.mobility_params)
  return _msg;
}
inline void Edge_Annotations::set_allocated_mobility_params(::bosdyn::api::spot::MobilityParams* mobility_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mobility_params_);
  }
  if (mobility_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mobility_params));
    if (message_arena != submessage_arena) {
      mobility_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mobility_params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mobility_params_ = mobility_params;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.mobility_params)
}

// .google.protobuf.DoubleValue cost = 11;
inline bool Edge_Annotations::_internal_has_cost() const {
  return this != internal_default_instance() && _impl_.cost_ != nullptr;
}
inline bool Edge_Annotations::has_cost() const {
  return _internal_has_cost();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Edge_Annotations::_internal_cost() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.cost_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Edge_Annotations::cost() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Annotations.cost)
  return _internal_cost();
}
inline void Edge_Annotations::unsafe_arena_set_allocated_cost(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* cost) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cost_);
  }
  _impl_.cost_ = cost;
  if (cost) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.cost)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Edge_Annotations::release_cost() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.cost_;
  _impl_.cost_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Edge_Annotations::unsafe_arena_release_cost() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Edge.Annotations.cost)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.cost_;
  _impl_.cost_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Edge_Annotations::_internal_mutable_cost() {
  
  if (_impl_.cost_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.cost_ = p;
  }
  return _impl_.cost_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Edge_Annotations::mutable_cost() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_cost();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Edge.Annotations.cost)
  return _msg;
}
inline void Edge_Annotations::set_allocated_cost(::PROTOBUF_NAMESPACE_ID::DoubleValue* cost) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cost_);
  }
  if (cost) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cost));
    if (message_arena != submessage_arena) {
      cost = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cost, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cost_ = cost;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.cost)
}

// .bosdyn.api.graph_nav.Edge.EdgeSource edge_source = 12;
inline void Edge_Annotations::clear_edge_source() {
  _impl_.edge_source_ = 0;
}
inline ::bosdyn::api::graph_nav::Edge_EdgeSource Edge_Annotations::_internal_edge_source() const {
  return static_cast< ::bosdyn::api::graph_nav::Edge_EdgeSource >(_impl_.edge_source_);
}
inline ::bosdyn::api::graph_nav::Edge_EdgeSource Edge_Annotations::edge_source() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Annotations.edge_source)
  return _internal_edge_source();
}
inline void Edge_Annotations::_internal_set_edge_source(::bosdyn::api::graph_nav::Edge_EdgeSource value) {
  
  _impl_.edge_source_ = value;
}
inline void Edge_Annotations::set_edge_source(::bosdyn::api::graph_nav::Edge_EdgeSource value) {
  _internal_set_edge_source(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.Edge.Annotations.edge_source)
}

// bool disable_alternate_route_finding = 13;
inline void Edge_Annotations::clear_disable_alternate_route_finding() {
  _impl_.disable_alternate_route_finding_ = false;
}
inline bool Edge_Annotations::_internal_disable_alternate_route_finding() const {
  return _impl_.disable_alternate_route_finding_;
}
inline bool Edge_Annotations::disable_alternate_route_finding() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Annotations.disable_alternate_route_finding)
  return _internal_disable_alternate_route_finding();
}
inline void Edge_Annotations::_internal_set_disable_alternate_route_finding(bool value) {
  
  _impl_.disable_alternate_route_finding_ = value;
}
inline void Edge_Annotations::set_disable_alternate_route_finding(bool value) {
  _internal_set_disable_alternate_route_finding(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.Edge.Annotations.disable_alternate_route_finding)
}

// .bosdyn.api.graph_nav.Edge.Annotations.PathFollowingMode path_following_mode = 14;
inline void Edge_Annotations::clear_path_following_mode() {
  _impl_.path_following_mode_ = 0;
}
inline ::bosdyn::api::graph_nav::Edge_Annotations_PathFollowingMode Edge_Annotations::_internal_path_following_mode() const {
  return static_cast< ::bosdyn::api::graph_nav::Edge_Annotations_PathFollowingMode >(_impl_.path_following_mode_);
}
inline ::bosdyn::api::graph_nav::Edge_Annotations_PathFollowingMode Edge_Annotations::path_following_mode() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Annotations.path_following_mode)
  return _internal_path_following_mode();
}
inline void Edge_Annotations::_internal_set_path_following_mode(::bosdyn::api::graph_nav::Edge_Annotations_PathFollowingMode value) {
  
  _impl_.path_following_mode_ = value;
}
inline void Edge_Annotations::set_path_following_mode(::bosdyn::api::graph_nav::Edge_Annotations_PathFollowingMode value) {
  _internal_set_path_following_mode(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.Edge.Annotations.path_following_mode)
}

// bool disable_directed_exploration = 15;
inline void Edge_Annotations::clear_disable_directed_exploration() {
  _impl_.disable_directed_exploration_ = false;
}
inline bool Edge_Annotations::_internal_disable_directed_exploration() const {
  return _impl_.disable_directed_exploration_;
}
inline bool Edge_Annotations::disable_directed_exploration() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Annotations.disable_directed_exploration)
  return _internal_disable_directed_exploration();
}
inline void Edge_Annotations::_internal_set_disable_directed_exploration(bool value) {
  
  _impl_.disable_directed_exploration_ = value;
}
inline void Edge_Annotations::set_disable_directed_exploration(bool value) {
  _internal_set_disable_directed_exploration(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.Edge.Annotations.disable_directed_exploration)
}

// map<string, .bosdyn.api.graph_nav.AreaCallbackRegion> area_callbacks = 16;
inline int Edge_Annotations::_internal_area_callbacks_size() const {
  return _impl_.area_callbacks_.size();
}
inline int Edge_Annotations::area_callbacks_size() const {
  return _internal_area_callbacks_size();
}
inline void Edge_Annotations::clear_area_callbacks() {
  _impl_.area_callbacks_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::graph_nav::AreaCallbackRegion >&
Edge_Annotations::_internal_area_callbacks() const {
  return _impl_.area_callbacks_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::graph_nav::AreaCallbackRegion >&
Edge_Annotations::area_callbacks() const {
  // @@protoc_insertion_point(field_map:bosdyn.api.graph_nav.Edge.Annotations.area_callbacks)
  return _internal_area_callbacks();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::graph_nav::AreaCallbackRegion >*
Edge_Annotations::_internal_mutable_area_callbacks() {
  return _impl_.area_callbacks_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::graph_nav::AreaCallbackRegion >*
Edge_Annotations::mutable_area_callbacks() {
  // @@protoc_insertion_point(field_mutable_map:bosdyn.api.graph_nav.Edge.Annotations.area_callbacks)
  return _internal_mutable_area_callbacks();
}

// .bosdyn.api.graph_nav.Edge.Annotations.GroundClutterAvoidanceMode ground_clutter_mode = 17;
inline void Edge_Annotations::clear_ground_clutter_mode() {
  _impl_.ground_clutter_mode_ = 0;
}
inline ::bosdyn::api::graph_nav::Edge_Annotations_GroundClutterAvoidanceMode Edge_Annotations::_internal_ground_clutter_mode() const {
  return static_cast< ::bosdyn::api::graph_nav::Edge_Annotations_GroundClutterAvoidanceMode >(_impl_.ground_clutter_mode_);
}
inline ::bosdyn::api::graph_nav::Edge_Annotations_GroundClutterAvoidanceMode Edge_Annotations::ground_clutter_mode() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Annotations.ground_clutter_mode)
  return _internal_ground_clutter_mode();
}
inline void Edge_Annotations::_internal_set_ground_clutter_mode(::bosdyn::api::graph_nav::Edge_Annotations_GroundClutterAvoidanceMode value) {
  
  _impl_.ground_clutter_mode_ = value;
}
inline void Edge_Annotations::set_ground_clutter_mode(::bosdyn::api::graph_nav::Edge_Annotations_GroundClutterAvoidanceMode value) {
  _internal_set_ground_clutter_mode(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.Edge.Annotations.ground_clutter_mode)
}

// -------------------------------------------------------------------

// Edge

// .bosdyn.api.graph_nav.Edge.Id id = 1;
inline bool Edge::_internal_has_id() const {
  return this != internal_default_instance() && _impl_.id_ != nullptr;
}
inline bool Edge::has_id() const {
  return _internal_has_id();
}
inline void Edge::clear_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.id_ != nullptr) {
    delete _impl_.id_;
  }
  _impl_.id_ = nullptr;
}
inline const ::bosdyn::api::graph_nav::Edge_Id& Edge::_internal_id() const {
  const ::bosdyn::api::graph_nav::Edge_Id* p = _impl_.id_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::graph_nav::Edge_Id&>(
      ::bosdyn::api::graph_nav::_Edge_Id_default_instance_);
}
inline const ::bosdyn::api::graph_nav::Edge_Id& Edge::id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.id)
  return _internal_id();
}
inline void Edge::unsafe_arena_set_allocated_id(
    ::bosdyn::api::graph_nav::Edge_Id* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  _impl_.id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Edge.id)
}
inline ::bosdyn::api::graph_nav::Edge_Id* Edge::release_id() {
  
  ::bosdyn::api::graph_nav::Edge_Id* temp = _impl_.id_;
  _impl_.id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::graph_nav::Edge_Id* Edge::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Edge.id)
  
  ::bosdyn::api::graph_nav::Edge_Id* temp = _impl_.id_;
  _impl_.id_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::Edge_Id* Edge::_internal_mutable_id() {
  
  if (_impl_.id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::Edge_Id>(GetArenaForAllocation());
    _impl_.id_ = p;
  }
  return _impl_.id_;
}
inline ::bosdyn::api::graph_nav::Edge_Id* Edge::mutable_id() {
  ::bosdyn::api::graph_nav::Edge_Id* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Edge.id)
  return _msg;
}
inline void Edge::set_allocated_id(::bosdyn::api::graph_nav::Edge_Id* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.id_;
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(id);
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.id_ = id;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Edge.id)
}

// string snapshot_id = 2;
inline void Edge::clear_snapshot_id() {
  _impl_.snapshot_id_.ClearToEmpty();
}
inline const std::string& Edge::snapshot_id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.snapshot_id)
  return _internal_snapshot_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Edge::set_snapshot_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.snapshot_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.Edge.snapshot_id)
}
inline std::string* Edge::mutable_snapshot_id() {
  std::string* _s = _internal_mutable_snapshot_id();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Edge.snapshot_id)
  return _s;
}
inline const std::string& Edge::_internal_snapshot_id() const {
  return _impl_.snapshot_id_.Get();
}
inline void Edge::_internal_set_snapshot_id(const std::string& value) {
  
  _impl_.snapshot_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Edge::_internal_mutable_snapshot_id() {
  
  return _impl_.snapshot_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Edge::release_snapshot_id() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Edge.snapshot_id)
  return _impl_.snapshot_id_.Release();
}
inline void Edge::set_allocated_snapshot_id(std::string* snapshot_id) {
  if (snapshot_id != nullptr) {
    
  } else {
    
  }
  _impl_.snapshot_id_.SetAllocated(snapshot_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.snapshot_id_.IsDefault()) {
    _impl_.snapshot_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Edge.snapshot_id)
}

// .bosdyn.api.SE3Pose from_tform_to = 3;
inline bool Edge::_internal_has_from_tform_to() const {
  return this != internal_default_instance() && _impl_.from_tform_to_ != nullptr;
}
inline bool Edge::has_from_tform_to() const {
  return _internal_has_from_tform_to();
}
inline const ::bosdyn::api::SE3Pose& Edge::_internal_from_tform_to() const {
  const ::bosdyn::api::SE3Pose* p = _impl_.from_tform_to_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::SE3Pose&>(
      ::bosdyn::api::_SE3Pose_default_instance_);
}
inline const ::bosdyn::api::SE3Pose& Edge::from_tform_to() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.from_tform_to)
  return _internal_from_tform_to();
}
inline void Edge::unsafe_arena_set_allocated_from_tform_to(
    ::bosdyn::api::SE3Pose* from_tform_to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.from_tform_to_);
  }
  _impl_.from_tform_to_ = from_tform_to;
  if (from_tform_to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Edge.from_tform_to)
}
inline ::bosdyn::api::SE3Pose* Edge::release_from_tform_to() {
  
  ::bosdyn::api::SE3Pose* temp = _impl_.from_tform_to_;
  _impl_.from_tform_to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::SE3Pose* Edge::unsafe_arena_release_from_tform_to() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Edge.from_tform_to)
  
  ::bosdyn::api::SE3Pose* temp = _impl_.from_tform_to_;
  _impl_.from_tform_to_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Pose* Edge::_internal_mutable_from_tform_to() {
  
  if (_impl_.from_tform_to_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Pose>(GetArenaForAllocation());
    _impl_.from_tform_to_ = p;
  }
  return _impl_.from_tform_to_;
}
inline ::bosdyn::api::SE3Pose* Edge::mutable_from_tform_to() {
  ::bosdyn::api::SE3Pose* _msg = _internal_mutable_from_tform_to();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Edge.from_tform_to)
  return _msg;
}
inline void Edge::set_allocated_from_tform_to(::bosdyn::api::SE3Pose* from_tform_to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.from_tform_to_);
  }
  if (from_tform_to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_tform_to));
    if (message_arena != submessage_arena) {
      from_tform_to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from_tform_to, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.from_tform_to_ = from_tform_to;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Edge.from_tform_to)
}

// .bosdyn.api.graph_nav.Edge.Annotations annotations = 4;
inline bool Edge::_internal_has_annotations() const {
  return this != internal_default_instance() && _impl_.annotations_ != nullptr;
}
inline bool Edge::has_annotations() const {
  return _internal_has_annotations();
}
inline void Edge::clear_annotations() {
  if (GetArenaForAllocation() == nullptr && _impl_.annotations_ != nullptr) {
    delete _impl_.annotations_;
  }
  _impl_.annotations_ = nullptr;
}
inline const ::bosdyn::api::graph_nav::Edge_Annotations& Edge::_internal_annotations() const {
  const ::bosdyn::api::graph_nav::Edge_Annotations* p = _impl_.annotations_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::graph_nav::Edge_Annotations&>(
      ::bosdyn::api::graph_nav::_Edge_Annotations_default_instance_);
}
inline const ::bosdyn::api::graph_nav::Edge_Annotations& Edge::annotations() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.annotations)
  return _internal_annotations();
}
inline void Edge::unsafe_arena_set_allocated_annotations(
    ::bosdyn::api::graph_nav::Edge_Annotations* annotations) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.annotations_);
  }
  _impl_.annotations_ = annotations;
  if (annotations) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Edge.annotations)
}
inline ::bosdyn::api::graph_nav::Edge_Annotations* Edge::release_annotations() {
  
  ::bosdyn::api::graph_nav::Edge_Annotations* temp = _impl_.annotations_;
  _impl_.annotations_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::graph_nav::Edge_Annotations* Edge::unsafe_arena_release_annotations() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Edge.annotations)
  
  ::bosdyn::api::graph_nav::Edge_Annotations* temp = _impl_.annotations_;
  _impl_.annotations_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::Edge_Annotations* Edge::_internal_mutable_annotations() {
  
  if (_impl_.annotations_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::Edge_Annotations>(GetArenaForAllocation());
    _impl_.annotations_ = p;
  }
  return _impl_.annotations_;
}
inline ::bosdyn::api::graph_nav::Edge_Annotations* Edge::mutable_annotations() {
  ::bosdyn::api::graph_nav::Edge_Annotations* _msg = _internal_mutable_annotations();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Edge.annotations)
  return _msg;
}
inline void Edge::set_allocated_annotations(::bosdyn::api::graph_nav::Edge_Annotations* annotations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.annotations_;
  }
  if (annotations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(annotations);
    if (message_arena != submessage_arena) {
      annotations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotations, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.annotations_ = annotations;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Edge.annotations)
}

// -------------------------------------------------------------------

// EdgeSnapshot_Stance

// .google.protobuf.Timestamp timestamp = 1;
inline bool EdgeSnapshot_Stance::_internal_has_timestamp() const {
  return this != internal_default_instance() && _impl_.timestamp_ != nullptr;
}
inline bool EdgeSnapshot_Stance::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& EdgeSnapshot_Stance::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& EdgeSnapshot_Stance::timestamp() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.EdgeSnapshot.Stance.timestamp)
  return _internal_timestamp();
}
inline void EdgeSnapshot_Stance::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.EdgeSnapshot.Stance.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* EdgeSnapshot_Stance::release_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* EdgeSnapshot_Stance::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.EdgeSnapshot.Stance.timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* EdgeSnapshot_Stance::_internal_mutable_timestamp() {
  
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* EdgeSnapshot_Stance::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.EdgeSnapshot.Stance.timestamp)
  return _msg;
}
inline void EdgeSnapshot_Stance::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.EdgeSnapshot.Stance.timestamp)
}

// repeated .bosdyn.api.FootState foot_states = 2;
inline int EdgeSnapshot_Stance::_internal_foot_states_size() const {
  return _impl_.foot_states_.size();
}
inline int EdgeSnapshot_Stance::foot_states_size() const {
  return _internal_foot_states_size();
}
inline ::bosdyn::api::FootState* EdgeSnapshot_Stance::mutable_foot_states(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.EdgeSnapshot.Stance.foot_states)
  return _impl_.foot_states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::FootState >*
EdgeSnapshot_Stance::mutable_foot_states() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.EdgeSnapshot.Stance.foot_states)
  return &_impl_.foot_states_;
}
inline const ::bosdyn::api::FootState& EdgeSnapshot_Stance::_internal_foot_states(int index) const {
  return _impl_.foot_states_.Get(index);
}
inline const ::bosdyn::api::FootState& EdgeSnapshot_Stance::foot_states(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.EdgeSnapshot.Stance.foot_states)
  return _internal_foot_states(index);
}
inline ::bosdyn::api::FootState* EdgeSnapshot_Stance::_internal_add_foot_states() {
  return _impl_.foot_states_.Add();
}
inline ::bosdyn::api::FootState* EdgeSnapshot_Stance::add_foot_states() {
  ::bosdyn::api::FootState* _add = _internal_add_foot_states();
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.EdgeSnapshot.Stance.foot_states)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::FootState >&
EdgeSnapshot_Stance::foot_states() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.EdgeSnapshot.Stance.foot_states)
  return _impl_.foot_states_;
}

// .bosdyn.api.SE3Pose ko_tform_body = 3;
inline bool EdgeSnapshot_Stance::_internal_has_ko_tform_body() const {
  return this != internal_default_instance() && _impl_.ko_tform_body_ != nullptr;
}
inline bool EdgeSnapshot_Stance::has_ko_tform_body() const {
  return _internal_has_ko_tform_body();
}
inline const ::bosdyn::api::SE3Pose& EdgeSnapshot_Stance::_internal_ko_tform_body() const {
  const ::bosdyn::api::SE3Pose* p = _impl_.ko_tform_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::SE3Pose&>(
      ::bosdyn::api::_SE3Pose_default_instance_);
}
inline const ::bosdyn::api::SE3Pose& EdgeSnapshot_Stance::ko_tform_body() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.EdgeSnapshot.Stance.ko_tform_body)
  return _internal_ko_tform_body();
}
inline void EdgeSnapshot_Stance::unsafe_arena_set_allocated_ko_tform_body(
    ::bosdyn::api::SE3Pose* ko_tform_body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ko_tform_body_);
  }
  _impl_.ko_tform_body_ = ko_tform_body;
  if (ko_tform_body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.EdgeSnapshot.Stance.ko_tform_body)
}
inline ::bosdyn::api::SE3Pose* EdgeSnapshot_Stance::release_ko_tform_body() {
  
  ::bosdyn::api::SE3Pose* temp = _impl_.ko_tform_body_;
  _impl_.ko_tform_body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::SE3Pose* EdgeSnapshot_Stance::unsafe_arena_release_ko_tform_body() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.EdgeSnapshot.Stance.ko_tform_body)
  
  ::bosdyn::api::SE3Pose* temp = _impl_.ko_tform_body_;
  _impl_.ko_tform_body_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Pose* EdgeSnapshot_Stance::_internal_mutable_ko_tform_body() {
  
  if (_impl_.ko_tform_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Pose>(GetArenaForAllocation());
    _impl_.ko_tform_body_ = p;
  }
  return _impl_.ko_tform_body_;
}
inline ::bosdyn::api::SE3Pose* EdgeSnapshot_Stance::mutable_ko_tform_body() {
  ::bosdyn::api::SE3Pose* _msg = _internal_mutable_ko_tform_body();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.EdgeSnapshot.Stance.ko_tform_body)
  return _msg;
}
inline void EdgeSnapshot_Stance::set_allocated_ko_tform_body(::bosdyn::api::SE3Pose* ko_tform_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ko_tform_body_);
  }
  if (ko_tform_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ko_tform_body));
    if (message_arena != submessage_arena) {
      ko_tform_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ko_tform_body, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ko_tform_body_ = ko_tform_body;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.EdgeSnapshot.Stance.ko_tform_body)
}

// .bosdyn.api.SE3Pose vision_tform_body = 5;
inline bool EdgeSnapshot_Stance::_internal_has_vision_tform_body() const {
  return this != internal_default_instance() && _impl_.vision_tform_body_ != nullptr;
}
inline bool EdgeSnapshot_Stance::has_vision_tform_body() const {
  return _internal_has_vision_tform_body();
}
inline const ::bosdyn::api::SE3Pose& EdgeSnapshot_Stance::_internal_vision_tform_body() const {
  const ::bosdyn::api::SE3Pose* p = _impl_.vision_tform_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::SE3Pose&>(
      ::bosdyn::api::_SE3Pose_default_instance_);
}
inline const ::bosdyn::api::SE3Pose& EdgeSnapshot_Stance::vision_tform_body() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.EdgeSnapshot.Stance.vision_tform_body)
  return _internal_vision_tform_body();
}
inline void EdgeSnapshot_Stance::unsafe_arena_set_allocated_vision_tform_body(
    ::bosdyn::api::SE3Pose* vision_tform_body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vision_tform_body_);
  }
  _impl_.vision_tform_body_ = vision_tform_body;
  if (vision_tform_body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.EdgeSnapshot.Stance.vision_tform_body)
}
inline ::bosdyn::api::SE3Pose* EdgeSnapshot_Stance::release_vision_tform_body() {
  
  ::bosdyn::api::SE3Pose* temp = _impl_.vision_tform_body_;
  _impl_.vision_tform_body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::SE3Pose* EdgeSnapshot_Stance::unsafe_arena_release_vision_tform_body() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.EdgeSnapshot.Stance.vision_tform_body)
  
  ::bosdyn::api::SE3Pose* temp = _impl_.vision_tform_body_;
  _impl_.vision_tform_body_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Pose* EdgeSnapshot_Stance::_internal_mutable_vision_tform_body() {
  
  if (_impl_.vision_tform_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Pose>(GetArenaForAllocation());
    _impl_.vision_tform_body_ = p;
  }
  return _impl_.vision_tform_body_;
}
inline ::bosdyn::api::SE3Pose* EdgeSnapshot_Stance::mutable_vision_tform_body() {
  ::bosdyn::api::SE3Pose* _msg = _internal_mutable_vision_tform_body();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.EdgeSnapshot.Stance.vision_tform_body)
  return _msg;
}
inline void EdgeSnapshot_Stance::set_allocated_vision_tform_body(::bosdyn::api::SE3Pose* vision_tform_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vision_tform_body_);
  }
  if (vision_tform_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vision_tform_body));
    if (message_arena != submessage_arena) {
      vision_tform_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vision_tform_body, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vision_tform_body_ = vision_tform_body;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.EdgeSnapshot.Stance.vision_tform_body)
}

// .google.protobuf.BoolValue planar_ground = 4;
inline bool EdgeSnapshot_Stance::_internal_has_planar_ground() const {
  return this != internal_default_instance() && _impl_.planar_ground_ != nullptr;
}
inline bool EdgeSnapshot_Stance::has_planar_ground() const {
  return _internal_has_planar_ground();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& EdgeSnapshot_Stance::_internal_planar_ground() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.planar_ground_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& EdgeSnapshot_Stance::planar_ground() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.EdgeSnapshot.Stance.planar_ground)
  return _internal_planar_ground();
}
inline void EdgeSnapshot_Stance::unsafe_arena_set_allocated_planar_ground(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* planar_ground) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.planar_ground_);
  }
  _impl_.planar_ground_ = planar_ground;
  if (planar_ground) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.EdgeSnapshot.Stance.planar_ground)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* EdgeSnapshot_Stance::release_planar_ground() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.planar_ground_;
  _impl_.planar_ground_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* EdgeSnapshot_Stance::unsafe_arena_release_planar_ground() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.EdgeSnapshot.Stance.planar_ground)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.planar_ground_;
  _impl_.planar_ground_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* EdgeSnapshot_Stance::_internal_mutable_planar_ground() {
  
  if (_impl_.planar_ground_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.planar_ground_ = p;
  }
  return _impl_.planar_ground_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* EdgeSnapshot_Stance::mutable_planar_ground() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_planar_ground();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.EdgeSnapshot.Stance.planar_ground)
  return _msg;
}
inline void EdgeSnapshot_Stance::set_allocated_planar_ground(::PROTOBUF_NAMESPACE_ID::BoolValue* planar_ground) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.planar_ground_);
  }
  if (planar_ground) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(planar_ground));
    if (message_arena != submessage_arena) {
      planar_ground = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, planar_ground, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.planar_ground_ = planar_ground;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.EdgeSnapshot.Stance.planar_ground)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// EdgeSnapshot

// string id = 1;
inline void EdgeSnapshot::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& EdgeSnapshot::id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.EdgeSnapshot.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EdgeSnapshot::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.EdgeSnapshot.id)
}
inline std::string* EdgeSnapshot::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.EdgeSnapshot.id)
  return _s;
}
inline const std::string& EdgeSnapshot::_internal_id() const {
  return _impl_.id_.Get();
}
inline void EdgeSnapshot::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* EdgeSnapshot::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* EdgeSnapshot::release_id() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.EdgeSnapshot.id)
  return _impl_.id_.Release();
}
inline void EdgeSnapshot::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.EdgeSnapshot.id)
}

// repeated .bosdyn.api.graph_nav.EdgeSnapshot.Stance stances = 2;
inline int EdgeSnapshot::_internal_stances_size() const {
  return _impl_.stances_.size();
}
inline int EdgeSnapshot::stances_size() const {
  return _internal_stances_size();
}
inline void EdgeSnapshot::clear_stances() {
  _impl_.stances_.Clear();
}
inline ::bosdyn::api::graph_nav::EdgeSnapshot_Stance* EdgeSnapshot::mutable_stances(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.EdgeSnapshot.stances)
  return _impl_.stances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::EdgeSnapshot_Stance >*
EdgeSnapshot::mutable_stances() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.EdgeSnapshot.stances)
  return &_impl_.stances_;
}
inline const ::bosdyn::api::graph_nav::EdgeSnapshot_Stance& EdgeSnapshot::_internal_stances(int index) const {
  return _impl_.stances_.Get(index);
}
inline const ::bosdyn::api::graph_nav::EdgeSnapshot_Stance& EdgeSnapshot::stances(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.EdgeSnapshot.stances)
  return _internal_stances(index);
}
inline ::bosdyn::api::graph_nav::EdgeSnapshot_Stance* EdgeSnapshot::_internal_add_stances() {
  return _impl_.stances_.Add();
}
inline ::bosdyn::api::graph_nav::EdgeSnapshot_Stance* EdgeSnapshot::add_stances() {
  ::bosdyn::api::graph_nav::EdgeSnapshot_Stance* _add = _internal_add_stances();
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.EdgeSnapshot.stances)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::EdgeSnapshot_Stance >&
EdgeSnapshot::stances() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.EdgeSnapshot.stances)
  return _impl_.stances_;
}

// map<string, .bosdyn.api.graph_nav.AreaCallbackData> area_callbacks = 16;
inline int EdgeSnapshot::_internal_area_callbacks_size() const {
  return _impl_.area_callbacks_.size();
}
inline int EdgeSnapshot::area_callbacks_size() const {
  return _internal_area_callbacks_size();
}
inline void EdgeSnapshot::clear_area_callbacks() {
  _impl_.area_callbacks_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::graph_nav::AreaCallbackData >&
EdgeSnapshot::_internal_area_callbacks() const {
  return _impl_.area_callbacks_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::graph_nav::AreaCallbackData >&
EdgeSnapshot::area_callbacks() const {
  // @@protoc_insertion_point(field_map:bosdyn.api.graph_nav.EdgeSnapshot.area_callbacks)
  return _internal_area_callbacks();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::graph_nav::AreaCallbackData >*
EdgeSnapshot::_internal_mutable_area_callbacks() {
  return _impl_.area_callbacks_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::graph_nav::AreaCallbackData >*
EdgeSnapshot::mutable_area_callbacks() {
  // @@protoc_insertion_point(field_mutable_map:bosdyn.api.graph_nav.EdgeSnapshot.area_callbacks)
  return _internal_mutable_area_callbacks();
}

// -------------------------------------------------------------------

// Anchor

// string id = 1;
inline void Anchor::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Anchor::id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Anchor.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Anchor::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.Anchor.id)
}
inline std::string* Anchor::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Anchor.id)
  return _s;
}
inline const std::string& Anchor::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Anchor::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Anchor::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* Anchor::release_id() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Anchor.id)
  return _impl_.id_.Release();
}
inline void Anchor::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Anchor.id)
}

// .bosdyn.api.SE3Pose seed_tform_waypoint = 2;
inline bool Anchor::_internal_has_seed_tform_waypoint() const {
  return this != internal_default_instance() && _impl_.seed_tform_waypoint_ != nullptr;
}
inline bool Anchor::has_seed_tform_waypoint() const {
  return _internal_has_seed_tform_waypoint();
}
inline const ::bosdyn::api::SE3Pose& Anchor::_internal_seed_tform_waypoint() const {
  const ::bosdyn::api::SE3Pose* p = _impl_.seed_tform_waypoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::SE3Pose&>(
      ::bosdyn::api::_SE3Pose_default_instance_);
}
inline const ::bosdyn::api::SE3Pose& Anchor::seed_tform_waypoint() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Anchor.seed_tform_waypoint)
  return _internal_seed_tform_waypoint();
}
inline void Anchor::unsafe_arena_set_allocated_seed_tform_waypoint(
    ::bosdyn::api::SE3Pose* seed_tform_waypoint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.seed_tform_waypoint_);
  }
  _impl_.seed_tform_waypoint_ = seed_tform_waypoint;
  if (seed_tform_waypoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Anchor.seed_tform_waypoint)
}
inline ::bosdyn::api::SE3Pose* Anchor::release_seed_tform_waypoint() {
  
  ::bosdyn::api::SE3Pose* temp = _impl_.seed_tform_waypoint_;
  _impl_.seed_tform_waypoint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::SE3Pose* Anchor::unsafe_arena_release_seed_tform_waypoint() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Anchor.seed_tform_waypoint)
  
  ::bosdyn::api::SE3Pose* temp = _impl_.seed_tform_waypoint_;
  _impl_.seed_tform_waypoint_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Pose* Anchor::_internal_mutable_seed_tform_waypoint() {
  
  if (_impl_.seed_tform_waypoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Pose>(GetArenaForAllocation());
    _impl_.seed_tform_waypoint_ = p;
  }
  return _impl_.seed_tform_waypoint_;
}
inline ::bosdyn::api::SE3Pose* Anchor::mutable_seed_tform_waypoint() {
  ::bosdyn::api::SE3Pose* _msg = _internal_mutable_seed_tform_waypoint();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Anchor.seed_tform_waypoint)
  return _msg;
}
inline void Anchor::set_allocated_seed_tform_waypoint(::bosdyn::api::SE3Pose* seed_tform_waypoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.seed_tform_waypoint_);
  }
  if (seed_tform_waypoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(seed_tform_waypoint));
    if (message_arena != submessage_arena) {
      seed_tform_waypoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seed_tform_waypoint, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.seed_tform_waypoint_ = seed_tform_waypoint;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Anchor.seed_tform_waypoint)
}

// -------------------------------------------------------------------

// AnchoredWorldObject

// string id = 1;
inline void AnchoredWorldObject::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& AnchoredWorldObject::id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.AnchoredWorldObject.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AnchoredWorldObject::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.AnchoredWorldObject.id)
}
inline std::string* AnchoredWorldObject::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.AnchoredWorldObject.id)
  return _s;
}
inline const std::string& AnchoredWorldObject::_internal_id() const {
  return _impl_.id_.Get();
}
inline void AnchoredWorldObject::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* AnchoredWorldObject::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* AnchoredWorldObject::release_id() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.AnchoredWorldObject.id)
  return _impl_.id_.Release();
}
inline void AnchoredWorldObject::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.AnchoredWorldObject.id)
}

// .bosdyn.api.SE3Pose seed_tform_object = 2;
inline bool AnchoredWorldObject::_internal_has_seed_tform_object() const {
  return this != internal_default_instance() && _impl_.seed_tform_object_ != nullptr;
}
inline bool AnchoredWorldObject::has_seed_tform_object() const {
  return _internal_has_seed_tform_object();
}
inline const ::bosdyn::api::SE3Pose& AnchoredWorldObject::_internal_seed_tform_object() const {
  const ::bosdyn::api::SE3Pose* p = _impl_.seed_tform_object_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::SE3Pose&>(
      ::bosdyn::api::_SE3Pose_default_instance_);
}
inline const ::bosdyn::api::SE3Pose& AnchoredWorldObject::seed_tform_object() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.AnchoredWorldObject.seed_tform_object)
  return _internal_seed_tform_object();
}
inline void AnchoredWorldObject::unsafe_arena_set_allocated_seed_tform_object(
    ::bosdyn::api::SE3Pose* seed_tform_object) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.seed_tform_object_);
  }
  _impl_.seed_tform_object_ = seed_tform_object;
  if (seed_tform_object) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.AnchoredWorldObject.seed_tform_object)
}
inline ::bosdyn::api::SE3Pose* AnchoredWorldObject::release_seed_tform_object() {
  
  ::bosdyn::api::SE3Pose* temp = _impl_.seed_tform_object_;
  _impl_.seed_tform_object_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::SE3Pose* AnchoredWorldObject::unsafe_arena_release_seed_tform_object() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.AnchoredWorldObject.seed_tform_object)
  
  ::bosdyn::api::SE3Pose* temp = _impl_.seed_tform_object_;
  _impl_.seed_tform_object_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Pose* AnchoredWorldObject::_internal_mutable_seed_tform_object() {
  
  if (_impl_.seed_tform_object_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Pose>(GetArenaForAllocation());
    _impl_.seed_tform_object_ = p;
  }
  return _impl_.seed_tform_object_;
}
inline ::bosdyn::api::SE3Pose* AnchoredWorldObject::mutable_seed_tform_object() {
  ::bosdyn::api::SE3Pose* _msg = _internal_mutable_seed_tform_object();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.AnchoredWorldObject.seed_tform_object)
  return _msg;
}
inline void AnchoredWorldObject::set_allocated_seed_tform_object(::bosdyn::api::SE3Pose* seed_tform_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.seed_tform_object_);
  }
  if (seed_tform_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(seed_tform_object));
    if (message_arena != submessage_arena) {
      seed_tform_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seed_tform_object, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.seed_tform_object_ = seed_tform_object;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.AnchoredWorldObject.seed_tform_object)
}

// -------------------------------------------------------------------

// Anchoring

// repeated .bosdyn.api.graph_nav.Anchor anchors = 1;
inline int Anchoring::_internal_anchors_size() const {
  return _impl_.anchors_.size();
}
inline int Anchoring::anchors_size() const {
  return _internal_anchors_size();
}
inline void Anchoring::clear_anchors() {
  _impl_.anchors_.Clear();
}
inline ::bosdyn::api::graph_nav::Anchor* Anchoring::mutable_anchors(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Anchoring.anchors)
  return _impl_.anchors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Anchor >*
Anchoring::mutable_anchors() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.Anchoring.anchors)
  return &_impl_.anchors_;
}
inline const ::bosdyn::api::graph_nav::Anchor& Anchoring::_internal_anchors(int index) const {
  return _impl_.anchors_.Get(index);
}
inline const ::bosdyn::api::graph_nav::Anchor& Anchoring::anchors(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Anchoring.anchors)
  return _internal_anchors(index);
}
inline ::bosdyn::api::graph_nav::Anchor* Anchoring::_internal_add_anchors() {
  return _impl_.anchors_.Add();
}
inline ::bosdyn::api::graph_nav::Anchor* Anchoring::add_anchors() {
  ::bosdyn::api::graph_nav::Anchor* _add = _internal_add_anchors();
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.Anchoring.anchors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Anchor >&
Anchoring::anchors() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.Anchoring.anchors)
  return _impl_.anchors_;
}

// repeated .bosdyn.api.graph_nav.AnchoredWorldObject objects = 2;
inline int Anchoring::_internal_objects_size() const {
  return _impl_.objects_.size();
}
inline int Anchoring::objects_size() const {
  return _internal_objects_size();
}
inline void Anchoring::clear_objects() {
  _impl_.objects_.Clear();
}
inline ::bosdyn::api::graph_nav::AnchoredWorldObject* Anchoring::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Anchoring.objects)
  return _impl_.objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::AnchoredWorldObject >*
Anchoring::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.Anchoring.objects)
  return &_impl_.objects_;
}
inline const ::bosdyn::api::graph_nav::AnchoredWorldObject& Anchoring::_internal_objects(int index) const {
  return _impl_.objects_.Get(index);
}
inline const ::bosdyn::api::graph_nav::AnchoredWorldObject& Anchoring::objects(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Anchoring.objects)
  return _internal_objects(index);
}
inline ::bosdyn::api::graph_nav::AnchoredWorldObject* Anchoring::_internal_add_objects() {
  return _impl_.objects_.Add();
}
inline ::bosdyn::api::graph_nav::AnchoredWorldObject* Anchoring::add_objects() {
  ::bosdyn::api::graph_nav::AnchoredWorldObject* _add = _internal_add_objects();
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.Anchoring.objects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::AnchoredWorldObject >&
Anchoring::objects() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.Anchoring.objects)
  return _impl_.objects_;
}

// -------------------------------------------------------------------

// AreaCallbackRegion

// string service_name = 1;
inline void AreaCallbackRegion::clear_service_name() {
  _impl_.service_name_.ClearToEmpty();
}
inline const std::string& AreaCallbackRegion::service_name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.AreaCallbackRegion.service_name)
  return _internal_service_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AreaCallbackRegion::set_service_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.AreaCallbackRegion.service_name)
}
inline std::string* AreaCallbackRegion::mutable_service_name() {
  std::string* _s = _internal_mutable_service_name();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.AreaCallbackRegion.service_name)
  return _s;
}
inline const std::string& AreaCallbackRegion::_internal_service_name() const {
  return _impl_.service_name_.Get();
}
inline void AreaCallbackRegion::_internal_set_service_name(const std::string& value) {
  
  _impl_.service_name_.Set(value, GetArenaForAllocation());
}
inline std::string* AreaCallbackRegion::_internal_mutable_service_name() {
  
  return _impl_.service_name_.Mutable(GetArenaForAllocation());
}
inline std::string* AreaCallbackRegion::release_service_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.AreaCallbackRegion.service_name)
  return _impl_.service_name_.Release();
}
inline void AreaCallbackRegion::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  _impl_.service_name_.SetAllocated(service_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_name_.IsDefault()) {
    _impl_.service_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.AreaCallbackRegion.service_name)
}

// string description = 3;
inline void AreaCallbackRegion::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& AreaCallbackRegion::description() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.AreaCallbackRegion.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AreaCallbackRegion::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.AreaCallbackRegion.description)
}
inline std::string* AreaCallbackRegion::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.AreaCallbackRegion.description)
  return _s;
}
inline const std::string& AreaCallbackRegion::_internal_description() const {
  return _impl_.description_.Get();
}
inline void AreaCallbackRegion::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* AreaCallbackRegion::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* AreaCallbackRegion::release_description() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.AreaCallbackRegion.description)
  return _impl_.description_.Release();
}
inline void AreaCallbackRegion::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.AreaCallbackRegion.description)
}

// -------------------------------------------------------------------

// AreaCallbackData

// .google.protobuf.Any config_data = 1;
inline bool AreaCallbackData::_internal_has_config_data() const {
  return this != internal_default_instance() && _impl_.config_data_ != nullptr;
}
inline bool AreaCallbackData::has_config_data() const {
  return _internal_has_config_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& AreaCallbackData::_internal_config_data() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.config_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& AreaCallbackData::config_data() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.AreaCallbackData.config_data)
  return _internal_config_data();
}
inline void AreaCallbackData::unsafe_arena_set_allocated_config_data(
    ::PROTOBUF_NAMESPACE_ID::Any* config_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_data_);
  }
  _impl_.config_data_ = config_data;
  if (config_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.AreaCallbackData.config_data)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* AreaCallbackData::release_config_data() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.config_data_;
  _impl_.config_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* AreaCallbackData::unsafe_arena_release_config_data() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.AreaCallbackData.config_data)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.config_data_;
  _impl_.config_data_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* AreaCallbackData::_internal_mutable_config_data() {
  
  if (_impl_.config_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.config_data_ = p;
  }
  return _impl_.config_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* AreaCallbackData::mutable_config_data() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_config_data();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.AreaCallbackData.config_data)
  return _msg;
}
inline void AreaCallbackData::set_allocated_config_data(::PROTOBUF_NAMESPACE_ID::Any* config_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_data_);
  }
  if (config_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_data));
    if (message_arena != submessage_arena) {
      config_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.config_data_ = config_data;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.AreaCallbackData.config_data)
}

// -------------------------------------------------------------------

// Graph

// repeated .bosdyn.api.graph_nav.Waypoint waypoints = 1;
inline int Graph::_internal_waypoints_size() const {
  return _impl_.waypoints_.size();
}
inline int Graph::waypoints_size() const {
  return _internal_waypoints_size();
}
inline void Graph::clear_waypoints() {
  _impl_.waypoints_.Clear();
}
inline ::bosdyn::api::graph_nav::Waypoint* Graph::mutable_waypoints(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Graph.waypoints)
  return _impl_.waypoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Waypoint >*
Graph::mutable_waypoints() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.Graph.waypoints)
  return &_impl_.waypoints_;
}
inline const ::bosdyn::api::graph_nav::Waypoint& Graph::_internal_waypoints(int index) const {
  return _impl_.waypoints_.Get(index);
}
inline const ::bosdyn::api::graph_nav::Waypoint& Graph::waypoints(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Graph.waypoints)
  return _internal_waypoints(index);
}
inline ::bosdyn::api::graph_nav::Waypoint* Graph::_internal_add_waypoints() {
  return _impl_.waypoints_.Add();
}
inline ::bosdyn::api::graph_nav::Waypoint* Graph::add_waypoints() {
  ::bosdyn::api::graph_nav::Waypoint* _add = _internal_add_waypoints();
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.Graph.waypoints)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Waypoint >&
Graph::waypoints() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.Graph.waypoints)
  return _impl_.waypoints_;
}

// repeated .bosdyn.api.graph_nav.Edge edges = 2;
inline int Graph::_internal_edges_size() const {
  return _impl_.edges_.size();
}
inline int Graph::edges_size() const {
  return _internal_edges_size();
}
inline void Graph::clear_edges() {
  _impl_.edges_.Clear();
}
inline ::bosdyn::api::graph_nav::Edge* Graph::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Graph.edges)
  return _impl_.edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Edge >*
Graph::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.Graph.edges)
  return &_impl_.edges_;
}
inline const ::bosdyn::api::graph_nav::Edge& Graph::_internal_edges(int index) const {
  return _impl_.edges_.Get(index);
}
inline const ::bosdyn::api::graph_nav::Edge& Graph::edges(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Graph.edges)
  return _internal_edges(index);
}
inline ::bosdyn::api::graph_nav::Edge* Graph::_internal_add_edges() {
  return _impl_.edges_.Add();
}
inline ::bosdyn::api::graph_nav::Edge* Graph::add_edges() {
  ::bosdyn::api::graph_nav::Edge* _add = _internal_add_edges();
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.Graph.edges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Edge >&
Graph::edges() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.Graph.edges)
  return _impl_.edges_;
}

// .bosdyn.api.graph_nav.Anchoring anchoring = 3;
inline bool Graph::_internal_has_anchoring() const {
  return this != internal_default_instance() && _impl_.anchoring_ != nullptr;
}
inline bool Graph::has_anchoring() const {
  return _internal_has_anchoring();
}
inline void Graph::clear_anchoring() {
  if (GetArenaForAllocation() == nullptr && _impl_.anchoring_ != nullptr) {
    delete _impl_.anchoring_;
  }
  _impl_.anchoring_ = nullptr;
}
inline const ::bosdyn::api::graph_nav::Anchoring& Graph::_internal_anchoring() const {
  const ::bosdyn::api::graph_nav::Anchoring* p = _impl_.anchoring_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::graph_nav::Anchoring&>(
      ::bosdyn::api::graph_nav::_Anchoring_default_instance_);
}
inline const ::bosdyn::api::graph_nav::Anchoring& Graph::anchoring() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Graph.anchoring)
  return _internal_anchoring();
}
inline void Graph::unsafe_arena_set_allocated_anchoring(
    ::bosdyn::api::graph_nav::Anchoring* anchoring) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anchoring_);
  }
  _impl_.anchoring_ = anchoring;
  if (anchoring) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Graph.anchoring)
}
inline ::bosdyn::api::graph_nav::Anchoring* Graph::release_anchoring() {
  
  ::bosdyn::api::graph_nav::Anchoring* temp = _impl_.anchoring_;
  _impl_.anchoring_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::graph_nav::Anchoring* Graph::unsafe_arena_release_anchoring() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Graph.anchoring)
  
  ::bosdyn::api::graph_nav::Anchoring* temp = _impl_.anchoring_;
  _impl_.anchoring_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::Anchoring* Graph::_internal_mutable_anchoring() {
  
  if (_impl_.anchoring_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::Anchoring>(GetArenaForAllocation());
    _impl_.anchoring_ = p;
  }
  return _impl_.anchoring_;
}
inline ::bosdyn::api::graph_nav::Anchoring* Graph::mutable_anchoring() {
  ::bosdyn::api::graph_nav::Anchoring* _msg = _internal_mutable_anchoring();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Graph.anchoring)
  return _msg;
}
inline void Graph::set_allocated_anchoring(::bosdyn::api::graph_nav::Anchoring* anchoring) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.anchoring_;
  }
  if (anchoring) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(anchoring);
    if (message_arena != submessage_arena) {
      anchoring = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anchoring, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.anchoring_ = anchoring;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Graph.anchoring)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace graph_nav
}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::graph_nav::Waypoint_WaypointSource> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::graph_nav::Waypoint_WaypointSource>() {
  return ::bosdyn::api::graph_nav::Waypoint_WaypointSource_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::graph_nav::Edge_Annotations_DirectionConstraint> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::graph_nav::Edge_Annotations_DirectionConstraint>() {
  return ::bosdyn::api::graph_nav::Edge_Annotations_DirectionConstraint_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::graph_nav::Edge_Annotations_PathFollowingMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::graph_nav::Edge_Annotations_PathFollowingMode>() {
  return ::bosdyn::api::graph_nav::Edge_Annotations_PathFollowingMode_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::graph_nav::Edge_Annotations_GroundClutterAvoidanceMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::graph_nav::Edge_Annotations_GroundClutterAvoidanceMode>() {
  return ::bosdyn::api::graph_nav::Edge_Annotations_GroundClutterAvoidanceMode_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::graph_nav::Edge_EdgeSource> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::graph_nav::Edge_EdgeSource>() {
  return ::bosdyn::api::graph_nav::Edge_EdgeSource_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::graph_nav::AnnotationState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::graph_nav::AnnotationState>() {
  return ::bosdyn::api::graph_nav::AnnotationState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto

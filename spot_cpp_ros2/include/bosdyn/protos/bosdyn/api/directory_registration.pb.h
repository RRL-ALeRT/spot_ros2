// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/directory_registration.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fdirectory_5fregistration_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fdirectory_5fregistration_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/directory.pb.h"
#include "bosdyn/api/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fdirectory_5fregistration_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fdirectory_5fregistration_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fdirectory_5fregistration_2eproto;
namespace bosdyn {
namespace api {
class RegisterServiceRequest;
struct RegisterServiceRequestDefaultTypeInternal;
extern RegisterServiceRequestDefaultTypeInternal _RegisterServiceRequest_default_instance_;
class RegisterServiceResponse;
struct RegisterServiceResponseDefaultTypeInternal;
extern RegisterServiceResponseDefaultTypeInternal _RegisterServiceResponse_default_instance_;
class UnregisterServiceRequest;
struct UnregisterServiceRequestDefaultTypeInternal;
extern UnregisterServiceRequestDefaultTypeInternal _UnregisterServiceRequest_default_instance_;
class UnregisterServiceResponse;
struct UnregisterServiceResponseDefaultTypeInternal;
extern UnregisterServiceResponseDefaultTypeInternal _UnregisterServiceResponse_default_instance_;
class UpdateServiceRequest;
struct UpdateServiceRequestDefaultTypeInternal;
extern UpdateServiceRequestDefaultTypeInternal _UpdateServiceRequest_default_instance_;
class UpdateServiceResponse;
struct UpdateServiceResponseDefaultTypeInternal;
extern UpdateServiceResponseDefaultTypeInternal _UpdateServiceResponse_default_instance_;
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::RegisterServiceRequest* Arena::CreateMaybeMessage<::bosdyn::api::RegisterServiceRequest>(Arena*);
template<> ::bosdyn::api::RegisterServiceResponse* Arena::CreateMaybeMessage<::bosdyn::api::RegisterServiceResponse>(Arena*);
template<> ::bosdyn::api::UnregisterServiceRequest* Arena::CreateMaybeMessage<::bosdyn::api::UnregisterServiceRequest>(Arena*);
template<> ::bosdyn::api::UnregisterServiceResponse* Arena::CreateMaybeMessage<::bosdyn::api::UnregisterServiceResponse>(Arena*);
template<> ::bosdyn::api::UpdateServiceRequest* Arena::CreateMaybeMessage<::bosdyn::api::UpdateServiceRequest>(Arena*);
template<> ::bosdyn::api::UpdateServiceResponse* Arena::CreateMaybeMessage<::bosdyn::api::UpdateServiceResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {

enum RegisterServiceResponse_Status : int {
  RegisterServiceResponse_Status_STATUS_UNKNOWN = 0,
  RegisterServiceResponse_Status_STATUS_OK = 1,
  RegisterServiceResponse_Status_STATUS_ALREADY_EXISTS = 2,
  RegisterServiceResponse_Status_RegisterServiceResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RegisterServiceResponse_Status_RegisterServiceResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RegisterServiceResponse_Status_IsValid(int value);
constexpr RegisterServiceResponse_Status RegisterServiceResponse_Status_Status_MIN = RegisterServiceResponse_Status_STATUS_UNKNOWN;
constexpr RegisterServiceResponse_Status RegisterServiceResponse_Status_Status_MAX = RegisterServiceResponse_Status_STATUS_ALREADY_EXISTS;
constexpr int RegisterServiceResponse_Status_Status_ARRAYSIZE = RegisterServiceResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegisterServiceResponse_Status_descriptor();
template<typename T>
inline const std::string& RegisterServiceResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RegisterServiceResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RegisterServiceResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RegisterServiceResponse_Status_descriptor(), enum_t_value);
}
inline bool RegisterServiceResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RegisterServiceResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RegisterServiceResponse_Status>(
    RegisterServiceResponse_Status_descriptor(), name, value);
}
enum UnregisterServiceResponse_Status : int {
  UnregisterServiceResponse_Status_STATUS_UNKNOWN = 0,
  UnregisterServiceResponse_Status_STATUS_OK = 1,
  UnregisterServiceResponse_Status_STATUS_NONEXISTENT_SERVICE = 2,
  UnregisterServiceResponse_Status_UnregisterServiceResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  UnregisterServiceResponse_Status_UnregisterServiceResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool UnregisterServiceResponse_Status_IsValid(int value);
constexpr UnregisterServiceResponse_Status UnregisterServiceResponse_Status_Status_MIN = UnregisterServiceResponse_Status_STATUS_UNKNOWN;
constexpr UnregisterServiceResponse_Status UnregisterServiceResponse_Status_Status_MAX = UnregisterServiceResponse_Status_STATUS_NONEXISTENT_SERVICE;
constexpr int UnregisterServiceResponse_Status_Status_ARRAYSIZE = UnregisterServiceResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UnregisterServiceResponse_Status_descriptor();
template<typename T>
inline const std::string& UnregisterServiceResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UnregisterServiceResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UnregisterServiceResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UnregisterServiceResponse_Status_descriptor(), enum_t_value);
}
inline bool UnregisterServiceResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UnregisterServiceResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UnregisterServiceResponse_Status>(
    UnregisterServiceResponse_Status_descriptor(), name, value);
}
enum UpdateServiceResponse_Status : int {
  UpdateServiceResponse_Status_STATUS_UNKNOWN = 0,
  UpdateServiceResponse_Status_STATUS_OK = 1,
  UpdateServiceResponse_Status_STATUS_NONEXISTENT_SERVICE = 2,
  UpdateServiceResponse_Status_UpdateServiceResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  UpdateServiceResponse_Status_UpdateServiceResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool UpdateServiceResponse_Status_IsValid(int value);
constexpr UpdateServiceResponse_Status UpdateServiceResponse_Status_Status_MIN = UpdateServiceResponse_Status_STATUS_UNKNOWN;
constexpr UpdateServiceResponse_Status UpdateServiceResponse_Status_Status_MAX = UpdateServiceResponse_Status_STATUS_NONEXISTENT_SERVICE;
constexpr int UpdateServiceResponse_Status_Status_ARRAYSIZE = UpdateServiceResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateServiceResponse_Status_descriptor();
template<typename T>
inline const std::string& UpdateServiceResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UpdateServiceResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UpdateServiceResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UpdateServiceResponse_Status_descriptor(), enum_t_value);
}
inline bool UpdateServiceResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UpdateServiceResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UpdateServiceResponse_Status>(
    UpdateServiceResponse_Status_descriptor(), name, value);
}
// ===================================================================

class RegisterServiceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.RegisterServiceRequest) */ {
 public:
  inline RegisterServiceRequest() : RegisterServiceRequest(nullptr) {}
  ~RegisterServiceRequest() override;
  explicit PROTOBUF_CONSTEXPR RegisterServiceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterServiceRequest(const RegisterServiceRequest& from);
  RegisterServiceRequest(RegisterServiceRequest&& from) noexcept
    : RegisterServiceRequest() {
    *this = ::std::move(from);
  }

  inline RegisterServiceRequest& operator=(const RegisterServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterServiceRequest& operator=(RegisterServiceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterServiceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterServiceRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterServiceRequest*>(
               &_RegisterServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegisterServiceRequest& a, RegisterServiceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterServiceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterServiceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterServiceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterServiceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterServiceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterServiceRequest& from) {
    RegisterServiceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterServiceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.RegisterServiceRequest";
  }
  protected:
  explicit RegisterServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kEndpointFieldNumber = 2,
    kServiceEntryFieldNumber = 3,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // .bosdyn.api.Endpoint endpoint = 2;
  bool has_endpoint() const;
  private:
  bool _internal_has_endpoint() const;
  public:
  void clear_endpoint();
  const ::bosdyn::api::Endpoint& endpoint() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Endpoint* release_endpoint();
  ::bosdyn::api::Endpoint* mutable_endpoint();
  void set_allocated_endpoint(::bosdyn::api::Endpoint* endpoint);
  private:
  const ::bosdyn::api::Endpoint& _internal_endpoint() const;
  ::bosdyn::api::Endpoint* _internal_mutable_endpoint();
  public:
  void unsafe_arena_set_allocated_endpoint(
      ::bosdyn::api::Endpoint* endpoint);
  ::bosdyn::api::Endpoint* unsafe_arena_release_endpoint();

  // .bosdyn.api.ServiceEntry service_entry = 3;
  bool has_service_entry() const;
  private:
  bool _internal_has_service_entry() const;
  public:
  void clear_service_entry();
  const ::bosdyn::api::ServiceEntry& service_entry() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ServiceEntry* release_service_entry();
  ::bosdyn::api::ServiceEntry* mutable_service_entry();
  void set_allocated_service_entry(::bosdyn::api::ServiceEntry* service_entry);
  private:
  const ::bosdyn::api::ServiceEntry& _internal_service_entry() const;
  ::bosdyn::api::ServiceEntry* _internal_mutable_service_entry();
  public:
  void unsafe_arena_set_allocated_service_entry(
      ::bosdyn::api::ServiceEntry* service_entry);
  ::bosdyn::api::ServiceEntry* unsafe_arena_release_service_entry();

  // @@protoc_insertion_point(class_scope:bosdyn.api.RegisterServiceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::RequestHeader* header_;
    ::bosdyn::api::Endpoint* endpoint_;
    ::bosdyn::api::ServiceEntry* service_entry_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fdirectory_5fregistration_2eproto;
};
// -------------------------------------------------------------------

class RegisterServiceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.RegisterServiceResponse) */ {
 public:
  inline RegisterServiceResponse() : RegisterServiceResponse(nullptr) {}
  ~RegisterServiceResponse() override;
  explicit PROTOBUF_CONSTEXPR RegisterServiceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterServiceResponse(const RegisterServiceResponse& from);
  RegisterServiceResponse(RegisterServiceResponse&& from) noexcept
    : RegisterServiceResponse() {
    *this = ::std::move(from);
  }

  inline RegisterServiceResponse& operator=(const RegisterServiceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterServiceResponse& operator=(RegisterServiceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterServiceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterServiceResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterServiceResponse*>(
               &_RegisterServiceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegisterServiceResponse& a, RegisterServiceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterServiceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterServiceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterServiceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterServiceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterServiceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterServiceResponse& from) {
    RegisterServiceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterServiceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.RegisterServiceResponse";
  }
  protected:
  explicit RegisterServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RegisterServiceResponse_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    RegisterServiceResponse_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_OK =
    RegisterServiceResponse_Status_STATUS_OK;
  static constexpr Status STATUS_ALREADY_EXISTS =
    RegisterServiceResponse_Status_STATUS_ALREADY_EXISTS;
  static inline bool Status_IsValid(int value) {
    return RegisterServiceResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    RegisterServiceResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    RegisterServiceResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    RegisterServiceResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return RegisterServiceResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return RegisterServiceResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return RegisterServiceResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.RegisterServiceResponse.Status status = 2;
  void clear_status();
  ::bosdyn::api::RegisterServiceResponse_Status status() const;
  void set_status(::bosdyn::api::RegisterServiceResponse_Status value);
  private:
  ::bosdyn::api::RegisterServiceResponse_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::RegisterServiceResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.RegisterServiceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::ResponseHeader* header_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fdirectory_5fregistration_2eproto;
};
// -------------------------------------------------------------------

class UnregisterServiceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.UnregisterServiceRequest) */ {
 public:
  inline UnregisterServiceRequest() : UnregisterServiceRequest(nullptr) {}
  ~UnregisterServiceRequest() override;
  explicit PROTOBUF_CONSTEXPR UnregisterServiceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnregisterServiceRequest(const UnregisterServiceRequest& from);
  UnregisterServiceRequest(UnregisterServiceRequest&& from) noexcept
    : UnregisterServiceRequest() {
    *this = ::std::move(from);
  }

  inline UnregisterServiceRequest& operator=(const UnregisterServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnregisterServiceRequest& operator=(UnregisterServiceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnregisterServiceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnregisterServiceRequest* internal_default_instance() {
    return reinterpret_cast<const UnregisterServiceRequest*>(
               &_UnregisterServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UnregisterServiceRequest& a, UnregisterServiceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnregisterServiceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnregisterServiceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnregisterServiceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnregisterServiceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnregisterServiceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnregisterServiceRequest& from) {
    UnregisterServiceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnregisterServiceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.UnregisterServiceRequest";
  }
  protected:
  explicit UnregisterServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // string service_name = 2;
  void clear_service_name();
  const std::string& service_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_name();
  PROTOBUF_NODISCARD std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.UnregisterServiceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
    ::bosdyn::api::RequestHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fdirectory_5fregistration_2eproto;
};
// -------------------------------------------------------------------

class UnregisterServiceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.UnregisterServiceResponse) */ {
 public:
  inline UnregisterServiceResponse() : UnregisterServiceResponse(nullptr) {}
  ~UnregisterServiceResponse() override;
  explicit PROTOBUF_CONSTEXPR UnregisterServiceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnregisterServiceResponse(const UnregisterServiceResponse& from);
  UnregisterServiceResponse(UnregisterServiceResponse&& from) noexcept
    : UnregisterServiceResponse() {
    *this = ::std::move(from);
  }

  inline UnregisterServiceResponse& operator=(const UnregisterServiceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnregisterServiceResponse& operator=(UnregisterServiceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnregisterServiceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnregisterServiceResponse* internal_default_instance() {
    return reinterpret_cast<const UnregisterServiceResponse*>(
               &_UnregisterServiceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UnregisterServiceResponse& a, UnregisterServiceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnregisterServiceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnregisterServiceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnregisterServiceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnregisterServiceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnregisterServiceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnregisterServiceResponse& from) {
    UnregisterServiceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnregisterServiceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.UnregisterServiceResponse";
  }
  protected:
  explicit UnregisterServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UnregisterServiceResponse_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    UnregisterServiceResponse_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_OK =
    UnregisterServiceResponse_Status_STATUS_OK;
  static constexpr Status STATUS_NONEXISTENT_SERVICE =
    UnregisterServiceResponse_Status_STATUS_NONEXISTENT_SERVICE;
  static inline bool Status_IsValid(int value) {
    return UnregisterServiceResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    UnregisterServiceResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    UnregisterServiceResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    UnregisterServiceResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return UnregisterServiceResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return UnregisterServiceResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return UnregisterServiceResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.UnregisterServiceResponse.Status status = 2;
  void clear_status();
  ::bosdyn::api::UnregisterServiceResponse_Status status() const;
  void set_status(::bosdyn::api::UnregisterServiceResponse_Status value);
  private:
  ::bosdyn::api::UnregisterServiceResponse_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::UnregisterServiceResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.UnregisterServiceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::ResponseHeader* header_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fdirectory_5fregistration_2eproto;
};
// -------------------------------------------------------------------

class UpdateServiceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.UpdateServiceRequest) */ {
 public:
  inline UpdateServiceRequest() : UpdateServiceRequest(nullptr) {}
  ~UpdateServiceRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateServiceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateServiceRequest(const UpdateServiceRequest& from);
  UpdateServiceRequest(UpdateServiceRequest&& from) noexcept
    : UpdateServiceRequest() {
    *this = ::std::move(from);
  }

  inline UpdateServiceRequest& operator=(const UpdateServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateServiceRequest& operator=(UpdateServiceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateServiceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateServiceRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateServiceRequest*>(
               &_UpdateServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdateServiceRequest& a, UpdateServiceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateServiceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateServiceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateServiceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateServiceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateServiceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateServiceRequest& from) {
    UpdateServiceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateServiceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.UpdateServiceRequest";
  }
  protected:
  explicit UpdateServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kEndpointFieldNumber = 2,
    kServiceEntryFieldNumber = 3,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // .bosdyn.api.Endpoint endpoint = 2;
  bool has_endpoint() const;
  private:
  bool _internal_has_endpoint() const;
  public:
  void clear_endpoint();
  const ::bosdyn::api::Endpoint& endpoint() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Endpoint* release_endpoint();
  ::bosdyn::api::Endpoint* mutable_endpoint();
  void set_allocated_endpoint(::bosdyn::api::Endpoint* endpoint);
  private:
  const ::bosdyn::api::Endpoint& _internal_endpoint() const;
  ::bosdyn::api::Endpoint* _internal_mutable_endpoint();
  public:
  void unsafe_arena_set_allocated_endpoint(
      ::bosdyn::api::Endpoint* endpoint);
  ::bosdyn::api::Endpoint* unsafe_arena_release_endpoint();

  // .bosdyn.api.ServiceEntry service_entry = 3;
  bool has_service_entry() const;
  private:
  bool _internal_has_service_entry() const;
  public:
  void clear_service_entry();
  const ::bosdyn::api::ServiceEntry& service_entry() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ServiceEntry* release_service_entry();
  ::bosdyn::api::ServiceEntry* mutable_service_entry();
  void set_allocated_service_entry(::bosdyn::api::ServiceEntry* service_entry);
  private:
  const ::bosdyn::api::ServiceEntry& _internal_service_entry() const;
  ::bosdyn::api::ServiceEntry* _internal_mutable_service_entry();
  public:
  void unsafe_arena_set_allocated_service_entry(
      ::bosdyn::api::ServiceEntry* service_entry);
  ::bosdyn::api::ServiceEntry* unsafe_arena_release_service_entry();

  // @@protoc_insertion_point(class_scope:bosdyn.api.UpdateServiceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::RequestHeader* header_;
    ::bosdyn::api::Endpoint* endpoint_;
    ::bosdyn::api::ServiceEntry* service_entry_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fdirectory_5fregistration_2eproto;
};
// -------------------------------------------------------------------

class UpdateServiceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.UpdateServiceResponse) */ {
 public:
  inline UpdateServiceResponse() : UpdateServiceResponse(nullptr) {}
  ~UpdateServiceResponse() override;
  explicit PROTOBUF_CONSTEXPR UpdateServiceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateServiceResponse(const UpdateServiceResponse& from);
  UpdateServiceResponse(UpdateServiceResponse&& from) noexcept
    : UpdateServiceResponse() {
    *this = ::std::move(from);
  }

  inline UpdateServiceResponse& operator=(const UpdateServiceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateServiceResponse& operator=(UpdateServiceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateServiceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateServiceResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateServiceResponse*>(
               &_UpdateServiceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateServiceResponse& a, UpdateServiceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateServiceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateServiceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateServiceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateServiceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateServiceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateServiceResponse& from) {
    UpdateServiceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateServiceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.UpdateServiceResponse";
  }
  protected:
  explicit UpdateServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UpdateServiceResponse_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    UpdateServiceResponse_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_OK =
    UpdateServiceResponse_Status_STATUS_OK;
  static constexpr Status STATUS_NONEXISTENT_SERVICE =
    UpdateServiceResponse_Status_STATUS_NONEXISTENT_SERVICE;
  static inline bool Status_IsValid(int value) {
    return UpdateServiceResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    UpdateServiceResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    UpdateServiceResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    UpdateServiceResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return UpdateServiceResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return UpdateServiceResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return UpdateServiceResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.UpdateServiceResponse.Status status = 2;
  void clear_status();
  ::bosdyn::api::UpdateServiceResponse_Status status() const;
  void set_status(::bosdyn::api::UpdateServiceResponse_Status value);
  private:
  ::bosdyn::api::UpdateServiceResponse_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::UpdateServiceResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.UpdateServiceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::ResponseHeader* header_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fdirectory_5fregistration_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegisterServiceRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool RegisterServiceRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool RegisterServiceRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& RegisterServiceRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RequestHeader&>(
      ::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& RegisterServiceRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RegisterServiceRequest.header)
  return _internal_header();
}
inline void RegisterServiceRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.RegisterServiceRequest.header)
}
inline ::bosdyn::api::RequestHeader* RegisterServiceRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RequestHeader* RegisterServiceRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RegisterServiceRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* RegisterServiceRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::RequestHeader* RegisterServiceRequest::mutable_header() {
  ::bosdyn::api::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RegisterServiceRequest.header)
  return _msg;
}
inline void RegisterServiceRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RegisterServiceRequest.header)
}

// .bosdyn.api.Endpoint endpoint = 2;
inline bool RegisterServiceRequest::_internal_has_endpoint() const {
  return this != internal_default_instance() && _impl_.endpoint_ != nullptr;
}
inline bool RegisterServiceRequest::has_endpoint() const {
  return _internal_has_endpoint();
}
inline const ::bosdyn::api::Endpoint& RegisterServiceRequest::_internal_endpoint() const {
  const ::bosdyn::api::Endpoint* p = _impl_.endpoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Endpoint&>(
      ::bosdyn::api::_Endpoint_default_instance_);
}
inline const ::bosdyn::api::Endpoint& RegisterServiceRequest::endpoint() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RegisterServiceRequest.endpoint)
  return _internal_endpoint();
}
inline void RegisterServiceRequest::unsafe_arena_set_allocated_endpoint(
    ::bosdyn::api::Endpoint* endpoint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.endpoint_);
  }
  _impl_.endpoint_ = endpoint;
  if (endpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.RegisterServiceRequest.endpoint)
}
inline ::bosdyn::api::Endpoint* RegisterServiceRequest::release_endpoint() {
  
  ::bosdyn::api::Endpoint* temp = _impl_.endpoint_;
  _impl_.endpoint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Endpoint* RegisterServiceRequest::unsafe_arena_release_endpoint() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RegisterServiceRequest.endpoint)
  
  ::bosdyn::api::Endpoint* temp = _impl_.endpoint_;
  _impl_.endpoint_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Endpoint* RegisterServiceRequest::_internal_mutable_endpoint() {
  
  if (_impl_.endpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Endpoint>(GetArenaForAllocation());
    _impl_.endpoint_ = p;
  }
  return _impl_.endpoint_;
}
inline ::bosdyn::api::Endpoint* RegisterServiceRequest::mutable_endpoint() {
  ::bosdyn::api::Endpoint* _msg = _internal_mutable_endpoint();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RegisterServiceRequest.endpoint)
  return _msg;
}
inline void RegisterServiceRequest::set_allocated_endpoint(::bosdyn::api::Endpoint* endpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.endpoint_);
  }
  if (endpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endpoint));
    if (message_arena != submessage_arena) {
      endpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endpoint, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.endpoint_ = endpoint;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RegisterServiceRequest.endpoint)
}

// .bosdyn.api.ServiceEntry service_entry = 3;
inline bool RegisterServiceRequest::_internal_has_service_entry() const {
  return this != internal_default_instance() && _impl_.service_entry_ != nullptr;
}
inline bool RegisterServiceRequest::has_service_entry() const {
  return _internal_has_service_entry();
}
inline const ::bosdyn::api::ServiceEntry& RegisterServiceRequest::_internal_service_entry() const {
  const ::bosdyn::api::ServiceEntry* p = _impl_.service_entry_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ServiceEntry&>(
      ::bosdyn::api::_ServiceEntry_default_instance_);
}
inline const ::bosdyn::api::ServiceEntry& RegisterServiceRequest::service_entry() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RegisterServiceRequest.service_entry)
  return _internal_service_entry();
}
inline void RegisterServiceRequest::unsafe_arena_set_allocated_service_entry(
    ::bosdyn::api::ServiceEntry* service_entry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.service_entry_);
  }
  _impl_.service_entry_ = service_entry;
  if (service_entry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.RegisterServiceRequest.service_entry)
}
inline ::bosdyn::api::ServiceEntry* RegisterServiceRequest::release_service_entry() {
  
  ::bosdyn::api::ServiceEntry* temp = _impl_.service_entry_;
  _impl_.service_entry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ServiceEntry* RegisterServiceRequest::unsafe_arena_release_service_entry() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RegisterServiceRequest.service_entry)
  
  ::bosdyn::api::ServiceEntry* temp = _impl_.service_entry_;
  _impl_.service_entry_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ServiceEntry* RegisterServiceRequest::_internal_mutable_service_entry() {
  
  if (_impl_.service_entry_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ServiceEntry>(GetArenaForAllocation());
    _impl_.service_entry_ = p;
  }
  return _impl_.service_entry_;
}
inline ::bosdyn::api::ServiceEntry* RegisterServiceRequest::mutable_service_entry() {
  ::bosdyn::api::ServiceEntry* _msg = _internal_mutable_service_entry();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RegisterServiceRequest.service_entry)
  return _msg;
}
inline void RegisterServiceRequest::set_allocated_service_entry(::bosdyn::api::ServiceEntry* service_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.service_entry_);
  }
  if (service_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_entry));
    if (message_arena != submessage_arena) {
      service_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_entry, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.service_entry_ = service_entry;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RegisterServiceRequest.service_entry)
}

// -------------------------------------------------------------------

// RegisterServiceResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool RegisterServiceResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool RegisterServiceResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& RegisterServiceResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ResponseHeader&>(
      ::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& RegisterServiceResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RegisterServiceResponse.header)
  return _internal_header();
}
inline void RegisterServiceResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.RegisterServiceResponse.header)
}
inline ::bosdyn::api::ResponseHeader* RegisterServiceResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ResponseHeader* RegisterServiceResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RegisterServiceResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* RegisterServiceResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::ResponseHeader* RegisterServiceResponse::mutable_header() {
  ::bosdyn::api::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RegisterServiceResponse.header)
  return _msg;
}
inline void RegisterServiceResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RegisterServiceResponse.header)
}

// .bosdyn.api.RegisterServiceResponse.Status status = 2;
inline void RegisterServiceResponse::clear_status() {
  _impl_.status_ = 0;
}
inline ::bosdyn::api::RegisterServiceResponse_Status RegisterServiceResponse::_internal_status() const {
  return static_cast< ::bosdyn::api::RegisterServiceResponse_Status >(_impl_.status_);
}
inline ::bosdyn::api::RegisterServiceResponse_Status RegisterServiceResponse::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RegisterServiceResponse.status)
  return _internal_status();
}
inline void RegisterServiceResponse::_internal_set_status(::bosdyn::api::RegisterServiceResponse_Status value) {
  
  _impl_.status_ = value;
}
inline void RegisterServiceResponse::set_status(::bosdyn::api::RegisterServiceResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.RegisterServiceResponse.status)
}

// -------------------------------------------------------------------

// UnregisterServiceRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool UnregisterServiceRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool UnregisterServiceRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& UnregisterServiceRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RequestHeader&>(
      ::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& UnregisterServiceRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.UnregisterServiceRequest.header)
  return _internal_header();
}
inline void UnregisterServiceRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.UnregisterServiceRequest.header)
}
inline ::bosdyn::api::RequestHeader* UnregisterServiceRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RequestHeader* UnregisterServiceRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.UnregisterServiceRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* UnregisterServiceRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::RequestHeader* UnregisterServiceRequest::mutable_header() {
  ::bosdyn::api::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.UnregisterServiceRequest.header)
  return _msg;
}
inline void UnregisterServiceRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.UnregisterServiceRequest.header)
}

// string service_name = 2;
inline void UnregisterServiceRequest::clear_service_name() {
  _impl_.service_name_.ClearToEmpty();
}
inline const std::string& UnregisterServiceRequest::service_name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.UnregisterServiceRequest.service_name)
  return _internal_service_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnregisterServiceRequest::set_service_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.UnregisterServiceRequest.service_name)
}
inline std::string* UnregisterServiceRequest::mutable_service_name() {
  std::string* _s = _internal_mutable_service_name();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.UnregisterServiceRequest.service_name)
  return _s;
}
inline const std::string& UnregisterServiceRequest::_internal_service_name() const {
  return _impl_.service_name_.Get();
}
inline void UnregisterServiceRequest::_internal_set_service_name(const std::string& value) {
  
  _impl_.service_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UnregisterServiceRequest::_internal_mutable_service_name() {
  
  return _impl_.service_name_.Mutable(GetArenaForAllocation());
}
inline std::string* UnregisterServiceRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.UnregisterServiceRequest.service_name)
  return _impl_.service_name_.Release();
}
inline void UnregisterServiceRequest::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  _impl_.service_name_.SetAllocated(service_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_name_.IsDefault()) {
    _impl_.service_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.UnregisterServiceRequest.service_name)
}

// -------------------------------------------------------------------

// UnregisterServiceResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool UnregisterServiceResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool UnregisterServiceResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& UnregisterServiceResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ResponseHeader&>(
      ::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& UnregisterServiceResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.UnregisterServiceResponse.header)
  return _internal_header();
}
inline void UnregisterServiceResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.UnregisterServiceResponse.header)
}
inline ::bosdyn::api::ResponseHeader* UnregisterServiceResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ResponseHeader* UnregisterServiceResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.UnregisterServiceResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* UnregisterServiceResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::ResponseHeader* UnregisterServiceResponse::mutable_header() {
  ::bosdyn::api::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.UnregisterServiceResponse.header)
  return _msg;
}
inline void UnregisterServiceResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.UnregisterServiceResponse.header)
}

// .bosdyn.api.UnregisterServiceResponse.Status status = 2;
inline void UnregisterServiceResponse::clear_status() {
  _impl_.status_ = 0;
}
inline ::bosdyn::api::UnregisterServiceResponse_Status UnregisterServiceResponse::_internal_status() const {
  return static_cast< ::bosdyn::api::UnregisterServiceResponse_Status >(_impl_.status_);
}
inline ::bosdyn::api::UnregisterServiceResponse_Status UnregisterServiceResponse::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.UnregisterServiceResponse.status)
  return _internal_status();
}
inline void UnregisterServiceResponse::_internal_set_status(::bosdyn::api::UnregisterServiceResponse_Status value) {
  
  _impl_.status_ = value;
}
inline void UnregisterServiceResponse::set_status(::bosdyn::api::UnregisterServiceResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.UnregisterServiceResponse.status)
}

// -------------------------------------------------------------------

// UpdateServiceRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool UpdateServiceRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool UpdateServiceRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& UpdateServiceRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RequestHeader&>(
      ::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& UpdateServiceRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.UpdateServiceRequest.header)
  return _internal_header();
}
inline void UpdateServiceRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.UpdateServiceRequest.header)
}
inline ::bosdyn::api::RequestHeader* UpdateServiceRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RequestHeader* UpdateServiceRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.UpdateServiceRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* UpdateServiceRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::RequestHeader* UpdateServiceRequest::mutable_header() {
  ::bosdyn::api::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.UpdateServiceRequest.header)
  return _msg;
}
inline void UpdateServiceRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.UpdateServiceRequest.header)
}

// .bosdyn.api.Endpoint endpoint = 2;
inline bool UpdateServiceRequest::_internal_has_endpoint() const {
  return this != internal_default_instance() && _impl_.endpoint_ != nullptr;
}
inline bool UpdateServiceRequest::has_endpoint() const {
  return _internal_has_endpoint();
}
inline const ::bosdyn::api::Endpoint& UpdateServiceRequest::_internal_endpoint() const {
  const ::bosdyn::api::Endpoint* p = _impl_.endpoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Endpoint&>(
      ::bosdyn::api::_Endpoint_default_instance_);
}
inline const ::bosdyn::api::Endpoint& UpdateServiceRequest::endpoint() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.UpdateServiceRequest.endpoint)
  return _internal_endpoint();
}
inline void UpdateServiceRequest::unsafe_arena_set_allocated_endpoint(
    ::bosdyn::api::Endpoint* endpoint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.endpoint_);
  }
  _impl_.endpoint_ = endpoint;
  if (endpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.UpdateServiceRequest.endpoint)
}
inline ::bosdyn::api::Endpoint* UpdateServiceRequest::release_endpoint() {
  
  ::bosdyn::api::Endpoint* temp = _impl_.endpoint_;
  _impl_.endpoint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Endpoint* UpdateServiceRequest::unsafe_arena_release_endpoint() {
  // @@protoc_insertion_point(field_release:bosdyn.api.UpdateServiceRequest.endpoint)
  
  ::bosdyn::api::Endpoint* temp = _impl_.endpoint_;
  _impl_.endpoint_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Endpoint* UpdateServiceRequest::_internal_mutable_endpoint() {
  
  if (_impl_.endpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Endpoint>(GetArenaForAllocation());
    _impl_.endpoint_ = p;
  }
  return _impl_.endpoint_;
}
inline ::bosdyn::api::Endpoint* UpdateServiceRequest::mutable_endpoint() {
  ::bosdyn::api::Endpoint* _msg = _internal_mutable_endpoint();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.UpdateServiceRequest.endpoint)
  return _msg;
}
inline void UpdateServiceRequest::set_allocated_endpoint(::bosdyn::api::Endpoint* endpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.endpoint_);
  }
  if (endpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endpoint));
    if (message_arena != submessage_arena) {
      endpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endpoint, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.endpoint_ = endpoint;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.UpdateServiceRequest.endpoint)
}

// .bosdyn.api.ServiceEntry service_entry = 3;
inline bool UpdateServiceRequest::_internal_has_service_entry() const {
  return this != internal_default_instance() && _impl_.service_entry_ != nullptr;
}
inline bool UpdateServiceRequest::has_service_entry() const {
  return _internal_has_service_entry();
}
inline const ::bosdyn::api::ServiceEntry& UpdateServiceRequest::_internal_service_entry() const {
  const ::bosdyn::api::ServiceEntry* p = _impl_.service_entry_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ServiceEntry&>(
      ::bosdyn::api::_ServiceEntry_default_instance_);
}
inline const ::bosdyn::api::ServiceEntry& UpdateServiceRequest::service_entry() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.UpdateServiceRequest.service_entry)
  return _internal_service_entry();
}
inline void UpdateServiceRequest::unsafe_arena_set_allocated_service_entry(
    ::bosdyn::api::ServiceEntry* service_entry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.service_entry_);
  }
  _impl_.service_entry_ = service_entry;
  if (service_entry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.UpdateServiceRequest.service_entry)
}
inline ::bosdyn::api::ServiceEntry* UpdateServiceRequest::release_service_entry() {
  
  ::bosdyn::api::ServiceEntry* temp = _impl_.service_entry_;
  _impl_.service_entry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ServiceEntry* UpdateServiceRequest::unsafe_arena_release_service_entry() {
  // @@protoc_insertion_point(field_release:bosdyn.api.UpdateServiceRequest.service_entry)
  
  ::bosdyn::api::ServiceEntry* temp = _impl_.service_entry_;
  _impl_.service_entry_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ServiceEntry* UpdateServiceRequest::_internal_mutable_service_entry() {
  
  if (_impl_.service_entry_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ServiceEntry>(GetArenaForAllocation());
    _impl_.service_entry_ = p;
  }
  return _impl_.service_entry_;
}
inline ::bosdyn::api::ServiceEntry* UpdateServiceRequest::mutable_service_entry() {
  ::bosdyn::api::ServiceEntry* _msg = _internal_mutable_service_entry();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.UpdateServiceRequest.service_entry)
  return _msg;
}
inline void UpdateServiceRequest::set_allocated_service_entry(::bosdyn::api::ServiceEntry* service_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.service_entry_);
  }
  if (service_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_entry));
    if (message_arena != submessage_arena) {
      service_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_entry, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.service_entry_ = service_entry;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.UpdateServiceRequest.service_entry)
}

// -------------------------------------------------------------------

// UpdateServiceResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool UpdateServiceResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool UpdateServiceResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& UpdateServiceResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ResponseHeader&>(
      ::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& UpdateServiceResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.UpdateServiceResponse.header)
  return _internal_header();
}
inline void UpdateServiceResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.UpdateServiceResponse.header)
}
inline ::bosdyn::api::ResponseHeader* UpdateServiceResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ResponseHeader* UpdateServiceResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.UpdateServiceResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* UpdateServiceResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::ResponseHeader* UpdateServiceResponse::mutable_header() {
  ::bosdyn::api::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.UpdateServiceResponse.header)
  return _msg;
}
inline void UpdateServiceResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.UpdateServiceResponse.header)
}

// .bosdyn.api.UpdateServiceResponse.Status status = 2;
inline void UpdateServiceResponse::clear_status() {
  _impl_.status_ = 0;
}
inline ::bosdyn::api::UpdateServiceResponse_Status UpdateServiceResponse::_internal_status() const {
  return static_cast< ::bosdyn::api::UpdateServiceResponse_Status >(_impl_.status_);
}
inline ::bosdyn::api::UpdateServiceResponse_Status UpdateServiceResponse::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.UpdateServiceResponse.status)
  return _internal_status();
}
inline void UpdateServiceResponse::_internal_set_status(::bosdyn::api::UpdateServiceResponse_Status value) {
  
  _impl_.status_ = value;
}
inline void UpdateServiceResponse::set_status(::bosdyn::api::UpdateServiceResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.UpdateServiceResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::RegisterServiceResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::RegisterServiceResponse_Status>() {
  return ::bosdyn::api::RegisterServiceResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::UnregisterServiceResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::UnregisterServiceResponse_Status>() {
  return ::bosdyn::api::UnregisterServiceResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::UpdateServiceResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::UpdateServiceResponse_Status>() {
  return ::bosdyn::api::UpdateServiceResponse_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fdirectory_5fregistration_2eproto

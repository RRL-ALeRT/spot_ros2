// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/arm_surface_contact.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2farm_5fsurface_5fcontact_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2farm_5fsurface_5fcontact_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/geometry.pb.h"
#include "bosdyn/api/gripper_command.pb.h"
#include "bosdyn/api/trajectory.pb.h"
#include "bosdyn/api/arm_command.pb.h"
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2farm_5fsurface_5fcontact_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2farm_5fsurface_5fcontact_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2farm_5fsurface_5fcontact_2eproto;
namespace bosdyn {
namespace api {
class ArmSurfaceContact;
struct ArmSurfaceContactDefaultTypeInternal;
extern ArmSurfaceContactDefaultTypeInternal _ArmSurfaceContact_default_instance_;
class ArmSurfaceContact_Feedback;
struct ArmSurfaceContact_FeedbackDefaultTypeInternal;
extern ArmSurfaceContact_FeedbackDefaultTypeInternal _ArmSurfaceContact_Feedback_default_instance_;
class ArmSurfaceContact_Request;
struct ArmSurfaceContact_RequestDefaultTypeInternal;
extern ArmSurfaceContact_RequestDefaultTypeInternal _ArmSurfaceContact_Request_default_instance_;
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::ArmSurfaceContact* Arena::CreateMaybeMessage<::bosdyn::api::ArmSurfaceContact>(Arena*);
template<> ::bosdyn::api::ArmSurfaceContact_Feedback* Arena::CreateMaybeMessage<::bosdyn::api::ArmSurfaceContact_Feedback>(Arena*);
template<> ::bosdyn::api::ArmSurfaceContact_Request* Arena::CreateMaybeMessage<::bosdyn::api::ArmSurfaceContact_Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {

enum ArmSurfaceContact_Request_AxisMode : int {
  ArmSurfaceContact_Request_AxisMode_AXIS_MODE_POSITION = 0,
  ArmSurfaceContact_Request_AxisMode_AXIS_MODE_FORCE = 1,
  ArmSurfaceContact_Request_AxisMode_ArmSurfaceContact_Request_AxisMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ArmSurfaceContact_Request_AxisMode_ArmSurfaceContact_Request_AxisMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ArmSurfaceContact_Request_AxisMode_IsValid(int value);
constexpr ArmSurfaceContact_Request_AxisMode ArmSurfaceContact_Request_AxisMode_AxisMode_MIN = ArmSurfaceContact_Request_AxisMode_AXIS_MODE_POSITION;
constexpr ArmSurfaceContact_Request_AxisMode ArmSurfaceContact_Request_AxisMode_AxisMode_MAX = ArmSurfaceContact_Request_AxisMode_AXIS_MODE_FORCE;
constexpr int ArmSurfaceContact_Request_AxisMode_AxisMode_ARRAYSIZE = ArmSurfaceContact_Request_AxisMode_AxisMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ArmSurfaceContact_Request_AxisMode_descriptor();
template<typename T>
inline const std::string& ArmSurfaceContact_Request_AxisMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ArmSurfaceContact_Request_AxisMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ArmSurfaceContact_Request_AxisMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ArmSurfaceContact_Request_AxisMode_descriptor(), enum_t_value);
}
inline bool ArmSurfaceContact_Request_AxisMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ArmSurfaceContact_Request_AxisMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ArmSurfaceContact_Request_AxisMode>(
    ArmSurfaceContact_Request_AxisMode_descriptor(), name, value);
}
enum ArmSurfaceContact_Request_AdmittanceSetting : int {
  ArmSurfaceContact_Request_AdmittanceSetting_ADMITTANCE_SETTING_UNKNOWN = 0,
  ArmSurfaceContact_Request_AdmittanceSetting_ADMITTANCE_SETTING_OFF = 1,
  ArmSurfaceContact_Request_AdmittanceSetting_ADMITTANCE_SETTING_NORMAL = 2,
  ArmSurfaceContact_Request_AdmittanceSetting_ADMITTANCE_SETTING_LOOSE = 3,
  ArmSurfaceContact_Request_AdmittanceSetting_ADMITTANCE_SETTING_STIFF = 4,
  ArmSurfaceContact_Request_AdmittanceSetting_ADMITTANCE_SETTING_VERY_STIFF = 5,
  ArmSurfaceContact_Request_AdmittanceSetting_ArmSurfaceContact_Request_AdmittanceSetting_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ArmSurfaceContact_Request_AdmittanceSetting_ArmSurfaceContact_Request_AdmittanceSetting_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ArmSurfaceContact_Request_AdmittanceSetting_IsValid(int value);
constexpr ArmSurfaceContact_Request_AdmittanceSetting ArmSurfaceContact_Request_AdmittanceSetting_AdmittanceSetting_MIN = ArmSurfaceContact_Request_AdmittanceSetting_ADMITTANCE_SETTING_UNKNOWN;
constexpr ArmSurfaceContact_Request_AdmittanceSetting ArmSurfaceContact_Request_AdmittanceSetting_AdmittanceSetting_MAX = ArmSurfaceContact_Request_AdmittanceSetting_ADMITTANCE_SETTING_VERY_STIFF;
constexpr int ArmSurfaceContact_Request_AdmittanceSetting_AdmittanceSetting_ARRAYSIZE = ArmSurfaceContact_Request_AdmittanceSetting_AdmittanceSetting_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ArmSurfaceContact_Request_AdmittanceSetting_descriptor();
template<typename T>
inline const std::string& ArmSurfaceContact_Request_AdmittanceSetting_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ArmSurfaceContact_Request_AdmittanceSetting>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ArmSurfaceContact_Request_AdmittanceSetting_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ArmSurfaceContact_Request_AdmittanceSetting_descriptor(), enum_t_value);
}
inline bool ArmSurfaceContact_Request_AdmittanceSetting_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ArmSurfaceContact_Request_AdmittanceSetting* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ArmSurfaceContact_Request_AdmittanceSetting>(
    ArmSurfaceContact_Request_AdmittanceSetting_descriptor(), name, value);
}
// ===================================================================

class ArmSurfaceContact_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.ArmSurfaceContact.Request) */ {
 public:
  inline ArmSurfaceContact_Request() : ArmSurfaceContact_Request(nullptr) {}
  ~ArmSurfaceContact_Request() override;
  explicit PROTOBUF_CONSTEXPR ArmSurfaceContact_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmSurfaceContact_Request(const ArmSurfaceContact_Request& from);
  ArmSurfaceContact_Request(ArmSurfaceContact_Request&& from) noexcept
    : ArmSurfaceContact_Request() {
    *this = ::std::move(from);
  }

  inline ArmSurfaceContact_Request& operator=(const ArmSurfaceContact_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmSurfaceContact_Request& operator=(ArmSurfaceContact_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmSurfaceContact_Request& default_instance() {
    return *internal_default_instance();
  }
  enum JointConfigurationCase {
    kForceRemainNearCurrentJointConfiguration = 15,
    kPreferredJointConfiguration = 16,
    JOINT_CONFIGURATION_NOT_SET = 0,
  };

  static inline const ArmSurfaceContact_Request* internal_default_instance() {
    return reinterpret_cast<const ArmSurfaceContact_Request*>(
               &_ArmSurfaceContact_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ArmSurfaceContact_Request& a, ArmSurfaceContact_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmSurfaceContact_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmSurfaceContact_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArmSurfaceContact_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArmSurfaceContact_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArmSurfaceContact_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArmSurfaceContact_Request& from) {
    ArmSurfaceContact_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArmSurfaceContact_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ArmSurfaceContact.Request";
  }
  protected:
  explicit ArmSurfaceContact_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ArmSurfaceContact_Request_AxisMode AxisMode;
  static constexpr AxisMode AXIS_MODE_POSITION =
    ArmSurfaceContact_Request_AxisMode_AXIS_MODE_POSITION;
  static constexpr AxisMode AXIS_MODE_FORCE =
    ArmSurfaceContact_Request_AxisMode_AXIS_MODE_FORCE;
  static inline bool AxisMode_IsValid(int value) {
    return ArmSurfaceContact_Request_AxisMode_IsValid(value);
  }
  static constexpr AxisMode AxisMode_MIN =
    ArmSurfaceContact_Request_AxisMode_AxisMode_MIN;
  static constexpr AxisMode AxisMode_MAX =
    ArmSurfaceContact_Request_AxisMode_AxisMode_MAX;
  static constexpr int AxisMode_ARRAYSIZE =
    ArmSurfaceContact_Request_AxisMode_AxisMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AxisMode_descriptor() {
    return ArmSurfaceContact_Request_AxisMode_descriptor();
  }
  template<typename T>
  static inline const std::string& AxisMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AxisMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AxisMode_Name.");
    return ArmSurfaceContact_Request_AxisMode_Name(enum_t_value);
  }
  static inline bool AxisMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AxisMode* value) {
    return ArmSurfaceContact_Request_AxisMode_Parse(name, value);
  }

  typedef ArmSurfaceContact_Request_AdmittanceSetting AdmittanceSetting;
  static constexpr AdmittanceSetting ADMITTANCE_SETTING_UNKNOWN =
    ArmSurfaceContact_Request_AdmittanceSetting_ADMITTANCE_SETTING_UNKNOWN;
  static constexpr AdmittanceSetting ADMITTANCE_SETTING_OFF =
    ArmSurfaceContact_Request_AdmittanceSetting_ADMITTANCE_SETTING_OFF;
  static constexpr AdmittanceSetting ADMITTANCE_SETTING_NORMAL =
    ArmSurfaceContact_Request_AdmittanceSetting_ADMITTANCE_SETTING_NORMAL;
  static constexpr AdmittanceSetting ADMITTANCE_SETTING_LOOSE =
    ArmSurfaceContact_Request_AdmittanceSetting_ADMITTANCE_SETTING_LOOSE;
  static constexpr AdmittanceSetting ADMITTANCE_SETTING_STIFF =
    ArmSurfaceContact_Request_AdmittanceSetting_ADMITTANCE_SETTING_STIFF;
  static constexpr AdmittanceSetting ADMITTANCE_SETTING_VERY_STIFF =
    ArmSurfaceContact_Request_AdmittanceSetting_ADMITTANCE_SETTING_VERY_STIFF;
  static inline bool AdmittanceSetting_IsValid(int value) {
    return ArmSurfaceContact_Request_AdmittanceSetting_IsValid(value);
  }
  static constexpr AdmittanceSetting AdmittanceSetting_MIN =
    ArmSurfaceContact_Request_AdmittanceSetting_AdmittanceSetting_MIN;
  static constexpr AdmittanceSetting AdmittanceSetting_MAX =
    ArmSurfaceContact_Request_AdmittanceSetting_AdmittanceSetting_MAX;
  static constexpr int AdmittanceSetting_ARRAYSIZE =
    ArmSurfaceContact_Request_AdmittanceSetting_AdmittanceSetting_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AdmittanceSetting_descriptor() {
    return ArmSurfaceContact_Request_AdmittanceSetting_descriptor();
  }
  template<typename T>
  static inline const std::string& AdmittanceSetting_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AdmittanceSetting>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AdmittanceSetting_Name.");
    return ArmSurfaceContact_Request_AdmittanceSetting_Name(enum_t_value);
  }
  static inline bool AdmittanceSetting_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AdmittanceSetting* value) {
    return ArmSurfaceContact_Request_AdmittanceSetting_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRootFrameNameFieldNumber = 25,
    kPoseTrajectoryInTaskFieldNumber = 2,
    kMaximumAccelerationFieldNumber = 3,
    kMaxLinearVelocityFieldNumber = 4,
    kMaxAngularVelocityFieldNumber = 5,
    kWristTformToolFieldNumber = 6,
    kPressForcePercentageFieldNumber = 12,
    kMaxPosTrackingErrorFieldNumber = 18,
    kMaxRotTrackingErrorFieldNumber = 19,
    kBiasForceEwrtBodyFieldNumber = 20,
    kGripperCommandFieldNumber = 23,
    kRootTformTaskFieldNumber = 26,
    kXAxisFieldNumber = 8,
    kYAxisFieldNumber = 9,
    kZAxisFieldNumber = 10,
    kXyToZCrossTermAdmittanceFieldNumber = 17,
    kXyAdmittanceFieldNumber = 21,
    kZAdmittanceFieldNumber = 22,
    kIsRobotFollowingHandFieldNumber = 24,
    kForceRemainNearCurrentJointConfigurationFieldNumber = 15,
    kPreferredJointConfigurationFieldNumber = 16,
  };
  // string root_frame_name = 25;
  void clear_root_frame_name();
  const std::string& root_frame_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_root_frame_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_root_frame_name();
  PROTOBUF_NODISCARD std::string* release_root_frame_name();
  void set_allocated_root_frame_name(std::string* root_frame_name);
  private:
  const std::string& _internal_root_frame_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_root_frame_name(const std::string& value);
  std::string* _internal_mutable_root_frame_name();
  public:

  // .bosdyn.api.SE3Trajectory pose_trajectory_in_task = 2;
  bool has_pose_trajectory_in_task() const;
  private:
  bool _internal_has_pose_trajectory_in_task() const;
  public:
  void clear_pose_trajectory_in_task();
  const ::bosdyn::api::SE3Trajectory& pose_trajectory_in_task() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SE3Trajectory* release_pose_trajectory_in_task();
  ::bosdyn::api::SE3Trajectory* mutable_pose_trajectory_in_task();
  void set_allocated_pose_trajectory_in_task(::bosdyn::api::SE3Trajectory* pose_trajectory_in_task);
  private:
  const ::bosdyn::api::SE3Trajectory& _internal_pose_trajectory_in_task() const;
  ::bosdyn::api::SE3Trajectory* _internal_mutable_pose_trajectory_in_task();
  public:
  void unsafe_arena_set_allocated_pose_trajectory_in_task(
      ::bosdyn::api::SE3Trajectory* pose_trajectory_in_task);
  ::bosdyn::api::SE3Trajectory* unsafe_arena_release_pose_trajectory_in_task();

  // .google.protobuf.DoubleValue maximum_acceleration = 3;
  bool has_maximum_acceleration() const;
  private:
  bool _internal_has_maximum_acceleration() const;
  public:
  void clear_maximum_acceleration();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& maximum_acceleration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_maximum_acceleration();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_maximum_acceleration();
  void set_allocated_maximum_acceleration(::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_acceleration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_maximum_acceleration() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_maximum_acceleration();
  public:
  void unsafe_arena_set_allocated_maximum_acceleration(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_acceleration);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_maximum_acceleration();

  // .google.protobuf.DoubleValue max_linear_velocity = 4;
  bool has_max_linear_velocity() const;
  private:
  bool _internal_has_max_linear_velocity() const;
  public:
  void clear_max_linear_velocity();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_linear_velocity() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_linear_velocity();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_linear_velocity();
  void set_allocated_max_linear_velocity(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_linear_velocity);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_linear_velocity() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_linear_velocity();
  public:
  void unsafe_arena_set_allocated_max_linear_velocity(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_linear_velocity);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_linear_velocity();

  // .google.protobuf.DoubleValue max_angular_velocity = 5;
  bool has_max_angular_velocity() const;
  private:
  bool _internal_has_max_angular_velocity() const;
  public:
  void clear_max_angular_velocity();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_angular_velocity() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_angular_velocity();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_angular_velocity();
  void set_allocated_max_angular_velocity(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_angular_velocity);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_angular_velocity() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_angular_velocity();
  public:
  void unsafe_arena_set_allocated_max_angular_velocity(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_angular_velocity);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_angular_velocity();

  // .bosdyn.api.SE3Pose wrist_tform_tool = 6;
  bool has_wrist_tform_tool() const;
  private:
  bool _internal_has_wrist_tform_tool() const;
  public:
  void clear_wrist_tform_tool();
  const ::bosdyn::api::SE3Pose& wrist_tform_tool() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SE3Pose* release_wrist_tform_tool();
  ::bosdyn::api::SE3Pose* mutable_wrist_tform_tool();
  void set_allocated_wrist_tform_tool(::bosdyn::api::SE3Pose* wrist_tform_tool);
  private:
  const ::bosdyn::api::SE3Pose& _internal_wrist_tform_tool() const;
  ::bosdyn::api::SE3Pose* _internal_mutable_wrist_tform_tool();
  public:
  void unsafe_arena_set_allocated_wrist_tform_tool(
      ::bosdyn::api::SE3Pose* wrist_tform_tool);
  ::bosdyn::api::SE3Pose* unsafe_arena_release_wrist_tform_tool();

  // .bosdyn.api.Vec3 press_force_percentage = 12;
  bool has_press_force_percentage() const;
  private:
  bool _internal_has_press_force_percentage() const;
  public:
  void clear_press_force_percentage();
  const ::bosdyn::api::Vec3& press_force_percentage() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec3* release_press_force_percentage();
  ::bosdyn::api::Vec3* mutable_press_force_percentage();
  void set_allocated_press_force_percentage(::bosdyn::api::Vec3* press_force_percentage);
  private:
  const ::bosdyn::api::Vec3& _internal_press_force_percentage() const;
  ::bosdyn::api::Vec3* _internal_mutable_press_force_percentage();
  public:
  void unsafe_arena_set_allocated_press_force_percentage(
      ::bosdyn::api::Vec3* press_force_percentage);
  ::bosdyn::api::Vec3* unsafe_arena_release_press_force_percentage();

  // .google.protobuf.DoubleValue max_pos_tracking_error = 18;
  bool has_max_pos_tracking_error() const;
  private:
  bool _internal_has_max_pos_tracking_error() const;
  public:
  void clear_max_pos_tracking_error();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_pos_tracking_error() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_pos_tracking_error();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_pos_tracking_error();
  void set_allocated_max_pos_tracking_error(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_pos_tracking_error);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_pos_tracking_error() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_pos_tracking_error();
  public:
  void unsafe_arena_set_allocated_max_pos_tracking_error(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_pos_tracking_error);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_pos_tracking_error();

  // .google.protobuf.DoubleValue max_rot_tracking_error = 19;
  bool has_max_rot_tracking_error() const;
  private:
  bool _internal_has_max_rot_tracking_error() const;
  public:
  void clear_max_rot_tracking_error();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_rot_tracking_error() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_rot_tracking_error();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_rot_tracking_error();
  void set_allocated_max_rot_tracking_error(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_rot_tracking_error);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_rot_tracking_error() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_rot_tracking_error();
  public:
  void unsafe_arena_set_allocated_max_rot_tracking_error(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_rot_tracking_error);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_rot_tracking_error();

  // .bosdyn.api.Vec3 bias_force_ewrt_body = 20;
  bool has_bias_force_ewrt_body() const;
  private:
  bool _internal_has_bias_force_ewrt_body() const;
  public:
  void clear_bias_force_ewrt_body();
  const ::bosdyn::api::Vec3& bias_force_ewrt_body() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec3* release_bias_force_ewrt_body();
  ::bosdyn::api::Vec3* mutable_bias_force_ewrt_body();
  void set_allocated_bias_force_ewrt_body(::bosdyn::api::Vec3* bias_force_ewrt_body);
  private:
  const ::bosdyn::api::Vec3& _internal_bias_force_ewrt_body() const;
  ::bosdyn::api::Vec3* _internal_mutable_bias_force_ewrt_body();
  public:
  void unsafe_arena_set_allocated_bias_force_ewrt_body(
      ::bosdyn::api::Vec3* bias_force_ewrt_body);
  ::bosdyn::api::Vec3* unsafe_arena_release_bias_force_ewrt_body();

  // .bosdyn.api.ClawGripperCommand.Request gripper_command = 23;
  bool has_gripper_command() const;
  private:
  bool _internal_has_gripper_command() const;
  public:
  void clear_gripper_command();
  const ::bosdyn::api::ClawGripperCommand_Request& gripper_command() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ClawGripperCommand_Request* release_gripper_command();
  ::bosdyn::api::ClawGripperCommand_Request* mutable_gripper_command();
  void set_allocated_gripper_command(::bosdyn::api::ClawGripperCommand_Request* gripper_command);
  private:
  const ::bosdyn::api::ClawGripperCommand_Request& _internal_gripper_command() const;
  ::bosdyn::api::ClawGripperCommand_Request* _internal_mutable_gripper_command();
  public:
  void unsafe_arena_set_allocated_gripper_command(
      ::bosdyn::api::ClawGripperCommand_Request* gripper_command);
  ::bosdyn::api::ClawGripperCommand_Request* unsafe_arena_release_gripper_command();

  // .bosdyn.api.SE3Pose root_tform_task = 26;
  bool has_root_tform_task() const;
  private:
  bool _internal_has_root_tform_task() const;
  public:
  void clear_root_tform_task();
  const ::bosdyn::api::SE3Pose& root_tform_task() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SE3Pose* release_root_tform_task();
  ::bosdyn::api::SE3Pose* mutable_root_tform_task();
  void set_allocated_root_tform_task(::bosdyn::api::SE3Pose* root_tform_task);
  private:
  const ::bosdyn::api::SE3Pose& _internal_root_tform_task() const;
  ::bosdyn::api::SE3Pose* _internal_mutable_root_tform_task();
  public:
  void unsafe_arena_set_allocated_root_tform_task(
      ::bosdyn::api::SE3Pose* root_tform_task);
  ::bosdyn::api::SE3Pose* unsafe_arena_release_root_tform_task();

  // .bosdyn.api.ArmSurfaceContact.Request.AxisMode x_axis = 8;
  void clear_x_axis();
  ::bosdyn::api::ArmSurfaceContact_Request_AxisMode x_axis() const;
  void set_x_axis(::bosdyn::api::ArmSurfaceContact_Request_AxisMode value);
  private:
  ::bosdyn::api::ArmSurfaceContact_Request_AxisMode _internal_x_axis() const;
  void _internal_set_x_axis(::bosdyn::api::ArmSurfaceContact_Request_AxisMode value);
  public:

  // .bosdyn.api.ArmSurfaceContact.Request.AxisMode y_axis = 9;
  void clear_y_axis();
  ::bosdyn::api::ArmSurfaceContact_Request_AxisMode y_axis() const;
  void set_y_axis(::bosdyn::api::ArmSurfaceContact_Request_AxisMode value);
  private:
  ::bosdyn::api::ArmSurfaceContact_Request_AxisMode _internal_y_axis() const;
  void _internal_set_y_axis(::bosdyn::api::ArmSurfaceContact_Request_AxisMode value);
  public:

  // .bosdyn.api.ArmSurfaceContact.Request.AxisMode z_axis = 10;
  void clear_z_axis();
  ::bosdyn::api::ArmSurfaceContact_Request_AxisMode z_axis() const;
  void set_z_axis(::bosdyn::api::ArmSurfaceContact_Request_AxisMode value);
  private:
  ::bosdyn::api::ArmSurfaceContact_Request_AxisMode _internal_z_axis() const;
  void _internal_set_z_axis(::bosdyn::api::ArmSurfaceContact_Request_AxisMode value);
  public:

  // .bosdyn.api.ArmSurfaceContact.Request.AdmittanceSetting xy_to_z_cross_term_admittance = 17;
  void clear_xy_to_z_cross_term_admittance();
  ::bosdyn::api::ArmSurfaceContact_Request_AdmittanceSetting xy_to_z_cross_term_admittance() const;
  void set_xy_to_z_cross_term_admittance(::bosdyn::api::ArmSurfaceContact_Request_AdmittanceSetting value);
  private:
  ::bosdyn::api::ArmSurfaceContact_Request_AdmittanceSetting _internal_xy_to_z_cross_term_admittance() const;
  void _internal_set_xy_to_z_cross_term_admittance(::bosdyn::api::ArmSurfaceContact_Request_AdmittanceSetting value);
  public:

  // .bosdyn.api.ArmSurfaceContact.Request.AdmittanceSetting xy_admittance = 21;
  void clear_xy_admittance();
  ::bosdyn::api::ArmSurfaceContact_Request_AdmittanceSetting xy_admittance() const;
  void set_xy_admittance(::bosdyn::api::ArmSurfaceContact_Request_AdmittanceSetting value);
  private:
  ::bosdyn::api::ArmSurfaceContact_Request_AdmittanceSetting _internal_xy_admittance() const;
  void _internal_set_xy_admittance(::bosdyn::api::ArmSurfaceContact_Request_AdmittanceSetting value);
  public:

  // .bosdyn.api.ArmSurfaceContact.Request.AdmittanceSetting z_admittance = 22;
  void clear_z_admittance();
  ::bosdyn::api::ArmSurfaceContact_Request_AdmittanceSetting z_admittance() const;
  void set_z_admittance(::bosdyn::api::ArmSurfaceContact_Request_AdmittanceSetting value);
  private:
  ::bosdyn::api::ArmSurfaceContact_Request_AdmittanceSetting _internal_z_admittance() const;
  void _internal_set_z_admittance(::bosdyn::api::ArmSurfaceContact_Request_AdmittanceSetting value);
  public:

  // bool is_robot_following_hand = 24;
  void clear_is_robot_following_hand();
  bool is_robot_following_hand() const;
  void set_is_robot_following_hand(bool value);
  private:
  bool _internal_is_robot_following_hand() const;
  void _internal_set_is_robot_following_hand(bool value);
  public:

  // bool force_remain_near_current_joint_configuration = 15;
  bool has_force_remain_near_current_joint_configuration() const;
  private:
  bool _internal_has_force_remain_near_current_joint_configuration() const;
  public:
  void clear_force_remain_near_current_joint_configuration();
  bool force_remain_near_current_joint_configuration() const;
  void set_force_remain_near_current_joint_configuration(bool value);
  private:
  bool _internal_force_remain_near_current_joint_configuration() const;
  void _internal_set_force_remain_near_current_joint_configuration(bool value);
  public:

  // .bosdyn.api.ArmJointPosition preferred_joint_configuration = 16;
  bool has_preferred_joint_configuration() const;
  private:
  bool _internal_has_preferred_joint_configuration() const;
  public:
  void clear_preferred_joint_configuration();
  const ::bosdyn::api::ArmJointPosition& preferred_joint_configuration() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ArmJointPosition* release_preferred_joint_configuration();
  ::bosdyn::api::ArmJointPosition* mutable_preferred_joint_configuration();
  void set_allocated_preferred_joint_configuration(::bosdyn::api::ArmJointPosition* preferred_joint_configuration);
  private:
  const ::bosdyn::api::ArmJointPosition& _internal_preferred_joint_configuration() const;
  ::bosdyn::api::ArmJointPosition* _internal_mutable_preferred_joint_configuration();
  public:
  void unsafe_arena_set_allocated_preferred_joint_configuration(
      ::bosdyn::api::ArmJointPosition* preferred_joint_configuration);
  ::bosdyn::api::ArmJointPosition* unsafe_arena_release_preferred_joint_configuration();

  void clear_joint_configuration();
  JointConfigurationCase joint_configuration_case() const;
  // @@protoc_insertion_point(class_scope:bosdyn.api.ArmSurfaceContact.Request)
 private:
  class _Internal;
  void set_has_force_remain_near_current_joint_configuration();
  void set_has_preferred_joint_configuration();

  inline bool has_joint_configuration() const;
  inline void clear_has_joint_configuration();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_frame_name_;
    ::bosdyn::api::SE3Trajectory* pose_trajectory_in_task_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_acceleration_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_linear_velocity_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_angular_velocity_;
    ::bosdyn::api::SE3Pose* wrist_tform_tool_;
    ::bosdyn::api::Vec3* press_force_percentage_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_pos_tracking_error_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_rot_tracking_error_;
    ::bosdyn::api::Vec3* bias_force_ewrt_body_;
    ::bosdyn::api::ClawGripperCommand_Request* gripper_command_;
    ::bosdyn::api::SE3Pose* root_tform_task_;
    int x_axis_;
    int y_axis_;
    int z_axis_;
    int xy_to_z_cross_term_admittance_;
    int xy_admittance_;
    int z_admittance_;
    bool is_robot_following_hand_;
    union JointConfigurationUnion {
      constexpr JointConfigurationUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool force_remain_near_current_joint_configuration_;
      ::bosdyn::api::ArmJointPosition* preferred_joint_configuration_;
    } joint_configuration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fsurface_5fcontact_2eproto;
};
// -------------------------------------------------------------------

class ArmSurfaceContact_Feedback final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:bosdyn.api.ArmSurfaceContact.Feedback) */ {
 public:
  inline ArmSurfaceContact_Feedback() : ArmSurfaceContact_Feedback(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ArmSurfaceContact_Feedback(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmSurfaceContact_Feedback(const ArmSurfaceContact_Feedback& from);
  ArmSurfaceContact_Feedback(ArmSurfaceContact_Feedback&& from) noexcept
    : ArmSurfaceContact_Feedback() {
    *this = ::std::move(from);
  }

  inline ArmSurfaceContact_Feedback& operator=(const ArmSurfaceContact_Feedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmSurfaceContact_Feedback& operator=(ArmSurfaceContact_Feedback&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmSurfaceContact_Feedback& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArmSurfaceContact_Feedback* internal_default_instance() {
    return reinterpret_cast<const ArmSurfaceContact_Feedback*>(
               &_ArmSurfaceContact_Feedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ArmSurfaceContact_Feedback& a, ArmSurfaceContact_Feedback& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmSurfaceContact_Feedback* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmSurfaceContact_Feedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArmSurfaceContact_Feedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArmSurfaceContact_Feedback>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ArmSurfaceContact_Feedback& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ArmSurfaceContact_Feedback& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ArmSurfaceContact.Feedback";
  }
  protected:
  explicit ArmSurfaceContact_Feedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.ArmSurfaceContact.Feedback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fsurface_5fcontact_2eproto;
};
// -------------------------------------------------------------------

class ArmSurfaceContact final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:bosdyn.api.ArmSurfaceContact) */ {
 public:
  inline ArmSurfaceContact() : ArmSurfaceContact(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ArmSurfaceContact(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmSurfaceContact(const ArmSurfaceContact& from);
  ArmSurfaceContact(ArmSurfaceContact&& from) noexcept
    : ArmSurfaceContact() {
    *this = ::std::move(from);
  }

  inline ArmSurfaceContact& operator=(const ArmSurfaceContact& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmSurfaceContact& operator=(ArmSurfaceContact&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmSurfaceContact& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArmSurfaceContact* internal_default_instance() {
    return reinterpret_cast<const ArmSurfaceContact*>(
               &_ArmSurfaceContact_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ArmSurfaceContact& a, ArmSurfaceContact& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmSurfaceContact* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmSurfaceContact* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArmSurfaceContact* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArmSurfaceContact>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ArmSurfaceContact& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ArmSurfaceContact& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ArmSurfaceContact";
  }
  protected:
  explicit ArmSurfaceContact(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ArmSurfaceContact_Request Request;
  typedef ArmSurfaceContact_Feedback Feedback;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.ArmSurfaceContact)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_bosdyn_2fapi_2farm_5fsurface_5fcontact_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ArmSurfaceContact_Request

// string root_frame_name = 25;
inline void ArmSurfaceContact_Request::clear_root_frame_name() {
  _impl_.root_frame_name_.ClearToEmpty();
}
inline const std::string& ArmSurfaceContact_Request::root_frame_name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmSurfaceContact.Request.root_frame_name)
  return _internal_root_frame_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ArmSurfaceContact_Request::set_root_frame_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.root_frame_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.ArmSurfaceContact.Request.root_frame_name)
}
inline std::string* ArmSurfaceContact_Request::mutable_root_frame_name() {
  std::string* _s = _internal_mutable_root_frame_name();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmSurfaceContact.Request.root_frame_name)
  return _s;
}
inline const std::string& ArmSurfaceContact_Request::_internal_root_frame_name() const {
  return _impl_.root_frame_name_.Get();
}
inline void ArmSurfaceContact_Request::_internal_set_root_frame_name(const std::string& value) {
  
  _impl_.root_frame_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ArmSurfaceContact_Request::_internal_mutable_root_frame_name() {
  
  return _impl_.root_frame_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ArmSurfaceContact_Request::release_root_frame_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmSurfaceContact.Request.root_frame_name)
  return _impl_.root_frame_name_.Release();
}
inline void ArmSurfaceContact_Request::set_allocated_root_frame_name(std::string* root_frame_name) {
  if (root_frame_name != nullptr) {
    
  } else {
    
  }
  _impl_.root_frame_name_.SetAllocated(root_frame_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.root_frame_name_.IsDefault()) {
    _impl_.root_frame_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmSurfaceContact.Request.root_frame_name)
}

// .bosdyn.api.SE3Pose wrist_tform_tool = 6;
inline bool ArmSurfaceContact_Request::_internal_has_wrist_tform_tool() const {
  return this != internal_default_instance() && _impl_.wrist_tform_tool_ != nullptr;
}
inline bool ArmSurfaceContact_Request::has_wrist_tform_tool() const {
  return _internal_has_wrist_tform_tool();
}
inline const ::bosdyn::api::SE3Pose& ArmSurfaceContact_Request::_internal_wrist_tform_tool() const {
  const ::bosdyn::api::SE3Pose* p = _impl_.wrist_tform_tool_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::SE3Pose&>(
      ::bosdyn::api::_SE3Pose_default_instance_);
}
inline const ::bosdyn::api::SE3Pose& ArmSurfaceContact_Request::wrist_tform_tool() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmSurfaceContact.Request.wrist_tform_tool)
  return _internal_wrist_tform_tool();
}
inline void ArmSurfaceContact_Request::unsafe_arena_set_allocated_wrist_tform_tool(
    ::bosdyn::api::SE3Pose* wrist_tform_tool) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wrist_tform_tool_);
  }
  _impl_.wrist_tform_tool_ = wrist_tform_tool;
  if (wrist_tform_tool) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmSurfaceContact.Request.wrist_tform_tool)
}
inline ::bosdyn::api::SE3Pose* ArmSurfaceContact_Request::release_wrist_tform_tool() {
  
  ::bosdyn::api::SE3Pose* temp = _impl_.wrist_tform_tool_;
  _impl_.wrist_tform_tool_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::SE3Pose* ArmSurfaceContact_Request::unsafe_arena_release_wrist_tform_tool() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmSurfaceContact.Request.wrist_tform_tool)
  
  ::bosdyn::api::SE3Pose* temp = _impl_.wrist_tform_tool_;
  _impl_.wrist_tform_tool_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Pose* ArmSurfaceContact_Request::_internal_mutable_wrist_tform_tool() {
  
  if (_impl_.wrist_tform_tool_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Pose>(GetArenaForAllocation());
    _impl_.wrist_tform_tool_ = p;
  }
  return _impl_.wrist_tform_tool_;
}
inline ::bosdyn::api::SE3Pose* ArmSurfaceContact_Request::mutable_wrist_tform_tool() {
  ::bosdyn::api::SE3Pose* _msg = _internal_mutable_wrist_tform_tool();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmSurfaceContact.Request.wrist_tform_tool)
  return _msg;
}
inline void ArmSurfaceContact_Request::set_allocated_wrist_tform_tool(::bosdyn::api::SE3Pose* wrist_tform_tool) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wrist_tform_tool_);
  }
  if (wrist_tform_tool) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wrist_tform_tool));
    if (message_arena != submessage_arena) {
      wrist_tform_tool = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wrist_tform_tool, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.wrist_tform_tool_ = wrist_tform_tool;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmSurfaceContact.Request.wrist_tform_tool)
}

// .bosdyn.api.SE3Pose root_tform_task = 26;
inline bool ArmSurfaceContact_Request::_internal_has_root_tform_task() const {
  return this != internal_default_instance() && _impl_.root_tform_task_ != nullptr;
}
inline bool ArmSurfaceContact_Request::has_root_tform_task() const {
  return _internal_has_root_tform_task();
}
inline const ::bosdyn::api::SE3Pose& ArmSurfaceContact_Request::_internal_root_tform_task() const {
  const ::bosdyn::api::SE3Pose* p = _impl_.root_tform_task_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::SE3Pose&>(
      ::bosdyn::api::_SE3Pose_default_instance_);
}
inline const ::bosdyn::api::SE3Pose& ArmSurfaceContact_Request::root_tform_task() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmSurfaceContact.Request.root_tform_task)
  return _internal_root_tform_task();
}
inline void ArmSurfaceContact_Request::unsafe_arena_set_allocated_root_tform_task(
    ::bosdyn::api::SE3Pose* root_tform_task) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.root_tform_task_);
  }
  _impl_.root_tform_task_ = root_tform_task;
  if (root_tform_task) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmSurfaceContact.Request.root_tform_task)
}
inline ::bosdyn::api::SE3Pose* ArmSurfaceContact_Request::release_root_tform_task() {
  
  ::bosdyn::api::SE3Pose* temp = _impl_.root_tform_task_;
  _impl_.root_tform_task_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::SE3Pose* ArmSurfaceContact_Request::unsafe_arena_release_root_tform_task() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmSurfaceContact.Request.root_tform_task)
  
  ::bosdyn::api::SE3Pose* temp = _impl_.root_tform_task_;
  _impl_.root_tform_task_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Pose* ArmSurfaceContact_Request::_internal_mutable_root_tform_task() {
  
  if (_impl_.root_tform_task_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Pose>(GetArenaForAllocation());
    _impl_.root_tform_task_ = p;
  }
  return _impl_.root_tform_task_;
}
inline ::bosdyn::api::SE3Pose* ArmSurfaceContact_Request::mutable_root_tform_task() {
  ::bosdyn::api::SE3Pose* _msg = _internal_mutable_root_tform_task();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmSurfaceContact.Request.root_tform_task)
  return _msg;
}
inline void ArmSurfaceContact_Request::set_allocated_root_tform_task(::bosdyn::api::SE3Pose* root_tform_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.root_tform_task_);
  }
  if (root_tform_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(root_tform_task));
    if (message_arena != submessage_arena) {
      root_tform_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root_tform_task, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.root_tform_task_ = root_tform_task;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmSurfaceContact.Request.root_tform_task)
}

// .bosdyn.api.SE3Trajectory pose_trajectory_in_task = 2;
inline bool ArmSurfaceContact_Request::_internal_has_pose_trajectory_in_task() const {
  return this != internal_default_instance() && _impl_.pose_trajectory_in_task_ != nullptr;
}
inline bool ArmSurfaceContact_Request::has_pose_trajectory_in_task() const {
  return _internal_has_pose_trajectory_in_task();
}
inline const ::bosdyn::api::SE3Trajectory& ArmSurfaceContact_Request::_internal_pose_trajectory_in_task() const {
  const ::bosdyn::api::SE3Trajectory* p = _impl_.pose_trajectory_in_task_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::SE3Trajectory&>(
      ::bosdyn::api::_SE3Trajectory_default_instance_);
}
inline const ::bosdyn::api::SE3Trajectory& ArmSurfaceContact_Request::pose_trajectory_in_task() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmSurfaceContact.Request.pose_trajectory_in_task)
  return _internal_pose_trajectory_in_task();
}
inline void ArmSurfaceContact_Request::unsafe_arena_set_allocated_pose_trajectory_in_task(
    ::bosdyn::api::SE3Trajectory* pose_trajectory_in_task) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_trajectory_in_task_);
  }
  _impl_.pose_trajectory_in_task_ = pose_trajectory_in_task;
  if (pose_trajectory_in_task) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmSurfaceContact.Request.pose_trajectory_in_task)
}
inline ::bosdyn::api::SE3Trajectory* ArmSurfaceContact_Request::release_pose_trajectory_in_task() {
  
  ::bosdyn::api::SE3Trajectory* temp = _impl_.pose_trajectory_in_task_;
  _impl_.pose_trajectory_in_task_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::SE3Trajectory* ArmSurfaceContact_Request::unsafe_arena_release_pose_trajectory_in_task() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmSurfaceContact.Request.pose_trajectory_in_task)
  
  ::bosdyn::api::SE3Trajectory* temp = _impl_.pose_trajectory_in_task_;
  _impl_.pose_trajectory_in_task_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Trajectory* ArmSurfaceContact_Request::_internal_mutable_pose_trajectory_in_task() {
  
  if (_impl_.pose_trajectory_in_task_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Trajectory>(GetArenaForAllocation());
    _impl_.pose_trajectory_in_task_ = p;
  }
  return _impl_.pose_trajectory_in_task_;
}
inline ::bosdyn::api::SE3Trajectory* ArmSurfaceContact_Request::mutable_pose_trajectory_in_task() {
  ::bosdyn::api::SE3Trajectory* _msg = _internal_mutable_pose_trajectory_in_task();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmSurfaceContact.Request.pose_trajectory_in_task)
  return _msg;
}
inline void ArmSurfaceContact_Request::set_allocated_pose_trajectory_in_task(::bosdyn::api::SE3Trajectory* pose_trajectory_in_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_trajectory_in_task_);
  }
  if (pose_trajectory_in_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_trajectory_in_task));
    if (message_arena != submessage_arena) {
      pose_trajectory_in_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose_trajectory_in_task, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pose_trajectory_in_task_ = pose_trajectory_in_task;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmSurfaceContact.Request.pose_trajectory_in_task)
}

// .google.protobuf.DoubleValue maximum_acceleration = 3;
inline bool ArmSurfaceContact_Request::_internal_has_maximum_acceleration() const {
  return this != internal_default_instance() && _impl_.maximum_acceleration_ != nullptr;
}
inline bool ArmSurfaceContact_Request::has_maximum_acceleration() const {
  return _internal_has_maximum_acceleration();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmSurfaceContact_Request::_internal_maximum_acceleration() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.maximum_acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmSurfaceContact_Request::maximum_acceleration() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmSurfaceContact.Request.maximum_acceleration)
  return _internal_maximum_acceleration();
}
inline void ArmSurfaceContact_Request::unsafe_arena_set_allocated_maximum_acceleration(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_acceleration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maximum_acceleration_);
  }
  _impl_.maximum_acceleration_ = maximum_acceleration;
  if (maximum_acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmSurfaceContact.Request.maximum_acceleration)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmSurfaceContact_Request::release_maximum_acceleration() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.maximum_acceleration_;
  _impl_.maximum_acceleration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmSurfaceContact_Request::unsafe_arena_release_maximum_acceleration() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmSurfaceContact.Request.maximum_acceleration)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.maximum_acceleration_;
  _impl_.maximum_acceleration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmSurfaceContact_Request::_internal_mutable_maximum_acceleration() {
  
  if (_impl_.maximum_acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.maximum_acceleration_ = p;
  }
  return _impl_.maximum_acceleration_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmSurfaceContact_Request::mutable_maximum_acceleration() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_maximum_acceleration();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmSurfaceContact.Request.maximum_acceleration)
  return _msg;
}
inline void ArmSurfaceContact_Request::set_allocated_maximum_acceleration(::PROTOBUF_NAMESPACE_ID::DoubleValue* maximum_acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maximum_acceleration_);
  }
  if (maximum_acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maximum_acceleration));
    if (message_arena != submessage_arena) {
      maximum_acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maximum_acceleration, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.maximum_acceleration_ = maximum_acceleration;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmSurfaceContact.Request.maximum_acceleration)
}

// .google.protobuf.DoubleValue max_linear_velocity = 4;
inline bool ArmSurfaceContact_Request::_internal_has_max_linear_velocity() const {
  return this != internal_default_instance() && _impl_.max_linear_velocity_ != nullptr;
}
inline bool ArmSurfaceContact_Request::has_max_linear_velocity() const {
  return _internal_has_max_linear_velocity();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmSurfaceContact_Request::_internal_max_linear_velocity() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.max_linear_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmSurfaceContact_Request::max_linear_velocity() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmSurfaceContact.Request.max_linear_velocity)
  return _internal_max_linear_velocity();
}
inline void ArmSurfaceContact_Request::unsafe_arena_set_allocated_max_linear_velocity(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_linear_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_linear_velocity_);
  }
  _impl_.max_linear_velocity_ = max_linear_velocity;
  if (max_linear_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmSurfaceContact.Request.max_linear_velocity)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmSurfaceContact_Request::release_max_linear_velocity() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_linear_velocity_;
  _impl_.max_linear_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmSurfaceContact_Request::unsafe_arena_release_max_linear_velocity() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmSurfaceContact.Request.max_linear_velocity)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_linear_velocity_;
  _impl_.max_linear_velocity_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmSurfaceContact_Request::_internal_mutable_max_linear_velocity() {
  
  if (_impl_.max_linear_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.max_linear_velocity_ = p;
  }
  return _impl_.max_linear_velocity_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmSurfaceContact_Request::mutable_max_linear_velocity() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_max_linear_velocity();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmSurfaceContact.Request.max_linear_velocity)
  return _msg;
}
inline void ArmSurfaceContact_Request::set_allocated_max_linear_velocity(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_linear_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_linear_velocity_);
  }
  if (max_linear_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_linear_velocity));
    if (message_arena != submessage_arena) {
      max_linear_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_linear_velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_linear_velocity_ = max_linear_velocity;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmSurfaceContact.Request.max_linear_velocity)
}

// .google.protobuf.DoubleValue max_angular_velocity = 5;
inline bool ArmSurfaceContact_Request::_internal_has_max_angular_velocity() const {
  return this != internal_default_instance() && _impl_.max_angular_velocity_ != nullptr;
}
inline bool ArmSurfaceContact_Request::has_max_angular_velocity() const {
  return _internal_has_max_angular_velocity();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmSurfaceContact_Request::_internal_max_angular_velocity() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.max_angular_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmSurfaceContact_Request::max_angular_velocity() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmSurfaceContact.Request.max_angular_velocity)
  return _internal_max_angular_velocity();
}
inline void ArmSurfaceContact_Request::unsafe_arena_set_allocated_max_angular_velocity(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_angular_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_angular_velocity_);
  }
  _impl_.max_angular_velocity_ = max_angular_velocity;
  if (max_angular_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmSurfaceContact.Request.max_angular_velocity)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmSurfaceContact_Request::release_max_angular_velocity() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_angular_velocity_;
  _impl_.max_angular_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmSurfaceContact_Request::unsafe_arena_release_max_angular_velocity() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmSurfaceContact.Request.max_angular_velocity)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_angular_velocity_;
  _impl_.max_angular_velocity_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmSurfaceContact_Request::_internal_mutable_max_angular_velocity() {
  
  if (_impl_.max_angular_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.max_angular_velocity_ = p;
  }
  return _impl_.max_angular_velocity_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmSurfaceContact_Request::mutable_max_angular_velocity() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_max_angular_velocity();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmSurfaceContact.Request.max_angular_velocity)
  return _msg;
}
inline void ArmSurfaceContact_Request::set_allocated_max_angular_velocity(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_angular_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_angular_velocity_);
  }
  if (max_angular_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_angular_velocity));
    if (message_arena != submessage_arena) {
      max_angular_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_angular_velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_angular_velocity_ = max_angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmSurfaceContact.Request.max_angular_velocity)
}

// .google.protobuf.DoubleValue max_pos_tracking_error = 18;
inline bool ArmSurfaceContact_Request::_internal_has_max_pos_tracking_error() const {
  return this != internal_default_instance() && _impl_.max_pos_tracking_error_ != nullptr;
}
inline bool ArmSurfaceContact_Request::has_max_pos_tracking_error() const {
  return _internal_has_max_pos_tracking_error();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmSurfaceContact_Request::_internal_max_pos_tracking_error() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.max_pos_tracking_error_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmSurfaceContact_Request::max_pos_tracking_error() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmSurfaceContact.Request.max_pos_tracking_error)
  return _internal_max_pos_tracking_error();
}
inline void ArmSurfaceContact_Request::unsafe_arena_set_allocated_max_pos_tracking_error(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_pos_tracking_error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_pos_tracking_error_);
  }
  _impl_.max_pos_tracking_error_ = max_pos_tracking_error;
  if (max_pos_tracking_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmSurfaceContact.Request.max_pos_tracking_error)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmSurfaceContact_Request::release_max_pos_tracking_error() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_pos_tracking_error_;
  _impl_.max_pos_tracking_error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmSurfaceContact_Request::unsafe_arena_release_max_pos_tracking_error() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmSurfaceContact.Request.max_pos_tracking_error)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_pos_tracking_error_;
  _impl_.max_pos_tracking_error_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmSurfaceContact_Request::_internal_mutable_max_pos_tracking_error() {
  
  if (_impl_.max_pos_tracking_error_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.max_pos_tracking_error_ = p;
  }
  return _impl_.max_pos_tracking_error_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmSurfaceContact_Request::mutable_max_pos_tracking_error() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_max_pos_tracking_error();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmSurfaceContact.Request.max_pos_tracking_error)
  return _msg;
}
inline void ArmSurfaceContact_Request::set_allocated_max_pos_tracking_error(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_pos_tracking_error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_pos_tracking_error_);
  }
  if (max_pos_tracking_error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_pos_tracking_error));
    if (message_arena != submessage_arena) {
      max_pos_tracking_error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_pos_tracking_error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_pos_tracking_error_ = max_pos_tracking_error;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmSurfaceContact.Request.max_pos_tracking_error)
}

// .google.protobuf.DoubleValue max_rot_tracking_error = 19;
inline bool ArmSurfaceContact_Request::_internal_has_max_rot_tracking_error() const {
  return this != internal_default_instance() && _impl_.max_rot_tracking_error_ != nullptr;
}
inline bool ArmSurfaceContact_Request::has_max_rot_tracking_error() const {
  return _internal_has_max_rot_tracking_error();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmSurfaceContact_Request::_internal_max_rot_tracking_error() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.max_rot_tracking_error_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmSurfaceContact_Request::max_rot_tracking_error() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmSurfaceContact.Request.max_rot_tracking_error)
  return _internal_max_rot_tracking_error();
}
inline void ArmSurfaceContact_Request::unsafe_arena_set_allocated_max_rot_tracking_error(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_rot_tracking_error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_rot_tracking_error_);
  }
  _impl_.max_rot_tracking_error_ = max_rot_tracking_error;
  if (max_rot_tracking_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmSurfaceContact.Request.max_rot_tracking_error)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmSurfaceContact_Request::release_max_rot_tracking_error() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_rot_tracking_error_;
  _impl_.max_rot_tracking_error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmSurfaceContact_Request::unsafe_arena_release_max_rot_tracking_error() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmSurfaceContact.Request.max_rot_tracking_error)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_rot_tracking_error_;
  _impl_.max_rot_tracking_error_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmSurfaceContact_Request::_internal_mutable_max_rot_tracking_error() {
  
  if (_impl_.max_rot_tracking_error_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.max_rot_tracking_error_ = p;
  }
  return _impl_.max_rot_tracking_error_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmSurfaceContact_Request::mutable_max_rot_tracking_error() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_max_rot_tracking_error();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmSurfaceContact.Request.max_rot_tracking_error)
  return _msg;
}
inline void ArmSurfaceContact_Request::set_allocated_max_rot_tracking_error(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_rot_tracking_error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_rot_tracking_error_);
  }
  if (max_rot_tracking_error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_rot_tracking_error));
    if (message_arena != submessage_arena) {
      max_rot_tracking_error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_rot_tracking_error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_rot_tracking_error_ = max_rot_tracking_error;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmSurfaceContact.Request.max_rot_tracking_error)
}

// bool force_remain_near_current_joint_configuration = 15;
inline bool ArmSurfaceContact_Request::_internal_has_force_remain_near_current_joint_configuration() const {
  return joint_configuration_case() == kForceRemainNearCurrentJointConfiguration;
}
inline bool ArmSurfaceContact_Request::has_force_remain_near_current_joint_configuration() const {
  return _internal_has_force_remain_near_current_joint_configuration();
}
inline void ArmSurfaceContact_Request::set_has_force_remain_near_current_joint_configuration() {
  _impl_._oneof_case_[0] = kForceRemainNearCurrentJointConfiguration;
}
inline void ArmSurfaceContact_Request::clear_force_remain_near_current_joint_configuration() {
  if (_internal_has_force_remain_near_current_joint_configuration()) {
    _impl_.joint_configuration_.force_remain_near_current_joint_configuration_ = false;
    clear_has_joint_configuration();
  }
}
inline bool ArmSurfaceContact_Request::_internal_force_remain_near_current_joint_configuration() const {
  if (_internal_has_force_remain_near_current_joint_configuration()) {
    return _impl_.joint_configuration_.force_remain_near_current_joint_configuration_;
  }
  return false;
}
inline void ArmSurfaceContact_Request::_internal_set_force_remain_near_current_joint_configuration(bool value) {
  if (!_internal_has_force_remain_near_current_joint_configuration()) {
    clear_joint_configuration();
    set_has_force_remain_near_current_joint_configuration();
  }
  _impl_.joint_configuration_.force_remain_near_current_joint_configuration_ = value;
}
inline bool ArmSurfaceContact_Request::force_remain_near_current_joint_configuration() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmSurfaceContact.Request.force_remain_near_current_joint_configuration)
  return _internal_force_remain_near_current_joint_configuration();
}
inline void ArmSurfaceContact_Request::set_force_remain_near_current_joint_configuration(bool value) {
  _internal_set_force_remain_near_current_joint_configuration(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.ArmSurfaceContact.Request.force_remain_near_current_joint_configuration)
}

// .bosdyn.api.ArmJointPosition preferred_joint_configuration = 16;
inline bool ArmSurfaceContact_Request::_internal_has_preferred_joint_configuration() const {
  return joint_configuration_case() == kPreferredJointConfiguration;
}
inline bool ArmSurfaceContact_Request::has_preferred_joint_configuration() const {
  return _internal_has_preferred_joint_configuration();
}
inline void ArmSurfaceContact_Request::set_has_preferred_joint_configuration() {
  _impl_._oneof_case_[0] = kPreferredJointConfiguration;
}
inline ::bosdyn::api::ArmJointPosition* ArmSurfaceContact_Request::release_preferred_joint_configuration() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmSurfaceContact.Request.preferred_joint_configuration)
  if (_internal_has_preferred_joint_configuration()) {
    clear_has_joint_configuration();
    ::bosdyn::api::ArmJointPosition* temp = _impl_.joint_configuration_.preferred_joint_configuration_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.joint_configuration_.preferred_joint_configuration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::ArmJointPosition& ArmSurfaceContact_Request::_internal_preferred_joint_configuration() const {
  return _internal_has_preferred_joint_configuration()
      ? *_impl_.joint_configuration_.preferred_joint_configuration_
      : reinterpret_cast< ::bosdyn::api::ArmJointPosition&>(::bosdyn::api::_ArmJointPosition_default_instance_);
}
inline const ::bosdyn::api::ArmJointPosition& ArmSurfaceContact_Request::preferred_joint_configuration() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmSurfaceContact.Request.preferred_joint_configuration)
  return _internal_preferred_joint_configuration();
}
inline ::bosdyn::api::ArmJointPosition* ArmSurfaceContact_Request::unsafe_arena_release_preferred_joint_configuration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.ArmSurfaceContact.Request.preferred_joint_configuration)
  if (_internal_has_preferred_joint_configuration()) {
    clear_has_joint_configuration();
    ::bosdyn::api::ArmJointPosition* temp = _impl_.joint_configuration_.preferred_joint_configuration_;
    _impl_.joint_configuration_.preferred_joint_configuration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ArmSurfaceContact_Request::unsafe_arena_set_allocated_preferred_joint_configuration(::bosdyn::api::ArmJointPosition* preferred_joint_configuration) {
  clear_joint_configuration();
  if (preferred_joint_configuration) {
    set_has_preferred_joint_configuration();
    _impl_.joint_configuration_.preferred_joint_configuration_ = preferred_joint_configuration;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmSurfaceContact.Request.preferred_joint_configuration)
}
inline ::bosdyn::api::ArmJointPosition* ArmSurfaceContact_Request::_internal_mutable_preferred_joint_configuration() {
  if (!_internal_has_preferred_joint_configuration()) {
    clear_joint_configuration();
    set_has_preferred_joint_configuration();
    _impl_.joint_configuration_.preferred_joint_configuration_ = CreateMaybeMessage< ::bosdyn::api::ArmJointPosition >(GetArenaForAllocation());
  }
  return _impl_.joint_configuration_.preferred_joint_configuration_;
}
inline ::bosdyn::api::ArmJointPosition* ArmSurfaceContact_Request::mutable_preferred_joint_configuration() {
  ::bosdyn::api::ArmJointPosition* _msg = _internal_mutable_preferred_joint_configuration();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmSurfaceContact.Request.preferred_joint_configuration)
  return _msg;
}

// .bosdyn.api.ArmSurfaceContact.Request.AxisMode x_axis = 8;
inline void ArmSurfaceContact_Request::clear_x_axis() {
  _impl_.x_axis_ = 0;
}
inline ::bosdyn::api::ArmSurfaceContact_Request_AxisMode ArmSurfaceContact_Request::_internal_x_axis() const {
  return static_cast< ::bosdyn::api::ArmSurfaceContact_Request_AxisMode >(_impl_.x_axis_);
}
inline ::bosdyn::api::ArmSurfaceContact_Request_AxisMode ArmSurfaceContact_Request::x_axis() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmSurfaceContact.Request.x_axis)
  return _internal_x_axis();
}
inline void ArmSurfaceContact_Request::_internal_set_x_axis(::bosdyn::api::ArmSurfaceContact_Request_AxisMode value) {
  
  _impl_.x_axis_ = value;
}
inline void ArmSurfaceContact_Request::set_x_axis(::bosdyn::api::ArmSurfaceContact_Request_AxisMode value) {
  _internal_set_x_axis(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.ArmSurfaceContact.Request.x_axis)
}

// .bosdyn.api.ArmSurfaceContact.Request.AxisMode y_axis = 9;
inline void ArmSurfaceContact_Request::clear_y_axis() {
  _impl_.y_axis_ = 0;
}
inline ::bosdyn::api::ArmSurfaceContact_Request_AxisMode ArmSurfaceContact_Request::_internal_y_axis() const {
  return static_cast< ::bosdyn::api::ArmSurfaceContact_Request_AxisMode >(_impl_.y_axis_);
}
inline ::bosdyn::api::ArmSurfaceContact_Request_AxisMode ArmSurfaceContact_Request::y_axis() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmSurfaceContact.Request.y_axis)
  return _internal_y_axis();
}
inline void ArmSurfaceContact_Request::_internal_set_y_axis(::bosdyn::api::ArmSurfaceContact_Request_AxisMode value) {
  
  _impl_.y_axis_ = value;
}
inline void ArmSurfaceContact_Request::set_y_axis(::bosdyn::api::ArmSurfaceContact_Request_AxisMode value) {
  _internal_set_y_axis(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.ArmSurfaceContact.Request.y_axis)
}

// .bosdyn.api.ArmSurfaceContact.Request.AxisMode z_axis = 10;
inline void ArmSurfaceContact_Request::clear_z_axis() {
  _impl_.z_axis_ = 0;
}
inline ::bosdyn::api::ArmSurfaceContact_Request_AxisMode ArmSurfaceContact_Request::_internal_z_axis() const {
  return static_cast< ::bosdyn::api::ArmSurfaceContact_Request_AxisMode >(_impl_.z_axis_);
}
inline ::bosdyn::api::ArmSurfaceContact_Request_AxisMode ArmSurfaceContact_Request::z_axis() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmSurfaceContact.Request.z_axis)
  return _internal_z_axis();
}
inline void ArmSurfaceContact_Request::_internal_set_z_axis(::bosdyn::api::ArmSurfaceContact_Request_AxisMode value) {
  
  _impl_.z_axis_ = value;
}
inline void ArmSurfaceContact_Request::set_z_axis(::bosdyn::api::ArmSurfaceContact_Request_AxisMode value) {
  _internal_set_z_axis(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.ArmSurfaceContact.Request.z_axis)
}

// .bosdyn.api.Vec3 press_force_percentage = 12;
inline bool ArmSurfaceContact_Request::_internal_has_press_force_percentage() const {
  return this != internal_default_instance() && _impl_.press_force_percentage_ != nullptr;
}
inline bool ArmSurfaceContact_Request::has_press_force_percentage() const {
  return _internal_has_press_force_percentage();
}
inline const ::bosdyn::api::Vec3& ArmSurfaceContact_Request::_internal_press_force_percentage() const {
  const ::bosdyn::api::Vec3* p = _impl_.press_force_percentage_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec3&>(
      ::bosdyn::api::_Vec3_default_instance_);
}
inline const ::bosdyn::api::Vec3& ArmSurfaceContact_Request::press_force_percentage() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmSurfaceContact.Request.press_force_percentage)
  return _internal_press_force_percentage();
}
inline void ArmSurfaceContact_Request::unsafe_arena_set_allocated_press_force_percentage(
    ::bosdyn::api::Vec3* press_force_percentage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.press_force_percentage_);
  }
  _impl_.press_force_percentage_ = press_force_percentage;
  if (press_force_percentage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmSurfaceContact.Request.press_force_percentage)
}
inline ::bosdyn::api::Vec3* ArmSurfaceContact_Request::release_press_force_percentage() {
  
  ::bosdyn::api::Vec3* temp = _impl_.press_force_percentage_;
  _impl_.press_force_percentage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec3* ArmSurfaceContact_Request::unsafe_arena_release_press_force_percentage() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmSurfaceContact.Request.press_force_percentage)
  
  ::bosdyn::api::Vec3* temp = _impl_.press_force_percentage_;
  _impl_.press_force_percentage_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec3* ArmSurfaceContact_Request::_internal_mutable_press_force_percentage() {
  
  if (_impl_.press_force_percentage_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec3>(GetArenaForAllocation());
    _impl_.press_force_percentage_ = p;
  }
  return _impl_.press_force_percentage_;
}
inline ::bosdyn::api::Vec3* ArmSurfaceContact_Request::mutable_press_force_percentage() {
  ::bosdyn::api::Vec3* _msg = _internal_mutable_press_force_percentage();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmSurfaceContact.Request.press_force_percentage)
  return _msg;
}
inline void ArmSurfaceContact_Request::set_allocated_press_force_percentage(::bosdyn::api::Vec3* press_force_percentage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.press_force_percentage_);
  }
  if (press_force_percentage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(press_force_percentage));
    if (message_arena != submessage_arena) {
      press_force_percentage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, press_force_percentage, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.press_force_percentage_ = press_force_percentage;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmSurfaceContact.Request.press_force_percentage)
}

// .bosdyn.api.ArmSurfaceContact.Request.AdmittanceSetting xy_admittance = 21;
inline void ArmSurfaceContact_Request::clear_xy_admittance() {
  _impl_.xy_admittance_ = 0;
}
inline ::bosdyn::api::ArmSurfaceContact_Request_AdmittanceSetting ArmSurfaceContact_Request::_internal_xy_admittance() const {
  return static_cast< ::bosdyn::api::ArmSurfaceContact_Request_AdmittanceSetting >(_impl_.xy_admittance_);
}
inline ::bosdyn::api::ArmSurfaceContact_Request_AdmittanceSetting ArmSurfaceContact_Request::xy_admittance() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmSurfaceContact.Request.xy_admittance)
  return _internal_xy_admittance();
}
inline void ArmSurfaceContact_Request::_internal_set_xy_admittance(::bosdyn::api::ArmSurfaceContact_Request_AdmittanceSetting value) {
  
  _impl_.xy_admittance_ = value;
}
inline void ArmSurfaceContact_Request::set_xy_admittance(::bosdyn::api::ArmSurfaceContact_Request_AdmittanceSetting value) {
  _internal_set_xy_admittance(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.ArmSurfaceContact.Request.xy_admittance)
}

// .bosdyn.api.ArmSurfaceContact.Request.AdmittanceSetting z_admittance = 22;
inline void ArmSurfaceContact_Request::clear_z_admittance() {
  _impl_.z_admittance_ = 0;
}
inline ::bosdyn::api::ArmSurfaceContact_Request_AdmittanceSetting ArmSurfaceContact_Request::_internal_z_admittance() const {
  return static_cast< ::bosdyn::api::ArmSurfaceContact_Request_AdmittanceSetting >(_impl_.z_admittance_);
}
inline ::bosdyn::api::ArmSurfaceContact_Request_AdmittanceSetting ArmSurfaceContact_Request::z_admittance() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmSurfaceContact.Request.z_admittance)
  return _internal_z_admittance();
}
inline void ArmSurfaceContact_Request::_internal_set_z_admittance(::bosdyn::api::ArmSurfaceContact_Request_AdmittanceSetting value) {
  
  _impl_.z_admittance_ = value;
}
inline void ArmSurfaceContact_Request::set_z_admittance(::bosdyn::api::ArmSurfaceContact_Request_AdmittanceSetting value) {
  _internal_set_z_admittance(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.ArmSurfaceContact.Request.z_admittance)
}

// .bosdyn.api.ArmSurfaceContact.Request.AdmittanceSetting xy_to_z_cross_term_admittance = 17;
inline void ArmSurfaceContact_Request::clear_xy_to_z_cross_term_admittance() {
  _impl_.xy_to_z_cross_term_admittance_ = 0;
}
inline ::bosdyn::api::ArmSurfaceContact_Request_AdmittanceSetting ArmSurfaceContact_Request::_internal_xy_to_z_cross_term_admittance() const {
  return static_cast< ::bosdyn::api::ArmSurfaceContact_Request_AdmittanceSetting >(_impl_.xy_to_z_cross_term_admittance_);
}
inline ::bosdyn::api::ArmSurfaceContact_Request_AdmittanceSetting ArmSurfaceContact_Request::xy_to_z_cross_term_admittance() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmSurfaceContact.Request.xy_to_z_cross_term_admittance)
  return _internal_xy_to_z_cross_term_admittance();
}
inline void ArmSurfaceContact_Request::_internal_set_xy_to_z_cross_term_admittance(::bosdyn::api::ArmSurfaceContact_Request_AdmittanceSetting value) {
  
  _impl_.xy_to_z_cross_term_admittance_ = value;
}
inline void ArmSurfaceContact_Request::set_xy_to_z_cross_term_admittance(::bosdyn::api::ArmSurfaceContact_Request_AdmittanceSetting value) {
  _internal_set_xy_to_z_cross_term_admittance(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.ArmSurfaceContact.Request.xy_to_z_cross_term_admittance)
}

// .bosdyn.api.Vec3 bias_force_ewrt_body = 20;
inline bool ArmSurfaceContact_Request::_internal_has_bias_force_ewrt_body() const {
  return this != internal_default_instance() && _impl_.bias_force_ewrt_body_ != nullptr;
}
inline bool ArmSurfaceContact_Request::has_bias_force_ewrt_body() const {
  return _internal_has_bias_force_ewrt_body();
}
inline const ::bosdyn::api::Vec3& ArmSurfaceContact_Request::_internal_bias_force_ewrt_body() const {
  const ::bosdyn::api::Vec3* p = _impl_.bias_force_ewrt_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec3&>(
      ::bosdyn::api::_Vec3_default_instance_);
}
inline const ::bosdyn::api::Vec3& ArmSurfaceContact_Request::bias_force_ewrt_body() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmSurfaceContact.Request.bias_force_ewrt_body)
  return _internal_bias_force_ewrt_body();
}
inline void ArmSurfaceContact_Request::unsafe_arena_set_allocated_bias_force_ewrt_body(
    ::bosdyn::api::Vec3* bias_force_ewrt_body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bias_force_ewrt_body_);
  }
  _impl_.bias_force_ewrt_body_ = bias_force_ewrt_body;
  if (bias_force_ewrt_body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmSurfaceContact.Request.bias_force_ewrt_body)
}
inline ::bosdyn::api::Vec3* ArmSurfaceContact_Request::release_bias_force_ewrt_body() {
  
  ::bosdyn::api::Vec3* temp = _impl_.bias_force_ewrt_body_;
  _impl_.bias_force_ewrt_body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec3* ArmSurfaceContact_Request::unsafe_arena_release_bias_force_ewrt_body() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmSurfaceContact.Request.bias_force_ewrt_body)
  
  ::bosdyn::api::Vec3* temp = _impl_.bias_force_ewrt_body_;
  _impl_.bias_force_ewrt_body_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec3* ArmSurfaceContact_Request::_internal_mutable_bias_force_ewrt_body() {
  
  if (_impl_.bias_force_ewrt_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec3>(GetArenaForAllocation());
    _impl_.bias_force_ewrt_body_ = p;
  }
  return _impl_.bias_force_ewrt_body_;
}
inline ::bosdyn::api::Vec3* ArmSurfaceContact_Request::mutable_bias_force_ewrt_body() {
  ::bosdyn::api::Vec3* _msg = _internal_mutable_bias_force_ewrt_body();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmSurfaceContact.Request.bias_force_ewrt_body)
  return _msg;
}
inline void ArmSurfaceContact_Request::set_allocated_bias_force_ewrt_body(::bosdyn::api::Vec3* bias_force_ewrt_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bias_force_ewrt_body_);
  }
  if (bias_force_ewrt_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bias_force_ewrt_body));
    if (message_arena != submessage_arena) {
      bias_force_ewrt_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias_force_ewrt_body, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bias_force_ewrt_body_ = bias_force_ewrt_body;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmSurfaceContact.Request.bias_force_ewrt_body)
}

// .bosdyn.api.ClawGripperCommand.Request gripper_command = 23;
inline bool ArmSurfaceContact_Request::_internal_has_gripper_command() const {
  return this != internal_default_instance() && _impl_.gripper_command_ != nullptr;
}
inline bool ArmSurfaceContact_Request::has_gripper_command() const {
  return _internal_has_gripper_command();
}
inline const ::bosdyn::api::ClawGripperCommand_Request& ArmSurfaceContact_Request::_internal_gripper_command() const {
  const ::bosdyn::api::ClawGripperCommand_Request* p = _impl_.gripper_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ClawGripperCommand_Request&>(
      ::bosdyn::api::_ClawGripperCommand_Request_default_instance_);
}
inline const ::bosdyn::api::ClawGripperCommand_Request& ArmSurfaceContact_Request::gripper_command() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmSurfaceContact.Request.gripper_command)
  return _internal_gripper_command();
}
inline void ArmSurfaceContact_Request::unsafe_arena_set_allocated_gripper_command(
    ::bosdyn::api::ClawGripperCommand_Request* gripper_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gripper_command_);
  }
  _impl_.gripper_command_ = gripper_command;
  if (gripper_command) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ArmSurfaceContact.Request.gripper_command)
}
inline ::bosdyn::api::ClawGripperCommand_Request* ArmSurfaceContact_Request::release_gripper_command() {
  
  ::bosdyn::api::ClawGripperCommand_Request* temp = _impl_.gripper_command_;
  _impl_.gripper_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ClawGripperCommand_Request* ArmSurfaceContact_Request::unsafe_arena_release_gripper_command() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ArmSurfaceContact.Request.gripper_command)
  
  ::bosdyn::api::ClawGripperCommand_Request* temp = _impl_.gripper_command_;
  _impl_.gripper_command_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ClawGripperCommand_Request* ArmSurfaceContact_Request::_internal_mutable_gripper_command() {
  
  if (_impl_.gripper_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ClawGripperCommand_Request>(GetArenaForAllocation());
    _impl_.gripper_command_ = p;
  }
  return _impl_.gripper_command_;
}
inline ::bosdyn::api::ClawGripperCommand_Request* ArmSurfaceContact_Request::mutable_gripper_command() {
  ::bosdyn::api::ClawGripperCommand_Request* _msg = _internal_mutable_gripper_command();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ArmSurfaceContact.Request.gripper_command)
  return _msg;
}
inline void ArmSurfaceContact_Request::set_allocated_gripper_command(::bosdyn::api::ClawGripperCommand_Request* gripper_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gripper_command_);
  }
  if (gripper_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gripper_command));
    if (message_arena != submessage_arena) {
      gripper_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gripper_command, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gripper_command_ = gripper_command;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ArmSurfaceContact.Request.gripper_command)
}

// bool is_robot_following_hand = 24;
inline void ArmSurfaceContact_Request::clear_is_robot_following_hand() {
  _impl_.is_robot_following_hand_ = false;
}
inline bool ArmSurfaceContact_Request::_internal_is_robot_following_hand() const {
  return _impl_.is_robot_following_hand_;
}
inline bool ArmSurfaceContact_Request::is_robot_following_hand() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ArmSurfaceContact.Request.is_robot_following_hand)
  return _internal_is_robot_following_hand();
}
inline void ArmSurfaceContact_Request::_internal_set_is_robot_following_hand(bool value) {
  
  _impl_.is_robot_following_hand_ = value;
}
inline void ArmSurfaceContact_Request::set_is_robot_following_hand(bool value) {
  _internal_set_is_robot_following_hand(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.ArmSurfaceContact.Request.is_robot_following_hand)
}

inline bool ArmSurfaceContact_Request::has_joint_configuration() const {
  return joint_configuration_case() != JOINT_CONFIGURATION_NOT_SET;
}
inline void ArmSurfaceContact_Request::clear_has_joint_configuration() {
  _impl_._oneof_case_[0] = JOINT_CONFIGURATION_NOT_SET;
}
inline ArmSurfaceContact_Request::JointConfigurationCase ArmSurfaceContact_Request::joint_configuration_case() const {
  return ArmSurfaceContact_Request::JointConfigurationCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ArmSurfaceContact_Feedback

// -------------------------------------------------------------------

// ArmSurfaceContact

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::ArmSurfaceContact_Request_AxisMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::ArmSurfaceContact_Request_AxisMode>() {
  return ::bosdyn::api::ArmSurfaceContact_Request_AxisMode_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::ArmSurfaceContact_Request_AdmittanceSetting> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::ArmSurfaceContact_Request_AdmittanceSetting>() {
  return ::bosdyn::api::ArmSurfaceContact_Request_AdmittanceSetting_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2farm_5fsurface_5fcontact_2eproto

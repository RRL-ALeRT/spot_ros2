// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/alerts.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2falerts_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2falerts_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2falerts_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2falerts_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2falerts_2eproto;
namespace bosdyn {
namespace api {
class AlertData;
struct AlertDataDefaultTypeInternal;
extern AlertDataDefaultTypeInternal _AlertData_default_instance_;
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::AlertData* Arena::CreateMaybeMessage<::bosdyn::api::AlertData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {

enum AlertData_SeverityLevel : int {
  AlertData_SeverityLevel_SEVERITY_LEVEL_UNKNOWN = 0,
  AlertData_SeverityLevel_SEVERITY_LEVEL_INFO = 1,
  AlertData_SeverityLevel_SEVERITY_LEVEL_WARN = 2,
  AlertData_SeverityLevel_SEVERITY_LEVEL_ERROR = 3,
  AlertData_SeverityLevel_SEVERITY_LEVEL_CRITICAL = 4,
  AlertData_SeverityLevel_AlertData_SeverityLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AlertData_SeverityLevel_AlertData_SeverityLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AlertData_SeverityLevel_IsValid(int value);
constexpr AlertData_SeverityLevel AlertData_SeverityLevel_SeverityLevel_MIN = AlertData_SeverityLevel_SEVERITY_LEVEL_UNKNOWN;
constexpr AlertData_SeverityLevel AlertData_SeverityLevel_SeverityLevel_MAX = AlertData_SeverityLevel_SEVERITY_LEVEL_CRITICAL;
constexpr int AlertData_SeverityLevel_SeverityLevel_ARRAYSIZE = AlertData_SeverityLevel_SeverityLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AlertData_SeverityLevel_descriptor();
template<typename T>
inline const std::string& AlertData_SeverityLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AlertData_SeverityLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AlertData_SeverityLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AlertData_SeverityLevel_descriptor(), enum_t_value);
}
inline bool AlertData_SeverityLevel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AlertData_SeverityLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AlertData_SeverityLevel>(
    AlertData_SeverityLevel_descriptor(), name, value);
}
// ===================================================================

class AlertData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.AlertData) */ {
 public:
  inline AlertData() : AlertData(nullptr) {}
  ~AlertData() override;
  explicit PROTOBUF_CONSTEXPR AlertData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlertData(const AlertData& from);
  AlertData(AlertData&& from) noexcept
    : AlertData() {
    *this = ::std::move(from);
  }

  inline AlertData& operator=(const AlertData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlertData& operator=(AlertData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlertData& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlertData* internal_default_instance() {
    return reinterpret_cast<const AlertData*>(
               &_AlertData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AlertData& a, AlertData& b) {
    a.Swap(&b);
  }
  inline void Swap(AlertData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlertData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AlertData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AlertData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AlertData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AlertData& from) {
    AlertData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlertData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.AlertData";
  }
  protected:
  explicit AlertData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AlertData_SeverityLevel SeverityLevel;
  static constexpr SeverityLevel SEVERITY_LEVEL_UNKNOWN =
    AlertData_SeverityLevel_SEVERITY_LEVEL_UNKNOWN;
  static constexpr SeverityLevel SEVERITY_LEVEL_INFO =
    AlertData_SeverityLevel_SEVERITY_LEVEL_INFO;
  static constexpr SeverityLevel SEVERITY_LEVEL_WARN =
    AlertData_SeverityLevel_SEVERITY_LEVEL_WARN;
  static constexpr SeverityLevel SEVERITY_LEVEL_ERROR =
    AlertData_SeverityLevel_SEVERITY_LEVEL_ERROR;
  static constexpr SeverityLevel SEVERITY_LEVEL_CRITICAL =
    AlertData_SeverityLevel_SEVERITY_LEVEL_CRITICAL;
  static inline bool SeverityLevel_IsValid(int value) {
    return AlertData_SeverityLevel_IsValid(value);
  }
  static constexpr SeverityLevel SeverityLevel_MIN =
    AlertData_SeverityLevel_SeverityLevel_MIN;
  static constexpr SeverityLevel SeverityLevel_MAX =
    AlertData_SeverityLevel_SeverityLevel_MAX;
  static constexpr int SeverityLevel_ARRAYSIZE =
    AlertData_SeverityLevel_SeverityLevel_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SeverityLevel_descriptor() {
    return AlertData_SeverityLevel_descriptor();
  }
  template<typename T>
  static inline const std::string& SeverityLevel_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SeverityLevel>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SeverityLevel_Name.");
    return AlertData_SeverityLevel_Name(enum_t_value);
  }
  static inline bool SeverityLevel_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SeverityLevel* value) {
    return AlertData_SeverityLevel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kSourceFieldNumber = 3,
    kAdditionalDataFieldNumber = 4,
    kSeverityFieldNumber = 1,
  };
  // string title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string source = 3;
  void clear_source();
  const std::string& source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // .google.protobuf.Struct additional_data = 4;
  bool has_additional_data() const;
  private:
  bool _internal_has_additional_data() const;
  public:
  void clear_additional_data();
  const ::PROTOBUF_NAMESPACE_ID::Struct& additional_data() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_additional_data();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_additional_data();
  void set_allocated_additional_data(::PROTOBUF_NAMESPACE_ID::Struct* additional_data);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_additional_data() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_additional_data();
  public:
  void unsafe_arena_set_allocated_additional_data(
      ::PROTOBUF_NAMESPACE_ID::Struct* additional_data);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_additional_data();

  // .bosdyn.api.AlertData.SeverityLevel severity = 1;
  void clear_severity();
  ::bosdyn::api::AlertData_SeverityLevel severity() const;
  void set_severity(::bosdyn::api::AlertData_SeverityLevel value);
  private:
  ::bosdyn::api::AlertData_SeverityLevel _internal_severity() const;
  void _internal_set_severity(::bosdyn::api::AlertData_SeverityLevel value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.AlertData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
    ::PROTOBUF_NAMESPACE_ID::Struct* additional_data_;
    int severity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2falerts_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AlertData

// .bosdyn.api.AlertData.SeverityLevel severity = 1;
inline void AlertData::clear_severity() {
  _impl_.severity_ = 0;
}
inline ::bosdyn::api::AlertData_SeverityLevel AlertData::_internal_severity() const {
  return static_cast< ::bosdyn::api::AlertData_SeverityLevel >(_impl_.severity_);
}
inline ::bosdyn::api::AlertData_SeverityLevel AlertData::severity() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.AlertData.severity)
  return _internal_severity();
}
inline void AlertData::_internal_set_severity(::bosdyn::api::AlertData_SeverityLevel value) {
  
  _impl_.severity_ = value;
}
inline void AlertData::set_severity(::bosdyn::api::AlertData_SeverityLevel value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.AlertData.severity)
}

// string title = 2;
inline void AlertData::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& AlertData::title() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.AlertData.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlertData::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.AlertData.title)
}
inline std::string* AlertData::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.AlertData.title)
  return _s;
}
inline const std::string& AlertData::_internal_title() const {
  return _impl_.title_.Get();
}
inline void AlertData::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* AlertData::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* AlertData::release_title() {
  // @@protoc_insertion_point(field_release:bosdyn.api.AlertData.title)
  return _impl_.title_.Release();
}
inline void AlertData::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.AlertData.title)
}

// string source = 3;
inline void AlertData::clear_source() {
  _impl_.source_.ClearToEmpty();
}
inline const std::string& AlertData::source() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.AlertData.source)
  return _internal_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlertData::set_source(ArgT0&& arg0, ArgT... args) {
 
 _impl_.source_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.AlertData.source)
}
inline std::string* AlertData::mutable_source() {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.AlertData.source)
  return _s;
}
inline const std::string& AlertData::_internal_source() const {
  return _impl_.source_.Get();
}
inline void AlertData::_internal_set_source(const std::string& value) {
  
  _impl_.source_.Set(value, GetArenaForAllocation());
}
inline std::string* AlertData::_internal_mutable_source() {
  
  return _impl_.source_.Mutable(GetArenaForAllocation());
}
inline std::string* AlertData::release_source() {
  // @@protoc_insertion_point(field_release:bosdyn.api.AlertData.source)
  return _impl_.source_.Release();
}
inline void AlertData::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  _impl_.source_.SetAllocated(source, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.AlertData.source)
}

// .google.protobuf.Struct additional_data = 4;
inline bool AlertData::_internal_has_additional_data() const {
  return this != internal_default_instance() && _impl_.additional_data_ != nullptr;
}
inline bool AlertData::has_additional_data() const {
  return _internal_has_additional_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& AlertData::_internal_additional_data() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = _impl_.additional_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& AlertData::additional_data() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.AlertData.additional_data)
  return _internal_additional_data();
}
inline void AlertData::unsafe_arena_set_allocated_additional_data(
    ::PROTOBUF_NAMESPACE_ID::Struct* additional_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.additional_data_);
  }
  _impl_.additional_data_ = additional_data;
  if (additional_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.AlertData.additional_data)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* AlertData::release_additional_data() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.additional_data_;
  _impl_.additional_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* AlertData::unsafe_arena_release_additional_data() {
  // @@protoc_insertion_point(field_release:bosdyn.api.AlertData.additional_data)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.additional_data_;
  _impl_.additional_data_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* AlertData::_internal_mutable_additional_data() {
  
  if (_impl_.additional_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    _impl_.additional_data_ = p;
  }
  return _impl_.additional_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* AlertData::mutable_additional_data() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_additional_data();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.AlertData.additional_data)
  return _msg;
}
inline void AlertData::set_allocated_additional_data(::PROTOBUF_NAMESPACE_ID::Struct* additional_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.additional_data_);
  }
  if (additional_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(additional_data));
    if (message_arena != submessage_arena) {
      additional_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, additional_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.additional_data_ = additional_data;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.AlertData.additional_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::AlertData_SeverityLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::AlertData_SeverityLevel>() {
  return ::bosdyn::api::AlertData_SeverityLevel_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2falerts_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/graph_nav/nav.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fgraph_5fnav_2fnav_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fgraph_5fnav_2fnav_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/graph_nav/map.pb.h"
#include "bosdyn/api/geometry.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgraph_5fnav_2fnav_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fnav_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fnav_2eproto;
namespace bosdyn {
namespace api {
namespace graph_nav {
class Localization;
struct LocalizationDefaultTypeInternal;
extern LocalizationDefaultTypeInternal _Localization_default_instance_;
class Route;
struct RouteDefaultTypeInternal;
extern RouteDefaultTypeInternal _Route_default_instance_;
}  // namespace graph_nav
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::graph_nav::Localization* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::Localization>(Arena*);
template<> ::bosdyn::api::graph_nav::Route* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::Route>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {
namespace graph_nav {

// ===================================================================

class Route final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.Route) */ {
 public:
  inline Route() : Route(nullptr) {}
  ~Route() override;
  explicit PROTOBUF_CONSTEXPR Route(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Route(const Route& from);
  Route(Route&& from) noexcept
    : Route() {
    *this = ::std::move(from);
  }

  inline Route& operator=(const Route& from) {
    CopyFrom(from);
    return *this;
  }
  inline Route& operator=(Route&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Route& default_instance() {
    return *internal_default_instance();
  }
  static inline const Route* internal_default_instance() {
    return reinterpret_cast<const Route*>(
               &_Route_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Route& a, Route& b) {
    a.Swap(&b);
  }
  inline void Swap(Route* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Route* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Route* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Route>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Route& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Route& from) {
    Route::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Route* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.Route";
  }
  protected:
  explicit Route(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWaypointIdFieldNumber = 2,
    kEdgeIdFieldNumber = 3,
  };
  // repeated string waypoint_id = 2;
  int waypoint_id_size() const;
  private:
  int _internal_waypoint_id_size() const;
  public:
  void clear_waypoint_id();
  const std::string& waypoint_id(int index) const;
  std::string* mutable_waypoint_id(int index);
  void set_waypoint_id(int index, const std::string& value);
  void set_waypoint_id(int index, std::string&& value);
  void set_waypoint_id(int index, const char* value);
  void set_waypoint_id(int index, const char* value, size_t size);
  std::string* add_waypoint_id();
  void add_waypoint_id(const std::string& value);
  void add_waypoint_id(std::string&& value);
  void add_waypoint_id(const char* value);
  void add_waypoint_id(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& waypoint_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_waypoint_id();
  private:
  const std::string& _internal_waypoint_id(int index) const;
  std::string* _internal_add_waypoint_id();
  public:

  // repeated .bosdyn.api.graph_nav.Edge.Id edge_id = 3;
  int edge_id_size() const;
  private:
  int _internal_edge_id_size() const;
  public:
  void clear_edge_id();
  ::bosdyn::api::graph_nav::Edge_Id* mutable_edge_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Edge_Id >*
      mutable_edge_id();
  private:
  const ::bosdyn::api::graph_nav::Edge_Id& _internal_edge_id(int index) const;
  ::bosdyn::api::graph_nav::Edge_Id* _internal_add_edge_id();
  public:
  const ::bosdyn::api::graph_nav::Edge_Id& edge_id(int index) const;
  ::bosdyn::api::graph_nav::Edge_Id* add_edge_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Edge_Id >&
      edge_id() const;

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.Route)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> waypoint_id_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Edge_Id > edge_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fnav_2eproto;
};
// -------------------------------------------------------------------

class Localization final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.Localization) */ {
 public:
  inline Localization() : Localization(nullptr) {}
  ~Localization() override;
  explicit PROTOBUF_CONSTEXPR Localization(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Localization(const Localization& from);
  Localization(Localization&& from) noexcept
    : Localization() {
    *this = ::std::move(from);
  }

  inline Localization& operator=(const Localization& from) {
    CopyFrom(from);
    return *this;
  }
  inline Localization& operator=(Localization&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Localization& default_instance() {
    return *internal_default_instance();
  }
  static inline const Localization* internal_default_instance() {
    return reinterpret_cast<const Localization*>(
               &_Localization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Localization& a, Localization& b) {
    a.Swap(&b);
  }
  inline void Swap(Localization* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Localization* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Localization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Localization>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Localization& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Localization& from) {
    Localization::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Localization* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.Localization";
  }
  protected:
  explicit Localization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWaypointIdFieldNumber = 1,
    kWaypointTformBodyFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kSeedTformBodyFieldNumber = 5,
  };
  // string waypoint_id = 1;
  void clear_waypoint_id();
  const std::string& waypoint_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_waypoint_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_waypoint_id();
  PROTOBUF_NODISCARD std::string* release_waypoint_id();
  void set_allocated_waypoint_id(std::string* waypoint_id);
  private:
  const std::string& _internal_waypoint_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_waypoint_id(const std::string& value);
  std::string* _internal_mutable_waypoint_id();
  public:

  // .bosdyn.api.SE3Pose waypoint_tform_body = 2;
  bool has_waypoint_tform_body() const;
  private:
  bool _internal_has_waypoint_tform_body() const;
  public:
  void clear_waypoint_tform_body();
  const ::bosdyn::api::SE3Pose& waypoint_tform_body() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SE3Pose* release_waypoint_tform_body();
  ::bosdyn::api::SE3Pose* mutable_waypoint_tform_body();
  void set_allocated_waypoint_tform_body(::bosdyn::api::SE3Pose* waypoint_tform_body);
  private:
  const ::bosdyn::api::SE3Pose& _internal_waypoint_tform_body() const;
  ::bosdyn::api::SE3Pose* _internal_mutable_waypoint_tform_body();
  public:
  void unsafe_arena_set_allocated_waypoint_tform_body(
      ::bosdyn::api::SE3Pose* waypoint_tform_body);
  ::bosdyn::api::SE3Pose* unsafe_arena_release_waypoint_tform_body();

  // .google.protobuf.Timestamp timestamp = 3;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .bosdyn.api.SE3Pose seed_tform_body = 5;
  bool has_seed_tform_body() const;
  private:
  bool _internal_has_seed_tform_body() const;
  public:
  void clear_seed_tform_body();
  const ::bosdyn::api::SE3Pose& seed_tform_body() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SE3Pose* release_seed_tform_body();
  ::bosdyn::api::SE3Pose* mutable_seed_tform_body();
  void set_allocated_seed_tform_body(::bosdyn::api::SE3Pose* seed_tform_body);
  private:
  const ::bosdyn::api::SE3Pose& _internal_seed_tform_body() const;
  ::bosdyn::api::SE3Pose* _internal_mutable_seed_tform_body();
  public:
  void unsafe_arena_set_allocated_seed_tform_body(
      ::bosdyn::api::SE3Pose* seed_tform_body);
  ::bosdyn::api::SE3Pose* unsafe_arena_release_seed_tform_body();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.Localization)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr waypoint_id_;
    ::bosdyn::api::SE3Pose* waypoint_tform_body_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
    ::bosdyn::api::SE3Pose* seed_tform_body_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fnav_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Route

// repeated string waypoint_id = 2;
inline int Route::_internal_waypoint_id_size() const {
  return _impl_.waypoint_id_.size();
}
inline int Route::waypoint_id_size() const {
  return _internal_waypoint_id_size();
}
inline void Route::clear_waypoint_id() {
  _impl_.waypoint_id_.Clear();
}
inline std::string* Route::add_waypoint_id() {
  std::string* _s = _internal_add_waypoint_id();
  // @@protoc_insertion_point(field_add_mutable:bosdyn.api.graph_nav.Route.waypoint_id)
  return _s;
}
inline const std::string& Route::_internal_waypoint_id(int index) const {
  return _impl_.waypoint_id_.Get(index);
}
inline const std::string& Route::waypoint_id(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Route.waypoint_id)
  return _internal_waypoint_id(index);
}
inline std::string* Route::mutable_waypoint_id(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Route.waypoint_id)
  return _impl_.waypoint_id_.Mutable(index);
}
inline void Route::set_waypoint_id(int index, const std::string& value) {
  _impl_.waypoint_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.Route.waypoint_id)
}
inline void Route::set_waypoint_id(int index, std::string&& value) {
  _impl_.waypoint_id_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.Route.waypoint_id)
}
inline void Route::set_waypoint_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.waypoint_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bosdyn.api.graph_nav.Route.waypoint_id)
}
inline void Route::set_waypoint_id(int index, const char* value, size_t size) {
  _impl_.waypoint_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.graph_nav.Route.waypoint_id)
}
inline std::string* Route::_internal_add_waypoint_id() {
  return _impl_.waypoint_id_.Add();
}
inline void Route::add_waypoint_id(const std::string& value) {
  _impl_.waypoint_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.Route.waypoint_id)
}
inline void Route::add_waypoint_id(std::string&& value) {
  _impl_.waypoint_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.Route.waypoint_id)
}
inline void Route::add_waypoint_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.waypoint_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bosdyn.api.graph_nav.Route.waypoint_id)
}
inline void Route::add_waypoint_id(const char* value, size_t size) {
  _impl_.waypoint_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bosdyn.api.graph_nav.Route.waypoint_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Route::waypoint_id() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.Route.waypoint_id)
  return _impl_.waypoint_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Route::mutable_waypoint_id() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.Route.waypoint_id)
  return &_impl_.waypoint_id_;
}

// repeated .bosdyn.api.graph_nav.Edge.Id edge_id = 3;
inline int Route::_internal_edge_id_size() const {
  return _impl_.edge_id_.size();
}
inline int Route::edge_id_size() const {
  return _internal_edge_id_size();
}
inline ::bosdyn::api::graph_nav::Edge_Id* Route::mutable_edge_id(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Route.edge_id)
  return _impl_.edge_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Edge_Id >*
Route::mutable_edge_id() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.Route.edge_id)
  return &_impl_.edge_id_;
}
inline const ::bosdyn::api::graph_nav::Edge_Id& Route::_internal_edge_id(int index) const {
  return _impl_.edge_id_.Get(index);
}
inline const ::bosdyn::api::graph_nav::Edge_Id& Route::edge_id(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Route.edge_id)
  return _internal_edge_id(index);
}
inline ::bosdyn::api::graph_nav::Edge_Id* Route::_internal_add_edge_id() {
  return _impl_.edge_id_.Add();
}
inline ::bosdyn::api::graph_nav::Edge_Id* Route::add_edge_id() {
  ::bosdyn::api::graph_nav::Edge_Id* _add = _internal_add_edge_id();
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.Route.edge_id)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Edge_Id >&
Route::edge_id() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.Route.edge_id)
  return _impl_.edge_id_;
}

// -------------------------------------------------------------------

// Localization

// string waypoint_id = 1;
inline void Localization::clear_waypoint_id() {
  _impl_.waypoint_id_.ClearToEmpty();
}
inline const std::string& Localization::waypoint_id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Localization.waypoint_id)
  return _internal_waypoint_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Localization::set_waypoint_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.waypoint_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.Localization.waypoint_id)
}
inline std::string* Localization::mutable_waypoint_id() {
  std::string* _s = _internal_mutable_waypoint_id();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Localization.waypoint_id)
  return _s;
}
inline const std::string& Localization::_internal_waypoint_id() const {
  return _impl_.waypoint_id_.Get();
}
inline void Localization::_internal_set_waypoint_id(const std::string& value) {
  
  _impl_.waypoint_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Localization::_internal_mutable_waypoint_id() {
  
  return _impl_.waypoint_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Localization::release_waypoint_id() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Localization.waypoint_id)
  return _impl_.waypoint_id_.Release();
}
inline void Localization::set_allocated_waypoint_id(std::string* waypoint_id) {
  if (waypoint_id != nullptr) {
    
  } else {
    
  }
  _impl_.waypoint_id_.SetAllocated(waypoint_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.waypoint_id_.IsDefault()) {
    _impl_.waypoint_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Localization.waypoint_id)
}

// .bosdyn.api.SE3Pose waypoint_tform_body = 2;
inline bool Localization::_internal_has_waypoint_tform_body() const {
  return this != internal_default_instance() && _impl_.waypoint_tform_body_ != nullptr;
}
inline bool Localization::has_waypoint_tform_body() const {
  return _internal_has_waypoint_tform_body();
}
inline const ::bosdyn::api::SE3Pose& Localization::_internal_waypoint_tform_body() const {
  const ::bosdyn::api::SE3Pose* p = _impl_.waypoint_tform_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::SE3Pose&>(
      ::bosdyn::api::_SE3Pose_default_instance_);
}
inline const ::bosdyn::api::SE3Pose& Localization::waypoint_tform_body() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Localization.waypoint_tform_body)
  return _internal_waypoint_tform_body();
}
inline void Localization::unsafe_arena_set_allocated_waypoint_tform_body(
    ::bosdyn::api::SE3Pose* waypoint_tform_body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.waypoint_tform_body_);
  }
  _impl_.waypoint_tform_body_ = waypoint_tform_body;
  if (waypoint_tform_body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Localization.waypoint_tform_body)
}
inline ::bosdyn::api::SE3Pose* Localization::release_waypoint_tform_body() {
  
  ::bosdyn::api::SE3Pose* temp = _impl_.waypoint_tform_body_;
  _impl_.waypoint_tform_body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::SE3Pose* Localization::unsafe_arena_release_waypoint_tform_body() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Localization.waypoint_tform_body)
  
  ::bosdyn::api::SE3Pose* temp = _impl_.waypoint_tform_body_;
  _impl_.waypoint_tform_body_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Pose* Localization::_internal_mutable_waypoint_tform_body() {
  
  if (_impl_.waypoint_tform_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Pose>(GetArenaForAllocation());
    _impl_.waypoint_tform_body_ = p;
  }
  return _impl_.waypoint_tform_body_;
}
inline ::bosdyn::api::SE3Pose* Localization::mutable_waypoint_tform_body() {
  ::bosdyn::api::SE3Pose* _msg = _internal_mutable_waypoint_tform_body();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Localization.waypoint_tform_body)
  return _msg;
}
inline void Localization::set_allocated_waypoint_tform_body(::bosdyn::api::SE3Pose* waypoint_tform_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.waypoint_tform_body_);
  }
  if (waypoint_tform_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(waypoint_tform_body));
    if (message_arena != submessage_arena) {
      waypoint_tform_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, waypoint_tform_body, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.waypoint_tform_body_ = waypoint_tform_body;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Localization.waypoint_tform_body)
}

// .bosdyn.api.SE3Pose seed_tform_body = 5;
inline bool Localization::_internal_has_seed_tform_body() const {
  return this != internal_default_instance() && _impl_.seed_tform_body_ != nullptr;
}
inline bool Localization::has_seed_tform_body() const {
  return _internal_has_seed_tform_body();
}
inline const ::bosdyn::api::SE3Pose& Localization::_internal_seed_tform_body() const {
  const ::bosdyn::api::SE3Pose* p = _impl_.seed_tform_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::SE3Pose&>(
      ::bosdyn::api::_SE3Pose_default_instance_);
}
inline const ::bosdyn::api::SE3Pose& Localization::seed_tform_body() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Localization.seed_tform_body)
  return _internal_seed_tform_body();
}
inline void Localization::unsafe_arena_set_allocated_seed_tform_body(
    ::bosdyn::api::SE3Pose* seed_tform_body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.seed_tform_body_);
  }
  _impl_.seed_tform_body_ = seed_tform_body;
  if (seed_tform_body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Localization.seed_tform_body)
}
inline ::bosdyn::api::SE3Pose* Localization::release_seed_tform_body() {
  
  ::bosdyn::api::SE3Pose* temp = _impl_.seed_tform_body_;
  _impl_.seed_tform_body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::SE3Pose* Localization::unsafe_arena_release_seed_tform_body() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Localization.seed_tform_body)
  
  ::bosdyn::api::SE3Pose* temp = _impl_.seed_tform_body_;
  _impl_.seed_tform_body_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Pose* Localization::_internal_mutable_seed_tform_body() {
  
  if (_impl_.seed_tform_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Pose>(GetArenaForAllocation());
    _impl_.seed_tform_body_ = p;
  }
  return _impl_.seed_tform_body_;
}
inline ::bosdyn::api::SE3Pose* Localization::mutable_seed_tform_body() {
  ::bosdyn::api::SE3Pose* _msg = _internal_mutable_seed_tform_body();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Localization.seed_tform_body)
  return _msg;
}
inline void Localization::set_allocated_seed_tform_body(::bosdyn::api::SE3Pose* seed_tform_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.seed_tform_body_);
  }
  if (seed_tform_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(seed_tform_body));
    if (message_arena != submessage_arena) {
      seed_tform_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seed_tform_body, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.seed_tform_body_ = seed_tform_body;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Localization.seed_tform_body)
}

// .google.protobuf.Timestamp timestamp = 3;
inline bool Localization::_internal_has_timestamp() const {
  return this != internal_default_instance() && _impl_.timestamp_ != nullptr;
}
inline bool Localization::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Localization::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Localization::timestamp() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Localization.timestamp)
  return _internal_timestamp();
}
inline void Localization::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Localization.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Localization::release_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Localization::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Localization.timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Localization::_internal_mutable_timestamp() {
  
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Localization::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Localization.timestamp)
  return _msg;
}
inline void Localization::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Localization.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace graph_nav
}  // namespace api
}  // namespace bosdyn

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fgraph_5fnav_2fnav_2eproto

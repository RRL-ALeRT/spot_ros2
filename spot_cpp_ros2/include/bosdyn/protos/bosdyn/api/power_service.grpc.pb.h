// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bosdyn/api/power_service.proto
// Original file comments:
// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).
//
#ifndef GRPC_bosdyn_2fapi_2fpower_5fservice_2eproto__INCLUDED
#define GRPC_bosdyn_2fapi_2fpower_5fservice_2eproto__INCLUDED

#include "bosdyn/api/power_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace bosdyn {
namespace api {

// The power service for the robot that can power on/off the robot's motors.
class PowerService final {
 public:
  static constexpr char const* service_full_name() {
    return "bosdyn.api.PowerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Starts a power command on the robot. A robot can only accept one power command at once.
    // Power commands, are not interruptible. Once a command is issued, it must complete before
    // another command can be issued.
    virtual ::grpc::Status PowerCommand(::grpc::ClientContext* context, const ::bosdyn::api::PowerCommandRequest& request, ::bosdyn::api::PowerCommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::PowerCommandResponse>> AsyncPowerCommand(::grpc::ClientContext* context, const ::bosdyn::api::PowerCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::PowerCommandResponse>>(AsyncPowerCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::PowerCommandResponse>> PrepareAsyncPowerCommand(::grpc::ClientContext* context, const ::bosdyn::api::PowerCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::PowerCommandResponse>>(PrepareAsyncPowerCommandRaw(context, request, cq));
    }
    // Check the status of a power command.
    virtual ::grpc::Status PowerCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::PowerCommandFeedbackRequest& request, ::bosdyn::api::PowerCommandFeedbackResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::PowerCommandFeedbackResponse>> AsyncPowerCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::PowerCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::PowerCommandFeedbackResponse>>(AsyncPowerCommandFeedbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::PowerCommandFeedbackResponse>> PrepareAsyncPowerCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::PowerCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::PowerCommandFeedbackResponse>>(PrepareAsyncPowerCommandFeedbackRaw(context, request, cq));
    }
    // Separate RPC for toggling fan power due to need for time/percent power parameters
    virtual ::grpc::Status FanPowerCommand(::grpc::ClientContext* context, const ::bosdyn::api::FanPowerCommandRequest& request, ::bosdyn::api::FanPowerCommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::FanPowerCommandResponse>> AsyncFanPowerCommand(::grpc::ClientContext* context, const ::bosdyn::api::FanPowerCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::FanPowerCommandResponse>>(AsyncFanPowerCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::FanPowerCommandResponse>> PrepareAsyncFanPowerCommand(::grpc::ClientContext* context, const ::bosdyn::api::FanPowerCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::FanPowerCommandResponse>>(PrepareAsyncFanPowerCommandRaw(context, request, cq));
    }
    // Check the status of a fan power command.
    virtual ::grpc::Status FanPowerCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::FanPowerCommandFeedbackRequest& request, ::bosdyn::api::FanPowerCommandFeedbackResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::FanPowerCommandFeedbackResponse>> AsyncFanPowerCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::FanPowerCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::FanPowerCommandFeedbackResponse>>(AsyncFanPowerCommandFeedbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::FanPowerCommandFeedbackResponse>> PrepareAsyncFanPowerCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::FanPowerCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::FanPowerCommandFeedbackResponse>>(PrepareAsyncFanPowerCommandFeedbackRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Starts a power command on the robot. A robot can only accept one power command at once.
      // Power commands, are not interruptible. Once a command is issued, it must complete before
      // another command can be issued.
      virtual void PowerCommand(::grpc::ClientContext* context, const ::bosdyn::api::PowerCommandRequest* request, ::bosdyn::api::PowerCommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PowerCommand(::grpc::ClientContext* context, const ::bosdyn::api::PowerCommandRequest* request, ::bosdyn::api::PowerCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Check the status of a power command.
      virtual void PowerCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::PowerCommandFeedbackRequest* request, ::bosdyn::api::PowerCommandFeedbackResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PowerCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::PowerCommandFeedbackRequest* request, ::bosdyn::api::PowerCommandFeedbackResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Separate RPC for toggling fan power due to need for time/percent power parameters
      virtual void FanPowerCommand(::grpc::ClientContext* context, const ::bosdyn::api::FanPowerCommandRequest* request, ::bosdyn::api::FanPowerCommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FanPowerCommand(::grpc::ClientContext* context, const ::bosdyn::api::FanPowerCommandRequest* request, ::bosdyn::api::FanPowerCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Check the status of a fan power command.
      virtual void FanPowerCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::FanPowerCommandFeedbackRequest* request, ::bosdyn::api::FanPowerCommandFeedbackResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FanPowerCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::FanPowerCommandFeedbackRequest* request, ::bosdyn::api::FanPowerCommandFeedbackResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::PowerCommandResponse>* AsyncPowerCommandRaw(::grpc::ClientContext* context, const ::bosdyn::api::PowerCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::PowerCommandResponse>* PrepareAsyncPowerCommandRaw(::grpc::ClientContext* context, const ::bosdyn::api::PowerCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::PowerCommandFeedbackResponse>* AsyncPowerCommandFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::PowerCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::PowerCommandFeedbackResponse>* PrepareAsyncPowerCommandFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::PowerCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::FanPowerCommandResponse>* AsyncFanPowerCommandRaw(::grpc::ClientContext* context, const ::bosdyn::api::FanPowerCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::FanPowerCommandResponse>* PrepareAsyncFanPowerCommandRaw(::grpc::ClientContext* context, const ::bosdyn::api::FanPowerCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::FanPowerCommandFeedbackResponse>* AsyncFanPowerCommandFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::FanPowerCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::FanPowerCommandFeedbackResponse>* PrepareAsyncFanPowerCommandFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::FanPowerCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status PowerCommand(::grpc::ClientContext* context, const ::bosdyn::api::PowerCommandRequest& request, ::bosdyn::api::PowerCommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::PowerCommandResponse>> AsyncPowerCommand(::grpc::ClientContext* context, const ::bosdyn::api::PowerCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::PowerCommandResponse>>(AsyncPowerCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::PowerCommandResponse>> PrepareAsyncPowerCommand(::grpc::ClientContext* context, const ::bosdyn::api::PowerCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::PowerCommandResponse>>(PrepareAsyncPowerCommandRaw(context, request, cq));
    }
    ::grpc::Status PowerCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::PowerCommandFeedbackRequest& request, ::bosdyn::api::PowerCommandFeedbackResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::PowerCommandFeedbackResponse>> AsyncPowerCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::PowerCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::PowerCommandFeedbackResponse>>(AsyncPowerCommandFeedbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::PowerCommandFeedbackResponse>> PrepareAsyncPowerCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::PowerCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::PowerCommandFeedbackResponse>>(PrepareAsyncPowerCommandFeedbackRaw(context, request, cq));
    }
    ::grpc::Status FanPowerCommand(::grpc::ClientContext* context, const ::bosdyn::api::FanPowerCommandRequest& request, ::bosdyn::api::FanPowerCommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::FanPowerCommandResponse>> AsyncFanPowerCommand(::grpc::ClientContext* context, const ::bosdyn::api::FanPowerCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::FanPowerCommandResponse>>(AsyncFanPowerCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::FanPowerCommandResponse>> PrepareAsyncFanPowerCommand(::grpc::ClientContext* context, const ::bosdyn::api::FanPowerCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::FanPowerCommandResponse>>(PrepareAsyncFanPowerCommandRaw(context, request, cq));
    }
    ::grpc::Status FanPowerCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::FanPowerCommandFeedbackRequest& request, ::bosdyn::api::FanPowerCommandFeedbackResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::FanPowerCommandFeedbackResponse>> AsyncFanPowerCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::FanPowerCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::FanPowerCommandFeedbackResponse>>(AsyncFanPowerCommandFeedbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::FanPowerCommandFeedbackResponse>> PrepareAsyncFanPowerCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::FanPowerCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::FanPowerCommandFeedbackResponse>>(PrepareAsyncFanPowerCommandFeedbackRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void PowerCommand(::grpc::ClientContext* context, const ::bosdyn::api::PowerCommandRequest* request, ::bosdyn::api::PowerCommandResponse* response, std::function<void(::grpc::Status)>) override;
      void PowerCommand(::grpc::ClientContext* context, const ::bosdyn::api::PowerCommandRequest* request, ::bosdyn::api::PowerCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PowerCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::PowerCommandFeedbackRequest* request, ::bosdyn::api::PowerCommandFeedbackResponse* response, std::function<void(::grpc::Status)>) override;
      void PowerCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::PowerCommandFeedbackRequest* request, ::bosdyn::api::PowerCommandFeedbackResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FanPowerCommand(::grpc::ClientContext* context, const ::bosdyn::api::FanPowerCommandRequest* request, ::bosdyn::api::FanPowerCommandResponse* response, std::function<void(::grpc::Status)>) override;
      void FanPowerCommand(::grpc::ClientContext* context, const ::bosdyn::api::FanPowerCommandRequest* request, ::bosdyn::api::FanPowerCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FanPowerCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::FanPowerCommandFeedbackRequest* request, ::bosdyn::api::FanPowerCommandFeedbackResponse* response, std::function<void(::grpc::Status)>) override;
      void FanPowerCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::FanPowerCommandFeedbackRequest* request, ::bosdyn::api::FanPowerCommandFeedbackResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::PowerCommandResponse>* AsyncPowerCommandRaw(::grpc::ClientContext* context, const ::bosdyn::api::PowerCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::PowerCommandResponse>* PrepareAsyncPowerCommandRaw(::grpc::ClientContext* context, const ::bosdyn::api::PowerCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::PowerCommandFeedbackResponse>* AsyncPowerCommandFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::PowerCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::PowerCommandFeedbackResponse>* PrepareAsyncPowerCommandFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::PowerCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::FanPowerCommandResponse>* AsyncFanPowerCommandRaw(::grpc::ClientContext* context, const ::bosdyn::api::FanPowerCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::FanPowerCommandResponse>* PrepareAsyncFanPowerCommandRaw(::grpc::ClientContext* context, const ::bosdyn::api::FanPowerCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::FanPowerCommandFeedbackResponse>* AsyncFanPowerCommandFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::FanPowerCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::FanPowerCommandFeedbackResponse>* PrepareAsyncFanPowerCommandFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::FanPowerCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_PowerCommand_;
    const ::grpc::internal::RpcMethod rpcmethod_PowerCommandFeedback_;
    const ::grpc::internal::RpcMethod rpcmethod_FanPowerCommand_;
    const ::grpc::internal::RpcMethod rpcmethod_FanPowerCommandFeedback_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Starts a power command on the robot. A robot can only accept one power command at once.
    // Power commands, are not interruptible. Once a command is issued, it must complete before
    // another command can be issued.
    virtual ::grpc::Status PowerCommand(::grpc::ServerContext* context, const ::bosdyn::api::PowerCommandRequest* request, ::bosdyn::api::PowerCommandResponse* response);
    // Check the status of a power command.
    virtual ::grpc::Status PowerCommandFeedback(::grpc::ServerContext* context, const ::bosdyn::api::PowerCommandFeedbackRequest* request, ::bosdyn::api::PowerCommandFeedbackResponse* response);
    // Separate RPC for toggling fan power due to need for time/percent power parameters
    virtual ::grpc::Status FanPowerCommand(::grpc::ServerContext* context, const ::bosdyn::api::FanPowerCommandRequest* request, ::bosdyn::api::FanPowerCommandResponse* response);
    // Check the status of a fan power command.
    virtual ::grpc::Status FanPowerCommandFeedback(::grpc::ServerContext* context, const ::bosdyn::api::FanPowerCommandFeedbackRequest* request, ::bosdyn::api::FanPowerCommandFeedbackResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_PowerCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PowerCommand() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PowerCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PowerCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::PowerCommandRequest* /*request*/, ::bosdyn::api::PowerCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPowerCommand(::grpc::ServerContext* context, ::bosdyn::api::PowerCommandRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::PowerCommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PowerCommandFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PowerCommandFeedback() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PowerCommandFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PowerCommandFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::PowerCommandFeedbackRequest* /*request*/, ::bosdyn::api::PowerCommandFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPowerCommandFeedback(::grpc::ServerContext* context, ::bosdyn::api::PowerCommandFeedbackRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::PowerCommandFeedbackResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FanPowerCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FanPowerCommand() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_FanPowerCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FanPowerCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::FanPowerCommandRequest* /*request*/, ::bosdyn::api::FanPowerCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFanPowerCommand(::grpc::ServerContext* context, ::bosdyn::api::FanPowerCommandRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::FanPowerCommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FanPowerCommandFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FanPowerCommandFeedback() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_FanPowerCommandFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FanPowerCommandFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::FanPowerCommandFeedbackRequest* /*request*/, ::bosdyn::api::FanPowerCommandFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFanPowerCommandFeedback(::grpc::ServerContext* context, ::bosdyn::api::FanPowerCommandFeedbackRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::FanPowerCommandFeedbackResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PowerCommand<WithAsyncMethod_PowerCommandFeedback<WithAsyncMethod_FanPowerCommand<WithAsyncMethod_FanPowerCommandFeedback<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_PowerCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PowerCommand() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::PowerCommandRequest, ::bosdyn::api::PowerCommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::PowerCommandRequest* request, ::bosdyn::api::PowerCommandResponse* response) { return this->PowerCommand(context, request, response); }));}
    void SetMessageAllocatorFor_PowerCommand(
        ::grpc::MessageAllocator< ::bosdyn::api::PowerCommandRequest, ::bosdyn::api::PowerCommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::PowerCommandRequest, ::bosdyn::api::PowerCommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PowerCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PowerCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::PowerCommandRequest* /*request*/, ::bosdyn::api::PowerCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PowerCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::PowerCommandRequest* /*request*/, ::bosdyn::api::PowerCommandResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PowerCommandFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PowerCommandFeedback() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::PowerCommandFeedbackRequest, ::bosdyn::api::PowerCommandFeedbackResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::PowerCommandFeedbackRequest* request, ::bosdyn::api::PowerCommandFeedbackResponse* response) { return this->PowerCommandFeedback(context, request, response); }));}
    void SetMessageAllocatorFor_PowerCommandFeedback(
        ::grpc::MessageAllocator< ::bosdyn::api::PowerCommandFeedbackRequest, ::bosdyn::api::PowerCommandFeedbackResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::PowerCommandFeedbackRequest, ::bosdyn::api::PowerCommandFeedbackResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PowerCommandFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PowerCommandFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::PowerCommandFeedbackRequest* /*request*/, ::bosdyn::api::PowerCommandFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PowerCommandFeedback(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::PowerCommandFeedbackRequest* /*request*/, ::bosdyn::api::PowerCommandFeedbackResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FanPowerCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FanPowerCommand() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::FanPowerCommandRequest, ::bosdyn::api::FanPowerCommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::FanPowerCommandRequest* request, ::bosdyn::api::FanPowerCommandResponse* response) { return this->FanPowerCommand(context, request, response); }));}
    void SetMessageAllocatorFor_FanPowerCommand(
        ::grpc::MessageAllocator< ::bosdyn::api::FanPowerCommandRequest, ::bosdyn::api::FanPowerCommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::FanPowerCommandRequest, ::bosdyn::api::FanPowerCommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FanPowerCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FanPowerCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::FanPowerCommandRequest* /*request*/, ::bosdyn::api::FanPowerCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FanPowerCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::FanPowerCommandRequest* /*request*/, ::bosdyn::api::FanPowerCommandResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FanPowerCommandFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FanPowerCommandFeedback() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::FanPowerCommandFeedbackRequest, ::bosdyn::api::FanPowerCommandFeedbackResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::FanPowerCommandFeedbackRequest* request, ::bosdyn::api::FanPowerCommandFeedbackResponse* response) { return this->FanPowerCommandFeedback(context, request, response); }));}
    void SetMessageAllocatorFor_FanPowerCommandFeedback(
        ::grpc::MessageAllocator< ::bosdyn::api::FanPowerCommandFeedbackRequest, ::bosdyn::api::FanPowerCommandFeedbackResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::FanPowerCommandFeedbackRequest, ::bosdyn::api::FanPowerCommandFeedbackResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FanPowerCommandFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FanPowerCommandFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::FanPowerCommandFeedbackRequest* /*request*/, ::bosdyn::api::FanPowerCommandFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FanPowerCommandFeedback(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::FanPowerCommandFeedbackRequest* /*request*/, ::bosdyn::api::FanPowerCommandFeedbackResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_PowerCommand<WithCallbackMethod_PowerCommandFeedback<WithCallbackMethod_FanPowerCommand<WithCallbackMethod_FanPowerCommandFeedback<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_PowerCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PowerCommand() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PowerCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PowerCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::PowerCommandRequest* /*request*/, ::bosdyn::api::PowerCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PowerCommandFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PowerCommandFeedback() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PowerCommandFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PowerCommandFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::PowerCommandFeedbackRequest* /*request*/, ::bosdyn::api::PowerCommandFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FanPowerCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FanPowerCommand() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_FanPowerCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FanPowerCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::FanPowerCommandRequest* /*request*/, ::bosdyn::api::FanPowerCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FanPowerCommandFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FanPowerCommandFeedback() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_FanPowerCommandFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FanPowerCommandFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::FanPowerCommandFeedbackRequest* /*request*/, ::bosdyn::api::FanPowerCommandFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_PowerCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PowerCommand() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_PowerCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PowerCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::PowerCommandRequest* /*request*/, ::bosdyn::api::PowerCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPowerCommand(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PowerCommandFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PowerCommandFeedback() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_PowerCommandFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PowerCommandFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::PowerCommandFeedbackRequest* /*request*/, ::bosdyn::api::PowerCommandFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPowerCommandFeedback(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FanPowerCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FanPowerCommand() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_FanPowerCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FanPowerCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::FanPowerCommandRequest* /*request*/, ::bosdyn::api::FanPowerCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFanPowerCommand(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FanPowerCommandFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FanPowerCommandFeedback() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_FanPowerCommandFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FanPowerCommandFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::FanPowerCommandFeedbackRequest* /*request*/, ::bosdyn::api::FanPowerCommandFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFanPowerCommandFeedback(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PowerCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PowerCommand() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PowerCommand(context, request, response); }));
    }
    ~WithRawCallbackMethod_PowerCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PowerCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::PowerCommandRequest* /*request*/, ::bosdyn::api::PowerCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PowerCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PowerCommandFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PowerCommandFeedback() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PowerCommandFeedback(context, request, response); }));
    }
    ~WithRawCallbackMethod_PowerCommandFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PowerCommandFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::PowerCommandFeedbackRequest* /*request*/, ::bosdyn::api::PowerCommandFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PowerCommandFeedback(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FanPowerCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FanPowerCommand() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FanPowerCommand(context, request, response); }));
    }
    ~WithRawCallbackMethod_FanPowerCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FanPowerCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::FanPowerCommandRequest* /*request*/, ::bosdyn::api::FanPowerCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FanPowerCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FanPowerCommandFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FanPowerCommandFeedback() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FanPowerCommandFeedback(context, request, response); }));
    }
    ~WithRawCallbackMethod_FanPowerCommandFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FanPowerCommandFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::FanPowerCommandFeedbackRequest* /*request*/, ::bosdyn::api::FanPowerCommandFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FanPowerCommandFeedback(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PowerCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PowerCommand() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::PowerCommandRequest, ::bosdyn::api::PowerCommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::PowerCommandRequest, ::bosdyn::api::PowerCommandResponse>* streamer) {
                       return this->StreamedPowerCommand(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PowerCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PowerCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::PowerCommandRequest* /*request*/, ::bosdyn::api::PowerCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPowerCommand(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::PowerCommandRequest,::bosdyn::api::PowerCommandResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PowerCommandFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PowerCommandFeedback() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::PowerCommandFeedbackRequest, ::bosdyn::api::PowerCommandFeedbackResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::PowerCommandFeedbackRequest, ::bosdyn::api::PowerCommandFeedbackResponse>* streamer) {
                       return this->StreamedPowerCommandFeedback(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PowerCommandFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PowerCommandFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::PowerCommandFeedbackRequest* /*request*/, ::bosdyn::api::PowerCommandFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPowerCommandFeedback(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::PowerCommandFeedbackRequest,::bosdyn::api::PowerCommandFeedbackResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FanPowerCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FanPowerCommand() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::FanPowerCommandRequest, ::bosdyn::api::FanPowerCommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::FanPowerCommandRequest, ::bosdyn::api::FanPowerCommandResponse>* streamer) {
                       return this->StreamedFanPowerCommand(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FanPowerCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FanPowerCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::FanPowerCommandRequest* /*request*/, ::bosdyn::api::FanPowerCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFanPowerCommand(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::FanPowerCommandRequest,::bosdyn::api::FanPowerCommandResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FanPowerCommandFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FanPowerCommandFeedback() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::FanPowerCommandFeedbackRequest, ::bosdyn::api::FanPowerCommandFeedbackResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::FanPowerCommandFeedbackRequest, ::bosdyn::api::FanPowerCommandFeedbackResponse>* streamer) {
                       return this->StreamedFanPowerCommandFeedback(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FanPowerCommandFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FanPowerCommandFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::FanPowerCommandFeedbackRequest* /*request*/, ::bosdyn::api::FanPowerCommandFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFanPowerCommandFeedback(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::FanPowerCommandFeedbackRequest,::bosdyn::api::FanPowerCommandFeedbackResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PowerCommand<WithStreamedUnaryMethod_PowerCommandFeedback<WithStreamedUnaryMethod_FanPowerCommand<WithStreamedUnaryMethod_FanPowerCommandFeedback<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_PowerCommand<WithStreamedUnaryMethod_PowerCommandFeedback<WithStreamedUnaryMethod_FanPowerCommand<WithStreamedUnaryMethod_FanPowerCommandFeedback<Service > > > > StreamedService;
};

}  // namespace api
}  // namespace bosdyn


#endif  // GRPC_bosdyn_2fapi_2fpower_5fservice_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/network_stats.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fnetwork_5fstats_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fnetwork_5fstats_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fnetwork_5fstats_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fnetwork_5fstats_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fnetwork_5fstats_2eproto;
namespace bosdyn {
namespace api {
class Association;
struct AssociationDefaultTypeInternal;
extern AssociationDefaultTypeInternal _Association_default_instance_;
class WifiDevice;
struct WifiDeviceDefaultTypeInternal;
extern WifiDeviceDefaultTypeInternal _WifiDevice_default_instance_;
class WifiStats;
struct WifiStatsDefaultTypeInternal;
extern WifiStatsDefaultTypeInternal _WifiStats_default_instance_;
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::Association* Arena::CreateMaybeMessage<::bosdyn::api::Association>(Arena*);
template<> ::bosdyn::api::WifiDevice* Arena::CreateMaybeMessage<::bosdyn::api::WifiDevice>(Arena*);
template<> ::bosdyn::api::WifiStats* Arena::CreateMaybeMessage<::bosdyn::api::WifiStats>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {

enum WifiDevice_Type : int {
  WifiDevice_Type_UNKNOWN = 0,
  WifiDevice_Type_AP = 1,
  WifiDevice_Type_CLIENT = 2,
  WifiDevice_Type_WifiDevice_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  WifiDevice_Type_WifiDevice_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool WifiDevice_Type_IsValid(int value);
constexpr WifiDevice_Type WifiDevice_Type_Type_MIN = WifiDevice_Type_UNKNOWN;
constexpr WifiDevice_Type WifiDevice_Type_Type_MAX = WifiDevice_Type_CLIENT;
constexpr int WifiDevice_Type_Type_ARRAYSIZE = WifiDevice_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WifiDevice_Type_descriptor();
template<typename T>
inline const std::string& WifiDevice_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WifiDevice_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WifiDevice_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WifiDevice_Type_descriptor(), enum_t_value);
}
inline bool WifiDevice_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WifiDevice_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WifiDevice_Type>(
    WifiDevice_Type_descriptor(), name, value);
}
// ===================================================================

class Association final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.Association) */ {
 public:
  inline Association() : Association(nullptr) {}
  ~Association() override;
  explicit PROTOBUF_CONSTEXPR Association(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Association(const Association& from);
  Association(Association&& from) noexcept
    : Association() {
    *this = ::std::move(from);
  }

  inline Association& operator=(const Association& from) {
    CopyFrom(from);
    return *this;
  }
  inline Association& operator=(Association&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Association& default_instance() {
    return *internal_default_instance();
  }
  static inline const Association* internal_default_instance() {
    return reinterpret_cast<const Association*>(
               &_Association_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Association& a, Association& b) {
    a.Swap(&b);
  }
  inline void Swap(Association* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Association* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Association* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Association>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Association& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Association& from) {
    Association::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Association* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.Association";
  }
  protected:
  explicit Association(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMacAddressFieldNumber = 1,
    kConnectedTimeFieldNumber = 2,
    kRxSignalDbmFieldNumber = 3,
    kRxSignalAvgDbmFieldNumber = 4,
    kExpectedBitsPerSecondFieldNumber = 6,
    kRxBytesFieldNumber = 7,
    kRxPacketsFieldNumber = 8,
    kRxBitsPerSecondFieldNumber = 9,
    kTxBytesFieldNumber = 10,
    kTxPacketsFieldNumber = 11,
    kTxBitsPerSecondFieldNumber = 12,
    kTxRetriesFieldNumber = 13,
    kTxFailedFieldNumber = 14,
    kBeaconsReceivedFieldNumber = 15,
    kBeaconLossCountFieldNumber = 16,
    kRxBeaconSignalAvgDbmFieldNumber = 5,
  };
  // string mac_address = 1;
  void clear_mac_address();
  const std::string& mac_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mac_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mac_address();
  PROTOBUF_NODISCARD std::string* release_mac_address();
  void set_allocated_mac_address(std::string* mac_address);
  private:
  const std::string& _internal_mac_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mac_address(const std::string& value);
  std::string* _internal_mutable_mac_address();
  public:

  // .google.protobuf.Duration connected_time = 2;
  bool has_connected_time() const;
  private:
  bool _internal_has_connected_time() const;
  public:
  void clear_connected_time();
  const ::PROTOBUF_NAMESPACE_ID::Duration& connected_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_connected_time();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_connected_time();
  void set_allocated_connected_time(::PROTOBUF_NAMESPACE_ID::Duration* connected_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_connected_time() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_connected_time();
  public:
  void unsafe_arena_set_allocated_connected_time(
      ::PROTOBUF_NAMESPACE_ID::Duration* connected_time);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_connected_time();

  // int32 rx_signal_dbm = 3;
  void clear_rx_signal_dbm();
  int32_t rx_signal_dbm() const;
  void set_rx_signal_dbm(int32_t value);
  private:
  int32_t _internal_rx_signal_dbm() const;
  void _internal_set_rx_signal_dbm(int32_t value);
  public:

  // int32 rx_signal_avg_dbm = 4;
  void clear_rx_signal_avg_dbm();
  int32_t rx_signal_avg_dbm() const;
  void set_rx_signal_avg_dbm(int32_t value);
  private:
  int32_t _internal_rx_signal_avg_dbm() const;
  void _internal_set_rx_signal_avg_dbm(int32_t value);
  public:

  // int64 expected_bits_per_second = 6;
  void clear_expected_bits_per_second();
  int64_t expected_bits_per_second() const;
  void set_expected_bits_per_second(int64_t value);
  private:
  int64_t _internal_expected_bits_per_second() const;
  void _internal_set_expected_bits_per_second(int64_t value);
  public:

  // int64 rx_bytes = 7;
  void clear_rx_bytes();
  int64_t rx_bytes() const;
  void set_rx_bytes(int64_t value);
  private:
  int64_t _internal_rx_bytes() const;
  void _internal_set_rx_bytes(int64_t value);
  public:

  // int64 rx_packets = 8;
  void clear_rx_packets();
  int64_t rx_packets() const;
  void set_rx_packets(int64_t value);
  private:
  int64_t _internal_rx_packets() const;
  void _internal_set_rx_packets(int64_t value);
  public:

  // int64 rx_bits_per_second = 9;
  void clear_rx_bits_per_second();
  int64_t rx_bits_per_second() const;
  void set_rx_bits_per_second(int64_t value);
  private:
  int64_t _internal_rx_bits_per_second() const;
  void _internal_set_rx_bits_per_second(int64_t value);
  public:

  // int64 tx_bytes = 10;
  void clear_tx_bytes();
  int64_t tx_bytes() const;
  void set_tx_bytes(int64_t value);
  private:
  int64_t _internal_tx_bytes() const;
  void _internal_set_tx_bytes(int64_t value);
  public:

  // int64 tx_packets = 11;
  void clear_tx_packets();
  int64_t tx_packets() const;
  void set_tx_packets(int64_t value);
  private:
  int64_t _internal_tx_packets() const;
  void _internal_set_tx_packets(int64_t value);
  public:

  // int64 tx_bits_per_second = 12;
  void clear_tx_bits_per_second();
  int64_t tx_bits_per_second() const;
  void set_tx_bits_per_second(int64_t value);
  private:
  int64_t _internal_tx_bits_per_second() const;
  void _internal_set_tx_bits_per_second(int64_t value);
  public:

  // int64 tx_retries = 13;
  void clear_tx_retries();
  int64_t tx_retries() const;
  void set_tx_retries(int64_t value);
  private:
  int64_t _internal_tx_retries() const;
  void _internal_set_tx_retries(int64_t value);
  public:

  // int64 tx_failed = 14;
  void clear_tx_failed();
  int64_t tx_failed() const;
  void set_tx_failed(int64_t value);
  private:
  int64_t _internal_tx_failed() const;
  void _internal_set_tx_failed(int64_t value);
  public:

  // int64 beacons_received = 15;
  void clear_beacons_received();
  int64_t beacons_received() const;
  void set_beacons_received(int64_t value);
  private:
  int64_t _internal_beacons_received() const;
  void _internal_set_beacons_received(int64_t value);
  public:

  // int64 beacon_loss_count = 16;
  void clear_beacon_loss_count();
  int64_t beacon_loss_count() const;
  void set_beacon_loss_count(int64_t value);
  private:
  int64_t _internal_beacon_loss_count() const;
  void _internal_set_beacon_loss_count(int64_t value);
  public:

  // int32 rx_beacon_signal_avg_dbm = 5;
  void clear_rx_beacon_signal_avg_dbm();
  int32_t rx_beacon_signal_avg_dbm() const;
  void set_rx_beacon_signal_avg_dbm(int32_t value);
  private:
  int32_t _internal_rx_beacon_signal_avg_dbm() const;
  void _internal_set_rx_beacon_signal_avg_dbm(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.Association)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_address_;
    ::PROTOBUF_NAMESPACE_ID::Duration* connected_time_;
    int32_t rx_signal_dbm_;
    int32_t rx_signal_avg_dbm_;
    int64_t expected_bits_per_second_;
    int64_t rx_bytes_;
    int64_t rx_packets_;
    int64_t rx_bits_per_second_;
    int64_t tx_bytes_;
    int64_t tx_packets_;
    int64_t tx_bits_per_second_;
    int64_t tx_retries_;
    int64_t tx_failed_;
    int64_t beacons_received_;
    int64_t beacon_loss_count_;
    int32_t rx_beacon_signal_avg_dbm_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fnetwork_5fstats_2eproto;
};
// -------------------------------------------------------------------

class WifiDevice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.WifiDevice) */ {
 public:
  inline WifiDevice() : WifiDevice(nullptr) {}
  ~WifiDevice() override;
  explicit PROTOBUF_CONSTEXPR WifiDevice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WifiDevice(const WifiDevice& from);
  WifiDevice(WifiDevice&& from) noexcept
    : WifiDevice() {
    *this = ::std::move(from);
  }

  inline WifiDevice& operator=(const WifiDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline WifiDevice& operator=(WifiDevice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WifiDevice& default_instance() {
    return *internal_default_instance();
  }
  static inline const WifiDevice* internal_default_instance() {
    return reinterpret_cast<const WifiDevice*>(
               &_WifiDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WifiDevice& a, WifiDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(WifiDevice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WifiDevice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WifiDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WifiDevice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WifiDevice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WifiDevice& from) {
    WifiDevice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WifiDevice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.WifiDevice";
  }
  protected:
  explicit WifiDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WifiDevice_Type Type;
  static constexpr Type UNKNOWN =
    WifiDevice_Type_UNKNOWN;
  static constexpr Type AP =
    WifiDevice_Type_AP;
  static constexpr Type CLIENT =
    WifiDevice_Type_CLIENT;
  static inline bool Type_IsValid(int value) {
    return WifiDevice_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    WifiDevice_Type_Type_MIN;
  static constexpr Type Type_MAX =
    WifiDevice_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    WifiDevice_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return WifiDevice_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return WifiDevice_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return WifiDevice_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAssociationsFieldNumber = 6,
    kNameFieldNumber = 2,
    kMacAddressFieldNumber = 3,
    kSsidFieldNumber = 4,
    kTypeFieldNumber = 1,
    kTxPowerDbmFieldNumber = 5,
  };
  // repeated .bosdyn.api.Association associations = 6;
  int associations_size() const;
  private:
  int _internal_associations_size() const;
  public:
  void clear_associations();
  ::bosdyn::api::Association* mutable_associations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Association >*
      mutable_associations();
  private:
  const ::bosdyn::api::Association& _internal_associations(int index) const;
  ::bosdyn::api::Association* _internal_add_associations();
  public:
  const ::bosdyn::api::Association& associations(int index) const;
  ::bosdyn::api::Association* add_associations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Association >&
      associations() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string mac_address = 3;
  void clear_mac_address();
  const std::string& mac_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mac_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mac_address();
  PROTOBUF_NODISCARD std::string* release_mac_address();
  void set_allocated_mac_address(std::string* mac_address);
  private:
  const std::string& _internal_mac_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mac_address(const std::string& value);
  std::string* _internal_mutable_mac_address();
  public:

  // string ssid = 4;
  void clear_ssid();
  const std::string& ssid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ssid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ssid();
  PROTOBUF_NODISCARD std::string* release_ssid();
  void set_allocated_ssid(std::string* ssid);
  private:
  const std::string& _internal_ssid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ssid(const std::string& value);
  std::string* _internal_mutable_ssid();
  public:

  // .bosdyn.api.WifiDevice.Type type = 1;
  void clear_type();
  ::bosdyn::api::WifiDevice_Type type() const;
  void set_type(::bosdyn::api::WifiDevice_Type value);
  private:
  ::bosdyn::api::WifiDevice_Type _internal_type() const;
  void _internal_set_type(::bosdyn::api::WifiDevice_Type value);
  public:

  // int32 tx_power_dbm = 5;
  void clear_tx_power_dbm();
  int32_t tx_power_dbm() const;
  void set_tx_power_dbm(int32_t value);
  private:
  int32_t _internal_tx_power_dbm() const;
  void _internal_set_tx_power_dbm(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.WifiDevice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Association > associations_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssid_;
    int type_;
    int32_t tx_power_dbm_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fnetwork_5fstats_2eproto;
};
// -------------------------------------------------------------------

class WifiStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.WifiStats) */ {
 public:
  inline WifiStats() : WifiStats(nullptr) {}
  ~WifiStats() override;
  explicit PROTOBUF_CONSTEXPR WifiStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WifiStats(const WifiStats& from);
  WifiStats(WifiStats&& from) noexcept
    : WifiStats() {
    *this = ::std::move(from);
  }

  inline WifiStats& operator=(const WifiStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline WifiStats& operator=(WifiStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WifiStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const WifiStats* internal_default_instance() {
    return reinterpret_cast<const WifiStats*>(
               &_WifiStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WifiStats& a, WifiStats& b) {
    a.Swap(&b);
  }
  inline void Swap(WifiStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WifiStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WifiStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WifiStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WifiStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WifiStats& from) {
    WifiStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WifiStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.WifiStats";
  }
  protected:
  explicit WifiStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevicesFieldNumber = 2,
    kHostnameFieldNumber = 1,
  };
  // repeated .bosdyn.api.WifiDevice devices = 2;
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::bosdyn::api::WifiDevice* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::WifiDevice >*
      mutable_devices();
  private:
  const ::bosdyn::api::WifiDevice& _internal_devices(int index) const;
  ::bosdyn::api::WifiDevice* _internal_add_devices();
  public:
  const ::bosdyn::api::WifiDevice& devices(int index) const;
  ::bosdyn::api::WifiDevice* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::WifiDevice >&
      devices() const;

  // string hostname = 1;
  void clear_hostname();
  const std::string& hostname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hostname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hostname();
  PROTOBUF_NODISCARD std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.WifiStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::WifiDevice > devices_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fnetwork_5fstats_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Association

// string mac_address = 1;
inline void Association::clear_mac_address() {
  _impl_.mac_address_.ClearToEmpty();
}
inline const std::string& Association::mac_address() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Association.mac_address)
  return _internal_mac_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Association::set_mac_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mac_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.Association.mac_address)
}
inline std::string* Association::mutable_mac_address() {
  std::string* _s = _internal_mutable_mac_address();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.Association.mac_address)
  return _s;
}
inline const std::string& Association::_internal_mac_address() const {
  return _impl_.mac_address_.Get();
}
inline void Association::_internal_set_mac_address(const std::string& value) {
  
  _impl_.mac_address_.Set(value, GetArenaForAllocation());
}
inline std::string* Association::_internal_mutable_mac_address() {
  
  return _impl_.mac_address_.Mutable(GetArenaForAllocation());
}
inline std::string* Association::release_mac_address() {
  // @@protoc_insertion_point(field_release:bosdyn.api.Association.mac_address)
  return _impl_.mac_address_.Release();
}
inline void Association::set_allocated_mac_address(std::string* mac_address) {
  if (mac_address != nullptr) {
    
  } else {
    
  }
  _impl_.mac_address_.SetAllocated(mac_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mac_address_.IsDefault()) {
    _impl_.mac_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.Association.mac_address)
}

// .google.protobuf.Duration connected_time = 2;
inline bool Association::_internal_has_connected_time() const {
  return this != internal_default_instance() && _impl_.connected_time_ != nullptr;
}
inline bool Association::has_connected_time() const {
  return _internal_has_connected_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Association::_internal_connected_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.connected_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Association::connected_time() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Association.connected_time)
  return _internal_connected_time();
}
inline void Association::unsafe_arena_set_allocated_connected_time(
    ::PROTOBUF_NAMESPACE_ID::Duration* connected_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.connected_time_);
  }
  _impl_.connected_time_ = connected_time;
  if (connected_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.Association.connected_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Association::release_connected_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.connected_time_;
  _impl_.connected_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Association::unsafe_arena_release_connected_time() {
  // @@protoc_insertion_point(field_release:bosdyn.api.Association.connected_time)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.connected_time_;
  _impl_.connected_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Association::_internal_mutable_connected_time() {
  
  if (_impl_.connected_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.connected_time_ = p;
  }
  return _impl_.connected_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Association::mutable_connected_time() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_connected_time();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.Association.connected_time)
  return _msg;
}
inline void Association::set_allocated_connected_time(::PROTOBUF_NAMESPACE_ID::Duration* connected_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.connected_time_);
  }
  if (connected_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(connected_time));
    if (message_arena != submessage_arena) {
      connected_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connected_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.connected_time_ = connected_time;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.Association.connected_time)
}

// int32 rx_signal_dbm = 3;
inline void Association::clear_rx_signal_dbm() {
  _impl_.rx_signal_dbm_ = 0;
}
inline int32_t Association::_internal_rx_signal_dbm() const {
  return _impl_.rx_signal_dbm_;
}
inline int32_t Association::rx_signal_dbm() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Association.rx_signal_dbm)
  return _internal_rx_signal_dbm();
}
inline void Association::_internal_set_rx_signal_dbm(int32_t value) {
  
  _impl_.rx_signal_dbm_ = value;
}
inline void Association::set_rx_signal_dbm(int32_t value) {
  _internal_set_rx_signal_dbm(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.Association.rx_signal_dbm)
}

// int32 rx_signal_avg_dbm = 4;
inline void Association::clear_rx_signal_avg_dbm() {
  _impl_.rx_signal_avg_dbm_ = 0;
}
inline int32_t Association::_internal_rx_signal_avg_dbm() const {
  return _impl_.rx_signal_avg_dbm_;
}
inline int32_t Association::rx_signal_avg_dbm() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Association.rx_signal_avg_dbm)
  return _internal_rx_signal_avg_dbm();
}
inline void Association::_internal_set_rx_signal_avg_dbm(int32_t value) {
  
  _impl_.rx_signal_avg_dbm_ = value;
}
inline void Association::set_rx_signal_avg_dbm(int32_t value) {
  _internal_set_rx_signal_avg_dbm(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.Association.rx_signal_avg_dbm)
}

// int32 rx_beacon_signal_avg_dbm = 5;
inline void Association::clear_rx_beacon_signal_avg_dbm() {
  _impl_.rx_beacon_signal_avg_dbm_ = 0;
}
inline int32_t Association::_internal_rx_beacon_signal_avg_dbm() const {
  return _impl_.rx_beacon_signal_avg_dbm_;
}
inline int32_t Association::rx_beacon_signal_avg_dbm() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Association.rx_beacon_signal_avg_dbm)
  return _internal_rx_beacon_signal_avg_dbm();
}
inline void Association::_internal_set_rx_beacon_signal_avg_dbm(int32_t value) {
  
  _impl_.rx_beacon_signal_avg_dbm_ = value;
}
inline void Association::set_rx_beacon_signal_avg_dbm(int32_t value) {
  _internal_set_rx_beacon_signal_avg_dbm(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.Association.rx_beacon_signal_avg_dbm)
}

// int64 expected_bits_per_second = 6;
inline void Association::clear_expected_bits_per_second() {
  _impl_.expected_bits_per_second_ = int64_t{0};
}
inline int64_t Association::_internal_expected_bits_per_second() const {
  return _impl_.expected_bits_per_second_;
}
inline int64_t Association::expected_bits_per_second() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Association.expected_bits_per_second)
  return _internal_expected_bits_per_second();
}
inline void Association::_internal_set_expected_bits_per_second(int64_t value) {
  
  _impl_.expected_bits_per_second_ = value;
}
inline void Association::set_expected_bits_per_second(int64_t value) {
  _internal_set_expected_bits_per_second(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.Association.expected_bits_per_second)
}

// int64 rx_bytes = 7;
inline void Association::clear_rx_bytes() {
  _impl_.rx_bytes_ = int64_t{0};
}
inline int64_t Association::_internal_rx_bytes() const {
  return _impl_.rx_bytes_;
}
inline int64_t Association::rx_bytes() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Association.rx_bytes)
  return _internal_rx_bytes();
}
inline void Association::_internal_set_rx_bytes(int64_t value) {
  
  _impl_.rx_bytes_ = value;
}
inline void Association::set_rx_bytes(int64_t value) {
  _internal_set_rx_bytes(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.Association.rx_bytes)
}

// int64 rx_packets = 8;
inline void Association::clear_rx_packets() {
  _impl_.rx_packets_ = int64_t{0};
}
inline int64_t Association::_internal_rx_packets() const {
  return _impl_.rx_packets_;
}
inline int64_t Association::rx_packets() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Association.rx_packets)
  return _internal_rx_packets();
}
inline void Association::_internal_set_rx_packets(int64_t value) {
  
  _impl_.rx_packets_ = value;
}
inline void Association::set_rx_packets(int64_t value) {
  _internal_set_rx_packets(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.Association.rx_packets)
}

// int64 rx_bits_per_second = 9;
inline void Association::clear_rx_bits_per_second() {
  _impl_.rx_bits_per_second_ = int64_t{0};
}
inline int64_t Association::_internal_rx_bits_per_second() const {
  return _impl_.rx_bits_per_second_;
}
inline int64_t Association::rx_bits_per_second() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Association.rx_bits_per_second)
  return _internal_rx_bits_per_second();
}
inline void Association::_internal_set_rx_bits_per_second(int64_t value) {
  
  _impl_.rx_bits_per_second_ = value;
}
inline void Association::set_rx_bits_per_second(int64_t value) {
  _internal_set_rx_bits_per_second(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.Association.rx_bits_per_second)
}

// int64 tx_bytes = 10;
inline void Association::clear_tx_bytes() {
  _impl_.tx_bytes_ = int64_t{0};
}
inline int64_t Association::_internal_tx_bytes() const {
  return _impl_.tx_bytes_;
}
inline int64_t Association::tx_bytes() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Association.tx_bytes)
  return _internal_tx_bytes();
}
inline void Association::_internal_set_tx_bytes(int64_t value) {
  
  _impl_.tx_bytes_ = value;
}
inline void Association::set_tx_bytes(int64_t value) {
  _internal_set_tx_bytes(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.Association.tx_bytes)
}

// int64 tx_packets = 11;
inline void Association::clear_tx_packets() {
  _impl_.tx_packets_ = int64_t{0};
}
inline int64_t Association::_internal_tx_packets() const {
  return _impl_.tx_packets_;
}
inline int64_t Association::tx_packets() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Association.tx_packets)
  return _internal_tx_packets();
}
inline void Association::_internal_set_tx_packets(int64_t value) {
  
  _impl_.tx_packets_ = value;
}
inline void Association::set_tx_packets(int64_t value) {
  _internal_set_tx_packets(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.Association.tx_packets)
}

// int64 tx_bits_per_second = 12;
inline void Association::clear_tx_bits_per_second() {
  _impl_.tx_bits_per_second_ = int64_t{0};
}
inline int64_t Association::_internal_tx_bits_per_second() const {
  return _impl_.tx_bits_per_second_;
}
inline int64_t Association::tx_bits_per_second() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Association.tx_bits_per_second)
  return _internal_tx_bits_per_second();
}
inline void Association::_internal_set_tx_bits_per_second(int64_t value) {
  
  _impl_.tx_bits_per_second_ = value;
}
inline void Association::set_tx_bits_per_second(int64_t value) {
  _internal_set_tx_bits_per_second(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.Association.tx_bits_per_second)
}

// int64 tx_retries = 13;
inline void Association::clear_tx_retries() {
  _impl_.tx_retries_ = int64_t{0};
}
inline int64_t Association::_internal_tx_retries() const {
  return _impl_.tx_retries_;
}
inline int64_t Association::tx_retries() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Association.tx_retries)
  return _internal_tx_retries();
}
inline void Association::_internal_set_tx_retries(int64_t value) {
  
  _impl_.tx_retries_ = value;
}
inline void Association::set_tx_retries(int64_t value) {
  _internal_set_tx_retries(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.Association.tx_retries)
}

// int64 tx_failed = 14;
inline void Association::clear_tx_failed() {
  _impl_.tx_failed_ = int64_t{0};
}
inline int64_t Association::_internal_tx_failed() const {
  return _impl_.tx_failed_;
}
inline int64_t Association::tx_failed() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Association.tx_failed)
  return _internal_tx_failed();
}
inline void Association::_internal_set_tx_failed(int64_t value) {
  
  _impl_.tx_failed_ = value;
}
inline void Association::set_tx_failed(int64_t value) {
  _internal_set_tx_failed(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.Association.tx_failed)
}

// int64 beacons_received = 15;
inline void Association::clear_beacons_received() {
  _impl_.beacons_received_ = int64_t{0};
}
inline int64_t Association::_internal_beacons_received() const {
  return _impl_.beacons_received_;
}
inline int64_t Association::beacons_received() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Association.beacons_received)
  return _internal_beacons_received();
}
inline void Association::_internal_set_beacons_received(int64_t value) {
  
  _impl_.beacons_received_ = value;
}
inline void Association::set_beacons_received(int64_t value) {
  _internal_set_beacons_received(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.Association.beacons_received)
}

// int64 beacon_loss_count = 16;
inline void Association::clear_beacon_loss_count() {
  _impl_.beacon_loss_count_ = int64_t{0};
}
inline int64_t Association::_internal_beacon_loss_count() const {
  return _impl_.beacon_loss_count_;
}
inline int64_t Association::beacon_loss_count() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Association.beacon_loss_count)
  return _internal_beacon_loss_count();
}
inline void Association::_internal_set_beacon_loss_count(int64_t value) {
  
  _impl_.beacon_loss_count_ = value;
}
inline void Association::set_beacon_loss_count(int64_t value) {
  _internal_set_beacon_loss_count(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.Association.beacon_loss_count)
}

// -------------------------------------------------------------------

// WifiDevice

// .bosdyn.api.WifiDevice.Type type = 1;
inline void WifiDevice::clear_type() {
  _impl_.type_ = 0;
}
inline ::bosdyn::api::WifiDevice_Type WifiDevice::_internal_type() const {
  return static_cast< ::bosdyn::api::WifiDevice_Type >(_impl_.type_);
}
inline ::bosdyn::api::WifiDevice_Type WifiDevice::type() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.WifiDevice.type)
  return _internal_type();
}
inline void WifiDevice::_internal_set_type(::bosdyn::api::WifiDevice_Type value) {
  
  _impl_.type_ = value;
}
inline void WifiDevice::set_type(::bosdyn::api::WifiDevice_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.WifiDevice.type)
}

// string name = 2;
inline void WifiDevice::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& WifiDevice::name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.WifiDevice.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WifiDevice::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.WifiDevice.name)
}
inline std::string* WifiDevice::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.WifiDevice.name)
  return _s;
}
inline const std::string& WifiDevice::_internal_name() const {
  return _impl_.name_.Get();
}
inline void WifiDevice::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* WifiDevice::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* WifiDevice::release_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.WifiDevice.name)
  return _impl_.name_.Release();
}
inline void WifiDevice::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.WifiDevice.name)
}

// string mac_address = 3;
inline void WifiDevice::clear_mac_address() {
  _impl_.mac_address_.ClearToEmpty();
}
inline const std::string& WifiDevice::mac_address() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.WifiDevice.mac_address)
  return _internal_mac_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WifiDevice::set_mac_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mac_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.WifiDevice.mac_address)
}
inline std::string* WifiDevice::mutable_mac_address() {
  std::string* _s = _internal_mutable_mac_address();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.WifiDevice.mac_address)
  return _s;
}
inline const std::string& WifiDevice::_internal_mac_address() const {
  return _impl_.mac_address_.Get();
}
inline void WifiDevice::_internal_set_mac_address(const std::string& value) {
  
  _impl_.mac_address_.Set(value, GetArenaForAllocation());
}
inline std::string* WifiDevice::_internal_mutable_mac_address() {
  
  return _impl_.mac_address_.Mutable(GetArenaForAllocation());
}
inline std::string* WifiDevice::release_mac_address() {
  // @@protoc_insertion_point(field_release:bosdyn.api.WifiDevice.mac_address)
  return _impl_.mac_address_.Release();
}
inline void WifiDevice::set_allocated_mac_address(std::string* mac_address) {
  if (mac_address != nullptr) {
    
  } else {
    
  }
  _impl_.mac_address_.SetAllocated(mac_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mac_address_.IsDefault()) {
    _impl_.mac_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.WifiDevice.mac_address)
}

// string ssid = 4;
inline void WifiDevice::clear_ssid() {
  _impl_.ssid_.ClearToEmpty();
}
inline const std::string& WifiDevice::ssid() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.WifiDevice.ssid)
  return _internal_ssid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WifiDevice::set_ssid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ssid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.WifiDevice.ssid)
}
inline std::string* WifiDevice::mutable_ssid() {
  std::string* _s = _internal_mutable_ssid();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.WifiDevice.ssid)
  return _s;
}
inline const std::string& WifiDevice::_internal_ssid() const {
  return _impl_.ssid_.Get();
}
inline void WifiDevice::_internal_set_ssid(const std::string& value) {
  
  _impl_.ssid_.Set(value, GetArenaForAllocation());
}
inline std::string* WifiDevice::_internal_mutable_ssid() {
  
  return _impl_.ssid_.Mutable(GetArenaForAllocation());
}
inline std::string* WifiDevice::release_ssid() {
  // @@protoc_insertion_point(field_release:bosdyn.api.WifiDevice.ssid)
  return _impl_.ssid_.Release();
}
inline void WifiDevice::set_allocated_ssid(std::string* ssid) {
  if (ssid != nullptr) {
    
  } else {
    
  }
  _impl_.ssid_.SetAllocated(ssid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ssid_.IsDefault()) {
    _impl_.ssid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.WifiDevice.ssid)
}

// int32 tx_power_dbm = 5;
inline void WifiDevice::clear_tx_power_dbm() {
  _impl_.tx_power_dbm_ = 0;
}
inline int32_t WifiDevice::_internal_tx_power_dbm() const {
  return _impl_.tx_power_dbm_;
}
inline int32_t WifiDevice::tx_power_dbm() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.WifiDevice.tx_power_dbm)
  return _internal_tx_power_dbm();
}
inline void WifiDevice::_internal_set_tx_power_dbm(int32_t value) {
  
  _impl_.tx_power_dbm_ = value;
}
inline void WifiDevice::set_tx_power_dbm(int32_t value) {
  _internal_set_tx_power_dbm(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.WifiDevice.tx_power_dbm)
}

// repeated .bosdyn.api.Association associations = 6;
inline int WifiDevice::_internal_associations_size() const {
  return _impl_.associations_.size();
}
inline int WifiDevice::associations_size() const {
  return _internal_associations_size();
}
inline void WifiDevice::clear_associations() {
  _impl_.associations_.Clear();
}
inline ::bosdyn::api::Association* WifiDevice::mutable_associations(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.WifiDevice.associations)
  return _impl_.associations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Association >*
WifiDevice::mutable_associations() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.WifiDevice.associations)
  return &_impl_.associations_;
}
inline const ::bosdyn::api::Association& WifiDevice::_internal_associations(int index) const {
  return _impl_.associations_.Get(index);
}
inline const ::bosdyn::api::Association& WifiDevice::associations(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.WifiDevice.associations)
  return _internal_associations(index);
}
inline ::bosdyn::api::Association* WifiDevice::_internal_add_associations() {
  return _impl_.associations_.Add();
}
inline ::bosdyn::api::Association* WifiDevice::add_associations() {
  ::bosdyn::api::Association* _add = _internal_add_associations();
  // @@protoc_insertion_point(field_add:bosdyn.api.WifiDevice.associations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Association >&
WifiDevice::associations() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.WifiDevice.associations)
  return _impl_.associations_;
}

// -------------------------------------------------------------------

// WifiStats

// string hostname = 1;
inline void WifiStats::clear_hostname() {
  _impl_.hostname_.ClearToEmpty();
}
inline const std::string& WifiStats::hostname() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.WifiStats.hostname)
  return _internal_hostname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WifiStats::set_hostname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hostname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.WifiStats.hostname)
}
inline std::string* WifiStats::mutable_hostname() {
  std::string* _s = _internal_mutable_hostname();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.WifiStats.hostname)
  return _s;
}
inline const std::string& WifiStats::_internal_hostname() const {
  return _impl_.hostname_.Get();
}
inline void WifiStats::_internal_set_hostname(const std::string& value) {
  
  _impl_.hostname_.Set(value, GetArenaForAllocation());
}
inline std::string* WifiStats::_internal_mutable_hostname() {
  
  return _impl_.hostname_.Mutable(GetArenaForAllocation());
}
inline std::string* WifiStats::release_hostname() {
  // @@protoc_insertion_point(field_release:bosdyn.api.WifiStats.hostname)
  return _impl_.hostname_.Release();
}
inline void WifiStats::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    
  } else {
    
  }
  _impl_.hostname_.SetAllocated(hostname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hostname_.IsDefault()) {
    _impl_.hostname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.WifiStats.hostname)
}

// repeated .bosdyn.api.WifiDevice devices = 2;
inline int WifiStats::_internal_devices_size() const {
  return _impl_.devices_.size();
}
inline int WifiStats::devices_size() const {
  return _internal_devices_size();
}
inline void WifiStats::clear_devices() {
  _impl_.devices_.Clear();
}
inline ::bosdyn::api::WifiDevice* WifiStats::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.WifiStats.devices)
  return _impl_.devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::WifiDevice >*
WifiStats::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.WifiStats.devices)
  return &_impl_.devices_;
}
inline const ::bosdyn::api::WifiDevice& WifiStats::_internal_devices(int index) const {
  return _impl_.devices_.Get(index);
}
inline const ::bosdyn::api::WifiDevice& WifiStats::devices(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.WifiStats.devices)
  return _internal_devices(index);
}
inline ::bosdyn::api::WifiDevice* WifiStats::_internal_add_devices() {
  return _impl_.devices_.Add();
}
inline ::bosdyn::api::WifiDevice* WifiStats::add_devices() {
  ::bosdyn::api::WifiDevice* _add = _internal_add_devices();
  // @@protoc_insertion_point(field_add:bosdyn.api.WifiStats.devices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::WifiDevice >&
WifiStats::devices() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.WifiStats.devices)
  return _impl_.devices_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::WifiDevice_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::WifiDevice_Type>() {
  return ::bosdyn::api::WifiDevice_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fnetwork_5fstats_2eproto

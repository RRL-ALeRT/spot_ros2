// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/directory.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fdirectory_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fdirectory_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/header.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fdirectory_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fdirectory_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fdirectory_2eproto;
namespace bosdyn {
namespace api {
class Endpoint;
struct EndpointDefaultTypeInternal;
extern EndpointDefaultTypeInternal _Endpoint_default_instance_;
class GetServiceEntryRequest;
struct GetServiceEntryRequestDefaultTypeInternal;
extern GetServiceEntryRequestDefaultTypeInternal _GetServiceEntryRequest_default_instance_;
class GetServiceEntryResponse;
struct GetServiceEntryResponseDefaultTypeInternal;
extern GetServiceEntryResponseDefaultTypeInternal _GetServiceEntryResponse_default_instance_;
class ListServiceEntriesRequest;
struct ListServiceEntriesRequestDefaultTypeInternal;
extern ListServiceEntriesRequestDefaultTypeInternal _ListServiceEntriesRequest_default_instance_;
class ListServiceEntriesResponse;
struct ListServiceEntriesResponseDefaultTypeInternal;
extern ListServiceEntriesResponseDefaultTypeInternal _ListServiceEntriesResponse_default_instance_;
class ServiceEntry;
struct ServiceEntryDefaultTypeInternal;
extern ServiceEntryDefaultTypeInternal _ServiceEntry_default_instance_;
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::Endpoint* Arena::CreateMaybeMessage<::bosdyn::api::Endpoint>(Arena*);
template<> ::bosdyn::api::GetServiceEntryRequest* Arena::CreateMaybeMessage<::bosdyn::api::GetServiceEntryRequest>(Arena*);
template<> ::bosdyn::api::GetServiceEntryResponse* Arena::CreateMaybeMessage<::bosdyn::api::GetServiceEntryResponse>(Arena*);
template<> ::bosdyn::api::ListServiceEntriesRequest* Arena::CreateMaybeMessage<::bosdyn::api::ListServiceEntriesRequest>(Arena*);
template<> ::bosdyn::api::ListServiceEntriesResponse* Arena::CreateMaybeMessage<::bosdyn::api::ListServiceEntriesResponse>(Arena*);
template<> ::bosdyn::api::ServiceEntry* Arena::CreateMaybeMessage<::bosdyn::api::ServiceEntry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {

enum GetServiceEntryResponse_Status : int {
  GetServiceEntryResponse_Status_STATUS_UNKNOWN = 0,
  GetServiceEntryResponse_Status_STATUS_OK = 1,
  GetServiceEntryResponse_Status_STATUS_NONEXISTENT_SERVICE = 2,
  GetServiceEntryResponse_Status_GetServiceEntryResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GetServiceEntryResponse_Status_GetServiceEntryResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GetServiceEntryResponse_Status_IsValid(int value);
constexpr GetServiceEntryResponse_Status GetServiceEntryResponse_Status_Status_MIN = GetServiceEntryResponse_Status_STATUS_UNKNOWN;
constexpr GetServiceEntryResponse_Status GetServiceEntryResponse_Status_Status_MAX = GetServiceEntryResponse_Status_STATUS_NONEXISTENT_SERVICE;
constexpr int GetServiceEntryResponse_Status_Status_ARRAYSIZE = GetServiceEntryResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetServiceEntryResponse_Status_descriptor();
template<typename T>
inline const std::string& GetServiceEntryResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetServiceEntryResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetServiceEntryResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetServiceEntryResponse_Status_descriptor(), enum_t_value);
}
inline bool GetServiceEntryResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GetServiceEntryResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetServiceEntryResponse_Status>(
    GetServiceEntryResponse_Status_descriptor(), name, value);
}
// ===================================================================

class ServiceEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.ServiceEntry) */ {
 public:
  inline ServiceEntry() : ServiceEntry(nullptr) {}
  ~ServiceEntry() override;
  explicit PROTOBUF_CONSTEXPR ServiceEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceEntry(const ServiceEntry& from);
  ServiceEntry(ServiceEntry&& from) noexcept
    : ServiceEntry() {
    *this = ::std::move(from);
  }

  inline ServiceEntry& operator=(const ServiceEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceEntry& operator=(ServiceEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceEntry& default_instance() {
    return *internal_default_instance();
  }
  enum ServiceTypeCase {
    kType = 2,
    SERVICE_TYPE_NOT_SET = 0,
  };

  static inline const ServiceEntry* internal_default_instance() {
    return reinterpret_cast<const ServiceEntry*>(
               &_ServiceEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServiceEntry& a, ServiceEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServiceEntry& from) {
    ServiceEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ServiceEntry";
  }
  protected:
  explicit ServiceEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAuthorityFieldNumber = 3,
    kPermissionRequiredFieldNumber = 7,
    kHostPayloadGuidFieldNumber = 9,
    kLastUpdateFieldNumber = 4,
    kLivenessTimeoutSecsFieldNumber = 8,
    kUserTokenRequiredFieldNumber = 5,
    kTypeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string authority = 3;
  void clear_authority();
  const std::string& authority() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_authority(ArgT0&& arg0, ArgT... args);
  std::string* mutable_authority();
  PROTOBUF_NODISCARD std::string* release_authority();
  void set_allocated_authority(std::string* authority);
  private:
  const std::string& _internal_authority() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authority(const std::string& value);
  std::string* _internal_mutable_authority();
  public:

  // string permission_required = 7;
  void clear_permission_required();
  const std::string& permission_required() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_permission_required(ArgT0&& arg0, ArgT... args);
  std::string* mutable_permission_required();
  PROTOBUF_NODISCARD std::string* release_permission_required();
  void set_allocated_permission_required(std::string* permission_required);
  private:
  const std::string& _internal_permission_required() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_permission_required(const std::string& value);
  std::string* _internal_mutable_permission_required();
  public:

  // string host_payload_guid = 9;
  void clear_host_payload_guid();
  const std::string& host_payload_guid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host_payload_guid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host_payload_guid();
  PROTOBUF_NODISCARD std::string* release_host_payload_guid();
  void set_allocated_host_payload_guid(std::string* host_payload_guid);
  private:
  const std::string& _internal_host_payload_guid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host_payload_guid(const std::string& value);
  std::string* _internal_mutable_host_payload_guid();
  public:

  // .google.protobuf.Timestamp last_update = 4;
  bool has_last_update() const;
  private:
  bool _internal_has_last_update() const;
  public:
  void clear_last_update();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_update() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_last_update();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_update();
  void set_allocated_last_update(::PROTOBUF_NAMESPACE_ID::Timestamp* last_update);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_update() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_update();
  public:
  void unsafe_arena_set_allocated_last_update(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* last_update);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_update();

  // double liveness_timeout_secs = 8;
  void clear_liveness_timeout_secs();
  double liveness_timeout_secs() const;
  void set_liveness_timeout_secs(double value);
  private:
  double _internal_liveness_timeout_secs() const;
  void _internal_set_liveness_timeout_secs(double value);
  public:

  // bool user_token_required = 5;
  void clear_user_token_required();
  bool user_token_required() const;
  void set_user_token_required(bool value);
  private:
  bool _internal_user_token_required() const;
  void _internal_set_user_token_required(bool value);
  public:

  // string type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  void clear_service_type();
  ServiceTypeCase service_type_case() const;
  // @@protoc_insertion_point(class_scope:bosdyn.api.ServiceEntry)
 private:
  class _Internal;
  void set_has_type();

  inline bool has_service_type() const;
  inline void clear_has_service_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authority_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr permission_required_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_payload_guid_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_;
    double liveness_timeout_secs_;
    bool user_token_required_;
    union ServiceTypeUnion {
      constexpr ServiceTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    } service_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fdirectory_2eproto;
};
// -------------------------------------------------------------------

class Endpoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.Endpoint) */ {
 public:
  inline Endpoint() : Endpoint(nullptr) {}
  ~Endpoint() override;
  explicit PROTOBUF_CONSTEXPR Endpoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Endpoint(const Endpoint& from);
  Endpoint(Endpoint&& from) noexcept
    : Endpoint() {
    *this = ::std::move(from);
  }

  inline Endpoint& operator=(const Endpoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Endpoint& operator=(Endpoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Endpoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const Endpoint* internal_default_instance() {
    return reinterpret_cast<const Endpoint*>(
               &_Endpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Endpoint& a, Endpoint& b) {
    a.Swap(&b);
  }
  inline void Swap(Endpoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Endpoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Endpoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Endpoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Endpoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Endpoint& from) {
    Endpoint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Endpoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.Endpoint";
  }
  protected:
  explicit Endpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostIpFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string host_ip = 1;
  void clear_host_ip();
  const std::string& host_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host_ip();
  PROTOBUF_NODISCARD std::string* release_host_ip();
  void set_allocated_host_ip(std::string* host_ip);
  private:
  const std::string& _internal_host_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host_ip(const std::string& value);
  std::string* _internal_mutable_host_ip();
  public:

  // int32 port = 2;
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.Endpoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_ip_;
    int32_t port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fdirectory_2eproto;
};
// -------------------------------------------------------------------

class GetServiceEntryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.GetServiceEntryRequest) */ {
 public:
  inline GetServiceEntryRequest() : GetServiceEntryRequest(nullptr) {}
  ~GetServiceEntryRequest() override;
  explicit PROTOBUF_CONSTEXPR GetServiceEntryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServiceEntryRequest(const GetServiceEntryRequest& from);
  GetServiceEntryRequest(GetServiceEntryRequest&& from) noexcept
    : GetServiceEntryRequest() {
    *this = ::std::move(from);
  }

  inline GetServiceEntryRequest& operator=(const GetServiceEntryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceEntryRequest& operator=(GetServiceEntryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServiceEntryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServiceEntryRequest* internal_default_instance() {
    return reinterpret_cast<const GetServiceEntryRequest*>(
               &_GetServiceEntryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetServiceEntryRequest& a, GetServiceEntryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceEntryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceEntryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetServiceEntryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetServiceEntryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetServiceEntryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetServiceEntryRequest& from) {
    GetServiceEntryRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceEntryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.GetServiceEntryRequest";
  }
  protected:
  explicit GetServiceEntryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // string service_name = 2;
  void clear_service_name();
  const std::string& service_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_name();
  PROTOBUF_NODISCARD std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.GetServiceEntryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
    ::bosdyn::api::RequestHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fdirectory_2eproto;
};
// -------------------------------------------------------------------

class GetServiceEntryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.GetServiceEntryResponse) */ {
 public:
  inline GetServiceEntryResponse() : GetServiceEntryResponse(nullptr) {}
  ~GetServiceEntryResponse() override;
  explicit PROTOBUF_CONSTEXPR GetServiceEntryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServiceEntryResponse(const GetServiceEntryResponse& from);
  GetServiceEntryResponse(GetServiceEntryResponse&& from) noexcept
    : GetServiceEntryResponse() {
    *this = ::std::move(from);
  }

  inline GetServiceEntryResponse& operator=(const GetServiceEntryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceEntryResponse& operator=(GetServiceEntryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServiceEntryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServiceEntryResponse* internal_default_instance() {
    return reinterpret_cast<const GetServiceEntryResponse*>(
               &_GetServiceEntryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetServiceEntryResponse& a, GetServiceEntryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceEntryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceEntryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetServiceEntryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetServiceEntryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetServiceEntryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetServiceEntryResponse& from) {
    GetServiceEntryResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceEntryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.GetServiceEntryResponse";
  }
  protected:
  explicit GetServiceEntryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetServiceEntryResponse_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    GetServiceEntryResponse_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_OK =
    GetServiceEntryResponse_Status_STATUS_OK;
  static constexpr Status STATUS_NONEXISTENT_SERVICE =
    GetServiceEntryResponse_Status_STATUS_NONEXISTENT_SERVICE;
  static inline bool Status_IsValid(int value) {
    return GetServiceEntryResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    GetServiceEntryResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    GetServiceEntryResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    GetServiceEntryResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return GetServiceEntryResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return GetServiceEntryResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return GetServiceEntryResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kServiceEntryFieldNumber = 3,
    kStatusFieldNumber = 2,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.ServiceEntry service_entry = 3;
  bool has_service_entry() const;
  private:
  bool _internal_has_service_entry() const;
  public:
  void clear_service_entry();
  const ::bosdyn::api::ServiceEntry& service_entry() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ServiceEntry* release_service_entry();
  ::bosdyn::api::ServiceEntry* mutable_service_entry();
  void set_allocated_service_entry(::bosdyn::api::ServiceEntry* service_entry);
  private:
  const ::bosdyn::api::ServiceEntry& _internal_service_entry() const;
  ::bosdyn::api::ServiceEntry* _internal_mutable_service_entry();
  public:
  void unsafe_arena_set_allocated_service_entry(
      ::bosdyn::api::ServiceEntry* service_entry);
  ::bosdyn::api::ServiceEntry* unsafe_arena_release_service_entry();

  // .bosdyn.api.GetServiceEntryResponse.Status status = 2;
  void clear_status();
  ::bosdyn::api::GetServiceEntryResponse_Status status() const;
  void set_status(::bosdyn::api::GetServiceEntryResponse_Status value);
  private:
  ::bosdyn::api::GetServiceEntryResponse_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::GetServiceEntryResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.GetServiceEntryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::ResponseHeader* header_;
    ::bosdyn::api::ServiceEntry* service_entry_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fdirectory_2eproto;
};
// -------------------------------------------------------------------

class ListServiceEntriesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.ListServiceEntriesRequest) */ {
 public:
  inline ListServiceEntriesRequest() : ListServiceEntriesRequest(nullptr) {}
  ~ListServiceEntriesRequest() override;
  explicit PROTOBUF_CONSTEXPR ListServiceEntriesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListServiceEntriesRequest(const ListServiceEntriesRequest& from);
  ListServiceEntriesRequest(ListServiceEntriesRequest&& from) noexcept
    : ListServiceEntriesRequest() {
    *this = ::std::move(from);
  }

  inline ListServiceEntriesRequest& operator=(const ListServiceEntriesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListServiceEntriesRequest& operator=(ListServiceEntriesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListServiceEntriesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListServiceEntriesRequest* internal_default_instance() {
    return reinterpret_cast<const ListServiceEntriesRequest*>(
               &_ListServiceEntriesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListServiceEntriesRequest& a, ListServiceEntriesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListServiceEntriesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListServiceEntriesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListServiceEntriesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListServiceEntriesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListServiceEntriesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListServiceEntriesRequest& from) {
    ListServiceEntriesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListServiceEntriesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ListServiceEntriesRequest";
  }
  protected:
  explicit ListServiceEntriesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.ListServiceEntriesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::RequestHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fdirectory_2eproto;
};
// -------------------------------------------------------------------

class ListServiceEntriesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.ListServiceEntriesResponse) */ {
 public:
  inline ListServiceEntriesResponse() : ListServiceEntriesResponse(nullptr) {}
  ~ListServiceEntriesResponse() override;
  explicit PROTOBUF_CONSTEXPR ListServiceEntriesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListServiceEntriesResponse(const ListServiceEntriesResponse& from);
  ListServiceEntriesResponse(ListServiceEntriesResponse&& from) noexcept
    : ListServiceEntriesResponse() {
    *this = ::std::move(from);
  }

  inline ListServiceEntriesResponse& operator=(const ListServiceEntriesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListServiceEntriesResponse& operator=(ListServiceEntriesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListServiceEntriesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListServiceEntriesResponse* internal_default_instance() {
    return reinterpret_cast<const ListServiceEntriesResponse*>(
               &_ListServiceEntriesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListServiceEntriesResponse& a, ListServiceEntriesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListServiceEntriesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListServiceEntriesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListServiceEntriesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListServiceEntriesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListServiceEntriesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListServiceEntriesResponse& from) {
    ListServiceEntriesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListServiceEntriesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ListServiceEntriesResponse";
  }
  protected:
  explicit ListServiceEntriesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceEntriesFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .bosdyn.api.ServiceEntry service_entries = 2;
  int service_entries_size() const;
  private:
  int _internal_service_entries_size() const;
  public:
  void clear_service_entries();
  ::bosdyn::api::ServiceEntry* mutable_service_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::ServiceEntry >*
      mutable_service_entries();
  private:
  const ::bosdyn::api::ServiceEntry& _internal_service_entries(int index) const;
  ::bosdyn::api::ServiceEntry* _internal_add_service_entries();
  public:
  const ::bosdyn::api::ServiceEntry& service_entries(int index) const;
  ::bosdyn::api::ServiceEntry* add_service_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::ServiceEntry >&
      service_entries() const;

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.ListServiceEntriesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::ServiceEntry > service_entries_;
    ::bosdyn::api::ResponseHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fdirectory_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServiceEntry

// string name = 1;
inline void ServiceEntry::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ServiceEntry::name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ServiceEntry.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceEntry::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.ServiceEntry.name)
}
inline std::string* ServiceEntry::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ServiceEntry.name)
  return _s;
}
inline const std::string& ServiceEntry::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ServiceEntry::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceEntry::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceEntry::release_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ServiceEntry.name)
  return _impl_.name_.Release();
}
inline void ServiceEntry::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ServiceEntry.name)
}

// string type = 2;
inline bool ServiceEntry::_internal_has_type() const {
  return service_type_case() == kType;
}
inline bool ServiceEntry::has_type() const {
  return _internal_has_type();
}
inline void ServiceEntry::set_has_type() {
  _impl_._oneof_case_[0] = kType;
}
inline void ServiceEntry::clear_type() {
  if (_internal_has_type()) {
    _impl_.service_type_.type_.Destroy();
    clear_has_service_type();
  }
}
inline const std::string& ServiceEntry::type() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ServiceEntry.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline void ServiceEntry::set_type(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_type()) {
    clear_service_type();
    set_has_type();
    _impl_.service_type_.type_.InitDefault();
  }
  _impl_.service_type_.type_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.ServiceEntry.type)
}
inline std::string* ServiceEntry::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ServiceEntry.type)
  return _s;
}
inline const std::string& ServiceEntry::_internal_type() const {
  if (_internal_has_type()) {
    return _impl_.service_type_.type_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ServiceEntry::_internal_set_type(const std::string& value) {
  if (!_internal_has_type()) {
    clear_service_type();
    set_has_type();
    _impl_.service_type_.type_.InitDefault();
  }
  _impl_.service_type_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceEntry::_internal_mutable_type() {
  if (!_internal_has_type()) {
    clear_service_type();
    set_has_type();
    _impl_.service_type_.type_.InitDefault();
  }
  return _impl_.service_type_.type_.Mutable(      GetArenaForAllocation());
}
inline std::string* ServiceEntry::release_type() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ServiceEntry.type)
  if (_internal_has_type()) {
    clear_has_service_type();
    return _impl_.service_type_.type_.Release();
  } else {
    return nullptr;
  }
}
inline void ServiceEntry::set_allocated_type(std::string* type) {
  if (has_service_type()) {
    clear_service_type();
  }
  if (type != nullptr) {
    set_has_type();
    _impl_.service_type_.type_.InitAllocated(type, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ServiceEntry.type)
}

// string authority = 3;
inline void ServiceEntry::clear_authority() {
  _impl_.authority_.ClearToEmpty();
}
inline const std::string& ServiceEntry::authority() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ServiceEntry.authority)
  return _internal_authority();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceEntry::set_authority(ArgT0&& arg0, ArgT... args) {
 
 _impl_.authority_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.ServiceEntry.authority)
}
inline std::string* ServiceEntry::mutable_authority() {
  std::string* _s = _internal_mutable_authority();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ServiceEntry.authority)
  return _s;
}
inline const std::string& ServiceEntry::_internal_authority() const {
  return _impl_.authority_.Get();
}
inline void ServiceEntry::_internal_set_authority(const std::string& value) {
  
  _impl_.authority_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceEntry::_internal_mutable_authority() {
  
  return _impl_.authority_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceEntry::release_authority() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ServiceEntry.authority)
  return _impl_.authority_.Release();
}
inline void ServiceEntry::set_allocated_authority(std::string* authority) {
  if (authority != nullptr) {
    
  } else {
    
  }
  _impl_.authority_.SetAllocated(authority, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.authority_.IsDefault()) {
    _impl_.authority_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ServiceEntry.authority)
}

// .google.protobuf.Timestamp last_update = 4;
inline bool ServiceEntry::_internal_has_last_update() const {
  return this != internal_default_instance() && _impl_.last_update_ != nullptr;
}
inline bool ServiceEntry::has_last_update() const {
  return _internal_has_last_update();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ServiceEntry::_internal_last_update() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.last_update_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ServiceEntry::last_update() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ServiceEntry.last_update)
  return _internal_last_update();
}
inline void ServiceEntry::unsafe_arena_set_allocated_last_update(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_update) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_update_);
  }
  _impl_.last_update_ = last_update;
  if (last_update) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ServiceEntry.last_update)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ServiceEntry::release_last_update() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_update_;
  _impl_.last_update_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ServiceEntry::unsafe_arena_release_last_update() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ServiceEntry.last_update)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_update_;
  _impl_.last_update_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ServiceEntry::_internal_mutable_last_update() {
  
  if (_impl_.last_update_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.last_update_ = p;
  }
  return _impl_.last_update_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ServiceEntry::mutable_last_update() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_update();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ServiceEntry.last_update)
  return _msg;
}
inline void ServiceEntry::set_allocated_last_update(::PROTOBUF_NAMESPACE_ID::Timestamp* last_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_update_);
  }
  if (last_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_update));
    if (message_arena != submessage_arena) {
      last_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_update, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.last_update_ = last_update;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ServiceEntry.last_update)
}

// bool user_token_required = 5;
inline void ServiceEntry::clear_user_token_required() {
  _impl_.user_token_required_ = false;
}
inline bool ServiceEntry::_internal_user_token_required() const {
  return _impl_.user_token_required_;
}
inline bool ServiceEntry::user_token_required() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ServiceEntry.user_token_required)
  return _internal_user_token_required();
}
inline void ServiceEntry::_internal_set_user_token_required(bool value) {
  
  _impl_.user_token_required_ = value;
}
inline void ServiceEntry::set_user_token_required(bool value) {
  _internal_set_user_token_required(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.ServiceEntry.user_token_required)
}

// string permission_required = 7;
inline void ServiceEntry::clear_permission_required() {
  _impl_.permission_required_.ClearToEmpty();
}
inline const std::string& ServiceEntry::permission_required() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ServiceEntry.permission_required)
  return _internal_permission_required();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceEntry::set_permission_required(ArgT0&& arg0, ArgT... args) {
 
 _impl_.permission_required_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.ServiceEntry.permission_required)
}
inline std::string* ServiceEntry::mutable_permission_required() {
  std::string* _s = _internal_mutable_permission_required();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ServiceEntry.permission_required)
  return _s;
}
inline const std::string& ServiceEntry::_internal_permission_required() const {
  return _impl_.permission_required_.Get();
}
inline void ServiceEntry::_internal_set_permission_required(const std::string& value) {
  
  _impl_.permission_required_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceEntry::_internal_mutable_permission_required() {
  
  return _impl_.permission_required_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceEntry::release_permission_required() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ServiceEntry.permission_required)
  return _impl_.permission_required_.Release();
}
inline void ServiceEntry::set_allocated_permission_required(std::string* permission_required) {
  if (permission_required != nullptr) {
    
  } else {
    
  }
  _impl_.permission_required_.SetAllocated(permission_required, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.permission_required_.IsDefault()) {
    _impl_.permission_required_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ServiceEntry.permission_required)
}

// double liveness_timeout_secs = 8;
inline void ServiceEntry::clear_liveness_timeout_secs() {
  _impl_.liveness_timeout_secs_ = 0;
}
inline double ServiceEntry::_internal_liveness_timeout_secs() const {
  return _impl_.liveness_timeout_secs_;
}
inline double ServiceEntry::liveness_timeout_secs() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ServiceEntry.liveness_timeout_secs)
  return _internal_liveness_timeout_secs();
}
inline void ServiceEntry::_internal_set_liveness_timeout_secs(double value) {
  
  _impl_.liveness_timeout_secs_ = value;
}
inline void ServiceEntry::set_liveness_timeout_secs(double value) {
  _internal_set_liveness_timeout_secs(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.ServiceEntry.liveness_timeout_secs)
}

// string host_payload_guid = 9;
inline void ServiceEntry::clear_host_payload_guid() {
  _impl_.host_payload_guid_.ClearToEmpty();
}
inline const std::string& ServiceEntry::host_payload_guid() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ServiceEntry.host_payload_guid)
  return _internal_host_payload_guid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceEntry::set_host_payload_guid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.host_payload_guid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.ServiceEntry.host_payload_guid)
}
inline std::string* ServiceEntry::mutable_host_payload_guid() {
  std::string* _s = _internal_mutable_host_payload_guid();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ServiceEntry.host_payload_guid)
  return _s;
}
inline const std::string& ServiceEntry::_internal_host_payload_guid() const {
  return _impl_.host_payload_guid_.Get();
}
inline void ServiceEntry::_internal_set_host_payload_guid(const std::string& value) {
  
  _impl_.host_payload_guid_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceEntry::_internal_mutable_host_payload_guid() {
  
  return _impl_.host_payload_guid_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceEntry::release_host_payload_guid() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ServiceEntry.host_payload_guid)
  return _impl_.host_payload_guid_.Release();
}
inline void ServiceEntry::set_allocated_host_payload_guid(std::string* host_payload_guid) {
  if (host_payload_guid != nullptr) {
    
  } else {
    
  }
  _impl_.host_payload_guid_.SetAllocated(host_payload_guid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.host_payload_guid_.IsDefault()) {
    _impl_.host_payload_guid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ServiceEntry.host_payload_guid)
}

inline bool ServiceEntry::has_service_type() const {
  return service_type_case() != SERVICE_TYPE_NOT_SET;
}
inline void ServiceEntry::clear_has_service_type() {
  _impl_._oneof_case_[0] = SERVICE_TYPE_NOT_SET;
}
inline ServiceEntry::ServiceTypeCase ServiceEntry::service_type_case() const {
  return ServiceEntry::ServiceTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Endpoint

// string host_ip = 1;
inline void Endpoint::clear_host_ip() {
  _impl_.host_ip_.ClearToEmpty();
}
inline const std::string& Endpoint::host_ip() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Endpoint.host_ip)
  return _internal_host_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Endpoint::set_host_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.host_ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.Endpoint.host_ip)
}
inline std::string* Endpoint::mutable_host_ip() {
  std::string* _s = _internal_mutable_host_ip();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.Endpoint.host_ip)
  return _s;
}
inline const std::string& Endpoint::_internal_host_ip() const {
  return _impl_.host_ip_.Get();
}
inline void Endpoint::_internal_set_host_ip(const std::string& value) {
  
  _impl_.host_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* Endpoint::_internal_mutable_host_ip() {
  
  return _impl_.host_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* Endpoint::release_host_ip() {
  // @@protoc_insertion_point(field_release:bosdyn.api.Endpoint.host_ip)
  return _impl_.host_ip_.Release();
}
inline void Endpoint::set_allocated_host_ip(std::string* host_ip) {
  if (host_ip != nullptr) {
    
  } else {
    
  }
  _impl_.host_ip_.SetAllocated(host_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.host_ip_.IsDefault()) {
    _impl_.host_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.Endpoint.host_ip)
}

// int32 port = 2;
inline void Endpoint::clear_port() {
  _impl_.port_ = 0;
}
inline int32_t Endpoint::_internal_port() const {
  return _impl_.port_;
}
inline int32_t Endpoint::port() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Endpoint.port)
  return _internal_port();
}
inline void Endpoint::_internal_set_port(int32_t value) {
  
  _impl_.port_ = value;
}
inline void Endpoint::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.Endpoint.port)
}

// -------------------------------------------------------------------

// GetServiceEntryRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool GetServiceEntryRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool GetServiceEntryRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& GetServiceEntryRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RequestHeader&>(
      ::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& GetServiceEntryRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetServiceEntryRequest.header)
  return _internal_header();
}
inline void GetServiceEntryRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GetServiceEntryRequest.header)
}
inline ::bosdyn::api::RequestHeader* GetServiceEntryRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetServiceEntryRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GetServiceEntryRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetServiceEntryRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::RequestHeader* GetServiceEntryRequest::mutable_header() {
  ::bosdyn::api::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GetServiceEntryRequest.header)
  return _msg;
}
inline void GetServiceEntryRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GetServiceEntryRequest.header)
}

// string service_name = 2;
inline void GetServiceEntryRequest::clear_service_name() {
  _impl_.service_name_.ClearToEmpty();
}
inline const std::string& GetServiceEntryRequest::service_name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetServiceEntryRequest.service_name)
  return _internal_service_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetServiceEntryRequest::set_service_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.GetServiceEntryRequest.service_name)
}
inline std::string* GetServiceEntryRequest::mutable_service_name() {
  std::string* _s = _internal_mutable_service_name();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GetServiceEntryRequest.service_name)
  return _s;
}
inline const std::string& GetServiceEntryRequest::_internal_service_name() const {
  return _impl_.service_name_.Get();
}
inline void GetServiceEntryRequest::_internal_set_service_name(const std::string& value) {
  
  _impl_.service_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetServiceEntryRequest::_internal_mutable_service_name() {
  
  return _impl_.service_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetServiceEntryRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GetServiceEntryRequest.service_name)
  return _impl_.service_name_.Release();
}
inline void GetServiceEntryRequest::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  _impl_.service_name_.SetAllocated(service_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_name_.IsDefault()) {
    _impl_.service_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GetServiceEntryRequest.service_name)
}

// -------------------------------------------------------------------

// GetServiceEntryResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool GetServiceEntryResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool GetServiceEntryResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& GetServiceEntryResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ResponseHeader&>(
      ::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& GetServiceEntryResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetServiceEntryResponse.header)
  return _internal_header();
}
inline void GetServiceEntryResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GetServiceEntryResponse.header)
}
inline ::bosdyn::api::ResponseHeader* GetServiceEntryResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetServiceEntryResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GetServiceEntryResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetServiceEntryResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::ResponseHeader* GetServiceEntryResponse::mutable_header() {
  ::bosdyn::api::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GetServiceEntryResponse.header)
  return _msg;
}
inline void GetServiceEntryResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GetServiceEntryResponse.header)
}

// .bosdyn.api.GetServiceEntryResponse.Status status = 2;
inline void GetServiceEntryResponse::clear_status() {
  _impl_.status_ = 0;
}
inline ::bosdyn::api::GetServiceEntryResponse_Status GetServiceEntryResponse::_internal_status() const {
  return static_cast< ::bosdyn::api::GetServiceEntryResponse_Status >(_impl_.status_);
}
inline ::bosdyn::api::GetServiceEntryResponse_Status GetServiceEntryResponse::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetServiceEntryResponse.status)
  return _internal_status();
}
inline void GetServiceEntryResponse::_internal_set_status(::bosdyn::api::GetServiceEntryResponse_Status value) {
  
  _impl_.status_ = value;
}
inline void GetServiceEntryResponse::set_status(::bosdyn::api::GetServiceEntryResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.GetServiceEntryResponse.status)
}

// .bosdyn.api.ServiceEntry service_entry = 3;
inline bool GetServiceEntryResponse::_internal_has_service_entry() const {
  return this != internal_default_instance() && _impl_.service_entry_ != nullptr;
}
inline bool GetServiceEntryResponse::has_service_entry() const {
  return _internal_has_service_entry();
}
inline void GetServiceEntryResponse::clear_service_entry() {
  if (GetArenaForAllocation() == nullptr && _impl_.service_entry_ != nullptr) {
    delete _impl_.service_entry_;
  }
  _impl_.service_entry_ = nullptr;
}
inline const ::bosdyn::api::ServiceEntry& GetServiceEntryResponse::_internal_service_entry() const {
  const ::bosdyn::api::ServiceEntry* p = _impl_.service_entry_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ServiceEntry&>(
      ::bosdyn::api::_ServiceEntry_default_instance_);
}
inline const ::bosdyn::api::ServiceEntry& GetServiceEntryResponse::service_entry() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetServiceEntryResponse.service_entry)
  return _internal_service_entry();
}
inline void GetServiceEntryResponse::unsafe_arena_set_allocated_service_entry(
    ::bosdyn::api::ServiceEntry* service_entry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.service_entry_);
  }
  _impl_.service_entry_ = service_entry;
  if (service_entry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GetServiceEntryResponse.service_entry)
}
inline ::bosdyn::api::ServiceEntry* GetServiceEntryResponse::release_service_entry() {
  
  ::bosdyn::api::ServiceEntry* temp = _impl_.service_entry_;
  _impl_.service_entry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ServiceEntry* GetServiceEntryResponse::unsafe_arena_release_service_entry() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GetServiceEntryResponse.service_entry)
  
  ::bosdyn::api::ServiceEntry* temp = _impl_.service_entry_;
  _impl_.service_entry_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ServiceEntry* GetServiceEntryResponse::_internal_mutable_service_entry() {
  
  if (_impl_.service_entry_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ServiceEntry>(GetArenaForAllocation());
    _impl_.service_entry_ = p;
  }
  return _impl_.service_entry_;
}
inline ::bosdyn::api::ServiceEntry* GetServiceEntryResponse::mutable_service_entry() {
  ::bosdyn::api::ServiceEntry* _msg = _internal_mutable_service_entry();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GetServiceEntryResponse.service_entry)
  return _msg;
}
inline void GetServiceEntryResponse::set_allocated_service_entry(::bosdyn::api::ServiceEntry* service_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.service_entry_;
  }
  if (service_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(service_entry);
    if (message_arena != submessage_arena) {
      service_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_entry, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.service_entry_ = service_entry;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GetServiceEntryResponse.service_entry)
}

// -------------------------------------------------------------------

// ListServiceEntriesRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool ListServiceEntriesRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool ListServiceEntriesRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& ListServiceEntriesRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RequestHeader&>(
      ::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& ListServiceEntriesRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ListServiceEntriesRequest.header)
  return _internal_header();
}
inline void ListServiceEntriesRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ListServiceEntriesRequest.header)
}
inline ::bosdyn::api::RequestHeader* ListServiceEntriesRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RequestHeader* ListServiceEntriesRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ListServiceEntriesRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* ListServiceEntriesRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::RequestHeader* ListServiceEntriesRequest::mutable_header() {
  ::bosdyn::api::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ListServiceEntriesRequest.header)
  return _msg;
}
inline void ListServiceEntriesRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ListServiceEntriesRequest.header)
}

// -------------------------------------------------------------------

// ListServiceEntriesResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool ListServiceEntriesResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool ListServiceEntriesResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& ListServiceEntriesResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ResponseHeader&>(
      ::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& ListServiceEntriesResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ListServiceEntriesResponse.header)
  return _internal_header();
}
inline void ListServiceEntriesResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ListServiceEntriesResponse.header)
}
inline ::bosdyn::api::ResponseHeader* ListServiceEntriesResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ResponseHeader* ListServiceEntriesResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ListServiceEntriesResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* ListServiceEntriesResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::ResponseHeader* ListServiceEntriesResponse::mutable_header() {
  ::bosdyn::api::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ListServiceEntriesResponse.header)
  return _msg;
}
inline void ListServiceEntriesResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ListServiceEntriesResponse.header)
}

// repeated .bosdyn.api.ServiceEntry service_entries = 2;
inline int ListServiceEntriesResponse::_internal_service_entries_size() const {
  return _impl_.service_entries_.size();
}
inline int ListServiceEntriesResponse::service_entries_size() const {
  return _internal_service_entries_size();
}
inline void ListServiceEntriesResponse::clear_service_entries() {
  _impl_.service_entries_.Clear();
}
inline ::bosdyn::api::ServiceEntry* ListServiceEntriesResponse::mutable_service_entries(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ListServiceEntriesResponse.service_entries)
  return _impl_.service_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::ServiceEntry >*
ListServiceEntriesResponse::mutable_service_entries() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.ListServiceEntriesResponse.service_entries)
  return &_impl_.service_entries_;
}
inline const ::bosdyn::api::ServiceEntry& ListServiceEntriesResponse::_internal_service_entries(int index) const {
  return _impl_.service_entries_.Get(index);
}
inline const ::bosdyn::api::ServiceEntry& ListServiceEntriesResponse::service_entries(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ListServiceEntriesResponse.service_entries)
  return _internal_service_entries(index);
}
inline ::bosdyn::api::ServiceEntry* ListServiceEntriesResponse::_internal_add_service_entries() {
  return _impl_.service_entries_.Add();
}
inline ::bosdyn::api::ServiceEntry* ListServiceEntriesResponse::add_service_entries() {
  ::bosdyn::api::ServiceEntry* _add = _internal_add_service_entries();
  // @@protoc_insertion_point(field_add:bosdyn.api.ListServiceEntriesResponse.service_entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::ServiceEntry >&
ListServiceEntriesResponse::service_entries() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.ListServiceEntriesResponse.service_entries)
  return _impl_.service_entries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::GetServiceEntryResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::GetServiceEntryResponse_Status>() {
  return ::bosdyn::api::GetServiceEntryResponse_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fdirectory_2eproto

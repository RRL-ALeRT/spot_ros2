// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bosdyn/api/spot/door_service.proto
// Original file comments:
// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).
//
#ifndef GRPC_bosdyn_2fapi_2fspot_2fdoor_5fservice_2eproto__INCLUDED
#define GRPC_bosdyn_2fapi_2fspot_2fdoor_5fservice_2eproto__INCLUDED

#include "bosdyn/api/spot/door_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace bosdyn {
namespace api {
namespace spot {

class DoorService final {
 public:
  static constexpr char const* service_full_name() {
    return "bosdyn.api.spot.DoorService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status OpenDoor(::grpc::ClientContext* context, const ::bosdyn::api::spot::OpenDoorCommandRequest& request, ::bosdyn::api::spot::OpenDoorCommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::OpenDoorCommandResponse>> AsyncOpenDoor(::grpc::ClientContext* context, const ::bosdyn::api::spot::OpenDoorCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::OpenDoorCommandResponse>>(AsyncOpenDoorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::OpenDoorCommandResponse>> PrepareAsyncOpenDoor(::grpc::ClientContext* context, const ::bosdyn::api::spot::OpenDoorCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::OpenDoorCommandResponse>>(PrepareAsyncOpenDoorRaw(context, request, cq));
    }
    virtual ::grpc::Status OpenDoorFeedback(::grpc::ClientContext* context, const ::bosdyn::api::spot::OpenDoorFeedbackRequest& request, ::bosdyn::api::spot::OpenDoorFeedbackResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::OpenDoorFeedbackResponse>> AsyncOpenDoorFeedback(::grpc::ClientContext* context, const ::bosdyn::api::spot::OpenDoorFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::OpenDoorFeedbackResponse>>(AsyncOpenDoorFeedbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::OpenDoorFeedbackResponse>> PrepareAsyncOpenDoorFeedback(::grpc::ClientContext* context, const ::bosdyn::api::spot::OpenDoorFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::OpenDoorFeedbackResponse>>(PrepareAsyncOpenDoorFeedbackRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void OpenDoor(::grpc::ClientContext* context, const ::bosdyn::api::spot::OpenDoorCommandRequest* request, ::bosdyn::api::spot::OpenDoorCommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OpenDoor(::grpc::ClientContext* context, const ::bosdyn::api::spot::OpenDoorCommandRequest* request, ::bosdyn::api::spot::OpenDoorCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void OpenDoorFeedback(::grpc::ClientContext* context, const ::bosdyn::api::spot::OpenDoorFeedbackRequest* request, ::bosdyn::api::spot::OpenDoorFeedbackResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OpenDoorFeedback(::grpc::ClientContext* context, const ::bosdyn::api::spot::OpenDoorFeedbackRequest* request, ::bosdyn::api::spot::OpenDoorFeedbackResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::OpenDoorCommandResponse>* AsyncOpenDoorRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot::OpenDoorCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::OpenDoorCommandResponse>* PrepareAsyncOpenDoorRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot::OpenDoorCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::OpenDoorFeedbackResponse>* AsyncOpenDoorFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot::OpenDoorFeedbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::OpenDoorFeedbackResponse>* PrepareAsyncOpenDoorFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot::OpenDoorFeedbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status OpenDoor(::grpc::ClientContext* context, const ::bosdyn::api::spot::OpenDoorCommandRequest& request, ::bosdyn::api::spot::OpenDoorCommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::OpenDoorCommandResponse>> AsyncOpenDoor(::grpc::ClientContext* context, const ::bosdyn::api::spot::OpenDoorCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::OpenDoorCommandResponse>>(AsyncOpenDoorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::OpenDoorCommandResponse>> PrepareAsyncOpenDoor(::grpc::ClientContext* context, const ::bosdyn::api::spot::OpenDoorCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::OpenDoorCommandResponse>>(PrepareAsyncOpenDoorRaw(context, request, cq));
    }
    ::grpc::Status OpenDoorFeedback(::grpc::ClientContext* context, const ::bosdyn::api::spot::OpenDoorFeedbackRequest& request, ::bosdyn::api::spot::OpenDoorFeedbackResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::OpenDoorFeedbackResponse>> AsyncOpenDoorFeedback(::grpc::ClientContext* context, const ::bosdyn::api::spot::OpenDoorFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::OpenDoorFeedbackResponse>>(AsyncOpenDoorFeedbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::OpenDoorFeedbackResponse>> PrepareAsyncOpenDoorFeedback(::grpc::ClientContext* context, const ::bosdyn::api::spot::OpenDoorFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::OpenDoorFeedbackResponse>>(PrepareAsyncOpenDoorFeedbackRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void OpenDoor(::grpc::ClientContext* context, const ::bosdyn::api::spot::OpenDoorCommandRequest* request, ::bosdyn::api::spot::OpenDoorCommandResponse* response, std::function<void(::grpc::Status)>) override;
      void OpenDoor(::grpc::ClientContext* context, const ::bosdyn::api::spot::OpenDoorCommandRequest* request, ::bosdyn::api::spot::OpenDoorCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OpenDoorFeedback(::grpc::ClientContext* context, const ::bosdyn::api::spot::OpenDoorFeedbackRequest* request, ::bosdyn::api::spot::OpenDoorFeedbackResponse* response, std::function<void(::grpc::Status)>) override;
      void OpenDoorFeedback(::grpc::ClientContext* context, const ::bosdyn::api::spot::OpenDoorFeedbackRequest* request, ::bosdyn::api::spot::OpenDoorFeedbackResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::OpenDoorCommandResponse>* AsyncOpenDoorRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot::OpenDoorCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::OpenDoorCommandResponse>* PrepareAsyncOpenDoorRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot::OpenDoorCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::OpenDoorFeedbackResponse>* AsyncOpenDoorFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot::OpenDoorFeedbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::OpenDoorFeedbackResponse>* PrepareAsyncOpenDoorFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot::OpenDoorFeedbackRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_OpenDoor_;
    const ::grpc::internal::RpcMethod rpcmethod_OpenDoorFeedback_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status OpenDoor(::grpc::ServerContext* context, const ::bosdyn::api::spot::OpenDoorCommandRequest* request, ::bosdyn::api::spot::OpenDoorCommandResponse* response);
    virtual ::grpc::Status OpenDoorFeedback(::grpc::ServerContext* context, const ::bosdyn::api::spot::OpenDoorFeedbackRequest* request, ::bosdyn::api::spot::OpenDoorFeedbackResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_OpenDoor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OpenDoor() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_OpenDoor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDoor(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::OpenDoorCommandRequest* /*request*/, ::bosdyn::api::spot::OpenDoorCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenDoor(::grpc::ServerContext* context, ::bosdyn::api::spot::OpenDoorCommandRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::spot::OpenDoorCommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OpenDoorFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OpenDoorFeedback() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_OpenDoorFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDoorFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::OpenDoorFeedbackRequest* /*request*/, ::bosdyn::api::spot::OpenDoorFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenDoorFeedback(::grpc::ServerContext* context, ::bosdyn::api::spot::OpenDoorFeedbackRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::spot::OpenDoorFeedbackResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_OpenDoor<WithAsyncMethod_OpenDoorFeedback<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_OpenDoor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OpenDoor() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::spot::OpenDoorCommandRequest, ::bosdyn::api::spot::OpenDoorCommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::spot::OpenDoorCommandRequest* request, ::bosdyn::api::spot::OpenDoorCommandResponse* response) { return this->OpenDoor(context, request, response); }));}
    void SetMessageAllocatorFor_OpenDoor(
        ::grpc::MessageAllocator< ::bosdyn::api::spot::OpenDoorCommandRequest, ::bosdyn::api::spot::OpenDoorCommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::spot::OpenDoorCommandRequest, ::bosdyn::api::spot::OpenDoorCommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OpenDoor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDoor(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::OpenDoorCommandRequest* /*request*/, ::bosdyn::api::spot::OpenDoorCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OpenDoor(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::spot::OpenDoorCommandRequest* /*request*/, ::bosdyn::api::spot::OpenDoorCommandResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OpenDoorFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OpenDoorFeedback() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::spot::OpenDoorFeedbackRequest, ::bosdyn::api::spot::OpenDoorFeedbackResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::spot::OpenDoorFeedbackRequest* request, ::bosdyn::api::spot::OpenDoorFeedbackResponse* response) { return this->OpenDoorFeedback(context, request, response); }));}
    void SetMessageAllocatorFor_OpenDoorFeedback(
        ::grpc::MessageAllocator< ::bosdyn::api::spot::OpenDoorFeedbackRequest, ::bosdyn::api::spot::OpenDoorFeedbackResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::spot::OpenDoorFeedbackRequest, ::bosdyn::api::spot::OpenDoorFeedbackResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OpenDoorFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDoorFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::OpenDoorFeedbackRequest* /*request*/, ::bosdyn::api::spot::OpenDoorFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OpenDoorFeedback(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::spot::OpenDoorFeedbackRequest* /*request*/, ::bosdyn::api::spot::OpenDoorFeedbackResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_OpenDoor<WithCallbackMethod_OpenDoorFeedback<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_OpenDoor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OpenDoor() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_OpenDoor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDoor(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::OpenDoorCommandRequest* /*request*/, ::bosdyn::api::spot::OpenDoorCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OpenDoorFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OpenDoorFeedback() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_OpenDoorFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDoorFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::OpenDoorFeedbackRequest* /*request*/, ::bosdyn::api::spot::OpenDoorFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_OpenDoor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OpenDoor() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_OpenDoor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDoor(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::OpenDoorCommandRequest* /*request*/, ::bosdyn::api::spot::OpenDoorCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenDoor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OpenDoorFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OpenDoorFeedback() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_OpenDoorFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDoorFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::OpenDoorFeedbackRequest* /*request*/, ::bosdyn::api::spot::OpenDoorFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenDoorFeedback(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OpenDoor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OpenDoor() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OpenDoor(context, request, response); }));
    }
    ~WithRawCallbackMethod_OpenDoor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDoor(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::OpenDoorCommandRequest* /*request*/, ::bosdyn::api::spot::OpenDoorCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OpenDoor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OpenDoorFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OpenDoorFeedback() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OpenDoorFeedback(context, request, response); }));
    }
    ~WithRawCallbackMethod_OpenDoorFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDoorFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::OpenDoorFeedbackRequest* /*request*/, ::bosdyn::api::spot::OpenDoorFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OpenDoorFeedback(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OpenDoor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OpenDoor() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::spot::OpenDoorCommandRequest, ::bosdyn::api::spot::OpenDoorCommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::spot::OpenDoorCommandRequest, ::bosdyn::api::spot::OpenDoorCommandResponse>* streamer) {
                       return this->StreamedOpenDoor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OpenDoor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OpenDoor(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::OpenDoorCommandRequest* /*request*/, ::bosdyn::api::spot::OpenDoorCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOpenDoor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::spot::OpenDoorCommandRequest,::bosdyn::api::spot::OpenDoorCommandResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OpenDoorFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OpenDoorFeedback() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::spot::OpenDoorFeedbackRequest, ::bosdyn::api::spot::OpenDoorFeedbackResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::spot::OpenDoorFeedbackRequest, ::bosdyn::api::spot::OpenDoorFeedbackResponse>* streamer) {
                       return this->StreamedOpenDoorFeedback(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OpenDoorFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OpenDoorFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::OpenDoorFeedbackRequest* /*request*/, ::bosdyn::api::spot::OpenDoorFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOpenDoorFeedback(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::spot::OpenDoorFeedbackRequest,::bosdyn::api::spot::OpenDoorFeedbackResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_OpenDoor<WithStreamedUnaryMethod_OpenDoorFeedback<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_OpenDoor<WithStreamedUnaryMethod_OpenDoorFeedback<Service > > StreamedService;
};

}  // namespace spot
}  // namespace api
}  // namespace bosdyn


#endif  // GRPC_bosdyn_2fapi_2fspot_2fdoor_5fservice_2eproto__INCLUDED

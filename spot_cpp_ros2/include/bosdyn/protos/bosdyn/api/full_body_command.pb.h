// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/full_body_command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2ffull_5fbody_5fcommand_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2ffull_5fbody_5fcommand_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/basic_command.pb.h"
#include "bosdyn/api/payload_estimation.pb.h"
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2ffull_5fbody_5fcommand_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2ffull_5fbody_5fcommand_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2ffull_5fbody_5fcommand_2eproto;
namespace bosdyn {
namespace api {
class FullBodyCommand;
struct FullBodyCommandDefaultTypeInternal;
extern FullBodyCommandDefaultTypeInternal _FullBodyCommand_default_instance_;
class FullBodyCommand_Feedback;
struct FullBodyCommand_FeedbackDefaultTypeInternal;
extern FullBodyCommand_FeedbackDefaultTypeInternal _FullBodyCommand_Feedback_default_instance_;
class FullBodyCommand_Request;
struct FullBodyCommand_RequestDefaultTypeInternal;
extern FullBodyCommand_RequestDefaultTypeInternal _FullBodyCommand_Request_default_instance_;
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::FullBodyCommand* Arena::CreateMaybeMessage<::bosdyn::api::FullBodyCommand>(Arena*);
template<> ::bosdyn::api::FullBodyCommand_Feedback* Arena::CreateMaybeMessage<::bosdyn::api::FullBodyCommand_Feedback>(Arena*);
template<> ::bosdyn::api::FullBodyCommand_Request* Arena::CreateMaybeMessage<::bosdyn::api::FullBodyCommand_Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {

// ===================================================================

class FullBodyCommand_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.FullBodyCommand.Request) */ {
 public:
  inline FullBodyCommand_Request() : FullBodyCommand_Request(nullptr) {}
  ~FullBodyCommand_Request() override;
  explicit PROTOBUF_CONSTEXPR FullBodyCommand_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FullBodyCommand_Request(const FullBodyCommand_Request& from);
  FullBodyCommand_Request(FullBodyCommand_Request&& from) noexcept
    : FullBodyCommand_Request() {
    *this = ::std::move(from);
  }

  inline FullBodyCommand_Request& operator=(const FullBodyCommand_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline FullBodyCommand_Request& operator=(FullBodyCommand_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FullBodyCommand_Request& default_instance() {
    return *internal_default_instance();
  }
  enum CommandCase {
    kStopRequest = 1,
    kFreezeRequest = 2,
    kSelfrightRequest = 3,
    kSafePowerOffRequest = 4,
    kBatteryChangePoseRequest = 5,
    kPayloadEstimationRequest = 6,
    kConstrainedManipulationRequest = 7,
    COMMAND_NOT_SET = 0,
  };

  static inline const FullBodyCommand_Request* internal_default_instance() {
    return reinterpret_cast<const FullBodyCommand_Request*>(
               &_FullBodyCommand_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FullBodyCommand_Request& a, FullBodyCommand_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(FullBodyCommand_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FullBodyCommand_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FullBodyCommand_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FullBodyCommand_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FullBodyCommand_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FullBodyCommand_Request& from) {
    FullBodyCommand_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FullBodyCommand_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.FullBodyCommand.Request";
  }
  protected:
  explicit FullBodyCommand_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 100,
    kStopRequestFieldNumber = 1,
    kFreezeRequestFieldNumber = 2,
    kSelfrightRequestFieldNumber = 3,
    kSafePowerOffRequestFieldNumber = 4,
    kBatteryChangePoseRequestFieldNumber = 5,
    kPayloadEstimationRequestFieldNumber = 6,
    kConstrainedManipulationRequestFieldNumber = 7,
  };
  // .google.protobuf.Any params = 100;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::PROTOBUF_NAMESPACE_ID::Any& params() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_params();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_params();
  void set_allocated_params(::PROTOBUF_NAMESPACE_ID::Any* params);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_params() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::PROTOBUF_NAMESPACE_ID::Any* params);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_params();

  // .bosdyn.api.StopCommand.Request stop_request = 1;
  bool has_stop_request() const;
  private:
  bool _internal_has_stop_request() const;
  public:
  void clear_stop_request();
  const ::bosdyn::api::StopCommand_Request& stop_request() const;
  PROTOBUF_NODISCARD ::bosdyn::api::StopCommand_Request* release_stop_request();
  ::bosdyn::api::StopCommand_Request* mutable_stop_request();
  void set_allocated_stop_request(::bosdyn::api::StopCommand_Request* stop_request);
  private:
  const ::bosdyn::api::StopCommand_Request& _internal_stop_request() const;
  ::bosdyn::api::StopCommand_Request* _internal_mutable_stop_request();
  public:
  void unsafe_arena_set_allocated_stop_request(
      ::bosdyn::api::StopCommand_Request* stop_request);
  ::bosdyn::api::StopCommand_Request* unsafe_arena_release_stop_request();

  // .bosdyn.api.FreezeCommand.Request freeze_request = 2;
  bool has_freeze_request() const;
  private:
  bool _internal_has_freeze_request() const;
  public:
  void clear_freeze_request();
  const ::bosdyn::api::FreezeCommand_Request& freeze_request() const;
  PROTOBUF_NODISCARD ::bosdyn::api::FreezeCommand_Request* release_freeze_request();
  ::bosdyn::api::FreezeCommand_Request* mutable_freeze_request();
  void set_allocated_freeze_request(::bosdyn::api::FreezeCommand_Request* freeze_request);
  private:
  const ::bosdyn::api::FreezeCommand_Request& _internal_freeze_request() const;
  ::bosdyn::api::FreezeCommand_Request* _internal_mutable_freeze_request();
  public:
  void unsafe_arena_set_allocated_freeze_request(
      ::bosdyn::api::FreezeCommand_Request* freeze_request);
  ::bosdyn::api::FreezeCommand_Request* unsafe_arena_release_freeze_request();

  // .bosdyn.api.SelfRightCommand.Request selfright_request = 3;
  bool has_selfright_request() const;
  private:
  bool _internal_has_selfright_request() const;
  public:
  void clear_selfright_request();
  const ::bosdyn::api::SelfRightCommand_Request& selfright_request() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SelfRightCommand_Request* release_selfright_request();
  ::bosdyn::api::SelfRightCommand_Request* mutable_selfright_request();
  void set_allocated_selfright_request(::bosdyn::api::SelfRightCommand_Request* selfright_request);
  private:
  const ::bosdyn::api::SelfRightCommand_Request& _internal_selfright_request() const;
  ::bosdyn::api::SelfRightCommand_Request* _internal_mutable_selfright_request();
  public:
  void unsafe_arena_set_allocated_selfright_request(
      ::bosdyn::api::SelfRightCommand_Request* selfright_request);
  ::bosdyn::api::SelfRightCommand_Request* unsafe_arena_release_selfright_request();

  // .bosdyn.api.SafePowerOffCommand.Request safe_power_off_request = 4;
  bool has_safe_power_off_request() const;
  private:
  bool _internal_has_safe_power_off_request() const;
  public:
  void clear_safe_power_off_request();
  const ::bosdyn::api::SafePowerOffCommand_Request& safe_power_off_request() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SafePowerOffCommand_Request* release_safe_power_off_request();
  ::bosdyn::api::SafePowerOffCommand_Request* mutable_safe_power_off_request();
  void set_allocated_safe_power_off_request(::bosdyn::api::SafePowerOffCommand_Request* safe_power_off_request);
  private:
  const ::bosdyn::api::SafePowerOffCommand_Request& _internal_safe_power_off_request() const;
  ::bosdyn::api::SafePowerOffCommand_Request* _internal_mutable_safe_power_off_request();
  public:
  void unsafe_arena_set_allocated_safe_power_off_request(
      ::bosdyn::api::SafePowerOffCommand_Request* safe_power_off_request);
  ::bosdyn::api::SafePowerOffCommand_Request* unsafe_arena_release_safe_power_off_request();

  // .bosdyn.api.BatteryChangePoseCommand.Request battery_change_pose_request = 5;
  bool has_battery_change_pose_request() const;
  private:
  bool _internal_has_battery_change_pose_request() const;
  public:
  void clear_battery_change_pose_request();
  const ::bosdyn::api::BatteryChangePoseCommand_Request& battery_change_pose_request() const;
  PROTOBUF_NODISCARD ::bosdyn::api::BatteryChangePoseCommand_Request* release_battery_change_pose_request();
  ::bosdyn::api::BatteryChangePoseCommand_Request* mutable_battery_change_pose_request();
  void set_allocated_battery_change_pose_request(::bosdyn::api::BatteryChangePoseCommand_Request* battery_change_pose_request);
  private:
  const ::bosdyn::api::BatteryChangePoseCommand_Request& _internal_battery_change_pose_request() const;
  ::bosdyn::api::BatteryChangePoseCommand_Request* _internal_mutable_battery_change_pose_request();
  public:
  void unsafe_arena_set_allocated_battery_change_pose_request(
      ::bosdyn::api::BatteryChangePoseCommand_Request* battery_change_pose_request);
  ::bosdyn::api::BatteryChangePoseCommand_Request* unsafe_arena_release_battery_change_pose_request();

  // .bosdyn.api.PayloadEstimationCommand.Request payload_estimation_request = 6;
  bool has_payload_estimation_request() const;
  private:
  bool _internal_has_payload_estimation_request() const;
  public:
  void clear_payload_estimation_request();
  const ::bosdyn::api::PayloadEstimationCommand_Request& payload_estimation_request() const;
  PROTOBUF_NODISCARD ::bosdyn::api::PayloadEstimationCommand_Request* release_payload_estimation_request();
  ::bosdyn::api::PayloadEstimationCommand_Request* mutable_payload_estimation_request();
  void set_allocated_payload_estimation_request(::bosdyn::api::PayloadEstimationCommand_Request* payload_estimation_request);
  private:
  const ::bosdyn::api::PayloadEstimationCommand_Request& _internal_payload_estimation_request() const;
  ::bosdyn::api::PayloadEstimationCommand_Request* _internal_mutable_payload_estimation_request();
  public:
  void unsafe_arena_set_allocated_payload_estimation_request(
      ::bosdyn::api::PayloadEstimationCommand_Request* payload_estimation_request);
  ::bosdyn::api::PayloadEstimationCommand_Request* unsafe_arena_release_payload_estimation_request();

  // .bosdyn.api.ConstrainedManipulationCommand.Request constrained_manipulation_request = 7;
  bool has_constrained_manipulation_request() const;
  private:
  bool _internal_has_constrained_manipulation_request() const;
  public:
  void clear_constrained_manipulation_request();
  const ::bosdyn::api::ConstrainedManipulationCommand_Request& constrained_manipulation_request() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ConstrainedManipulationCommand_Request* release_constrained_manipulation_request();
  ::bosdyn::api::ConstrainedManipulationCommand_Request* mutable_constrained_manipulation_request();
  void set_allocated_constrained_manipulation_request(::bosdyn::api::ConstrainedManipulationCommand_Request* constrained_manipulation_request);
  private:
  const ::bosdyn::api::ConstrainedManipulationCommand_Request& _internal_constrained_manipulation_request() const;
  ::bosdyn::api::ConstrainedManipulationCommand_Request* _internal_mutable_constrained_manipulation_request();
  public:
  void unsafe_arena_set_allocated_constrained_manipulation_request(
      ::bosdyn::api::ConstrainedManipulationCommand_Request* constrained_manipulation_request);
  ::bosdyn::api::ConstrainedManipulationCommand_Request* unsafe_arena_release_constrained_manipulation_request();

  void clear_command();
  CommandCase command_case() const;
  // @@protoc_insertion_point(class_scope:bosdyn.api.FullBodyCommand.Request)
 private:
  class _Internal;
  void set_has_stop_request();
  void set_has_freeze_request();
  void set_has_selfright_request();
  void set_has_safe_power_off_request();
  void set_has_battery_change_pose_request();
  void set_has_payload_estimation_request();
  void set_has_constrained_manipulation_request();

  inline bool has_command() const;
  inline void clear_has_command();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Any* params_;
    union CommandUnion {
      constexpr CommandUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::bosdyn::api::StopCommand_Request* stop_request_;
      ::bosdyn::api::FreezeCommand_Request* freeze_request_;
      ::bosdyn::api::SelfRightCommand_Request* selfright_request_;
      ::bosdyn::api::SafePowerOffCommand_Request* safe_power_off_request_;
      ::bosdyn::api::BatteryChangePoseCommand_Request* battery_change_pose_request_;
      ::bosdyn::api::PayloadEstimationCommand_Request* payload_estimation_request_;
      ::bosdyn::api::ConstrainedManipulationCommand_Request* constrained_manipulation_request_;
    } command_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2ffull_5fbody_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class FullBodyCommand_Feedback final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.FullBodyCommand.Feedback) */ {
 public:
  inline FullBodyCommand_Feedback() : FullBodyCommand_Feedback(nullptr) {}
  ~FullBodyCommand_Feedback() override;
  explicit PROTOBUF_CONSTEXPR FullBodyCommand_Feedback(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FullBodyCommand_Feedback(const FullBodyCommand_Feedback& from);
  FullBodyCommand_Feedback(FullBodyCommand_Feedback&& from) noexcept
    : FullBodyCommand_Feedback() {
    *this = ::std::move(from);
  }

  inline FullBodyCommand_Feedback& operator=(const FullBodyCommand_Feedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline FullBodyCommand_Feedback& operator=(FullBodyCommand_Feedback&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FullBodyCommand_Feedback& default_instance() {
    return *internal_default_instance();
  }
  enum FeedbackCase {
    kStopFeedback = 1,
    kFreezeFeedback = 2,
    kSelfrightFeedback = 3,
    kSafePowerOffFeedback = 4,
    kBatteryChangePoseFeedback = 5,
    kPayloadEstimationFeedback = 6,
    kConstrainedManipulationFeedback = 7,
    FEEDBACK_NOT_SET = 0,
  };

  static inline const FullBodyCommand_Feedback* internal_default_instance() {
    return reinterpret_cast<const FullBodyCommand_Feedback*>(
               &_FullBodyCommand_Feedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FullBodyCommand_Feedback& a, FullBodyCommand_Feedback& b) {
    a.Swap(&b);
  }
  inline void Swap(FullBodyCommand_Feedback* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FullBodyCommand_Feedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FullBodyCommand_Feedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FullBodyCommand_Feedback>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FullBodyCommand_Feedback& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FullBodyCommand_Feedback& from) {
    FullBodyCommand_Feedback::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FullBodyCommand_Feedback* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.FullBodyCommand.Feedback";
  }
  protected:
  explicit FullBodyCommand_Feedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 100,
    kStopFeedbackFieldNumber = 1,
    kFreezeFeedbackFieldNumber = 2,
    kSelfrightFeedbackFieldNumber = 3,
    kSafePowerOffFeedbackFieldNumber = 4,
    kBatteryChangePoseFeedbackFieldNumber = 5,
    kPayloadEstimationFeedbackFieldNumber = 6,
    kConstrainedManipulationFeedbackFieldNumber = 7,
  };
  // .bosdyn.api.RobotCommandFeedbackStatus.Status status = 100;
  void clear_status();
  ::bosdyn::api::RobotCommandFeedbackStatus_Status status() const;
  void set_status(::bosdyn::api::RobotCommandFeedbackStatus_Status value);
  private:
  ::bosdyn::api::RobotCommandFeedbackStatus_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::RobotCommandFeedbackStatus_Status value);
  public:

  // .bosdyn.api.StopCommand.Feedback stop_feedback = 1;
  bool has_stop_feedback() const;
  private:
  bool _internal_has_stop_feedback() const;
  public:
  void clear_stop_feedback();
  const ::bosdyn::api::StopCommand_Feedback& stop_feedback() const;
  PROTOBUF_NODISCARD ::bosdyn::api::StopCommand_Feedback* release_stop_feedback();
  ::bosdyn::api::StopCommand_Feedback* mutable_stop_feedback();
  void set_allocated_stop_feedback(::bosdyn::api::StopCommand_Feedback* stop_feedback);
  private:
  const ::bosdyn::api::StopCommand_Feedback& _internal_stop_feedback() const;
  ::bosdyn::api::StopCommand_Feedback* _internal_mutable_stop_feedback();
  public:
  void unsafe_arena_set_allocated_stop_feedback(
      ::bosdyn::api::StopCommand_Feedback* stop_feedback);
  ::bosdyn::api::StopCommand_Feedback* unsafe_arena_release_stop_feedback();

  // .bosdyn.api.FreezeCommand.Feedback freeze_feedback = 2;
  bool has_freeze_feedback() const;
  private:
  bool _internal_has_freeze_feedback() const;
  public:
  void clear_freeze_feedback();
  const ::bosdyn::api::FreezeCommand_Feedback& freeze_feedback() const;
  PROTOBUF_NODISCARD ::bosdyn::api::FreezeCommand_Feedback* release_freeze_feedback();
  ::bosdyn::api::FreezeCommand_Feedback* mutable_freeze_feedback();
  void set_allocated_freeze_feedback(::bosdyn::api::FreezeCommand_Feedback* freeze_feedback);
  private:
  const ::bosdyn::api::FreezeCommand_Feedback& _internal_freeze_feedback() const;
  ::bosdyn::api::FreezeCommand_Feedback* _internal_mutable_freeze_feedback();
  public:
  void unsafe_arena_set_allocated_freeze_feedback(
      ::bosdyn::api::FreezeCommand_Feedback* freeze_feedback);
  ::bosdyn::api::FreezeCommand_Feedback* unsafe_arena_release_freeze_feedback();

  // .bosdyn.api.SelfRightCommand.Feedback selfright_feedback = 3;
  bool has_selfright_feedback() const;
  private:
  bool _internal_has_selfright_feedback() const;
  public:
  void clear_selfright_feedback();
  const ::bosdyn::api::SelfRightCommand_Feedback& selfright_feedback() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SelfRightCommand_Feedback* release_selfright_feedback();
  ::bosdyn::api::SelfRightCommand_Feedback* mutable_selfright_feedback();
  void set_allocated_selfright_feedback(::bosdyn::api::SelfRightCommand_Feedback* selfright_feedback);
  private:
  const ::bosdyn::api::SelfRightCommand_Feedback& _internal_selfright_feedback() const;
  ::bosdyn::api::SelfRightCommand_Feedback* _internal_mutable_selfright_feedback();
  public:
  void unsafe_arena_set_allocated_selfright_feedback(
      ::bosdyn::api::SelfRightCommand_Feedback* selfright_feedback);
  ::bosdyn::api::SelfRightCommand_Feedback* unsafe_arena_release_selfright_feedback();

  // .bosdyn.api.SafePowerOffCommand.Feedback safe_power_off_feedback = 4;
  bool has_safe_power_off_feedback() const;
  private:
  bool _internal_has_safe_power_off_feedback() const;
  public:
  void clear_safe_power_off_feedback();
  const ::bosdyn::api::SafePowerOffCommand_Feedback& safe_power_off_feedback() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SafePowerOffCommand_Feedback* release_safe_power_off_feedback();
  ::bosdyn::api::SafePowerOffCommand_Feedback* mutable_safe_power_off_feedback();
  void set_allocated_safe_power_off_feedback(::bosdyn::api::SafePowerOffCommand_Feedback* safe_power_off_feedback);
  private:
  const ::bosdyn::api::SafePowerOffCommand_Feedback& _internal_safe_power_off_feedback() const;
  ::bosdyn::api::SafePowerOffCommand_Feedback* _internal_mutable_safe_power_off_feedback();
  public:
  void unsafe_arena_set_allocated_safe_power_off_feedback(
      ::bosdyn::api::SafePowerOffCommand_Feedback* safe_power_off_feedback);
  ::bosdyn::api::SafePowerOffCommand_Feedback* unsafe_arena_release_safe_power_off_feedback();

  // .bosdyn.api.BatteryChangePoseCommand.Feedback battery_change_pose_feedback = 5;
  bool has_battery_change_pose_feedback() const;
  private:
  bool _internal_has_battery_change_pose_feedback() const;
  public:
  void clear_battery_change_pose_feedback();
  const ::bosdyn::api::BatteryChangePoseCommand_Feedback& battery_change_pose_feedback() const;
  PROTOBUF_NODISCARD ::bosdyn::api::BatteryChangePoseCommand_Feedback* release_battery_change_pose_feedback();
  ::bosdyn::api::BatteryChangePoseCommand_Feedback* mutable_battery_change_pose_feedback();
  void set_allocated_battery_change_pose_feedback(::bosdyn::api::BatteryChangePoseCommand_Feedback* battery_change_pose_feedback);
  private:
  const ::bosdyn::api::BatteryChangePoseCommand_Feedback& _internal_battery_change_pose_feedback() const;
  ::bosdyn::api::BatteryChangePoseCommand_Feedback* _internal_mutable_battery_change_pose_feedback();
  public:
  void unsafe_arena_set_allocated_battery_change_pose_feedback(
      ::bosdyn::api::BatteryChangePoseCommand_Feedback* battery_change_pose_feedback);
  ::bosdyn::api::BatteryChangePoseCommand_Feedback* unsafe_arena_release_battery_change_pose_feedback();

  // .bosdyn.api.PayloadEstimationCommand.Feedback payload_estimation_feedback = 6;
  bool has_payload_estimation_feedback() const;
  private:
  bool _internal_has_payload_estimation_feedback() const;
  public:
  void clear_payload_estimation_feedback();
  const ::bosdyn::api::PayloadEstimationCommand_Feedback& payload_estimation_feedback() const;
  PROTOBUF_NODISCARD ::bosdyn::api::PayloadEstimationCommand_Feedback* release_payload_estimation_feedback();
  ::bosdyn::api::PayloadEstimationCommand_Feedback* mutable_payload_estimation_feedback();
  void set_allocated_payload_estimation_feedback(::bosdyn::api::PayloadEstimationCommand_Feedback* payload_estimation_feedback);
  private:
  const ::bosdyn::api::PayloadEstimationCommand_Feedback& _internal_payload_estimation_feedback() const;
  ::bosdyn::api::PayloadEstimationCommand_Feedback* _internal_mutable_payload_estimation_feedback();
  public:
  void unsafe_arena_set_allocated_payload_estimation_feedback(
      ::bosdyn::api::PayloadEstimationCommand_Feedback* payload_estimation_feedback);
  ::bosdyn::api::PayloadEstimationCommand_Feedback* unsafe_arena_release_payload_estimation_feedback();

  // .bosdyn.api.ConstrainedManipulationCommand.Feedback constrained_manipulation_feedback = 7;
  bool has_constrained_manipulation_feedback() const;
  private:
  bool _internal_has_constrained_manipulation_feedback() const;
  public:
  void clear_constrained_manipulation_feedback();
  const ::bosdyn::api::ConstrainedManipulationCommand_Feedback& constrained_manipulation_feedback() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ConstrainedManipulationCommand_Feedback* release_constrained_manipulation_feedback();
  ::bosdyn::api::ConstrainedManipulationCommand_Feedback* mutable_constrained_manipulation_feedback();
  void set_allocated_constrained_manipulation_feedback(::bosdyn::api::ConstrainedManipulationCommand_Feedback* constrained_manipulation_feedback);
  private:
  const ::bosdyn::api::ConstrainedManipulationCommand_Feedback& _internal_constrained_manipulation_feedback() const;
  ::bosdyn::api::ConstrainedManipulationCommand_Feedback* _internal_mutable_constrained_manipulation_feedback();
  public:
  void unsafe_arena_set_allocated_constrained_manipulation_feedback(
      ::bosdyn::api::ConstrainedManipulationCommand_Feedback* constrained_manipulation_feedback);
  ::bosdyn::api::ConstrainedManipulationCommand_Feedback* unsafe_arena_release_constrained_manipulation_feedback();

  void clear_feedback();
  FeedbackCase feedback_case() const;
  // @@protoc_insertion_point(class_scope:bosdyn.api.FullBodyCommand.Feedback)
 private:
  class _Internal;
  void set_has_stop_feedback();
  void set_has_freeze_feedback();
  void set_has_selfright_feedback();
  void set_has_safe_power_off_feedback();
  void set_has_battery_change_pose_feedback();
  void set_has_payload_estimation_feedback();
  void set_has_constrained_manipulation_feedback();

  inline bool has_feedback() const;
  inline void clear_has_feedback();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int status_;
    union FeedbackUnion {
      constexpr FeedbackUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::bosdyn::api::StopCommand_Feedback* stop_feedback_;
      ::bosdyn::api::FreezeCommand_Feedback* freeze_feedback_;
      ::bosdyn::api::SelfRightCommand_Feedback* selfright_feedback_;
      ::bosdyn::api::SafePowerOffCommand_Feedback* safe_power_off_feedback_;
      ::bosdyn::api::BatteryChangePoseCommand_Feedback* battery_change_pose_feedback_;
      ::bosdyn::api::PayloadEstimationCommand_Feedback* payload_estimation_feedback_;
      ::bosdyn::api::ConstrainedManipulationCommand_Feedback* constrained_manipulation_feedback_;
    } feedback_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2ffull_5fbody_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class FullBodyCommand final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:bosdyn.api.FullBodyCommand) */ {
 public:
  inline FullBodyCommand() : FullBodyCommand(nullptr) {}
  explicit PROTOBUF_CONSTEXPR FullBodyCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FullBodyCommand(const FullBodyCommand& from);
  FullBodyCommand(FullBodyCommand&& from) noexcept
    : FullBodyCommand() {
    *this = ::std::move(from);
  }

  inline FullBodyCommand& operator=(const FullBodyCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline FullBodyCommand& operator=(FullBodyCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FullBodyCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const FullBodyCommand* internal_default_instance() {
    return reinterpret_cast<const FullBodyCommand*>(
               &_FullBodyCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FullBodyCommand& a, FullBodyCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(FullBodyCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FullBodyCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FullBodyCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FullBodyCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const FullBodyCommand& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const FullBodyCommand& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.FullBodyCommand";
  }
  protected:
  explicit FullBodyCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FullBodyCommand_Request Request;
  typedef FullBodyCommand_Feedback Feedback;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.FullBodyCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_bosdyn_2fapi_2ffull_5fbody_5fcommand_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FullBodyCommand_Request

// .bosdyn.api.StopCommand.Request stop_request = 1;
inline bool FullBodyCommand_Request::_internal_has_stop_request() const {
  return command_case() == kStopRequest;
}
inline bool FullBodyCommand_Request::has_stop_request() const {
  return _internal_has_stop_request();
}
inline void FullBodyCommand_Request::set_has_stop_request() {
  _impl_._oneof_case_[0] = kStopRequest;
}
inline ::bosdyn::api::StopCommand_Request* FullBodyCommand_Request::release_stop_request() {
  // @@protoc_insertion_point(field_release:bosdyn.api.FullBodyCommand.Request.stop_request)
  if (_internal_has_stop_request()) {
    clear_has_command();
    ::bosdyn::api::StopCommand_Request* temp = _impl_.command_.stop_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.stop_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::StopCommand_Request& FullBodyCommand_Request::_internal_stop_request() const {
  return _internal_has_stop_request()
      ? *_impl_.command_.stop_request_
      : reinterpret_cast< ::bosdyn::api::StopCommand_Request&>(::bosdyn::api::_StopCommand_Request_default_instance_);
}
inline const ::bosdyn::api::StopCommand_Request& FullBodyCommand_Request::stop_request() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.FullBodyCommand.Request.stop_request)
  return _internal_stop_request();
}
inline ::bosdyn::api::StopCommand_Request* FullBodyCommand_Request::unsafe_arena_release_stop_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.FullBodyCommand.Request.stop_request)
  if (_internal_has_stop_request()) {
    clear_has_command();
    ::bosdyn::api::StopCommand_Request* temp = _impl_.command_.stop_request_;
    _impl_.command_.stop_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FullBodyCommand_Request::unsafe_arena_set_allocated_stop_request(::bosdyn::api::StopCommand_Request* stop_request) {
  clear_command();
  if (stop_request) {
    set_has_stop_request();
    _impl_.command_.stop_request_ = stop_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.FullBodyCommand.Request.stop_request)
}
inline ::bosdyn::api::StopCommand_Request* FullBodyCommand_Request::_internal_mutable_stop_request() {
  if (!_internal_has_stop_request()) {
    clear_command();
    set_has_stop_request();
    _impl_.command_.stop_request_ = CreateMaybeMessage< ::bosdyn::api::StopCommand_Request >(GetArenaForAllocation());
  }
  return _impl_.command_.stop_request_;
}
inline ::bosdyn::api::StopCommand_Request* FullBodyCommand_Request::mutable_stop_request() {
  ::bosdyn::api::StopCommand_Request* _msg = _internal_mutable_stop_request();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.FullBodyCommand.Request.stop_request)
  return _msg;
}

// .bosdyn.api.FreezeCommand.Request freeze_request = 2;
inline bool FullBodyCommand_Request::_internal_has_freeze_request() const {
  return command_case() == kFreezeRequest;
}
inline bool FullBodyCommand_Request::has_freeze_request() const {
  return _internal_has_freeze_request();
}
inline void FullBodyCommand_Request::set_has_freeze_request() {
  _impl_._oneof_case_[0] = kFreezeRequest;
}
inline ::bosdyn::api::FreezeCommand_Request* FullBodyCommand_Request::release_freeze_request() {
  // @@protoc_insertion_point(field_release:bosdyn.api.FullBodyCommand.Request.freeze_request)
  if (_internal_has_freeze_request()) {
    clear_has_command();
    ::bosdyn::api::FreezeCommand_Request* temp = _impl_.command_.freeze_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.freeze_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::FreezeCommand_Request& FullBodyCommand_Request::_internal_freeze_request() const {
  return _internal_has_freeze_request()
      ? *_impl_.command_.freeze_request_
      : reinterpret_cast< ::bosdyn::api::FreezeCommand_Request&>(::bosdyn::api::_FreezeCommand_Request_default_instance_);
}
inline const ::bosdyn::api::FreezeCommand_Request& FullBodyCommand_Request::freeze_request() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.FullBodyCommand.Request.freeze_request)
  return _internal_freeze_request();
}
inline ::bosdyn::api::FreezeCommand_Request* FullBodyCommand_Request::unsafe_arena_release_freeze_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.FullBodyCommand.Request.freeze_request)
  if (_internal_has_freeze_request()) {
    clear_has_command();
    ::bosdyn::api::FreezeCommand_Request* temp = _impl_.command_.freeze_request_;
    _impl_.command_.freeze_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FullBodyCommand_Request::unsafe_arena_set_allocated_freeze_request(::bosdyn::api::FreezeCommand_Request* freeze_request) {
  clear_command();
  if (freeze_request) {
    set_has_freeze_request();
    _impl_.command_.freeze_request_ = freeze_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.FullBodyCommand.Request.freeze_request)
}
inline ::bosdyn::api::FreezeCommand_Request* FullBodyCommand_Request::_internal_mutable_freeze_request() {
  if (!_internal_has_freeze_request()) {
    clear_command();
    set_has_freeze_request();
    _impl_.command_.freeze_request_ = CreateMaybeMessage< ::bosdyn::api::FreezeCommand_Request >(GetArenaForAllocation());
  }
  return _impl_.command_.freeze_request_;
}
inline ::bosdyn::api::FreezeCommand_Request* FullBodyCommand_Request::mutable_freeze_request() {
  ::bosdyn::api::FreezeCommand_Request* _msg = _internal_mutable_freeze_request();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.FullBodyCommand.Request.freeze_request)
  return _msg;
}

// .bosdyn.api.SelfRightCommand.Request selfright_request = 3;
inline bool FullBodyCommand_Request::_internal_has_selfright_request() const {
  return command_case() == kSelfrightRequest;
}
inline bool FullBodyCommand_Request::has_selfright_request() const {
  return _internal_has_selfright_request();
}
inline void FullBodyCommand_Request::set_has_selfright_request() {
  _impl_._oneof_case_[0] = kSelfrightRequest;
}
inline ::bosdyn::api::SelfRightCommand_Request* FullBodyCommand_Request::release_selfright_request() {
  // @@protoc_insertion_point(field_release:bosdyn.api.FullBodyCommand.Request.selfright_request)
  if (_internal_has_selfright_request()) {
    clear_has_command();
    ::bosdyn::api::SelfRightCommand_Request* temp = _impl_.command_.selfright_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.selfright_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::SelfRightCommand_Request& FullBodyCommand_Request::_internal_selfright_request() const {
  return _internal_has_selfright_request()
      ? *_impl_.command_.selfright_request_
      : reinterpret_cast< ::bosdyn::api::SelfRightCommand_Request&>(::bosdyn::api::_SelfRightCommand_Request_default_instance_);
}
inline const ::bosdyn::api::SelfRightCommand_Request& FullBodyCommand_Request::selfright_request() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.FullBodyCommand.Request.selfright_request)
  return _internal_selfright_request();
}
inline ::bosdyn::api::SelfRightCommand_Request* FullBodyCommand_Request::unsafe_arena_release_selfright_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.FullBodyCommand.Request.selfright_request)
  if (_internal_has_selfright_request()) {
    clear_has_command();
    ::bosdyn::api::SelfRightCommand_Request* temp = _impl_.command_.selfright_request_;
    _impl_.command_.selfright_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FullBodyCommand_Request::unsafe_arena_set_allocated_selfright_request(::bosdyn::api::SelfRightCommand_Request* selfright_request) {
  clear_command();
  if (selfright_request) {
    set_has_selfright_request();
    _impl_.command_.selfright_request_ = selfright_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.FullBodyCommand.Request.selfright_request)
}
inline ::bosdyn::api::SelfRightCommand_Request* FullBodyCommand_Request::_internal_mutable_selfright_request() {
  if (!_internal_has_selfright_request()) {
    clear_command();
    set_has_selfright_request();
    _impl_.command_.selfright_request_ = CreateMaybeMessage< ::bosdyn::api::SelfRightCommand_Request >(GetArenaForAllocation());
  }
  return _impl_.command_.selfright_request_;
}
inline ::bosdyn::api::SelfRightCommand_Request* FullBodyCommand_Request::mutable_selfright_request() {
  ::bosdyn::api::SelfRightCommand_Request* _msg = _internal_mutable_selfright_request();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.FullBodyCommand.Request.selfright_request)
  return _msg;
}

// .bosdyn.api.SafePowerOffCommand.Request safe_power_off_request = 4;
inline bool FullBodyCommand_Request::_internal_has_safe_power_off_request() const {
  return command_case() == kSafePowerOffRequest;
}
inline bool FullBodyCommand_Request::has_safe_power_off_request() const {
  return _internal_has_safe_power_off_request();
}
inline void FullBodyCommand_Request::set_has_safe_power_off_request() {
  _impl_._oneof_case_[0] = kSafePowerOffRequest;
}
inline ::bosdyn::api::SafePowerOffCommand_Request* FullBodyCommand_Request::release_safe_power_off_request() {
  // @@protoc_insertion_point(field_release:bosdyn.api.FullBodyCommand.Request.safe_power_off_request)
  if (_internal_has_safe_power_off_request()) {
    clear_has_command();
    ::bosdyn::api::SafePowerOffCommand_Request* temp = _impl_.command_.safe_power_off_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.safe_power_off_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::SafePowerOffCommand_Request& FullBodyCommand_Request::_internal_safe_power_off_request() const {
  return _internal_has_safe_power_off_request()
      ? *_impl_.command_.safe_power_off_request_
      : reinterpret_cast< ::bosdyn::api::SafePowerOffCommand_Request&>(::bosdyn::api::_SafePowerOffCommand_Request_default_instance_);
}
inline const ::bosdyn::api::SafePowerOffCommand_Request& FullBodyCommand_Request::safe_power_off_request() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.FullBodyCommand.Request.safe_power_off_request)
  return _internal_safe_power_off_request();
}
inline ::bosdyn::api::SafePowerOffCommand_Request* FullBodyCommand_Request::unsafe_arena_release_safe_power_off_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.FullBodyCommand.Request.safe_power_off_request)
  if (_internal_has_safe_power_off_request()) {
    clear_has_command();
    ::bosdyn::api::SafePowerOffCommand_Request* temp = _impl_.command_.safe_power_off_request_;
    _impl_.command_.safe_power_off_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FullBodyCommand_Request::unsafe_arena_set_allocated_safe_power_off_request(::bosdyn::api::SafePowerOffCommand_Request* safe_power_off_request) {
  clear_command();
  if (safe_power_off_request) {
    set_has_safe_power_off_request();
    _impl_.command_.safe_power_off_request_ = safe_power_off_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.FullBodyCommand.Request.safe_power_off_request)
}
inline ::bosdyn::api::SafePowerOffCommand_Request* FullBodyCommand_Request::_internal_mutable_safe_power_off_request() {
  if (!_internal_has_safe_power_off_request()) {
    clear_command();
    set_has_safe_power_off_request();
    _impl_.command_.safe_power_off_request_ = CreateMaybeMessage< ::bosdyn::api::SafePowerOffCommand_Request >(GetArenaForAllocation());
  }
  return _impl_.command_.safe_power_off_request_;
}
inline ::bosdyn::api::SafePowerOffCommand_Request* FullBodyCommand_Request::mutable_safe_power_off_request() {
  ::bosdyn::api::SafePowerOffCommand_Request* _msg = _internal_mutable_safe_power_off_request();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.FullBodyCommand.Request.safe_power_off_request)
  return _msg;
}

// .bosdyn.api.BatteryChangePoseCommand.Request battery_change_pose_request = 5;
inline bool FullBodyCommand_Request::_internal_has_battery_change_pose_request() const {
  return command_case() == kBatteryChangePoseRequest;
}
inline bool FullBodyCommand_Request::has_battery_change_pose_request() const {
  return _internal_has_battery_change_pose_request();
}
inline void FullBodyCommand_Request::set_has_battery_change_pose_request() {
  _impl_._oneof_case_[0] = kBatteryChangePoseRequest;
}
inline ::bosdyn::api::BatteryChangePoseCommand_Request* FullBodyCommand_Request::release_battery_change_pose_request() {
  // @@protoc_insertion_point(field_release:bosdyn.api.FullBodyCommand.Request.battery_change_pose_request)
  if (_internal_has_battery_change_pose_request()) {
    clear_has_command();
    ::bosdyn::api::BatteryChangePoseCommand_Request* temp = _impl_.command_.battery_change_pose_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.battery_change_pose_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::BatteryChangePoseCommand_Request& FullBodyCommand_Request::_internal_battery_change_pose_request() const {
  return _internal_has_battery_change_pose_request()
      ? *_impl_.command_.battery_change_pose_request_
      : reinterpret_cast< ::bosdyn::api::BatteryChangePoseCommand_Request&>(::bosdyn::api::_BatteryChangePoseCommand_Request_default_instance_);
}
inline const ::bosdyn::api::BatteryChangePoseCommand_Request& FullBodyCommand_Request::battery_change_pose_request() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.FullBodyCommand.Request.battery_change_pose_request)
  return _internal_battery_change_pose_request();
}
inline ::bosdyn::api::BatteryChangePoseCommand_Request* FullBodyCommand_Request::unsafe_arena_release_battery_change_pose_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.FullBodyCommand.Request.battery_change_pose_request)
  if (_internal_has_battery_change_pose_request()) {
    clear_has_command();
    ::bosdyn::api::BatteryChangePoseCommand_Request* temp = _impl_.command_.battery_change_pose_request_;
    _impl_.command_.battery_change_pose_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FullBodyCommand_Request::unsafe_arena_set_allocated_battery_change_pose_request(::bosdyn::api::BatteryChangePoseCommand_Request* battery_change_pose_request) {
  clear_command();
  if (battery_change_pose_request) {
    set_has_battery_change_pose_request();
    _impl_.command_.battery_change_pose_request_ = battery_change_pose_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.FullBodyCommand.Request.battery_change_pose_request)
}
inline ::bosdyn::api::BatteryChangePoseCommand_Request* FullBodyCommand_Request::_internal_mutable_battery_change_pose_request() {
  if (!_internal_has_battery_change_pose_request()) {
    clear_command();
    set_has_battery_change_pose_request();
    _impl_.command_.battery_change_pose_request_ = CreateMaybeMessage< ::bosdyn::api::BatteryChangePoseCommand_Request >(GetArenaForAllocation());
  }
  return _impl_.command_.battery_change_pose_request_;
}
inline ::bosdyn::api::BatteryChangePoseCommand_Request* FullBodyCommand_Request::mutable_battery_change_pose_request() {
  ::bosdyn::api::BatteryChangePoseCommand_Request* _msg = _internal_mutable_battery_change_pose_request();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.FullBodyCommand.Request.battery_change_pose_request)
  return _msg;
}

// .bosdyn.api.PayloadEstimationCommand.Request payload_estimation_request = 6;
inline bool FullBodyCommand_Request::_internal_has_payload_estimation_request() const {
  return command_case() == kPayloadEstimationRequest;
}
inline bool FullBodyCommand_Request::has_payload_estimation_request() const {
  return _internal_has_payload_estimation_request();
}
inline void FullBodyCommand_Request::set_has_payload_estimation_request() {
  _impl_._oneof_case_[0] = kPayloadEstimationRequest;
}
inline ::bosdyn::api::PayloadEstimationCommand_Request* FullBodyCommand_Request::release_payload_estimation_request() {
  // @@protoc_insertion_point(field_release:bosdyn.api.FullBodyCommand.Request.payload_estimation_request)
  if (_internal_has_payload_estimation_request()) {
    clear_has_command();
    ::bosdyn::api::PayloadEstimationCommand_Request* temp = _impl_.command_.payload_estimation_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.payload_estimation_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::PayloadEstimationCommand_Request& FullBodyCommand_Request::_internal_payload_estimation_request() const {
  return _internal_has_payload_estimation_request()
      ? *_impl_.command_.payload_estimation_request_
      : reinterpret_cast< ::bosdyn::api::PayloadEstimationCommand_Request&>(::bosdyn::api::_PayloadEstimationCommand_Request_default_instance_);
}
inline const ::bosdyn::api::PayloadEstimationCommand_Request& FullBodyCommand_Request::payload_estimation_request() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.FullBodyCommand.Request.payload_estimation_request)
  return _internal_payload_estimation_request();
}
inline ::bosdyn::api::PayloadEstimationCommand_Request* FullBodyCommand_Request::unsafe_arena_release_payload_estimation_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.FullBodyCommand.Request.payload_estimation_request)
  if (_internal_has_payload_estimation_request()) {
    clear_has_command();
    ::bosdyn::api::PayloadEstimationCommand_Request* temp = _impl_.command_.payload_estimation_request_;
    _impl_.command_.payload_estimation_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FullBodyCommand_Request::unsafe_arena_set_allocated_payload_estimation_request(::bosdyn::api::PayloadEstimationCommand_Request* payload_estimation_request) {
  clear_command();
  if (payload_estimation_request) {
    set_has_payload_estimation_request();
    _impl_.command_.payload_estimation_request_ = payload_estimation_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.FullBodyCommand.Request.payload_estimation_request)
}
inline ::bosdyn::api::PayloadEstimationCommand_Request* FullBodyCommand_Request::_internal_mutable_payload_estimation_request() {
  if (!_internal_has_payload_estimation_request()) {
    clear_command();
    set_has_payload_estimation_request();
    _impl_.command_.payload_estimation_request_ = CreateMaybeMessage< ::bosdyn::api::PayloadEstimationCommand_Request >(GetArenaForAllocation());
  }
  return _impl_.command_.payload_estimation_request_;
}
inline ::bosdyn::api::PayloadEstimationCommand_Request* FullBodyCommand_Request::mutable_payload_estimation_request() {
  ::bosdyn::api::PayloadEstimationCommand_Request* _msg = _internal_mutable_payload_estimation_request();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.FullBodyCommand.Request.payload_estimation_request)
  return _msg;
}

// .bosdyn.api.ConstrainedManipulationCommand.Request constrained_manipulation_request = 7;
inline bool FullBodyCommand_Request::_internal_has_constrained_manipulation_request() const {
  return command_case() == kConstrainedManipulationRequest;
}
inline bool FullBodyCommand_Request::has_constrained_manipulation_request() const {
  return _internal_has_constrained_manipulation_request();
}
inline void FullBodyCommand_Request::set_has_constrained_manipulation_request() {
  _impl_._oneof_case_[0] = kConstrainedManipulationRequest;
}
inline ::bosdyn::api::ConstrainedManipulationCommand_Request* FullBodyCommand_Request::release_constrained_manipulation_request() {
  // @@protoc_insertion_point(field_release:bosdyn.api.FullBodyCommand.Request.constrained_manipulation_request)
  if (_internal_has_constrained_manipulation_request()) {
    clear_has_command();
    ::bosdyn::api::ConstrainedManipulationCommand_Request* temp = _impl_.command_.constrained_manipulation_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.constrained_manipulation_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::ConstrainedManipulationCommand_Request& FullBodyCommand_Request::_internal_constrained_manipulation_request() const {
  return _internal_has_constrained_manipulation_request()
      ? *_impl_.command_.constrained_manipulation_request_
      : reinterpret_cast< ::bosdyn::api::ConstrainedManipulationCommand_Request&>(::bosdyn::api::_ConstrainedManipulationCommand_Request_default_instance_);
}
inline const ::bosdyn::api::ConstrainedManipulationCommand_Request& FullBodyCommand_Request::constrained_manipulation_request() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.FullBodyCommand.Request.constrained_manipulation_request)
  return _internal_constrained_manipulation_request();
}
inline ::bosdyn::api::ConstrainedManipulationCommand_Request* FullBodyCommand_Request::unsafe_arena_release_constrained_manipulation_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.FullBodyCommand.Request.constrained_manipulation_request)
  if (_internal_has_constrained_manipulation_request()) {
    clear_has_command();
    ::bosdyn::api::ConstrainedManipulationCommand_Request* temp = _impl_.command_.constrained_manipulation_request_;
    _impl_.command_.constrained_manipulation_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FullBodyCommand_Request::unsafe_arena_set_allocated_constrained_manipulation_request(::bosdyn::api::ConstrainedManipulationCommand_Request* constrained_manipulation_request) {
  clear_command();
  if (constrained_manipulation_request) {
    set_has_constrained_manipulation_request();
    _impl_.command_.constrained_manipulation_request_ = constrained_manipulation_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.FullBodyCommand.Request.constrained_manipulation_request)
}
inline ::bosdyn::api::ConstrainedManipulationCommand_Request* FullBodyCommand_Request::_internal_mutable_constrained_manipulation_request() {
  if (!_internal_has_constrained_manipulation_request()) {
    clear_command();
    set_has_constrained_manipulation_request();
    _impl_.command_.constrained_manipulation_request_ = CreateMaybeMessage< ::bosdyn::api::ConstrainedManipulationCommand_Request >(GetArenaForAllocation());
  }
  return _impl_.command_.constrained_manipulation_request_;
}
inline ::bosdyn::api::ConstrainedManipulationCommand_Request* FullBodyCommand_Request::mutable_constrained_manipulation_request() {
  ::bosdyn::api::ConstrainedManipulationCommand_Request* _msg = _internal_mutable_constrained_manipulation_request();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.FullBodyCommand.Request.constrained_manipulation_request)
  return _msg;
}

// .google.protobuf.Any params = 100;
inline bool FullBodyCommand_Request::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool FullBodyCommand_Request::has_params() const {
  return _internal_has_params();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& FullBodyCommand_Request::_internal_params() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& FullBodyCommand_Request::params() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.FullBodyCommand.Request.params)
  return _internal_params();
}
inline void FullBodyCommand_Request::unsafe_arena_set_allocated_params(
    ::PROTOBUF_NAMESPACE_ID::Any* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.FullBodyCommand.Request.params)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* FullBodyCommand_Request::release_params() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* FullBodyCommand_Request::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:bosdyn.api.FullBodyCommand.Request.params)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* FullBodyCommand_Request::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* FullBodyCommand_Request::mutable_params() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.FullBodyCommand.Request.params)
  return _msg;
}
inline void FullBodyCommand_Request::set_allocated_params(::PROTOBUF_NAMESPACE_ID::Any* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.FullBodyCommand.Request.params)
}

inline bool FullBodyCommand_Request::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
inline void FullBodyCommand_Request::clear_has_command() {
  _impl_._oneof_case_[0] = COMMAND_NOT_SET;
}
inline FullBodyCommand_Request::CommandCase FullBodyCommand_Request::command_case() const {
  return FullBodyCommand_Request::CommandCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// FullBodyCommand_Feedback

// .bosdyn.api.StopCommand.Feedback stop_feedback = 1;
inline bool FullBodyCommand_Feedback::_internal_has_stop_feedback() const {
  return feedback_case() == kStopFeedback;
}
inline bool FullBodyCommand_Feedback::has_stop_feedback() const {
  return _internal_has_stop_feedback();
}
inline void FullBodyCommand_Feedback::set_has_stop_feedback() {
  _impl_._oneof_case_[0] = kStopFeedback;
}
inline ::bosdyn::api::StopCommand_Feedback* FullBodyCommand_Feedback::release_stop_feedback() {
  // @@protoc_insertion_point(field_release:bosdyn.api.FullBodyCommand.Feedback.stop_feedback)
  if (_internal_has_stop_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::StopCommand_Feedback* temp = _impl_.feedback_.stop_feedback_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.feedback_.stop_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::StopCommand_Feedback& FullBodyCommand_Feedback::_internal_stop_feedback() const {
  return _internal_has_stop_feedback()
      ? *_impl_.feedback_.stop_feedback_
      : reinterpret_cast< ::bosdyn::api::StopCommand_Feedback&>(::bosdyn::api::_StopCommand_Feedback_default_instance_);
}
inline const ::bosdyn::api::StopCommand_Feedback& FullBodyCommand_Feedback::stop_feedback() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.FullBodyCommand.Feedback.stop_feedback)
  return _internal_stop_feedback();
}
inline ::bosdyn::api::StopCommand_Feedback* FullBodyCommand_Feedback::unsafe_arena_release_stop_feedback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.FullBodyCommand.Feedback.stop_feedback)
  if (_internal_has_stop_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::StopCommand_Feedback* temp = _impl_.feedback_.stop_feedback_;
    _impl_.feedback_.stop_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FullBodyCommand_Feedback::unsafe_arena_set_allocated_stop_feedback(::bosdyn::api::StopCommand_Feedback* stop_feedback) {
  clear_feedback();
  if (stop_feedback) {
    set_has_stop_feedback();
    _impl_.feedback_.stop_feedback_ = stop_feedback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.FullBodyCommand.Feedback.stop_feedback)
}
inline ::bosdyn::api::StopCommand_Feedback* FullBodyCommand_Feedback::_internal_mutable_stop_feedback() {
  if (!_internal_has_stop_feedback()) {
    clear_feedback();
    set_has_stop_feedback();
    _impl_.feedback_.stop_feedback_ = CreateMaybeMessage< ::bosdyn::api::StopCommand_Feedback >(GetArenaForAllocation());
  }
  return _impl_.feedback_.stop_feedback_;
}
inline ::bosdyn::api::StopCommand_Feedback* FullBodyCommand_Feedback::mutable_stop_feedback() {
  ::bosdyn::api::StopCommand_Feedback* _msg = _internal_mutable_stop_feedback();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.FullBodyCommand.Feedback.stop_feedback)
  return _msg;
}

// .bosdyn.api.FreezeCommand.Feedback freeze_feedback = 2;
inline bool FullBodyCommand_Feedback::_internal_has_freeze_feedback() const {
  return feedback_case() == kFreezeFeedback;
}
inline bool FullBodyCommand_Feedback::has_freeze_feedback() const {
  return _internal_has_freeze_feedback();
}
inline void FullBodyCommand_Feedback::set_has_freeze_feedback() {
  _impl_._oneof_case_[0] = kFreezeFeedback;
}
inline ::bosdyn::api::FreezeCommand_Feedback* FullBodyCommand_Feedback::release_freeze_feedback() {
  // @@protoc_insertion_point(field_release:bosdyn.api.FullBodyCommand.Feedback.freeze_feedback)
  if (_internal_has_freeze_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::FreezeCommand_Feedback* temp = _impl_.feedback_.freeze_feedback_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.feedback_.freeze_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::FreezeCommand_Feedback& FullBodyCommand_Feedback::_internal_freeze_feedback() const {
  return _internal_has_freeze_feedback()
      ? *_impl_.feedback_.freeze_feedback_
      : reinterpret_cast< ::bosdyn::api::FreezeCommand_Feedback&>(::bosdyn::api::_FreezeCommand_Feedback_default_instance_);
}
inline const ::bosdyn::api::FreezeCommand_Feedback& FullBodyCommand_Feedback::freeze_feedback() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.FullBodyCommand.Feedback.freeze_feedback)
  return _internal_freeze_feedback();
}
inline ::bosdyn::api::FreezeCommand_Feedback* FullBodyCommand_Feedback::unsafe_arena_release_freeze_feedback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.FullBodyCommand.Feedback.freeze_feedback)
  if (_internal_has_freeze_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::FreezeCommand_Feedback* temp = _impl_.feedback_.freeze_feedback_;
    _impl_.feedback_.freeze_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FullBodyCommand_Feedback::unsafe_arena_set_allocated_freeze_feedback(::bosdyn::api::FreezeCommand_Feedback* freeze_feedback) {
  clear_feedback();
  if (freeze_feedback) {
    set_has_freeze_feedback();
    _impl_.feedback_.freeze_feedback_ = freeze_feedback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.FullBodyCommand.Feedback.freeze_feedback)
}
inline ::bosdyn::api::FreezeCommand_Feedback* FullBodyCommand_Feedback::_internal_mutable_freeze_feedback() {
  if (!_internal_has_freeze_feedback()) {
    clear_feedback();
    set_has_freeze_feedback();
    _impl_.feedback_.freeze_feedback_ = CreateMaybeMessage< ::bosdyn::api::FreezeCommand_Feedback >(GetArenaForAllocation());
  }
  return _impl_.feedback_.freeze_feedback_;
}
inline ::bosdyn::api::FreezeCommand_Feedback* FullBodyCommand_Feedback::mutable_freeze_feedback() {
  ::bosdyn::api::FreezeCommand_Feedback* _msg = _internal_mutable_freeze_feedback();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.FullBodyCommand.Feedback.freeze_feedback)
  return _msg;
}

// .bosdyn.api.SelfRightCommand.Feedback selfright_feedback = 3;
inline bool FullBodyCommand_Feedback::_internal_has_selfright_feedback() const {
  return feedback_case() == kSelfrightFeedback;
}
inline bool FullBodyCommand_Feedback::has_selfright_feedback() const {
  return _internal_has_selfright_feedback();
}
inline void FullBodyCommand_Feedback::set_has_selfright_feedback() {
  _impl_._oneof_case_[0] = kSelfrightFeedback;
}
inline ::bosdyn::api::SelfRightCommand_Feedback* FullBodyCommand_Feedback::release_selfright_feedback() {
  // @@protoc_insertion_point(field_release:bosdyn.api.FullBodyCommand.Feedback.selfright_feedback)
  if (_internal_has_selfright_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::SelfRightCommand_Feedback* temp = _impl_.feedback_.selfright_feedback_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.feedback_.selfright_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::SelfRightCommand_Feedback& FullBodyCommand_Feedback::_internal_selfright_feedback() const {
  return _internal_has_selfright_feedback()
      ? *_impl_.feedback_.selfright_feedback_
      : reinterpret_cast< ::bosdyn::api::SelfRightCommand_Feedback&>(::bosdyn::api::_SelfRightCommand_Feedback_default_instance_);
}
inline const ::bosdyn::api::SelfRightCommand_Feedback& FullBodyCommand_Feedback::selfright_feedback() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.FullBodyCommand.Feedback.selfright_feedback)
  return _internal_selfright_feedback();
}
inline ::bosdyn::api::SelfRightCommand_Feedback* FullBodyCommand_Feedback::unsafe_arena_release_selfright_feedback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.FullBodyCommand.Feedback.selfright_feedback)
  if (_internal_has_selfright_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::SelfRightCommand_Feedback* temp = _impl_.feedback_.selfright_feedback_;
    _impl_.feedback_.selfright_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FullBodyCommand_Feedback::unsafe_arena_set_allocated_selfright_feedback(::bosdyn::api::SelfRightCommand_Feedback* selfright_feedback) {
  clear_feedback();
  if (selfright_feedback) {
    set_has_selfright_feedback();
    _impl_.feedback_.selfright_feedback_ = selfright_feedback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.FullBodyCommand.Feedback.selfright_feedback)
}
inline ::bosdyn::api::SelfRightCommand_Feedback* FullBodyCommand_Feedback::_internal_mutable_selfright_feedback() {
  if (!_internal_has_selfright_feedback()) {
    clear_feedback();
    set_has_selfright_feedback();
    _impl_.feedback_.selfright_feedback_ = CreateMaybeMessage< ::bosdyn::api::SelfRightCommand_Feedback >(GetArenaForAllocation());
  }
  return _impl_.feedback_.selfright_feedback_;
}
inline ::bosdyn::api::SelfRightCommand_Feedback* FullBodyCommand_Feedback::mutable_selfright_feedback() {
  ::bosdyn::api::SelfRightCommand_Feedback* _msg = _internal_mutable_selfright_feedback();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.FullBodyCommand.Feedback.selfright_feedback)
  return _msg;
}

// .bosdyn.api.SafePowerOffCommand.Feedback safe_power_off_feedback = 4;
inline bool FullBodyCommand_Feedback::_internal_has_safe_power_off_feedback() const {
  return feedback_case() == kSafePowerOffFeedback;
}
inline bool FullBodyCommand_Feedback::has_safe_power_off_feedback() const {
  return _internal_has_safe_power_off_feedback();
}
inline void FullBodyCommand_Feedback::set_has_safe_power_off_feedback() {
  _impl_._oneof_case_[0] = kSafePowerOffFeedback;
}
inline ::bosdyn::api::SafePowerOffCommand_Feedback* FullBodyCommand_Feedback::release_safe_power_off_feedback() {
  // @@protoc_insertion_point(field_release:bosdyn.api.FullBodyCommand.Feedback.safe_power_off_feedback)
  if (_internal_has_safe_power_off_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::SafePowerOffCommand_Feedback* temp = _impl_.feedback_.safe_power_off_feedback_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.feedback_.safe_power_off_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::SafePowerOffCommand_Feedback& FullBodyCommand_Feedback::_internal_safe_power_off_feedback() const {
  return _internal_has_safe_power_off_feedback()
      ? *_impl_.feedback_.safe_power_off_feedback_
      : reinterpret_cast< ::bosdyn::api::SafePowerOffCommand_Feedback&>(::bosdyn::api::_SafePowerOffCommand_Feedback_default_instance_);
}
inline const ::bosdyn::api::SafePowerOffCommand_Feedback& FullBodyCommand_Feedback::safe_power_off_feedback() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.FullBodyCommand.Feedback.safe_power_off_feedback)
  return _internal_safe_power_off_feedback();
}
inline ::bosdyn::api::SafePowerOffCommand_Feedback* FullBodyCommand_Feedback::unsafe_arena_release_safe_power_off_feedback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.FullBodyCommand.Feedback.safe_power_off_feedback)
  if (_internal_has_safe_power_off_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::SafePowerOffCommand_Feedback* temp = _impl_.feedback_.safe_power_off_feedback_;
    _impl_.feedback_.safe_power_off_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FullBodyCommand_Feedback::unsafe_arena_set_allocated_safe_power_off_feedback(::bosdyn::api::SafePowerOffCommand_Feedback* safe_power_off_feedback) {
  clear_feedback();
  if (safe_power_off_feedback) {
    set_has_safe_power_off_feedback();
    _impl_.feedback_.safe_power_off_feedback_ = safe_power_off_feedback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.FullBodyCommand.Feedback.safe_power_off_feedback)
}
inline ::bosdyn::api::SafePowerOffCommand_Feedback* FullBodyCommand_Feedback::_internal_mutable_safe_power_off_feedback() {
  if (!_internal_has_safe_power_off_feedback()) {
    clear_feedback();
    set_has_safe_power_off_feedback();
    _impl_.feedback_.safe_power_off_feedback_ = CreateMaybeMessage< ::bosdyn::api::SafePowerOffCommand_Feedback >(GetArenaForAllocation());
  }
  return _impl_.feedback_.safe_power_off_feedback_;
}
inline ::bosdyn::api::SafePowerOffCommand_Feedback* FullBodyCommand_Feedback::mutable_safe_power_off_feedback() {
  ::bosdyn::api::SafePowerOffCommand_Feedback* _msg = _internal_mutable_safe_power_off_feedback();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.FullBodyCommand.Feedback.safe_power_off_feedback)
  return _msg;
}

// .bosdyn.api.BatteryChangePoseCommand.Feedback battery_change_pose_feedback = 5;
inline bool FullBodyCommand_Feedback::_internal_has_battery_change_pose_feedback() const {
  return feedback_case() == kBatteryChangePoseFeedback;
}
inline bool FullBodyCommand_Feedback::has_battery_change_pose_feedback() const {
  return _internal_has_battery_change_pose_feedback();
}
inline void FullBodyCommand_Feedback::set_has_battery_change_pose_feedback() {
  _impl_._oneof_case_[0] = kBatteryChangePoseFeedback;
}
inline ::bosdyn::api::BatteryChangePoseCommand_Feedback* FullBodyCommand_Feedback::release_battery_change_pose_feedback() {
  // @@protoc_insertion_point(field_release:bosdyn.api.FullBodyCommand.Feedback.battery_change_pose_feedback)
  if (_internal_has_battery_change_pose_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::BatteryChangePoseCommand_Feedback* temp = _impl_.feedback_.battery_change_pose_feedback_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.feedback_.battery_change_pose_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::BatteryChangePoseCommand_Feedback& FullBodyCommand_Feedback::_internal_battery_change_pose_feedback() const {
  return _internal_has_battery_change_pose_feedback()
      ? *_impl_.feedback_.battery_change_pose_feedback_
      : reinterpret_cast< ::bosdyn::api::BatteryChangePoseCommand_Feedback&>(::bosdyn::api::_BatteryChangePoseCommand_Feedback_default_instance_);
}
inline const ::bosdyn::api::BatteryChangePoseCommand_Feedback& FullBodyCommand_Feedback::battery_change_pose_feedback() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.FullBodyCommand.Feedback.battery_change_pose_feedback)
  return _internal_battery_change_pose_feedback();
}
inline ::bosdyn::api::BatteryChangePoseCommand_Feedback* FullBodyCommand_Feedback::unsafe_arena_release_battery_change_pose_feedback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.FullBodyCommand.Feedback.battery_change_pose_feedback)
  if (_internal_has_battery_change_pose_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::BatteryChangePoseCommand_Feedback* temp = _impl_.feedback_.battery_change_pose_feedback_;
    _impl_.feedback_.battery_change_pose_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FullBodyCommand_Feedback::unsafe_arena_set_allocated_battery_change_pose_feedback(::bosdyn::api::BatteryChangePoseCommand_Feedback* battery_change_pose_feedback) {
  clear_feedback();
  if (battery_change_pose_feedback) {
    set_has_battery_change_pose_feedback();
    _impl_.feedback_.battery_change_pose_feedback_ = battery_change_pose_feedback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.FullBodyCommand.Feedback.battery_change_pose_feedback)
}
inline ::bosdyn::api::BatteryChangePoseCommand_Feedback* FullBodyCommand_Feedback::_internal_mutable_battery_change_pose_feedback() {
  if (!_internal_has_battery_change_pose_feedback()) {
    clear_feedback();
    set_has_battery_change_pose_feedback();
    _impl_.feedback_.battery_change_pose_feedback_ = CreateMaybeMessage< ::bosdyn::api::BatteryChangePoseCommand_Feedback >(GetArenaForAllocation());
  }
  return _impl_.feedback_.battery_change_pose_feedback_;
}
inline ::bosdyn::api::BatteryChangePoseCommand_Feedback* FullBodyCommand_Feedback::mutable_battery_change_pose_feedback() {
  ::bosdyn::api::BatteryChangePoseCommand_Feedback* _msg = _internal_mutable_battery_change_pose_feedback();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.FullBodyCommand.Feedback.battery_change_pose_feedback)
  return _msg;
}

// .bosdyn.api.PayloadEstimationCommand.Feedback payload_estimation_feedback = 6;
inline bool FullBodyCommand_Feedback::_internal_has_payload_estimation_feedback() const {
  return feedback_case() == kPayloadEstimationFeedback;
}
inline bool FullBodyCommand_Feedback::has_payload_estimation_feedback() const {
  return _internal_has_payload_estimation_feedback();
}
inline void FullBodyCommand_Feedback::set_has_payload_estimation_feedback() {
  _impl_._oneof_case_[0] = kPayloadEstimationFeedback;
}
inline ::bosdyn::api::PayloadEstimationCommand_Feedback* FullBodyCommand_Feedback::release_payload_estimation_feedback() {
  // @@protoc_insertion_point(field_release:bosdyn.api.FullBodyCommand.Feedback.payload_estimation_feedback)
  if (_internal_has_payload_estimation_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::PayloadEstimationCommand_Feedback* temp = _impl_.feedback_.payload_estimation_feedback_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.feedback_.payload_estimation_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::PayloadEstimationCommand_Feedback& FullBodyCommand_Feedback::_internal_payload_estimation_feedback() const {
  return _internal_has_payload_estimation_feedback()
      ? *_impl_.feedback_.payload_estimation_feedback_
      : reinterpret_cast< ::bosdyn::api::PayloadEstimationCommand_Feedback&>(::bosdyn::api::_PayloadEstimationCommand_Feedback_default_instance_);
}
inline const ::bosdyn::api::PayloadEstimationCommand_Feedback& FullBodyCommand_Feedback::payload_estimation_feedback() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.FullBodyCommand.Feedback.payload_estimation_feedback)
  return _internal_payload_estimation_feedback();
}
inline ::bosdyn::api::PayloadEstimationCommand_Feedback* FullBodyCommand_Feedback::unsafe_arena_release_payload_estimation_feedback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.FullBodyCommand.Feedback.payload_estimation_feedback)
  if (_internal_has_payload_estimation_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::PayloadEstimationCommand_Feedback* temp = _impl_.feedback_.payload_estimation_feedback_;
    _impl_.feedback_.payload_estimation_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FullBodyCommand_Feedback::unsafe_arena_set_allocated_payload_estimation_feedback(::bosdyn::api::PayloadEstimationCommand_Feedback* payload_estimation_feedback) {
  clear_feedback();
  if (payload_estimation_feedback) {
    set_has_payload_estimation_feedback();
    _impl_.feedback_.payload_estimation_feedback_ = payload_estimation_feedback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.FullBodyCommand.Feedback.payload_estimation_feedback)
}
inline ::bosdyn::api::PayloadEstimationCommand_Feedback* FullBodyCommand_Feedback::_internal_mutable_payload_estimation_feedback() {
  if (!_internal_has_payload_estimation_feedback()) {
    clear_feedback();
    set_has_payload_estimation_feedback();
    _impl_.feedback_.payload_estimation_feedback_ = CreateMaybeMessage< ::bosdyn::api::PayloadEstimationCommand_Feedback >(GetArenaForAllocation());
  }
  return _impl_.feedback_.payload_estimation_feedback_;
}
inline ::bosdyn::api::PayloadEstimationCommand_Feedback* FullBodyCommand_Feedback::mutable_payload_estimation_feedback() {
  ::bosdyn::api::PayloadEstimationCommand_Feedback* _msg = _internal_mutable_payload_estimation_feedback();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.FullBodyCommand.Feedback.payload_estimation_feedback)
  return _msg;
}

// .bosdyn.api.ConstrainedManipulationCommand.Feedback constrained_manipulation_feedback = 7;
inline bool FullBodyCommand_Feedback::_internal_has_constrained_manipulation_feedback() const {
  return feedback_case() == kConstrainedManipulationFeedback;
}
inline bool FullBodyCommand_Feedback::has_constrained_manipulation_feedback() const {
  return _internal_has_constrained_manipulation_feedback();
}
inline void FullBodyCommand_Feedback::set_has_constrained_manipulation_feedback() {
  _impl_._oneof_case_[0] = kConstrainedManipulationFeedback;
}
inline ::bosdyn::api::ConstrainedManipulationCommand_Feedback* FullBodyCommand_Feedback::release_constrained_manipulation_feedback() {
  // @@protoc_insertion_point(field_release:bosdyn.api.FullBodyCommand.Feedback.constrained_manipulation_feedback)
  if (_internal_has_constrained_manipulation_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::ConstrainedManipulationCommand_Feedback* temp = _impl_.feedback_.constrained_manipulation_feedback_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.feedback_.constrained_manipulation_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::ConstrainedManipulationCommand_Feedback& FullBodyCommand_Feedback::_internal_constrained_manipulation_feedback() const {
  return _internal_has_constrained_manipulation_feedback()
      ? *_impl_.feedback_.constrained_manipulation_feedback_
      : reinterpret_cast< ::bosdyn::api::ConstrainedManipulationCommand_Feedback&>(::bosdyn::api::_ConstrainedManipulationCommand_Feedback_default_instance_);
}
inline const ::bosdyn::api::ConstrainedManipulationCommand_Feedback& FullBodyCommand_Feedback::constrained_manipulation_feedback() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.FullBodyCommand.Feedback.constrained_manipulation_feedback)
  return _internal_constrained_manipulation_feedback();
}
inline ::bosdyn::api::ConstrainedManipulationCommand_Feedback* FullBodyCommand_Feedback::unsafe_arena_release_constrained_manipulation_feedback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.FullBodyCommand.Feedback.constrained_manipulation_feedback)
  if (_internal_has_constrained_manipulation_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::ConstrainedManipulationCommand_Feedback* temp = _impl_.feedback_.constrained_manipulation_feedback_;
    _impl_.feedback_.constrained_manipulation_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FullBodyCommand_Feedback::unsafe_arena_set_allocated_constrained_manipulation_feedback(::bosdyn::api::ConstrainedManipulationCommand_Feedback* constrained_manipulation_feedback) {
  clear_feedback();
  if (constrained_manipulation_feedback) {
    set_has_constrained_manipulation_feedback();
    _impl_.feedback_.constrained_manipulation_feedback_ = constrained_manipulation_feedback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.FullBodyCommand.Feedback.constrained_manipulation_feedback)
}
inline ::bosdyn::api::ConstrainedManipulationCommand_Feedback* FullBodyCommand_Feedback::_internal_mutable_constrained_manipulation_feedback() {
  if (!_internal_has_constrained_manipulation_feedback()) {
    clear_feedback();
    set_has_constrained_manipulation_feedback();
    _impl_.feedback_.constrained_manipulation_feedback_ = CreateMaybeMessage< ::bosdyn::api::ConstrainedManipulationCommand_Feedback >(GetArenaForAllocation());
  }
  return _impl_.feedback_.constrained_manipulation_feedback_;
}
inline ::bosdyn::api::ConstrainedManipulationCommand_Feedback* FullBodyCommand_Feedback::mutable_constrained_manipulation_feedback() {
  ::bosdyn::api::ConstrainedManipulationCommand_Feedback* _msg = _internal_mutable_constrained_manipulation_feedback();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.FullBodyCommand.Feedback.constrained_manipulation_feedback)
  return _msg;
}

// .bosdyn.api.RobotCommandFeedbackStatus.Status status = 100;
inline void FullBodyCommand_Feedback::clear_status() {
  _impl_.status_ = 0;
}
inline ::bosdyn::api::RobotCommandFeedbackStatus_Status FullBodyCommand_Feedback::_internal_status() const {
  return static_cast< ::bosdyn::api::RobotCommandFeedbackStatus_Status >(_impl_.status_);
}
inline ::bosdyn::api::RobotCommandFeedbackStatus_Status FullBodyCommand_Feedback::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.FullBodyCommand.Feedback.status)
  return _internal_status();
}
inline void FullBodyCommand_Feedback::_internal_set_status(::bosdyn::api::RobotCommandFeedbackStatus_Status value) {
  
  _impl_.status_ = value;
}
inline void FullBodyCommand_Feedback::set_status(::bosdyn::api::RobotCommandFeedbackStatus_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.FullBodyCommand.Feedback.status)
}

inline bool FullBodyCommand_Feedback::has_feedback() const {
  return feedback_case() != FEEDBACK_NOT_SET;
}
inline void FullBodyCommand_Feedback::clear_has_feedback() {
  _impl_._oneof_case_[0] = FEEDBACK_NOT_SET;
}
inline FullBodyCommand_Feedback::FeedbackCase FullBodyCommand_Feedback::feedback_case() const {
  return FullBodyCommand_Feedback::FeedbackCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// FullBodyCommand

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace bosdyn

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2ffull_5fbody_5fcommand_2eproto

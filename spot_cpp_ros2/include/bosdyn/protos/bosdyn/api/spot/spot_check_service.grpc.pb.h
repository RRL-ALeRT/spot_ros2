// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bosdyn/api/spot/spot_check_service.proto
// Original file comments:
// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).
//
#ifndef GRPC_bosdyn_2fapi_2fspot_2fspot_5fcheck_5fservice_2eproto__INCLUDED
#define GRPC_bosdyn_2fapi_2fspot_2fspot_5fcheck_5fservice_2eproto__INCLUDED

#include "bosdyn/api/spot/spot_check_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace bosdyn {
namespace api {
namespace spot {

// RPCs for monitoring robot health and recalibration various sensors. These procedures should be
// run periodically in order to keep the system running in the best possible condition.
class SpotCheckService final {
 public:
  static constexpr char const* service_full_name() {
    return "bosdyn.api.spot.SpotCheckService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Send a command to the SpotCheck service. The spotcheck service is responsible to both
    // recalibrating actuation sensors and checking camera health.
    virtual ::grpc::Status SpotCheckCommand(::grpc::ClientContext* context, const ::bosdyn::api::spot::SpotCheckCommandRequest& request, ::bosdyn::api::spot::SpotCheckCommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::SpotCheckCommandResponse>> AsyncSpotCheckCommand(::grpc::ClientContext* context, const ::bosdyn::api::spot::SpotCheckCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::SpotCheckCommandResponse>>(AsyncSpotCheckCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::SpotCheckCommandResponse>> PrepareAsyncSpotCheckCommand(::grpc::ClientContext* context, const ::bosdyn::api::spot::SpotCheckCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::SpotCheckCommandResponse>>(PrepareAsyncSpotCheckCommandRaw(context, request, cq));
    }
    // Check the status of the spot check procedure. After procedure completes, this reports back
    // results for specific joints and cameras.
    virtual ::grpc::Status SpotCheckFeedback(::grpc::ClientContext* context, const ::bosdyn::api::spot::SpotCheckFeedbackRequest& request, ::bosdyn::api::spot::SpotCheckFeedbackResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::SpotCheckFeedbackResponse>> AsyncSpotCheckFeedback(::grpc::ClientContext* context, const ::bosdyn::api::spot::SpotCheckFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::SpotCheckFeedbackResponse>>(AsyncSpotCheckFeedbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::SpotCheckFeedbackResponse>> PrepareAsyncSpotCheckFeedback(::grpc::ClientContext* context, const ::bosdyn::api::spot::SpotCheckFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::SpotCheckFeedbackResponse>>(PrepareAsyncSpotCheckFeedbackRaw(context, request, cq));
    }
    // Send a camera calibration command to the robot. Used to start or abort a calibration routine.
    virtual ::grpc::Status CameraCalibrationCommand(::grpc::ClientContext* context, const ::bosdyn::api::spot::CameraCalibrationCommandRequest& request, ::bosdyn::api::spot::CameraCalibrationCommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::CameraCalibrationCommandResponse>> AsyncCameraCalibrationCommand(::grpc::ClientContext* context, const ::bosdyn::api::spot::CameraCalibrationCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::CameraCalibrationCommandResponse>>(AsyncCameraCalibrationCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::CameraCalibrationCommandResponse>> PrepareAsyncCameraCalibrationCommand(::grpc::ClientContext* context, const ::bosdyn::api::spot::CameraCalibrationCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::CameraCalibrationCommandResponse>>(PrepareAsyncCameraCalibrationCommandRaw(context, request, cq));
    }
    // Check the status of the camera calibration procedure.
    virtual ::grpc::Status CameraCalibrationFeedback(::grpc::ClientContext* context, const ::bosdyn::api::spot::CameraCalibrationFeedbackRequest& request, ::bosdyn::api::spot::CameraCalibrationFeedbackResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::CameraCalibrationFeedbackResponse>> AsyncCameraCalibrationFeedback(::grpc::ClientContext* context, const ::bosdyn::api::spot::CameraCalibrationFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::CameraCalibrationFeedbackResponse>>(AsyncCameraCalibrationFeedbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::CameraCalibrationFeedbackResponse>> PrepareAsyncCameraCalibrationFeedback(::grpc::ClientContext* context, const ::bosdyn::api::spot::CameraCalibrationFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::CameraCalibrationFeedbackResponse>>(PrepareAsyncCameraCalibrationFeedbackRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Send a command to the SpotCheck service. The spotcheck service is responsible to both
      // recalibrating actuation sensors and checking camera health.
      virtual void SpotCheckCommand(::grpc::ClientContext* context, const ::bosdyn::api::spot::SpotCheckCommandRequest* request, ::bosdyn::api::spot::SpotCheckCommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpotCheckCommand(::grpc::ClientContext* context, const ::bosdyn::api::spot::SpotCheckCommandRequest* request, ::bosdyn::api::spot::SpotCheckCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Check the status of the spot check procedure. After procedure completes, this reports back
      // results for specific joints and cameras.
      virtual void SpotCheckFeedback(::grpc::ClientContext* context, const ::bosdyn::api::spot::SpotCheckFeedbackRequest* request, ::bosdyn::api::spot::SpotCheckFeedbackResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpotCheckFeedback(::grpc::ClientContext* context, const ::bosdyn::api::spot::SpotCheckFeedbackRequest* request, ::bosdyn::api::spot::SpotCheckFeedbackResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Send a camera calibration command to the robot. Used to start or abort a calibration routine.
      virtual void CameraCalibrationCommand(::grpc::ClientContext* context, const ::bosdyn::api::spot::CameraCalibrationCommandRequest* request, ::bosdyn::api::spot::CameraCalibrationCommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CameraCalibrationCommand(::grpc::ClientContext* context, const ::bosdyn::api::spot::CameraCalibrationCommandRequest* request, ::bosdyn::api::spot::CameraCalibrationCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Check the status of the camera calibration procedure.
      virtual void CameraCalibrationFeedback(::grpc::ClientContext* context, const ::bosdyn::api::spot::CameraCalibrationFeedbackRequest* request, ::bosdyn::api::spot::CameraCalibrationFeedbackResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CameraCalibrationFeedback(::grpc::ClientContext* context, const ::bosdyn::api::spot::CameraCalibrationFeedbackRequest* request, ::bosdyn::api::spot::CameraCalibrationFeedbackResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::SpotCheckCommandResponse>* AsyncSpotCheckCommandRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot::SpotCheckCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::SpotCheckCommandResponse>* PrepareAsyncSpotCheckCommandRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot::SpotCheckCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::SpotCheckFeedbackResponse>* AsyncSpotCheckFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot::SpotCheckFeedbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::SpotCheckFeedbackResponse>* PrepareAsyncSpotCheckFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot::SpotCheckFeedbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::CameraCalibrationCommandResponse>* AsyncCameraCalibrationCommandRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot::CameraCalibrationCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::CameraCalibrationCommandResponse>* PrepareAsyncCameraCalibrationCommandRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot::CameraCalibrationCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::CameraCalibrationFeedbackResponse>* AsyncCameraCalibrationFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot::CameraCalibrationFeedbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::spot::CameraCalibrationFeedbackResponse>* PrepareAsyncCameraCalibrationFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot::CameraCalibrationFeedbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SpotCheckCommand(::grpc::ClientContext* context, const ::bosdyn::api::spot::SpotCheckCommandRequest& request, ::bosdyn::api::spot::SpotCheckCommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::SpotCheckCommandResponse>> AsyncSpotCheckCommand(::grpc::ClientContext* context, const ::bosdyn::api::spot::SpotCheckCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::SpotCheckCommandResponse>>(AsyncSpotCheckCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::SpotCheckCommandResponse>> PrepareAsyncSpotCheckCommand(::grpc::ClientContext* context, const ::bosdyn::api::spot::SpotCheckCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::SpotCheckCommandResponse>>(PrepareAsyncSpotCheckCommandRaw(context, request, cq));
    }
    ::grpc::Status SpotCheckFeedback(::grpc::ClientContext* context, const ::bosdyn::api::spot::SpotCheckFeedbackRequest& request, ::bosdyn::api::spot::SpotCheckFeedbackResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::SpotCheckFeedbackResponse>> AsyncSpotCheckFeedback(::grpc::ClientContext* context, const ::bosdyn::api::spot::SpotCheckFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::SpotCheckFeedbackResponse>>(AsyncSpotCheckFeedbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::SpotCheckFeedbackResponse>> PrepareAsyncSpotCheckFeedback(::grpc::ClientContext* context, const ::bosdyn::api::spot::SpotCheckFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::SpotCheckFeedbackResponse>>(PrepareAsyncSpotCheckFeedbackRaw(context, request, cq));
    }
    ::grpc::Status CameraCalibrationCommand(::grpc::ClientContext* context, const ::bosdyn::api::spot::CameraCalibrationCommandRequest& request, ::bosdyn::api::spot::CameraCalibrationCommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::CameraCalibrationCommandResponse>> AsyncCameraCalibrationCommand(::grpc::ClientContext* context, const ::bosdyn::api::spot::CameraCalibrationCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::CameraCalibrationCommandResponse>>(AsyncCameraCalibrationCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::CameraCalibrationCommandResponse>> PrepareAsyncCameraCalibrationCommand(::grpc::ClientContext* context, const ::bosdyn::api::spot::CameraCalibrationCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::CameraCalibrationCommandResponse>>(PrepareAsyncCameraCalibrationCommandRaw(context, request, cq));
    }
    ::grpc::Status CameraCalibrationFeedback(::grpc::ClientContext* context, const ::bosdyn::api::spot::CameraCalibrationFeedbackRequest& request, ::bosdyn::api::spot::CameraCalibrationFeedbackResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::CameraCalibrationFeedbackResponse>> AsyncCameraCalibrationFeedback(::grpc::ClientContext* context, const ::bosdyn::api::spot::CameraCalibrationFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::CameraCalibrationFeedbackResponse>>(AsyncCameraCalibrationFeedbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::CameraCalibrationFeedbackResponse>> PrepareAsyncCameraCalibrationFeedback(::grpc::ClientContext* context, const ::bosdyn::api::spot::CameraCalibrationFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::CameraCalibrationFeedbackResponse>>(PrepareAsyncCameraCalibrationFeedbackRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SpotCheckCommand(::grpc::ClientContext* context, const ::bosdyn::api::spot::SpotCheckCommandRequest* request, ::bosdyn::api::spot::SpotCheckCommandResponse* response, std::function<void(::grpc::Status)>) override;
      void SpotCheckCommand(::grpc::ClientContext* context, const ::bosdyn::api::spot::SpotCheckCommandRequest* request, ::bosdyn::api::spot::SpotCheckCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SpotCheckFeedback(::grpc::ClientContext* context, const ::bosdyn::api::spot::SpotCheckFeedbackRequest* request, ::bosdyn::api::spot::SpotCheckFeedbackResponse* response, std::function<void(::grpc::Status)>) override;
      void SpotCheckFeedback(::grpc::ClientContext* context, const ::bosdyn::api::spot::SpotCheckFeedbackRequest* request, ::bosdyn::api::spot::SpotCheckFeedbackResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CameraCalibrationCommand(::grpc::ClientContext* context, const ::bosdyn::api::spot::CameraCalibrationCommandRequest* request, ::bosdyn::api::spot::CameraCalibrationCommandResponse* response, std::function<void(::grpc::Status)>) override;
      void CameraCalibrationCommand(::grpc::ClientContext* context, const ::bosdyn::api::spot::CameraCalibrationCommandRequest* request, ::bosdyn::api::spot::CameraCalibrationCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CameraCalibrationFeedback(::grpc::ClientContext* context, const ::bosdyn::api::spot::CameraCalibrationFeedbackRequest* request, ::bosdyn::api::spot::CameraCalibrationFeedbackResponse* response, std::function<void(::grpc::Status)>) override;
      void CameraCalibrationFeedback(::grpc::ClientContext* context, const ::bosdyn::api::spot::CameraCalibrationFeedbackRequest* request, ::bosdyn::api::spot::CameraCalibrationFeedbackResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::SpotCheckCommandResponse>* AsyncSpotCheckCommandRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot::SpotCheckCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::SpotCheckCommandResponse>* PrepareAsyncSpotCheckCommandRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot::SpotCheckCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::SpotCheckFeedbackResponse>* AsyncSpotCheckFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot::SpotCheckFeedbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::SpotCheckFeedbackResponse>* PrepareAsyncSpotCheckFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot::SpotCheckFeedbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::CameraCalibrationCommandResponse>* AsyncCameraCalibrationCommandRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot::CameraCalibrationCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::CameraCalibrationCommandResponse>* PrepareAsyncCameraCalibrationCommandRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot::CameraCalibrationCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::CameraCalibrationFeedbackResponse>* AsyncCameraCalibrationFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot::CameraCalibrationFeedbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot::CameraCalibrationFeedbackResponse>* PrepareAsyncCameraCalibrationFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot::CameraCalibrationFeedbackRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SpotCheckCommand_;
    const ::grpc::internal::RpcMethod rpcmethod_SpotCheckFeedback_;
    const ::grpc::internal::RpcMethod rpcmethod_CameraCalibrationCommand_;
    const ::grpc::internal::RpcMethod rpcmethod_CameraCalibrationFeedback_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Send a command to the SpotCheck service. The spotcheck service is responsible to both
    // recalibrating actuation sensors and checking camera health.
    virtual ::grpc::Status SpotCheckCommand(::grpc::ServerContext* context, const ::bosdyn::api::spot::SpotCheckCommandRequest* request, ::bosdyn::api::spot::SpotCheckCommandResponse* response);
    // Check the status of the spot check procedure. After procedure completes, this reports back
    // results for specific joints and cameras.
    virtual ::grpc::Status SpotCheckFeedback(::grpc::ServerContext* context, const ::bosdyn::api::spot::SpotCheckFeedbackRequest* request, ::bosdyn::api::spot::SpotCheckFeedbackResponse* response);
    // Send a camera calibration command to the robot. Used to start or abort a calibration routine.
    virtual ::grpc::Status CameraCalibrationCommand(::grpc::ServerContext* context, const ::bosdyn::api::spot::CameraCalibrationCommandRequest* request, ::bosdyn::api::spot::CameraCalibrationCommandResponse* response);
    // Check the status of the camera calibration procedure.
    virtual ::grpc::Status CameraCalibrationFeedback(::grpc::ServerContext* context, const ::bosdyn::api::spot::CameraCalibrationFeedbackRequest* request, ::bosdyn::api::spot::CameraCalibrationFeedbackResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SpotCheckCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SpotCheckCommand() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SpotCheckCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpotCheckCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::SpotCheckCommandRequest* /*request*/, ::bosdyn::api::spot::SpotCheckCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpotCheckCommand(::grpc::ServerContext* context, ::bosdyn::api::spot::SpotCheckCommandRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::spot::SpotCheckCommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SpotCheckFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SpotCheckFeedback() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SpotCheckFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpotCheckFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::SpotCheckFeedbackRequest* /*request*/, ::bosdyn::api::spot::SpotCheckFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpotCheckFeedback(::grpc::ServerContext* context, ::bosdyn::api::spot::SpotCheckFeedbackRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::spot::SpotCheckFeedbackResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CameraCalibrationCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CameraCalibrationCommand() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CameraCalibrationCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CameraCalibrationCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::CameraCalibrationCommandRequest* /*request*/, ::bosdyn::api::spot::CameraCalibrationCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCameraCalibrationCommand(::grpc::ServerContext* context, ::bosdyn::api::spot::CameraCalibrationCommandRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::spot::CameraCalibrationCommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CameraCalibrationFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CameraCalibrationFeedback() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CameraCalibrationFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CameraCalibrationFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::CameraCalibrationFeedbackRequest* /*request*/, ::bosdyn::api::spot::CameraCalibrationFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCameraCalibrationFeedback(::grpc::ServerContext* context, ::bosdyn::api::spot::CameraCalibrationFeedbackRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::spot::CameraCalibrationFeedbackResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SpotCheckCommand<WithAsyncMethod_SpotCheckFeedback<WithAsyncMethod_CameraCalibrationCommand<WithAsyncMethod_CameraCalibrationFeedback<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SpotCheckCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SpotCheckCommand() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::spot::SpotCheckCommandRequest, ::bosdyn::api::spot::SpotCheckCommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::spot::SpotCheckCommandRequest* request, ::bosdyn::api::spot::SpotCheckCommandResponse* response) { return this->SpotCheckCommand(context, request, response); }));}
    void SetMessageAllocatorFor_SpotCheckCommand(
        ::grpc::MessageAllocator< ::bosdyn::api::spot::SpotCheckCommandRequest, ::bosdyn::api::spot::SpotCheckCommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::spot::SpotCheckCommandRequest, ::bosdyn::api::spot::SpotCheckCommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SpotCheckCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpotCheckCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::SpotCheckCommandRequest* /*request*/, ::bosdyn::api::spot::SpotCheckCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SpotCheckCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::spot::SpotCheckCommandRequest* /*request*/, ::bosdyn::api::spot::SpotCheckCommandResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SpotCheckFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SpotCheckFeedback() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::spot::SpotCheckFeedbackRequest, ::bosdyn::api::spot::SpotCheckFeedbackResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::spot::SpotCheckFeedbackRequest* request, ::bosdyn::api::spot::SpotCheckFeedbackResponse* response) { return this->SpotCheckFeedback(context, request, response); }));}
    void SetMessageAllocatorFor_SpotCheckFeedback(
        ::grpc::MessageAllocator< ::bosdyn::api::spot::SpotCheckFeedbackRequest, ::bosdyn::api::spot::SpotCheckFeedbackResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::spot::SpotCheckFeedbackRequest, ::bosdyn::api::spot::SpotCheckFeedbackResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SpotCheckFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpotCheckFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::SpotCheckFeedbackRequest* /*request*/, ::bosdyn::api::spot::SpotCheckFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SpotCheckFeedback(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::spot::SpotCheckFeedbackRequest* /*request*/, ::bosdyn::api::spot::SpotCheckFeedbackResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CameraCalibrationCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CameraCalibrationCommand() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::spot::CameraCalibrationCommandRequest, ::bosdyn::api::spot::CameraCalibrationCommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::spot::CameraCalibrationCommandRequest* request, ::bosdyn::api::spot::CameraCalibrationCommandResponse* response) { return this->CameraCalibrationCommand(context, request, response); }));}
    void SetMessageAllocatorFor_CameraCalibrationCommand(
        ::grpc::MessageAllocator< ::bosdyn::api::spot::CameraCalibrationCommandRequest, ::bosdyn::api::spot::CameraCalibrationCommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::spot::CameraCalibrationCommandRequest, ::bosdyn::api::spot::CameraCalibrationCommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CameraCalibrationCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CameraCalibrationCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::CameraCalibrationCommandRequest* /*request*/, ::bosdyn::api::spot::CameraCalibrationCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CameraCalibrationCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::spot::CameraCalibrationCommandRequest* /*request*/, ::bosdyn::api::spot::CameraCalibrationCommandResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CameraCalibrationFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CameraCalibrationFeedback() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::spot::CameraCalibrationFeedbackRequest, ::bosdyn::api::spot::CameraCalibrationFeedbackResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::spot::CameraCalibrationFeedbackRequest* request, ::bosdyn::api::spot::CameraCalibrationFeedbackResponse* response) { return this->CameraCalibrationFeedback(context, request, response); }));}
    void SetMessageAllocatorFor_CameraCalibrationFeedback(
        ::grpc::MessageAllocator< ::bosdyn::api::spot::CameraCalibrationFeedbackRequest, ::bosdyn::api::spot::CameraCalibrationFeedbackResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::spot::CameraCalibrationFeedbackRequest, ::bosdyn::api::spot::CameraCalibrationFeedbackResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CameraCalibrationFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CameraCalibrationFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::CameraCalibrationFeedbackRequest* /*request*/, ::bosdyn::api::spot::CameraCalibrationFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CameraCalibrationFeedback(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::spot::CameraCalibrationFeedbackRequest* /*request*/, ::bosdyn::api::spot::CameraCalibrationFeedbackResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SpotCheckCommand<WithCallbackMethod_SpotCheckFeedback<WithCallbackMethod_CameraCalibrationCommand<WithCallbackMethod_CameraCalibrationFeedback<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SpotCheckCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SpotCheckCommand() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SpotCheckCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpotCheckCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::SpotCheckCommandRequest* /*request*/, ::bosdyn::api::spot::SpotCheckCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SpotCheckFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SpotCheckFeedback() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SpotCheckFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpotCheckFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::SpotCheckFeedbackRequest* /*request*/, ::bosdyn::api::spot::SpotCheckFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CameraCalibrationCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CameraCalibrationCommand() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CameraCalibrationCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CameraCalibrationCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::CameraCalibrationCommandRequest* /*request*/, ::bosdyn::api::spot::CameraCalibrationCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CameraCalibrationFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CameraCalibrationFeedback() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CameraCalibrationFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CameraCalibrationFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::CameraCalibrationFeedbackRequest* /*request*/, ::bosdyn::api::spot::CameraCalibrationFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpotCheckCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SpotCheckCommand() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SpotCheckCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpotCheckCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::SpotCheckCommandRequest* /*request*/, ::bosdyn::api::spot::SpotCheckCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpotCheckCommand(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpotCheckFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SpotCheckFeedback() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SpotCheckFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpotCheckFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::SpotCheckFeedbackRequest* /*request*/, ::bosdyn::api::spot::SpotCheckFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpotCheckFeedback(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CameraCalibrationCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CameraCalibrationCommand() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CameraCalibrationCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CameraCalibrationCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::CameraCalibrationCommandRequest* /*request*/, ::bosdyn::api::spot::CameraCalibrationCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCameraCalibrationCommand(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CameraCalibrationFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CameraCalibrationFeedback() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CameraCalibrationFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CameraCalibrationFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::CameraCalibrationFeedbackRequest* /*request*/, ::bosdyn::api::spot::CameraCalibrationFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCameraCalibrationFeedback(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SpotCheckCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SpotCheckCommand() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SpotCheckCommand(context, request, response); }));
    }
    ~WithRawCallbackMethod_SpotCheckCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpotCheckCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::SpotCheckCommandRequest* /*request*/, ::bosdyn::api::spot::SpotCheckCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SpotCheckCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SpotCheckFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SpotCheckFeedback() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SpotCheckFeedback(context, request, response); }));
    }
    ~WithRawCallbackMethod_SpotCheckFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpotCheckFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::SpotCheckFeedbackRequest* /*request*/, ::bosdyn::api::spot::SpotCheckFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SpotCheckFeedback(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CameraCalibrationCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CameraCalibrationCommand() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CameraCalibrationCommand(context, request, response); }));
    }
    ~WithRawCallbackMethod_CameraCalibrationCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CameraCalibrationCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::CameraCalibrationCommandRequest* /*request*/, ::bosdyn::api::spot::CameraCalibrationCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CameraCalibrationCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CameraCalibrationFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CameraCalibrationFeedback() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CameraCalibrationFeedback(context, request, response); }));
    }
    ~WithRawCallbackMethod_CameraCalibrationFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CameraCalibrationFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::CameraCalibrationFeedbackRequest* /*request*/, ::bosdyn::api::spot::CameraCalibrationFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CameraCalibrationFeedback(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SpotCheckCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SpotCheckCommand() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::spot::SpotCheckCommandRequest, ::bosdyn::api::spot::SpotCheckCommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::spot::SpotCheckCommandRequest, ::bosdyn::api::spot::SpotCheckCommandResponse>* streamer) {
                       return this->StreamedSpotCheckCommand(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SpotCheckCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SpotCheckCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::SpotCheckCommandRequest* /*request*/, ::bosdyn::api::spot::SpotCheckCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSpotCheckCommand(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::spot::SpotCheckCommandRequest,::bosdyn::api::spot::SpotCheckCommandResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SpotCheckFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SpotCheckFeedback() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::spot::SpotCheckFeedbackRequest, ::bosdyn::api::spot::SpotCheckFeedbackResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::spot::SpotCheckFeedbackRequest, ::bosdyn::api::spot::SpotCheckFeedbackResponse>* streamer) {
                       return this->StreamedSpotCheckFeedback(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SpotCheckFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SpotCheckFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::SpotCheckFeedbackRequest* /*request*/, ::bosdyn::api::spot::SpotCheckFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSpotCheckFeedback(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::spot::SpotCheckFeedbackRequest,::bosdyn::api::spot::SpotCheckFeedbackResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CameraCalibrationCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CameraCalibrationCommand() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::spot::CameraCalibrationCommandRequest, ::bosdyn::api::spot::CameraCalibrationCommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::spot::CameraCalibrationCommandRequest, ::bosdyn::api::spot::CameraCalibrationCommandResponse>* streamer) {
                       return this->StreamedCameraCalibrationCommand(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CameraCalibrationCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CameraCalibrationCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::CameraCalibrationCommandRequest* /*request*/, ::bosdyn::api::spot::CameraCalibrationCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCameraCalibrationCommand(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::spot::CameraCalibrationCommandRequest,::bosdyn::api::spot::CameraCalibrationCommandResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CameraCalibrationFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CameraCalibrationFeedback() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::spot::CameraCalibrationFeedbackRequest, ::bosdyn::api::spot::CameraCalibrationFeedbackResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::spot::CameraCalibrationFeedbackRequest, ::bosdyn::api::spot::CameraCalibrationFeedbackResponse>* streamer) {
                       return this->StreamedCameraCalibrationFeedback(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CameraCalibrationFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CameraCalibrationFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::spot::CameraCalibrationFeedbackRequest* /*request*/, ::bosdyn::api::spot::CameraCalibrationFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCameraCalibrationFeedback(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::spot::CameraCalibrationFeedbackRequest,::bosdyn::api::spot::CameraCalibrationFeedbackResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SpotCheckCommand<WithStreamedUnaryMethod_SpotCheckFeedback<WithStreamedUnaryMethod_CameraCalibrationCommand<WithStreamedUnaryMethod_CameraCalibrationFeedback<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SpotCheckCommand<WithStreamedUnaryMethod_SpotCheckFeedback<WithStreamedUnaryMethod_CameraCalibrationCommand<WithStreamedUnaryMethod_CameraCalibrationFeedback<Service > > > > StreamedService;
};

}  // namespace spot
}  // namespace api
}  // namespace bosdyn


#endif  // GRPC_bosdyn_2fapi_2fspot_2fspot_5fcheck_5fservice_2eproto__INCLUDED

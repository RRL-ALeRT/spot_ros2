// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/license.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2flicense_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2flicense_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/header.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2flicense_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2flicense_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2flicense_2eproto;
namespace bosdyn {
namespace api {
class GetFeatureEnabledRequest;
struct GetFeatureEnabledRequestDefaultTypeInternal;
extern GetFeatureEnabledRequestDefaultTypeInternal _GetFeatureEnabledRequest_default_instance_;
class GetFeatureEnabledResponse;
struct GetFeatureEnabledResponseDefaultTypeInternal;
extern GetFeatureEnabledResponseDefaultTypeInternal _GetFeatureEnabledResponse_default_instance_;
class GetFeatureEnabledResponse_FeatureEnabledEntry_DoNotUse;
struct GetFeatureEnabledResponse_FeatureEnabledEntry_DoNotUseDefaultTypeInternal;
extern GetFeatureEnabledResponse_FeatureEnabledEntry_DoNotUseDefaultTypeInternal _GetFeatureEnabledResponse_FeatureEnabledEntry_DoNotUse_default_instance_;
class GetLicenseInfoRequest;
struct GetLicenseInfoRequestDefaultTypeInternal;
extern GetLicenseInfoRequestDefaultTypeInternal _GetLicenseInfoRequest_default_instance_;
class GetLicenseInfoResponse;
struct GetLicenseInfoResponseDefaultTypeInternal;
extern GetLicenseInfoResponseDefaultTypeInternal _GetLicenseInfoResponse_default_instance_;
class LicenseInfo;
struct LicenseInfoDefaultTypeInternal;
extern LicenseInfoDefaultTypeInternal _LicenseInfo_default_instance_;
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::GetFeatureEnabledRequest* Arena::CreateMaybeMessage<::bosdyn::api::GetFeatureEnabledRequest>(Arena*);
template<> ::bosdyn::api::GetFeatureEnabledResponse* Arena::CreateMaybeMessage<::bosdyn::api::GetFeatureEnabledResponse>(Arena*);
template<> ::bosdyn::api::GetFeatureEnabledResponse_FeatureEnabledEntry_DoNotUse* Arena::CreateMaybeMessage<::bosdyn::api::GetFeatureEnabledResponse_FeatureEnabledEntry_DoNotUse>(Arena*);
template<> ::bosdyn::api::GetLicenseInfoRequest* Arena::CreateMaybeMessage<::bosdyn::api::GetLicenseInfoRequest>(Arena*);
template<> ::bosdyn::api::GetLicenseInfoResponse* Arena::CreateMaybeMessage<::bosdyn::api::GetLicenseInfoResponse>(Arena*);
template<> ::bosdyn::api::LicenseInfo* Arena::CreateMaybeMessage<::bosdyn::api::LicenseInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {

enum LicenseInfo_Status : int {
  LicenseInfo_Status_STATUS_UNKNOWN = 0,
  LicenseInfo_Status_STATUS_VALID = 1,
  LicenseInfo_Status_STATUS_EXPIRED = 2,
  LicenseInfo_Status_STATUS_NOT_YET_VALID = 3,
  LicenseInfo_Status_STATUS_MALFORMED = 4,
  LicenseInfo_Status_STATUS_SERIAL_MISMATCH = 5,
  LicenseInfo_Status_STATUS_NO_LICENSE = 6,
  LicenseInfo_Status_LicenseInfo_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LicenseInfo_Status_LicenseInfo_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LicenseInfo_Status_IsValid(int value);
constexpr LicenseInfo_Status LicenseInfo_Status_Status_MIN = LicenseInfo_Status_STATUS_UNKNOWN;
constexpr LicenseInfo_Status LicenseInfo_Status_Status_MAX = LicenseInfo_Status_STATUS_NO_LICENSE;
constexpr int LicenseInfo_Status_Status_ARRAYSIZE = LicenseInfo_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LicenseInfo_Status_descriptor();
template<typename T>
inline const std::string& LicenseInfo_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LicenseInfo_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LicenseInfo_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LicenseInfo_Status_descriptor(), enum_t_value);
}
inline bool LicenseInfo_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LicenseInfo_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LicenseInfo_Status>(
    LicenseInfo_Status_descriptor(), name, value);
}
// ===================================================================

class LicenseInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.LicenseInfo) */ {
 public:
  inline LicenseInfo() : LicenseInfo(nullptr) {}
  ~LicenseInfo() override;
  explicit PROTOBUF_CONSTEXPR LicenseInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LicenseInfo(const LicenseInfo& from);
  LicenseInfo(LicenseInfo&& from) noexcept
    : LicenseInfo() {
    *this = ::std::move(from);
  }

  inline LicenseInfo& operator=(const LicenseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LicenseInfo& operator=(LicenseInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LicenseInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const LicenseInfo* internal_default_instance() {
    return reinterpret_cast<const LicenseInfo*>(
               &_LicenseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LicenseInfo& a, LicenseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LicenseInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LicenseInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LicenseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LicenseInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LicenseInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LicenseInfo& from) {
    LicenseInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LicenseInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.LicenseInfo";
  }
  protected:
  explicit LicenseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LicenseInfo_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    LicenseInfo_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_VALID =
    LicenseInfo_Status_STATUS_VALID;
  static constexpr Status STATUS_EXPIRED =
    LicenseInfo_Status_STATUS_EXPIRED;
  static constexpr Status STATUS_NOT_YET_VALID =
    LicenseInfo_Status_STATUS_NOT_YET_VALID;
  static constexpr Status STATUS_MALFORMED =
    LicenseInfo_Status_STATUS_MALFORMED;
  static constexpr Status STATUS_SERIAL_MISMATCH =
    LicenseInfo_Status_STATUS_SERIAL_MISMATCH;
  static constexpr Status STATUS_NO_LICENSE =
    LicenseInfo_Status_STATUS_NO_LICENSE;
  static inline bool Status_IsValid(int value) {
    return LicenseInfo_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    LicenseInfo_Status_Status_MIN;
  static constexpr Status Status_MAX =
    LicenseInfo_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    LicenseInfo_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return LicenseInfo_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return LicenseInfo_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return LicenseInfo_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLicensedFeaturesFieldNumber = 6,
    kIdFieldNumber = 2,
    kRobotSerialFieldNumber = 3,
    kNotValidBeforeFieldNumber = 4,
    kNotValidAfterFieldNumber = 5,
    kStatusFieldNumber = 1,
  };
  // repeated string licensed_features = 6;
  int licensed_features_size() const;
  private:
  int _internal_licensed_features_size() const;
  public:
  void clear_licensed_features();
  const std::string& licensed_features(int index) const;
  std::string* mutable_licensed_features(int index);
  void set_licensed_features(int index, const std::string& value);
  void set_licensed_features(int index, std::string&& value);
  void set_licensed_features(int index, const char* value);
  void set_licensed_features(int index, const char* value, size_t size);
  std::string* add_licensed_features();
  void add_licensed_features(const std::string& value);
  void add_licensed_features(std::string&& value);
  void add_licensed_features(const char* value);
  void add_licensed_features(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& licensed_features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_licensed_features();
  private:
  const std::string& _internal_licensed_features(int index) const;
  std::string* _internal_add_licensed_features();
  public:

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string robot_serial = 3;
  void clear_robot_serial();
  const std::string& robot_serial() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_robot_serial(ArgT0&& arg0, ArgT... args);
  std::string* mutable_robot_serial();
  PROTOBUF_NODISCARD std::string* release_robot_serial();
  void set_allocated_robot_serial(std::string* robot_serial);
  private:
  const std::string& _internal_robot_serial() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_robot_serial(const std::string& value);
  std::string* _internal_mutable_robot_serial();
  public:

  // .google.protobuf.Timestamp not_valid_before = 4;
  bool has_not_valid_before() const;
  private:
  bool _internal_has_not_valid_before() const;
  public:
  void clear_not_valid_before();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& not_valid_before() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_not_valid_before();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_not_valid_before();
  void set_allocated_not_valid_before(::PROTOBUF_NAMESPACE_ID::Timestamp* not_valid_before);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_not_valid_before() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_not_valid_before();
  public:
  void unsafe_arena_set_allocated_not_valid_before(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* not_valid_before);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_not_valid_before();

  // .google.protobuf.Timestamp not_valid_after = 5;
  bool has_not_valid_after() const;
  private:
  bool _internal_has_not_valid_after() const;
  public:
  void clear_not_valid_after();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& not_valid_after() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_not_valid_after();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_not_valid_after();
  void set_allocated_not_valid_after(::PROTOBUF_NAMESPACE_ID::Timestamp* not_valid_after);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_not_valid_after() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_not_valid_after();
  public:
  void unsafe_arena_set_allocated_not_valid_after(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* not_valid_after);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_not_valid_after();

  // .bosdyn.api.LicenseInfo.Status status = 1;
  void clear_status();
  ::bosdyn::api::LicenseInfo_Status status() const;
  void set_status(::bosdyn::api::LicenseInfo_Status value);
  private:
  ::bosdyn::api::LicenseInfo_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::LicenseInfo_Status value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.LicenseInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> licensed_features_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_serial_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* not_valid_before_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* not_valid_after_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2flicense_2eproto;
};
// -------------------------------------------------------------------

class GetLicenseInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.GetLicenseInfoRequest) */ {
 public:
  inline GetLicenseInfoRequest() : GetLicenseInfoRequest(nullptr) {}
  ~GetLicenseInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR GetLicenseInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLicenseInfoRequest(const GetLicenseInfoRequest& from);
  GetLicenseInfoRequest(GetLicenseInfoRequest&& from) noexcept
    : GetLicenseInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetLicenseInfoRequest& operator=(const GetLicenseInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLicenseInfoRequest& operator=(GetLicenseInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLicenseInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLicenseInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetLicenseInfoRequest*>(
               &_GetLicenseInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetLicenseInfoRequest& a, GetLicenseInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLicenseInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLicenseInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLicenseInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLicenseInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLicenseInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetLicenseInfoRequest& from) {
    GetLicenseInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLicenseInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.GetLicenseInfoRequest";
  }
  protected:
  explicit GetLicenseInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.GetLicenseInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::RequestHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2flicense_2eproto;
};
// -------------------------------------------------------------------

class GetLicenseInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.GetLicenseInfoResponse) */ {
 public:
  inline GetLicenseInfoResponse() : GetLicenseInfoResponse(nullptr) {}
  ~GetLicenseInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR GetLicenseInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLicenseInfoResponse(const GetLicenseInfoResponse& from);
  GetLicenseInfoResponse(GetLicenseInfoResponse&& from) noexcept
    : GetLicenseInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetLicenseInfoResponse& operator=(const GetLicenseInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLicenseInfoResponse& operator=(GetLicenseInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLicenseInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLicenseInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetLicenseInfoResponse*>(
               &_GetLicenseInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetLicenseInfoResponse& a, GetLicenseInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLicenseInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLicenseInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLicenseInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLicenseInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLicenseInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetLicenseInfoResponse& from) {
    GetLicenseInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLicenseInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.GetLicenseInfoResponse";
  }
  protected:
  explicit GetLicenseInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kLicenseFieldNumber = 2,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.LicenseInfo license = 2;
  bool has_license() const;
  private:
  bool _internal_has_license() const;
  public:
  void clear_license();
  const ::bosdyn::api::LicenseInfo& license() const;
  PROTOBUF_NODISCARD ::bosdyn::api::LicenseInfo* release_license();
  ::bosdyn::api::LicenseInfo* mutable_license();
  void set_allocated_license(::bosdyn::api::LicenseInfo* license);
  private:
  const ::bosdyn::api::LicenseInfo& _internal_license() const;
  ::bosdyn::api::LicenseInfo* _internal_mutable_license();
  public:
  void unsafe_arena_set_allocated_license(
      ::bosdyn::api::LicenseInfo* license);
  ::bosdyn::api::LicenseInfo* unsafe_arena_release_license();

  // @@protoc_insertion_point(class_scope:bosdyn.api.GetLicenseInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::ResponseHeader* header_;
    ::bosdyn::api::LicenseInfo* license_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2flicense_2eproto;
};
// -------------------------------------------------------------------

class GetFeatureEnabledRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.GetFeatureEnabledRequest) */ {
 public:
  inline GetFeatureEnabledRequest() : GetFeatureEnabledRequest(nullptr) {}
  ~GetFeatureEnabledRequest() override;
  explicit PROTOBUF_CONSTEXPR GetFeatureEnabledRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFeatureEnabledRequest(const GetFeatureEnabledRequest& from);
  GetFeatureEnabledRequest(GetFeatureEnabledRequest&& from) noexcept
    : GetFeatureEnabledRequest() {
    *this = ::std::move(from);
  }

  inline GetFeatureEnabledRequest& operator=(const GetFeatureEnabledRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFeatureEnabledRequest& operator=(GetFeatureEnabledRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFeatureEnabledRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFeatureEnabledRequest* internal_default_instance() {
    return reinterpret_cast<const GetFeatureEnabledRequest*>(
               &_GetFeatureEnabledRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetFeatureEnabledRequest& a, GetFeatureEnabledRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFeatureEnabledRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFeatureEnabledRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFeatureEnabledRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFeatureEnabledRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFeatureEnabledRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFeatureEnabledRequest& from) {
    GetFeatureEnabledRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFeatureEnabledRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.GetFeatureEnabledRequest";
  }
  protected:
  explicit GetFeatureEnabledRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureCodesFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated string feature_codes = 2;
  int feature_codes_size() const;
  private:
  int _internal_feature_codes_size() const;
  public:
  void clear_feature_codes();
  const std::string& feature_codes(int index) const;
  std::string* mutable_feature_codes(int index);
  void set_feature_codes(int index, const std::string& value);
  void set_feature_codes(int index, std::string&& value);
  void set_feature_codes(int index, const char* value);
  void set_feature_codes(int index, const char* value, size_t size);
  std::string* add_feature_codes();
  void add_feature_codes(const std::string& value);
  void add_feature_codes(std::string&& value);
  void add_feature_codes(const char* value);
  void add_feature_codes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& feature_codes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_feature_codes();
  private:
  const std::string& _internal_feature_codes(int index) const;
  std::string* _internal_add_feature_codes();
  public:

  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.GetFeatureEnabledRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> feature_codes_;
    ::bosdyn::api::RequestHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2flicense_2eproto;
};
// -------------------------------------------------------------------

class GetFeatureEnabledResponse_FeatureEnabledEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetFeatureEnabledResponse_FeatureEnabledEntry_DoNotUse, 
    std::string, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetFeatureEnabledResponse_FeatureEnabledEntry_DoNotUse, 
    std::string, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> SuperType;
  GetFeatureEnabledResponse_FeatureEnabledEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR GetFeatureEnabledResponse_FeatureEnabledEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit GetFeatureEnabledResponse_FeatureEnabledEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetFeatureEnabledResponse_FeatureEnabledEntry_DoNotUse& other);
  static const GetFeatureEnabledResponse_FeatureEnabledEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetFeatureEnabledResponse_FeatureEnabledEntry_DoNotUse*>(&_GetFeatureEnabledResponse_FeatureEnabledEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "bosdyn.api.GetFeatureEnabledResponse.FeatureEnabledEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_bosdyn_2fapi_2flicense_2eproto;
};

// -------------------------------------------------------------------

class GetFeatureEnabledResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.GetFeatureEnabledResponse) */ {
 public:
  inline GetFeatureEnabledResponse() : GetFeatureEnabledResponse(nullptr) {}
  ~GetFeatureEnabledResponse() override;
  explicit PROTOBUF_CONSTEXPR GetFeatureEnabledResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFeatureEnabledResponse(const GetFeatureEnabledResponse& from);
  GetFeatureEnabledResponse(GetFeatureEnabledResponse&& from) noexcept
    : GetFeatureEnabledResponse() {
    *this = ::std::move(from);
  }

  inline GetFeatureEnabledResponse& operator=(const GetFeatureEnabledResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFeatureEnabledResponse& operator=(GetFeatureEnabledResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFeatureEnabledResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFeatureEnabledResponse* internal_default_instance() {
    return reinterpret_cast<const GetFeatureEnabledResponse*>(
               &_GetFeatureEnabledResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetFeatureEnabledResponse& a, GetFeatureEnabledResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFeatureEnabledResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFeatureEnabledResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFeatureEnabledResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFeatureEnabledResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFeatureEnabledResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFeatureEnabledResponse& from) {
    GetFeatureEnabledResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFeatureEnabledResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.GetFeatureEnabledResponse";
  }
  protected:
  explicit GetFeatureEnabledResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFeatureEnabledFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // map<string, bool> feature_enabled = 2;
  int feature_enabled_size() const;
  private:
  int _internal_feature_enabled_size() const;
  public:
  void clear_feature_enabled();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >&
      _internal_feature_enabled() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >*
      _internal_mutable_feature_enabled();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >&
      feature_enabled() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >*
      mutable_feature_enabled();

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.GetFeatureEnabledResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        GetFeatureEnabledResponse_FeatureEnabledEntry_DoNotUse,
        std::string, bool,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> feature_enabled_;
    ::bosdyn::api::ResponseHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2flicense_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LicenseInfo

// .bosdyn.api.LicenseInfo.Status status = 1;
inline void LicenseInfo::clear_status() {
  _impl_.status_ = 0;
}
inline ::bosdyn::api::LicenseInfo_Status LicenseInfo::_internal_status() const {
  return static_cast< ::bosdyn::api::LicenseInfo_Status >(_impl_.status_);
}
inline ::bosdyn::api::LicenseInfo_Status LicenseInfo::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LicenseInfo.status)
  return _internal_status();
}
inline void LicenseInfo::_internal_set_status(::bosdyn::api::LicenseInfo_Status value) {
  
  _impl_.status_ = value;
}
inline void LicenseInfo::set_status(::bosdyn::api::LicenseInfo_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.LicenseInfo.status)
}

// string id = 2;
inline void LicenseInfo::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& LicenseInfo::id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LicenseInfo.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LicenseInfo::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.LicenseInfo.id)
}
inline std::string* LicenseInfo::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.LicenseInfo.id)
  return _s;
}
inline const std::string& LicenseInfo::_internal_id() const {
  return _impl_.id_.Get();
}
inline void LicenseInfo::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* LicenseInfo::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* LicenseInfo::release_id() {
  // @@protoc_insertion_point(field_release:bosdyn.api.LicenseInfo.id)
  return _impl_.id_.Release();
}
inline void LicenseInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.LicenseInfo.id)
}

// string robot_serial = 3;
inline void LicenseInfo::clear_robot_serial() {
  _impl_.robot_serial_.ClearToEmpty();
}
inline const std::string& LicenseInfo::robot_serial() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LicenseInfo.robot_serial)
  return _internal_robot_serial();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LicenseInfo::set_robot_serial(ArgT0&& arg0, ArgT... args) {
 
 _impl_.robot_serial_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.LicenseInfo.robot_serial)
}
inline std::string* LicenseInfo::mutable_robot_serial() {
  std::string* _s = _internal_mutable_robot_serial();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.LicenseInfo.robot_serial)
  return _s;
}
inline const std::string& LicenseInfo::_internal_robot_serial() const {
  return _impl_.robot_serial_.Get();
}
inline void LicenseInfo::_internal_set_robot_serial(const std::string& value) {
  
  _impl_.robot_serial_.Set(value, GetArenaForAllocation());
}
inline std::string* LicenseInfo::_internal_mutable_robot_serial() {
  
  return _impl_.robot_serial_.Mutable(GetArenaForAllocation());
}
inline std::string* LicenseInfo::release_robot_serial() {
  // @@protoc_insertion_point(field_release:bosdyn.api.LicenseInfo.robot_serial)
  return _impl_.robot_serial_.Release();
}
inline void LicenseInfo::set_allocated_robot_serial(std::string* robot_serial) {
  if (robot_serial != nullptr) {
    
  } else {
    
  }
  _impl_.robot_serial_.SetAllocated(robot_serial, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.robot_serial_.IsDefault()) {
    _impl_.robot_serial_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.LicenseInfo.robot_serial)
}

// .google.protobuf.Timestamp not_valid_before = 4;
inline bool LicenseInfo::_internal_has_not_valid_before() const {
  return this != internal_default_instance() && _impl_.not_valid_before_ != nullptr;
}
inline bool LicenseInfo::has_not_valid_before() const {
  return _internal_has_not_valid_before();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LicenseInfo::_internal_not_valid_before() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.not_valid_before_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LicenseInfo::not_valid_before() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LicenseInfo.not_valid_before)
  return _internal_not_valid_before();
}
inline void LicenseInfo::unsafe_arena_set_allocated_not_valid_before(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* not_valid_before) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.not_valid_before_);
  }
  _impl_.not_valid_before_ = not_valid_before;
  if (not_valid_before) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.LicenseInfo.not_valid_before)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LicenseInfo::release_not_valid_before() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.not_valid_before_;
  _impl_.not_valid_before_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LicenseInfo::unsafe_arena_release_not_valid_before() {
  // @@protoc_insertion_point(field_release:bosdyn.api.LicenseInfo.not_valid_before)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.not_valid_before_;
  _impl_.not_valid_before_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LicenseInfo::_internal_mutable_not_valid_before() {
  
  if (_impl_.not_valid_before_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.not_valid_before_ = p;
  }
  return _impl_.not_valid_before_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LicenseInfo::mutable_not_valid_before() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_not_valid_before();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.LicenseInfo.not_valid_before)
  return _msg;
}
inline void LicenseInfo::set_allocated_not_valid_before(::PROTOBUF_NAMESPACE_ID::Timestamp* not_valid_before) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.not_valid_before_);
  }
  if (not_valid_before) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(not_valid_before));
    if (message_arena != submessage_arena) {
      not_valid_before = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, not_valid_before, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.not_valid_before_ = not_valid_before;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.LicenseInfo.not_valid_before)
}

// .google.protobuf.Timestamp not_valid_after = 5;
inline bool LicenseInfo::_internal_has_not_valid_after() const {
  return this != internal_default_instance() && _impl_.not_valid_after_ != nullptr;
}
inline bool LicenseInfo::has_not_valid_after() const {
  return _internal_has_not_valid_after();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LicenseInfo::_internal_not_valid_after() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.not_valid_after_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LicenseInfo::not_valid_after() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LicenseInfo.not_valid_after)
  return _internal_not_valid_after();
}
inline void LicenseInfo::unsafe_arena_set_allocated_not_valid_after(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* not_valid_after) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.not_valid_after_);
  }
  _impl_.not_valid_after_ = not_valid_after;
  if (not_valid_after) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.LicenseInfo.not_valid_after)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LicenseInfo::release_not_valid_after() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.not_valid_after_;
  _impl_.not_valid_after_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LicenseInfo::unsafe_arena_release_not_valid_after() {
  // @@protoc_insertion_point(field_release:bosdyn.api.LicenseInfo.not_valid_after)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.not_valid_after_;
  _impl_.not_valid_after_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LicenseInfo::_internal_mutable_not_valid_after() {
  
  if (_impl_.not_valid_after_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.not_valid_after_ = p;
  }
  return _impl_.not_valid_after_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LicenseInfo::mutable_not_valid_after() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_not_valid_after();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.LicenseInfo.not_valid_after)
  return _msg;
}
inline void LicenseInfo::set_allocated_not_valid_after(::PROTOBUF_NAMESPACE_ID::Timestamp* not_valid_after) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.not_valid_after_);
  }
  if (not_valid_after) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(not_valid_after));
    if (message_arena != submessage_arena) {
      not_valid_after = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, not_valid_after, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.not_valid_after_ = not_valid_after;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.LicenseInfo.not_valid_after)
}

// repeated string licensed_features = 6;
inline int LicenseInfo::_internal_licensed_features_size() const {
  return _impl_.licensed_features_.size();
}
inline int LicenseInfo::licensed_features_size() const {
  return _internal_licensed_features_size();
}
inline void LicenseInfo::clear_licensed_features() {
  _impl_.licensed_features_.Clear();
}
inline std::string* LicenseInfo::add_licensed_features() {
  std::string* _s = _internal_add_licensed_features();
  // @@protoc_insertion_point(field_add_mutable:bosdyn.api.LicenseInfo.licensed_features)
  return _s;
}
inline const std::string& LicenseInfo::_internal_licensed_features(int index) const {
  return _impl_.licensed_features_.Get(index);
}
inline const std::string& LicenseInfo::licensed_features(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LicenseInfo.licensed_features)
  return _internal_licensed_features(index);
}
inline std::string* LicenseInfo::mutable_licensed_features(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.LicenseInfo.licensed_features)
  return _impl_.licensed_features_.Mutable(index);
}
inline void LicenseInfo::set_licensed_features(int index, const std::string& value) {
  _impl_.licensed_features_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.LicenseInfo.licensed_features)
}
inline void LicenseInfo::set_licensed_features(int index, std::string&& value) {
  _impl_.licensed_features_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:bosdyn.api.LicenseInfo.licensed_features)
}
inline void LicenseInfo::set_licensed_features(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.licensed_features_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bosdyn.api.LicenseInfo.licensed_features)
}
inline void LicenseInfo::set_licensed_features(int index, const char* value, size_t size) {
  _impl_.licensed_features_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.LicenseInfo.licensed_features)
}
inline std::string* LicenseInfo::_internal_add_licensed_features() {
  return _impl_.licensed_features_.Add();
}
inline void LicenseInfo::add_licensed_features(const std::string& value) {
  _impl_.licensed_features_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bosdyn.api.LicenseInfo.licensed_features)
}
inline void LicenseInfo::add_licensed_features(std::string&& value) {
  _impl_.licensed_features_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bosdyn.api.LicenseInfo.licensed_features)
}
inline void LicenseInfo::add_licensed_features(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.licensed_features_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bosdyn.api.LicenseInfo.licensed_features)
}
inline void LicenseInfo::add_licensed_features(const char* value, size_t size) {
  _impl_.licensed_features_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bosdyn.api.LicenseInfo.licensed_features)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LicenseInfo::licensed_features() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.LicenseInfo.licensed_features)
  return _impl_.licensed_features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LicenseInfo::mutable_licensed_features() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.LicenseInfo.licensed_features)
  return &_impl_.licensed_features_;
}

// -------------------------------------------------------------------

// GetLicenseInfoRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool GetLicenseInfoRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool GetLicenseInfoRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& GetLicenseInfoRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RequestHeader&>(
      ::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& GetLicenseInfoRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetLicenseInfoRequest.header)
  return _internal_header();
}
inline void GetLicenseInfoRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GetLicenseInfoRequest.header)
}
inline ::bosdyn::api::RequestHeader* GetLicenseInfoRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetLicenseInfoRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GetLicenseInfoRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetLicenseInfoRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::RequestHeader* GetLicenseInfoRequest::mutable_header() {
  ::bosdyn::api::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GetLicenseInfoRequest.header)
  return _msg;
}
inline void GetLicenseInfoRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GetLicenseInfoRequest.header)
}

// -------------------------------------------------------------------

// GetLicenseInfoResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool GetLicenseInfoResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool GetLicenseInfoResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& GetLicenseInfoResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ResponseHeader&>(
      ::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& GetLicenseInfoResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetLicenseInfoResponse.header)
  return _internal_header();
}
inline void GetLicenseInfoResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GetLicenseInfoResponse.header)
}
inline ::bosdyn::api::ResponseHeader* GetLicenseInfoResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetLicenseInfoResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GetLicenseInfoResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetLicenseInfoResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::ResponseHeader* GetLicenseInfoResponse::mutable_header() {
  ::bosdyn::api::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GetLicenseInfoResponse.header)
  return _msg;
}
inline void GetLicenseInfoResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GetLicenseInfoResponse.header)
}

// .bosdyn.api.LicenseInfo license = 2;
inline bool GetLicenseInfoResponse::_internal_has_license() const {
  return this != internal_default_instance() && _impl_.license_ != nullptr;
}
inline bool GetLicenseInfoResponse::has_license() const {
  return _internal_has_license();
}
inline void GetLicenseInfoResponse::clear_license() {
  if (GetArenaForAllocation() == nullptr && _impl_.license_ != nullptr) {
    delete _impl_.license_;
  }
  _impl_.license_ = nullptr;
}
inline const ::bosdyn::api::LicenseInfo& GetLicenseInfoResponse::_internal_license() const {
  const ::bosdyn::api::LicenseInfo* p = _impl_.license_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::LicenseInfo&>(
      ::bosdyn::api::_LicenseInfo_default_instance_);
}
inline const ::bosdyn::api::LicenseInfo& GetLicenseInfoResponse::license() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetLicenseInfoResponse.license)
  return _internal_license();
}
inline void GetLicenseInfoResponse::unsafe_arena_set_allocated_license(
    ::bosdyn::api::LicenseInfo* license) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.license_);
  }
  _impl_.license_ = license;
  if (license) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GetLicenseInfoResponse.license)
}
inline ::bosdyn::api::LicenseInfo* GetLicenseInfoResponse::release_license() {
  
  ::bosdyn::api::LicenseInfo* temp = _impl_.license_;
  _impl_.license_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::LicenseInfo* GetLicenseInfoResponse::unsafe_arena_release_license() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GetLicenseInfoResponse.license)
  
  ::bosdyn::api::LicenseInfo* temp = _impl_.license_;
  _impl_.license_ = nullptr;
  return temp;
}
inline ::bosdyn::api::LicenseInfo* GetLicenseInfoResponse::_internal_mutable_license() {
  
  if (_impl_.license_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::LicenseInfo>(GetArenaForAllocation());
    _impl_.license_ = p;
  }
  return _impl_.license_;
}
inline ::bosdyn::api::LicenseInfo* GetLicenseInfoResponse::mutable_license() {
  ::bosdyn::api::LicenseInfo* _msg = _internal_mutable_license();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GetLicenseInfoResponse.license)
  return _msg;
}
inline void GetLicenseInfoResponse::set_allocated_license(::bosdyn::api::LicenseInfo* license) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.license_;
  }
  if (license) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(license);
    if (message_arena != submessage_arena) {
      license = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, license, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.license_ = license;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GetLicenseInfoResponse.license)
}

// -------------------------------------------------------------------

// GetFeatureEnabledRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool GetFeatureEnabledRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool GetFeatureEnabledRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& GetFeatureEnabledRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RequestHeader&>(
      ::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& GetFeatureEnabledRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetFeatureEnabledRequest.header)
  return _internal_header();
}
inline void GetFeatureEnabledRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GetFeatureEnabledRequest.header)
}
inline ::bosdyn::api::RequestHeader* GetFeatureEnabledRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetFeatureEnabledRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GetFeatureEnabledRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetFeatureEnabledRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::RequestHeader* GetFeatureEnabledRequest::mutable_header() {
  ::bosdyn::api::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GetFeatureEnabledRequest.header)
  return _msg;
}
inline void GetFeatureEnabledRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GetFeatureEnabledRequest.header)
}

// repeated string feature_codes = 2;
inline int GetFeatureEnabledRequest::_internal_feature_codes_size() const {
  return _impl_.feature_codes_.size();
}
inline int GetFeatureEnabledRequest::feature_codes_size() const {
  return _internal_feature_codes_size();
}
inline void GetFeatureEnabledRequest::clear_feature_codes() {
  _impl_.feature_codes_.Clear();
}
inline std::string* GetFeatureEnabledRequest::add_feature_codes() {
  std::string* _s = _internal_add_feature_codes();
  // @@protoc_insertion_point(field_add_mutable:bosdyn.api.GetFeatureEnabledRequest.feature_codes)
  return _s;
}
inline const std::string& GetFeatureEnabledRequest::_internal_feature_codes(int index) const {
  return _impl_.feature_codes_.Get(index);
}
inline const std::string& GetFeatureEnabledRequest::feature_codes(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetFeatureEnabledRequest.feature_codes)
  return _internal_feature_codes(index);
}
inline std::string* GetFeatureEnabledRequest::mutable_feature_codes(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GetFeatureEnabledRequest.feature_codes)
  return _impl_.feature_codes_.Mutable(index);
}
inline void GetFeatureEnabledRequest::set_feature_codes(int index, const std::string& value) {
  _impl_.feature_codes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.GetFeatureEnabledRequest.feature_codes)
}
inline void GetFeatureEnabledRequest::set_feature_codes(int index, std::string&& value) {
  _impl_.feature_codes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:bosdyn.api.GetFeatureEnabledRequest.feature_codes)
}
inline void GetFeatureEnabledRequest::set_feature_codes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.feature_codes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bosdyn.api.GetFeatureEnabledRequest.feature_codes)
}
inline void GetFeatureEnabledRequest::set_feature_codes(int index, const char* value, size_t size) {
  _impl_.feature_codes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.GetFeatureEnabledRequest.feature_codes)
}
inline std::string* GetFeatureEnabledRequest::_internal_add_feature_codes() {
  return _impl_.feature_codes_.Add();
}
inline void GetFeatureEnabledRequest::add_feature_codes(const std::string& value) {
  _impl_.feature_codes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bosdyn.api.GetFeatureEnabledRequest.feature_codes)
}
inline void GetFeatureEnabledRequest::add_feature_codes(std::string&& value) {
  _impl_.feature_codes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bosdyn.api.GetFeatureEnabledRequest.feature_codes)
}
inline void GetFeatureEnabledRequest::add_feature_codes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.feature_codes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bosdyn.api.GetFeatureEnabledRequest.feature_codes)
}
inline void GetFeatureEnabledRequest::add_feature_codes(const char* value, size_t size) {
  _impl_.feature_codes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bosdyn.api.GetFeatureEnabledRequest.feature_codes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetFeatureEnabledRequest::feature_codes() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.GetFeatureEnabledRequest.feature_codes)
  return _impl_.feature_codes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetFeatureEnabledRequest::mutable_feature_codes() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.GetFeatureEnabledRequest.feature_codes)
  return &_impl_.feature_codes_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetFeatureEnabledResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool GetFeatureEnabledResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool GetFeatureEnabledResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& GetFeatureEnabledResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ResponseHeader&>(
      ::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& GetFeatureEnabledResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetFeatureEnabledResponse.header)
  return _internal_header();
}
inline void GetFeatureEnabledResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GetFeatureEnabledResponse.header)
}
inline ::bosdyn::api::ResponseHeader* GetFeatureEnabledResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetFeatureEnabledResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GetFeatureEnabledResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetFeatureEnabledResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::ResponseHeader* GetFeatureEnabledResponse::mutable_header() {
  ::bosdyn::api::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GetFeatureEnabledResponse.header)
  return _msg;
}
inline void GetFeatureEnabledResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GetFeatureEnabledResponse.header)
}

// map<string, bool> feature_enabled = 2;
inline int GetFeatureEnabledResponse::_internal_feature_enabled_size() const {
  return _impl_.feature_enabled_.size();
}
inline int GetFeatureEnabledResponse::feature_enabled_size() const {
  return _internal_feature_enabled_size();
}
inline void GetFeatureEnabledResponse::clear_feature_enabled() {
  _impl_.feature_enabled_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >&
GetFeatureEnabledResponse::_internal_feature_enabled() const {
  return _impl_.feature_enabled_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >&
GetFeatureEnabledResponse::feature_enabled() const {
  // @@protoc_insertion_point(field_map:bosdyn.api.GetFeatureEnabledResponse.feature_enabled)
  return _internal_feature_enabled();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >*
GetFeatureEnabledResponse::_internal_mutable_feature_enabled() {
  return _impl_.feature_enabled_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >*
GetFeatureEnabledResponse::mutable_feature_enabled() {
  // @@protoc_insertion_point(field_mutable_map:bosdyn.api.GetFeatureEnabledResponse.feature_enabled)
  return _internal_mutable_feature_enabled();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::LicenseInfo_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::LicenseInfo_Status>() {
  return ::bosdyn::api::LicenseInfo_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2flicense_2eproto

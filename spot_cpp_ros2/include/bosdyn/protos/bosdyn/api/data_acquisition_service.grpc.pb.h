// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bosdyn/api/data_acquisition_service.proto
// Original file comments:
// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).
//
#ifndef GRPC_bosdyn_2fapi_2fdata_5facquisition_5fservice_2eproto__INCLUDED
#define GRPC_bosdyn_2fapi_2fdata_5facquisition_5fservice_2eproto__INCLUDED

#include "bosdyn/api/data_acquisition_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace bosdyn {
namespace api {

// The DataAcquisitionService is the main data acquisition service run on robot, which recieves
// incoming requests and sends queries to all directory-registered DataAcquisitionPluginServices.
class DataAcquisitionService final {
 public:
  static constexpr char const* service_full_name() {
    return "bosdyn.api.DataAcquisitionService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Trigger a data acquisition to save data and metadata to the data buffer.
    // Sent by the tablet or a client to initiate a data acquisition and buffering process.
    virtual ::grpc::Status AcquireData(::grpc::ClientContext* context, const ::bosdyn::api::AcquireDataRequest& request, ::bosdyn::api::AcquireDataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::AcquireDataResponse>> AsyncAcquireData(::grpc::ClientContext* context, const ::bosdyn::api::AcquireDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::AcquireDataResponse>>(AsyncAcquireDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::AcquireDataResponse>> PrepareAsyncAcquireData(::grpc::ClientContext* context, const ::bosdyn::api::AcquireDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::AcquireDataResponse>>(PrepareAsyncAcquireDataRaw(context, request, cq));
    }
    // Query the status of a data acquisition.
    virtual ::grpc::Status GetStatus(::grpc::ClientContext* context, const ::bosdyn::api::GetStatusRequest& request, ::bosdyn::api::GetStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetStatusResponse>> AsyncGetStatus(::grpc::ClientContext* context, const ::bosdyn::api::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetStatusResponse>>(AsyncGetStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetStatusResponse>> PrepareAsyncGetStatus(::grpc::ClientContext* context, const ::bosdyn::api::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetStatusResponse>>(PrepareAsyncGetStatusRaw(context, request, cq));
    }
    // Get information from a DAQ service; lists acquisition capabilities.
    virtual ::grpc::Status GetServiceInfo(::grpc::ClientContext* context, const ::bosdyn::api::GetServiceInfoRequest& request, ::bosdyn::api::GetServiceInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetServiceInfoResponse>> AsyncGetServiceInfo(::grpc::ClientContext* context, const ::bosdyn::api::GetServiceInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetServiceInfoResponse>>(AsyncGetServiceInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetServiceInfoResponse>> PrepareAsyncGetServiceInfo(::grpc::ClientContext* context, const ::bosdyn::api::GetServiceInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetServiceInfoResponse>>(PrepareAsyncGetServiceInfoRaw(context, request, cq));
    }
    // Cancel an in-progress data acquisition.
    virtual ::grpc::Status CancelAcquisition(::grpc::ClientContext* context, const ::bosdyn::api::CancelAcquisitionRequest& request, ::bosdyn::api::CancelAcquisitionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::CancelAcquisitionResponse>> AsyncCancelAcquisition(::grpc::ClientContext* context, const ::bosdyn::api::CancelAcquisitionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::CancelAcquisitionResponse>>(AsyncCancelAcquisitionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::CancelAcquisitionResponse>> PrepareAsyncCancelAcquisition(::grpc::ClientContext* context, const ::bosdyn::api::CancelAcquisitionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::CancelAcquisitionResponse>>(PrepareAsyncCancelAcquisitionRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Trigger a data acquisition to save data and metadata to the data buffer.
      // Sent by the tablet or a client to initiate a data acquisition and buffering process.
      virtual void AcquireData(::grpc::ClientContext* context, const ::bosdyn::api::AcquireDataRequest* request, ::bosdyn::api::AcquireDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AcquireData(::grpc::ClientContext* context, const ::bosdyn::api::AcquireDataRequest* request, ::bosdyn::api::AcquireDataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Query the status of a data acquisition.
      virtual void GetStatus(::grpc::ClientContext* context, const ::bosdyn::api::GetStatusRequest* request, ::bosdyn::api::GetStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetStatus(::grpc::ClientContext* context, const ::bosdyn::api::GetStatusRequest* request, ::bosdyn::api::GetStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get information from a DAQ service; lists acquisition capabilities.
      virtual void GetServiceInfo(::grpc::ClientContext* context, const ::bosdyn::api::GetServiceInfoRequest* request, ::bosdyn::api::GetServiceInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetServiceInfo(::grpc::ClientContext* context, const ::bosdyn::api::GetServiceInfoRequest* request, ::bosdyn::api::GetServiceInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Cancel an in-progress data acquisition.
      virtual void CancelAcquisition(::grpc::ClientContext* context, const ::bosdyn::api::CancelAcquisitionRequest* request, ::bosdyn::api::CancelAcquisitionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CancelAcquisition(::grpc::ClientContext* context, const ::bosdyn::api::CancelAcquisitionRequest* request, ::bosdyn::api::CancelAcquisitionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::AcquireDataResponse>* AsyncAcquireDataRaw(::grpc::ClientContext* context, const ::bosdyn::api::AcquireDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::AcquireDataResponse>* PrepareAsyncAcquireDataRaw(::grpc::ClientContext* context, const ::bosdyn::api::AcquireDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetStatusResponse>* AsyncGetStatusRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetStatusResponse>* PrepareAsyncGetStatusRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetServiceInfoResponse>* AsyncGetServiceInfoRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetServiceInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetServiceInfoResponse>* PrepareAsyncGetServiceInfoRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetServiceInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::CancelAcquisitionResponse>* AsyncCancelAcquisitionRaw(::grpc::ClientContext* context, const ::bosdyn::api::CancelAcquisitionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::CancelAcquisitionResponse>* PrepareAsyncCancelAcquisitionRaw(::grpc::ClientContext* context, const ::bosdyn::api::CancelAcquisitionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status AcquireData(::grpc::ClientContext* context, const ::bosdyn::api::AcquireDataRequest& request, ::bosdyn::api::AcquireDataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::AcquireDataResponse>> AsyncAcquireData(::grpc::ClientContext* context, const ::bosdyn::api::AcquireDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::AcquireDataResponse>>(AsyncAcquireDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::AcquireDataResponse>> PrepareAsyncAcquireData(::grpc::ClientContext* context, const ::bosdyn::api::AcquireDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::AcquireDataResponse>>(PrepareAsyncAcquireDataRaw(context, request, cq));
    }
    ::grpc::Status GetStatus(::grpc::ClientContext* context, const ::bosdyn::api::GetStatusRequest& request, ::bosdyn::api::GetStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetStatusResponse>> AsyncGetStatus(::grpc::ClientContext* context, const ::bosdyn::api::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetStatusResponse>>(AsyncGetStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetStatusResponse>> PrepareAsyncGetStatus(::grpc::ClientContext* context, const ::bosdyn::api::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetStatusResponse>>(PrepareAsyncGetStatusRaw(context, request, cq));
    }
    ::grpc::Status GetServiceInfo(::grpc::ClientContext* context, const ::bosdyn::api::GetServiceInfoRequest& request, ::bosdyn::api::GetServiceInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetServiceInfoResponse>> AsyncGetServiceInfo(::grpc::ClientContext* context, const ::bosdyn::api::GetServiceInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetServiceInfoResponse>>(AsyncGetServiceInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetServiceInfoResponse>> PrepareAsyncGetServiceInfo(::grpc::ClientContext* context, const ::bosdyn::api::GetServiceInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetServiceInfoResponse>>(PrepareAsyncGetServiceInfoRaw(context, request, cq));
    }
    ::grpc::Status CancelAcquisition(::grpc::ClientContext* context, const ::bosdyn::api::CancelAcquisitionRequest& request, ::bosdyn::api::CancelAcquisitionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::CancelAcquisitionResponse>> AsyncCancelAcquisition(::grpc::ClientContext* context, const ::bosdyn::api::CancelAcquisitionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::CancelAcquisitionResponse>>(AsyncCancelAcquisitionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::CancelAcquisitionResponse>> PrepareAsyncCancelAcquisition(::grpc::ClientContext* context, const ::bosdyn::api::CancelAcquisitionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::CancelAcquisitionResponse>>(PrepareAsyncCancelAcquisitionRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void AcquireData(::grpc::ClientContext* context, const ::bosdyn::api::AcquireDataRequest* request, ::bosdyn::api::AcquireDataResponse* response, std::function<void(::grpc::Status)>) override;
      void AcquireData(::grpc::ClientContext* context, const ::bosdyn::api::AcquireDataRequest* request, ::bosdyn::api::AcquireDataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetStatus(::grpc::ClientContext* context, const ::bosdyn::api::GetStatusRequest* request, ::bosdyn::api::GetStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void GetStatus(::grpc::ClientContext* context, const ::bosdyn::api::GetStatusRequest* request, ::bosdyn::api::GetStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetServiceInfo(::grpc::ClientContext* context, const ::bosdyn::api::GetServiceInfoRequest* request, ::bosdyn::api::GetServiceInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void GetServiceInfo(::grpc::ClientContext* context, const ::bosdyn::api::GetServiceInfoRequest* request, ::bosdyn::api::GetServiceInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CancelAcquisition(::grpc::ClientContext* context, const ::bosdyn::api::CancelAcquisitionRequest* request, ::bosdyn::api::CancelAcquisitionResponse* response, std::function<void(::grpc::Status)>) override;
      void CancelAcquisition(::grpc::ClientContext* context, const ::bosdyn::api::CancelAcquisitionRequest* request, ::bosdyn::api::CancelAcquisitionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::AcquireDataResponse>* AsyncAcquireDataRaw(::grpc::ClientContext* context, const ::bosdyn::api::AcquireDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::AcquireDataResponse>* PrepareAsyncAcquireDataRaw(::grpc::ClientContext* context, const ::bosdyn::api::AcquireDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetStatusResponse>* AsyncGetStatusRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetStatusResponse>* PrepareAsyncGetStatusRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetServiceInfoResponse>* AsyncGetServiceInfoRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetServiceInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetServiceInfoResponse>* PrepareAsyncGetServiceInfoRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetServiceInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::CancelAcquisitionResponse>* AsyncCancelAcquisitionRaw(::grpc::ClientContext* context, const ::bosdyn::api::CancelAcquisitionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::CancelAcquisitionResponse>* PrepareAsyncCancelAcquisitionRaw(::grpc::ClientContext* context, const ::bosdyn::api::CancelAcquisitionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AcquireData_;
    const ::grpc::internal::RpcMethod rpcmethod_GetStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_GetServiceInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_CancelAcquisition_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Trigger a data acquisition to save data and metadata to the data buffer.
    // Sent by the tablet or a client to initiate a data acquisition and buffering process.
    virtual ::grpc::Status AcquireData(::grpc::ServerContext* context, const ::bosdyn::api::AcquireDataRequest* request, ::bosdyn::api::AcquireDataResponse* response);
    // Query the status of a data acquisition.
    virtual ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::bosdyn::api::GetStatusRequest* request, ::bosdyn::api::GetStatusResponse* response);
    // Get information from a DAQ service; lists acquisition capabilities.
    virtual ::grpc::Status GetServiceInfo(::grpc::ServerContext* context, const ::bosdyn::api::GetServiceInfoRequest* request, ::bosdyn::api::GetServiceInfoResponse* response);
    // Cancel an in-progress data acquisition.
    virtual ::grpc::Status CancelAcquisition(::grpc::ServerContext* context, const ::bosdyn::api::CancelAcquisitionRequest* request, ::bosdyn::api::CancelAcquisitionResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AcquireData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AcquireData() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AcquireData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcquireData(::grpc::ServerContext* /*context*/, const ::bosdyn::api::AcquireDataRequest* /*request*/, ::bosdyn::api::AcquireDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAcquireData(::grpc::ServerContext* context, ::bosdyn::api::AcquireDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::AcquireDataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetStatus() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetStatusRequest* /*request*/, ::bosdyn::api::GetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStatus(::grpc::ServerContext* context, ::bosdyn::api::GetStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::GetStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServiceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetServiceInfo() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetServiceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceInfo(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetServiceInfoRequest* /*request*/, ::bosdyn::api::GetServiceInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceInfo(::grpc::ServerContext* context, ::bosdyn::api::GetServiceInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::GetServiceInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CancelAcquisition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CancelAcquisition() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CancelAcquisition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelAcquisition(::grpc::ServerContext* /*context*/, const ::bosdyn::api::CancelAcquisitionRequest* /*request*/, ::bosdyn::api::CancelAcquisitionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelAcquisition(::grpc::ServerContext* context, ::bosdyn::api::CancelAcquisitionRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::CancelAcquisitionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AcquireData<WithAsyncMethod_GetStatus<WithAsyncMethod_GetServiceInfo<WithAsyncMethod_CancelAcquisition<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_AcquireData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AcquireData() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::AcquireDataRequest, ::bosdyn::api::AcquireDataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::AcquireDataRequest* request, ::bosdyn::api::AcquireDataResponse* response) { return this->AcquireData(context, request, response); }));}
    void SetMessageAllocatorFor_AcquireData(
        ::grpc::MessageAllocator< ::bosdyn::api::AcquireDataRequest, ::bosdyn::api::AcquireDataResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::AcquireDataRequest, ::bosdyn::api::AcquireDataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AcquireData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcquireData(::grpc::ServerContext* /*context*/, const ::bosdyn::api::AcquireDataRequest* /*request*/, ::bosdyn::api::AcquireDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AcquireData(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::AcquireDataRequest* /*request*/, ::bosdyn::api::AcquireDataResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetStatus() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::GetStatusRequest, ::bosdyn::api::GetStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::GetStatusRequest* request, ::bosdyn::api::GetStatusResponse* response) { return this->GetStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetStatus(
        ::grpc::MessageAllocator< ::bosdyn::api::GetStatusRequest, ::bosdyn::api::GetStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::GetStatusRequest, ::bosdyn::api::GetStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetStatusRequest* /*request*/, ::bosdyn::api::GetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::GetStatusRequest* /*request*/, ::bosdyn::api::GetStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetServiceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetServiceInfo() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::GetServiceInfoRequest, ::bosdyn::api::GetServiceInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::GetServiceInfoRequest* request, ::bosdyn::api::GetServiceInfoResponse* response) { return this->GetServiceInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetServiceInfo(
        ::grpc::MessageAllocator< ::bosdyn::api::GetServiceInfoRequest, ::bosdyn::api::GetServiceInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::GetServiceInfoRequest, ::bosdyn::api::GetServiceInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetServiceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceInfo(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetServiceInfoRequest* /*request*/, ::bosdyn::api::GetServiceInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetServiceInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::GetServiceInfoRequest* /*request*/, ::bosdyn::api::GetServiceInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CancelAcquisition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CancelAcquisition() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::CancelAcquisitionRequest, ::bosdyn::api::CancelAcquisitionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::CancelAcquisitionRequest* request, ::bosdyn::api::CancelAcquisitionResponse* response) { return this->CancelAcquisition(context, request, response); }));}
    void SetMessageAllocatorFor_CancelAcquisition(
        ::grpc::MessageAllocator< ::bosdyn::api::CancelAcquisitionRequest, ::bosdyn::api::CancelAcquisitionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::CancelAcquisitionRequest, ::bosdyn::api::CancelAcquisitionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CancelAcquisition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelAcquisition(::grpc::ServerContext* /*context*/, const ::bosdyn::api::CancelAcquisitionRequest* /*request*/, ::bosdyn::api::CancelAcquisitionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CancelAcquisition(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::CancelAcquisitionRequest* /*request*/, ::bosdyn::api::CancelAcquisitionResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_AcquireData<WithCallbackMethod_GetStatus<WithCallbackMethod_GetServiceInfo<WithCallbackMethod_CancelAcquisition<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AcquireData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AcquireData() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AcquireData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcquireData(::grpc::ServerContext* /*context*/, const ::bosdyn::api::AcquireDataRequest* /*request*/, ::bosdyn::api::AcquireDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetStatus() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetStatusRequest* /*request*/, ::bosdyn::api::GetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServiceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetServiceInfo() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetServiceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceInfo(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetServiceInfoRequest* /*request*/, ::bosdyn::api::GetServiceInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CancelAcquisition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CancelAcquisition() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CancelAcquisition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelAcquisition(::grpc::ServerContext* /*context*/, const ::bosdyn::api::CancelAcquisitionRequest* /*request*/, ::bosdyn::api::CancelAcquisitionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AcquireData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AcquireData() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AcquireData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcquireData(::grpc::ServerContext* /*context*/, const ::bosdyn::api::AcquireDataRequest* /*request*/, ::bosdyn::api::AcquireDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAcquireData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetStatus() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetStatusRequest* /*request*/, ::bosdyn::api::GetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServiceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetServiceInfo() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetServiceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceInfo(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetServiceInfoRequest* /*request*/, ::bosdyn::api::GetServiceInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CancelAcquisition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CancelAcquisition() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CancelAcquisition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelAcquisition(::grpc::ServerContext* /*context*/, const ::bosdyn::api::CancelAcquisitionRequest* /*request*/, ::bosdyn::api::CancelAcquisitionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelAcquisition(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AcquireData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AcquireData() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AcquireData(context, request, response); }));
    }
    ~WithRawCallbackMethod_AcquireData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcquireData(::grpc::ServerContext* /*context*/, const ::bosdyn::api::AcquireDataRequest* /*request*/, ::bosdyn::api::AcquireDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AcquireData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetStatus() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetStatusRequest* /*request*/, ::bosdyn::api::GetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetServiceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetServiceInfo() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetServiceInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetServiceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceInfo(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetServiceInfoRequest* /*request*/, ::bosdyn::api::GetServiceInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetServiceInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CancelAcquisition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CancelAcquisition() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CancelAcquisition(context, request, response); }));
    }
    ~WithRawCallbackMethod_CancelAcquisition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelAcquisition(::grpc::ServerContext* /*context*/, const ::bosdyn::api::CancelAcquisitionRequest* /*request*/, ::bosdyn::api::CancelAcquisitionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CancelAcquisition(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AcquireData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AcquireData() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::AcquireDataRequest, ::bosdyn::api::AcquireDataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::AcquireDataRequest, ::bosdyn::api::AcquireDataResponse>* streamer) {
                       return this->StreamedAcquireData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AcquireData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AcquireData(::grpc::ServerContext* /*context*/, const ::bosdyn::api::AcquireDataRequest* /*request*/, ::bosdyn::api::AcquireDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAcquireData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::AcquireDataRequest,::bosdyn::api::AcquireDataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetStatus() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::GetStatusRequest, ::bosdyn::api::GetStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::GetStatusRequest, ::bosdyn::api::GetStatusResponse>* streamer) {
                       return this->StreamedGetStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetStatusRequest* /*request*/, ::bosdyn::api::GetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::GetStatusRequest,::bosdyn::api::GetStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServiceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetServiceInfo() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::GetServiceInfoRequest, ::bosdyn::api::GetServiceInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::GetServiceInfoRequest, ::bosdyn::api::GetServiceInfoResponse>* streamer) {
                       return this->StreamedGetServiceInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetServiceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServiceInfo(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetServiceInfoRequest* /*request*/, ::bosdyn::api::GetServiceInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServiceInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::GetServiceInfoRequest,::bosdyn::api::GetServiceInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CancelAcquisition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CancelAcquisition() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::CancelAcquisitionRequest, ::bosdyn::api::CancelAcquisitionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::CancelAcquisitionRequest, ::bosdyn::api::CancelAcquisitionResponse>* streamer) {
                       return this->StreamedCancelAcquisition(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CancelAcquisition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CancelAcquisition(::grpc::ServerContext* /*context*/, const ::bosdyn::api::CancelAcquisitionRequest* /*request*/, ::bosdyn::api::CancelAcquisitionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCancelAcquisition(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::CancelAcquisitionRequest,::bosdyn::api::CancelAcquisitionResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AcquireData<WithStreamedUnaryMethod_GetStatus<WithStreamedUnaryMethod_GetServiceInfo<WithStreamedUnaryMethod_CancelAcquisition<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AcquireData<WithStreamedUnaryMethod_GetStatus<WithStreamedUnaryMethod_GetServiceInfo<WithStreamedUnaryMethod_CancelAcquisition<Service > > > > StreamedService;
};

}  // namespace api
}  // namespace bosdyn


#endif  // GRPC_bosdyn_2fapi_2fdata_5facquisition_5fservice_2eproto__INCLUDED

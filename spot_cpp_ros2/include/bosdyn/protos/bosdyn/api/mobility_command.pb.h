// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/mobility_command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fmobility_5fcommand_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fmobility_5fcommand_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/basic_command.pb.h"
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fmobility_5fcommand_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fmobility_5fcommand_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fmobility_5fcommand_2eproto;
namespace bosdyn {
namespace api {
class MobilityCommand;
struct MobilityCommandDefaultTypeInternal;
extern MobilityCommandDefaultTypeInternal _MobilityCommand_default_instance_;
class MobilityCommand_Feedback;
struct MobilityCommand_FeedbackDefaultTypeInternal;
extern MobilityCommand_FeedbackDefaultTypeInternal _MobilityCommand_Feedback_default_instance_;
class MobilityCommand_Request;
struct MobilityCommand_RequestDefaultTypeInternal;
extern MobilityCommand_RequestDefaultTypeInternal _MobilityCommand_Request_default_instance_;
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::MobilityCommand* Arena::CreateMaybeMessage<::bosdyn::api::MobilityCommand>(Arena*);
template<> ::bosdyn::api::MobilityCommand_Feedback* Arena::CreateMaybeMessage<::bosdyn::api::MobilityCommand_Feedback>(Arena*);
template<> ::bosdyn::api::MobilityCommand_Request* Arena::CreateMaybeMessage<::bosdyn::api::MobilityCommand_Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {

// ===================================================================

class MobilityCommand_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.MobilityCommand.Request) */ {
 public:
  inline MobilityCommand_Request() : MobilityCommand_Request(nullptr) {}
  ~MobilityCommand_Request() override;
  explicit PROTOBUF_CONSTEXPR MobilityCommand_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MobilityCommand_Request(const MobilityCommand_Request& from);
  MobilityCommand_Request(MobilityCommand_Request&& from) noexcept
    : MobilityCommand_Request() {
    *this = ::std::move(from);
  }

  inline MobilityCommand_Request& operator=(const MobilityCommand_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline MobilityCommand_Request& operator=(MobilityCommand_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MobilityCommand_Request& default_instance() {
    return *internal_default_instance();
  }
  enum CommandCase {
    kSe2TrajectoryRequest = 1,
    kSe2VelocityRequest = 2,
    kSitRequest = 3,
    kStandRequest = 4,
    kStanceRequest = 5,
    kStopRequest = 6,
    kFollowArmRequest = 7,
    COMMAND_NOT_SET = 0,
  };

  static inline const MobilityCommand_Request* internal_default_instance() {
    return reinterpret_cast<const MobilityCommand_Request*>(
               &_MobilityCommand_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MobilityCommand_Request& a, MobilityCommand_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(MobilityCommand_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MobilityCommand_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MobilityCommand_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MobilityCommand_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MobilityCommand_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MobilityCommand_Request& from) {
    MobilityCommand_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MobilityCommand_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.MobilityCommand.Request";
  }
  protected:
  explicit MobilityCommand_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 100,
    kSe2TrajectoryRequestFieldNumber = 1,
    kSe2VelocityRequestFieldNumber = 2,
    kSitRequestFieldNumber = 3,
    kStandRequestFieldNumber = 4,
    kStanceRequestFieldNumber = 5,
    kStopRequestFieldNumber = 6,
    kFollowArmRequestFieldNumber = 7,
  };
  // .google.protobuf.Any params = 100;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::PROTOBUF_NAMESPACE_ID::Any& params() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_params();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_params();
  void set_allocated_params(::PROTOBUF_NAMESPACE_ID::Any* params);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_params() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::PROTOBUF_NAMESPACE_ID::Any* params);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_params();

  // .bosdyn.api.SE2TrajectoryCommand.Request se2_trajectory_request = 1;
  bool has_se2_trajectory_request() const;
  private:
  bool _internal_has_se2_trajectory_request() const;
  public:
  void clear_se2_trajectory_request();
  const ::bosdyn::api::SE2TrajectoryCommand_Request& se2_trajectory_request() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SE2TrajectoryCommand_Request* release_se2_trajectory_request();
  ::bosdyn::api::SE2TrajectoryCommand_Request* mutable_se2_trajectory_request();
  void set_allocated_se2_trajectory_request(::bosdyn::api::SE2TrajectoryCommand_Request* se2_trajectory_request);
  private:
  const ::bosdyn::api::SE2TrajectoryCommand_Request& _internal_se2_trajectory_request() const;
  ::bosdyn::api::SE2TrajectoryCommand_Request* _internal_mutable_se2_trajectory_request();
  public:
  void unsafe_arena_set_allocated_se2_trajectory_request(
      ::bosdyn::api::SE2TrajectoryCommand_Request* se2_trajectory_request);
  ::bosdyn::api::SE2TrajectoryCommand_Request* unsafe_arena_release_se2_trajectory_request();

  // .bosdyn.api.SE2VelocityCommand.Request se2_velocity_request = 2;
  bool has_se2_velocity_request() const;
  private:
  bool _internal_has_se2_velocity_request() const;
  public:
  void clear_se2_velocity_request();
  const ::bosdyn::api::SE2VelocityCommand_Request& se2_velocity_request() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SE2VelocityCommand_Request* release_se2_velocity_request();
  ::bosdyn::api::SE2VelocityCommand_Request* mutable_se2_velocity_request();
  void set_allocated_se2_velocity_request(::bosdyn::api::SE2VelocityCommand_Request* se2_velocity_request);
  private:
  const ::bosdyn::api::SE2VelocityCommand_Request& _internal_se2_velocity_request() const;
  ::bosdyn::api::SE2VelocityCommand_Request* _internal_mutable_se2_velocity_request();
  public:
  void unsafe_arena_set_allocated_se2_velocity_request(
      ::bosdyn::api::SE2VelocityCommand_Request* se2_velocity_request);
  ::bosdyn::api::SE2VelocityCommand_Request* unsafe_arena_release_se2_velocity_request();

  // .bosdyn.api.SitCommand.Request sit_request = 3;
  bool has_sit_request() const;
  private:
  bool _internal_has_sit_request() const;
  public:
  void clear_sit_request();
  const ::bosdyn::api::SitCommand_Request& sit_request() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SitCommand_Request* release_sit_request();
  ::bosdyn::api::SitCommand_Request* mutable_sit_request();
  void set_allocated_sit_request(::bosdyn::api::SitCommand_Request* sit_request);
  private:
  const ::bosdyn::api::SitCommand_Request& _internal_sit_request() const;
  ::bosdyn::api::SitCommand_Request* _internal_mutable_sit_request();
  public:
  void unsafe_arena_set_allocated_sit_request(
      ::bosdyn::api::SitCommand_Request* sit_request);
  ::bosdyn::api::SitCommand_Request* unsafe_arena_release_sit_request();

  // .bosdyn.api.StandCommand.Request stand_request = 4;
  bool has_stand_request() const;
  private:
  bool _internal_has_stand_request() const;
  public:
  void clear_stand_request();
  const ::bosdyn::api::StandCommand_Request& stand_request() const;
  PROTOBUF_NODISCARD ::bosdyn::api::StandCommand_Request* release_stand_request();
  ::bosdyn::api::StandCommand_Request* mutable_stand_request();
  void set_allocated_stand_request(::bosdyn::api::StandCommand_Request* stand_request);
  private:
  const ::bosdyn::api::StandCommand_Request& _internal_stand_request() const;
  ::bosdyn::api::StandCommand_Request* _internal_mutable_stand_request();
  public:
  void unsafe_arena_set_allocated_stand_request(
      ::bosdyn::api::StandCommand_Request* stand_request);
  ::bosdyn::api::StandCommand_Request* unsafe_arena_release_stand_request();

  // .bosdyn.api.StanceCommand.Request stance_request = 5;
  bool has_stance_request() const;
  private:
  bool _internal_has_stance_request() const;
  public:
  void clear_stance_request();
  const ::bosdyn::api::StanceCommand_Request& stance_request() const;
  PROTOBUF_NODISCARD ::bosdyn::api::StanceCommand_Request* release_stance_request();
  ::bosdyn::api::StanceCommand_Request* mutable_stance_request();
  void set_allocated_stance_request(::bosdyn::api::StanceCommand_Request* stance_request);
  private:
  const ::bosdyn::api::StanceCommand_Request& _internal_stance_request() const;
  ::bosdyn::api::StanceCommand_Request* _internal_mutable_stance_request();
  public:
  void unsafe_arena_set_allocated_stance_request(
      ::bosdyn::api::StanceCommand_Request* stance_request);
  ::bosdyn::api::StanceCommand_Request* unsafe_arena_release_stance_request();

  // .bosdyn.api.StopCommand.Request stop_request = 6;
  bool has_stop_request() const;
  private:
  bool _internal_has_stop_request() const;
  public:
  void clear_stop_request();
  const ::bosdyn::api::StopCommand_Request& stop_request() const;
  PROTOBUF_NODISCARD ::bosdyn::api::StopCommand_Request* release_stop_request();
  ::bosdyn::api::StopCommand_Request* mutable_stop_request();
  void set_allocated_stop_request(::bosdyn::api::StopCommand_Request* stop_request);
  private:
  const ::bosdyn::api::StopCommand_Request& _internal_stop_request() const;
  ::bosdyn::api::StopCommand_Request* _internal_mutable_stop_request();
  public:
  void unsafe_arena_set_allocated_stop_request(
      ::bosdyn::api::StopCommand_Request* stop_request);
  ::bosdyn::api::StopCommand_Request* unsafe_arena_release_stop_request();

  // .bosdyn.api.FollowArmCommand.Request follow_arm_request = 7;
  bool has_follow_arm_request() const;
  private:
  bool _internal_has_follow_arm_request() const;
  public:
  void clear_follow_arm_request();
  const ::bosdyn::api::FollowArmCommand_Request& follow_arm_request() const;
  PROTOBUF_NODISCARD ::bosdyn::api::FollowArmCommand_Request* release_follow_arm_request();
  ::bosdyn::api::FollowArmCommand_Request* mutable_follow_arm_request();
  void set_allocated_follow_arm_request(::bosdyn::api::FollowArmCommand_Request* follow_arm_request);
  private:
  const ::bosdyn::api::FollowArmCommand_Request& _internal_follow_arm_request() const;
  ::bosdyn::api::FollowArmCommand_Request* _internal_mutable_follow_arm_request();
  public:
  void unsafe_arena_set_allocated_follow_arm_request(
      ::bosdyn::api::FollowArmCommand_Request* follow_arm_request);
  ::bosdyn::api::FollowArmCommand_Request* unsafe_arena_release_follow_arm_request();

  void clear_command();
  CommandCase command_case() const;
  // @@protoc_insertion_point(class_scope:bosdyn.api.MobilityCommand.Request)
 private:
  class _Internal;
  void set_has_se2_trajectory_request();
  void set_has_se2_velocity_request();
  void set_has_sit_request();
  void set_has_stand_request();
  void set_has_stance_request();
  void set_has_stop_request();
  void set_has_follow_arm_request();

  inline bool has_command() const;
  inline void clear_has_command();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Any* params_;
    union CommandUnion {
      constexpr CommandUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::bosdyn::api::SE2TrajectoryCommand_Request* se2_trajectory_request_;
      ::bosdyn::api::SE2VelocityCommand_Request* se2_velocity_request_;
      ::bosdyn::api::SitCommand_Request* sit_request_;
      ::bosdyn::api::StandCommand_Request* stand_request_;
      ::bosdyn::api::StanceCommand_Request* stance_request_;
      ::bosdyn::api::StopCommand_Request* stop_request_;
      ::bosdyn::api::FollowArmCommand_Request* follow_arm_request_;
    } command_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fmobility_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class MobilityCommand_Feedback final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.MobilityCommand.Feedback) */ {
 public:
  inline MobilityCommand_Feedback() : MobilityCommand_Feedback(nullptr) {}
  ~MobilityCommand_Feedback() override;
  explicit PROTOBUF_CONSTEXPR MobilityCommand_Feedback(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MobilityCommand_Feedback(const MobilityCommand_Feedback& from);
  MobilityCommand_Feedback(MobilityCommand_Feedback&& from) noexcept
    : MobilityCommand_Feedback() {
    *this = ::std::move(from);
  }

  inline MobilityCommand_Feedback& operator=(const MobilityCommand_Feedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline MobilityCommand_Feedback& operator=(MobilityCommand_Feedback&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MobilityCommand_Feedback& default_instance() {
    return *internal_default_instance();
  }
  enum FeedbackCase {
    kSe2TrajectoryFeedback = 1,
    kSe2VelocityFeedback = 2,
    kSitFeedback = 3,
    kStandFeedback = 4,
    kStanceFeedback = 5,
    kStopFeedback = 6,
    kFollowArmFeedback = 7,
    FEEDBACK_NOT_SET = 0,
  };

  static inline const MobilityCommand_Feedback* internal_default_instance() {
    return reinterpret_cast<const MobilityCommand_Feedback*>(
               &_MobilityCommand_Feedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MobilityCommand_Feedback& a, MobilityCommand_Feedback& b) {
    a.Swap(&b);
  }
  inline void Swap(MobilityCommand_Feedback* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MobilityCommand_Feedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MobilityCommand_Feedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MobilityCommand_Feedback>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MobilityCommand_Feedback& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MobilityCommand_Feedback& from) {
    MobilityCommand_Feedback::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MobilityCommand_Feedback* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.MobilityCommand.Feedback";
  }
  protected:
  explicit MobilityCommand_Feedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 100,
    kSe2TrajectoryFeedbackFieldNumber = 1,
    kSe2VelocityFeedbackFieldNumber = 2,
    kSitFeedbackFieldNumber = 3,
    kStandFeedbackFieldNumber = 4,
    kStanceFeedbackFieldNumber = 5,
    kStopFeedbackFieldNumber = 6,
    kFollowArmFeedbackFieldNumber = 7,
  };
  // .bosdyn.api.RobotCommandFeedbackStatus.Status status = 100;
  void clear_status();
  ::bosdyn::api::RobotCommandFeedbackStatus_Status status() const;
  void set_status(::bosdyn::api::RobotCommandFeedbackStatus_Status value);
  private:
  ::bosdyn::api::RobotCommandFeedbackStatus_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::RobotCommandFeedbackStatus_Status value);
  public:

  // .bosdyn.api.SE2TrajectoryCommand.Feedback se2_trajectory_feedback = 1;
  bool has_se2_trajectory_feedback() const;
  private:
  bool _internal_has_se2_trajectory_feedback() const;
  public:
  void clear_se2_trajectory_feedback();
  const ::bosdyn::api::SE2TrajectoryCommand_Feedback& se2_trajectory_feedback() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SE2TrajectoryCommand_Feedback* release_se2_trajectory_feedback();
  ::bosdyn::api::SE2TrajectoryCommand_Feedback* mutable_se2_trajectory_feedback();
  void set_allocated_se2_trajectory_feedback(::bosdyn::api::SE2TrajectoryCommand_Feedback* se2_trajectory_feedback);
  private:
  const ::bosdyn::api::SE2TrajectoryCommand_Feedback& _internal_se2_trajectory_feedback() const;
  ::bosdyn::api::SE2TrajectoryCommand_Feedback* _internal_mutable_se2_trajectory_feedback();
  public:
  void unsafe_arena_set_allocated_se2_trajectory_feedback(
      ::bosdyn::api::SE2TrajectoryCommand_Feedback* se2_trajectory_feedback);
  ::bosdyn::api::SE2TrajectoryCommand_Feedback* unsafe_arena_release_se2_trajectory_feedback();

  // .bosdyn.api.SE2VelocityCommand.Feedback se2_velocity_feedback = 2;
  bool has_se2_velocity_feedback() const;
  private:
  bool _internal_has_se2_velocity_feedback() const;
  public:
  void clear_se2_velocity_feedback();
  const ::bosdyn::api::SE2VelocityCommand_Feedback& se2_velocity_feedback() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SE2VelocityCommand_Feedback* release_se2_velocity_feedback();
  ::bosdyn::api::SE2VelocityCommand_Feedback* mutable_se2_velocity_feedback();
  void set_allocated_se2_velocity_feedback(::bosdyn::api::SE2VelocityCommand_Feedback* se2_velocity_feedback);
  private:
  const ::bosdyn::api::SE2VelocityCommand_Feedback& _internal_se2_velocity_feedback() const;
  ::bosdyn::api::SE2VelocityCommand_Feedback* _internal_mutable_se2_velocity_feedback();
  public:
  void unsafe_arena_set_allocated_se2_velocity_feedback(
      ::bosdyn::api::SE2VelocityCommand_Feedback* se2_velocity_feedback);
  ::bosdyn::api::SE2VelocityCommand_Feedback* unsafe_arena_release_se2_velocity_feedback();

  // .bosdyn.api.SitCommand.Feedback sit_feedback = 3;
  bool has_sit_feedback() const;
  private:
  bool _internal_has_sit_feedback() const;
  public:
  void clear_sit_feedback();
  const ::bosdyn::api::SitCommand_Feedback& sit_feedback() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SitCommand_Feedback* release_sit_feedback();
  ::bosdyn::api::SitCommand_Feedback* mutable_sit_feedback();
  void set_allocated_sit_feedback(::bosdyn::api::SitCommand_Feedback* sit_feedback);
  private:
  const ::bosdyn::api::SitCommand_Feedback& _internal_sit_feedback() const;
  ::bosdyn::api::SitCommand_Feedback* _internal_mutable_sit_feedback();
  public:
  void unsafe_arena_set_allocated_sit_feedback(
      ::bosdyn::api::SitCommand_Feedback* sit_feedback);
  ::bosdyn::api::SitCommand_Feedback* unsafe_arena_release_sit_feedback();

  // .bosdyn.api.StandCommand.Feedback stand_feedback = 4;
  bool has_stand_feedback() const;
  private:
  bool _internal_has_stand_feedback() const;
  public:
  void clear_stand_feedback();
  const ::bosdyn::api::StandCommand_Feedback& stand_feedback() const;
  PROTOBUF_NODISCARD ::bosdyn::api::StandCommand_Feedback* release_stand_feedback();
  ::bosdyn::api::StandCommand_Feedback* mutable_stand_feedback();
  void set_allocated_stand_feedback(::bosdyn::api::StandCommand_Feedback* stand_feedback);
  private:
  const ::bosdyn::api::StandCommand_Feedback& _internal_stand_feedback() const;
  ::bosdyn::api::StandCommand_Feedback* _internal_mutable_stand_feedback();
  public:
  void unsafe_arena_set_allocated_stand_feedback(
      ::bosdyn::api::StandCommand_Feedback* stand_feedback);
  ::bosdyn::api::StandCommand_Feedback* unsafe_arena_release_stand_feedback();

  // .bosdyn.api.StanceCommand.Feedback stance_feedback = 5;
  bool has_stance_feedback() const;
  private:
  bool _internal_has_stance_feedback() const;
  public:
  void clear_stance_feedback();
  const ::bosdyn::api::StanceCommand_Feedback& stance_feedback() const;
  PROTOBUF_NODISCARD ::bosdyn::api::StanceCommand_Feedback* release_stance_feedback();
  ::bosdyn::api::StanceCommand_Feedback* mutable_stance_feedback();
  void set_allocated_stance_feedback(::bosdyn::api::StanceCommand_Feedback* stance_feedback);
  private:
  const ::bosdyn::api::StanceCommand_Feedback& _internal_stance_feedback() const;
  ::bosdyn::api::StanceCommand_Feedback* _internal_mutable_stance_feedback();
  public:
  void unsafe_arena_set_allocated_stance_feedback(
      ::bosdyn::api::StanceCommand_Feedback* stance_feedback);
  ::bosdyn::api::StanceCommand_Feedback* unsafe_arena_release_stance_feedback();

  // .bosdyn.api.StopCommand.Feedback stop_feedback = 6;
  bool has_stop_feedback() const;
  private:
  bool _internal_has_stop_feedback() const;
  public:
  void clear_stop_feedback();
  const ::bosdyn::api::StopCommand_Feedback& stop_feedback() const;
  PROTOBUF_NODISCARD ::bosdyn::api::StopCommand_Feedback* release_stop_feedback();
  ::bosdyn::api::StopCommand_Feedback* mutable_stop_feedback();
  void set_allocated_stop_feedback(::bosdyn::api::StopCommand_Feedback* stop_feedback);
  private:
  const ::bosdyn::api::StopCommand_Feedback& _internal_stop_feedback() const;
  ::bosdyn::api::StopCommand_Feedback* _internal_mutable_stop_feedback();
  public:
  void unsafe_arena_set_allocated_stop_feedback(
      ::bosdyn::api::StopCommand_Feedback* stop_feedback);
  ::bosdyn::api::StopCommand_Feedback* unsafe_arena_release_stop_feedback();

  // .bosdyn.api.FollowArmCommand.Feedback follow_arm_feedback = 7;
  bool has_follow_arm_feedback() const;
  private:
  bool _internal_has_follow_arm_feedback() const;
  public:
  void clear_follow_arm_feedback();
  const ::bosdyn::api::FollowArmCommand_Feedback& follow_arm_feedback() const;
  PROTOBUF_NODISCARD ::bosdyn::api::FollowArmCommand_Feedback* release_follow_arm_feedback();
  ::bosdyn::api::FollowArmCommand_Feedback* mutable_follow_arm_feedback();
  void set_allocated_follow_arm_feedback(::bosdyn::api::FollowArmCommand_Feedback* follow_arm_feedback);
  private:
  const ::bosdyn::api::FollowArmCommand_Feedback& _internal_follow_arm_feedback() const;
  ::bosdyn::api::FollowArmCommand_Feedback* _internal_mutable_follow_arm_feedback();
  public:
  void unsafe_arena_set_allocated_follow_arm_feedback(
      ::bosdyn::api::FollowArmCommand_Feedback* follow_arm_feedback);
  ::bosdyn::api::FollowArmCommand_Feedback* unsafe_arena_release_follow_arm_feedback();

  void clear_feedback();
  FeedbackCase feedback_case() const;
  // @@protoc_insertion_point(class_scope:bosdyn.api.MobilityCommand.Feedback)
 private:
  class _Internal;
  void set_has_se2_trajectory_feedback();
  void set_has_se2_velocity_feedback();
  void set_has_sit_feedback();
  void set_has_stand_feedback();
  void set_has_stance_feedback();
  void set_has_stop_feedback();
  void set_has_follow_arm_feedback();

  inline bool has_feedback() const;
  inline void clear_has_feedback();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int status_;
    union FeedbackUnion {
      constexpr FeedbackUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::bosdyn::api::SE2TrajectoryCommand_Feedback* se2_trajectory_feedback_;
      ::bosdyn::api::SE2VelocityCommand_Feedback* se2_velocity_feedback_;
      ::bosdyn::api::SitCommand_Feedback* sit_feedback_;
      ::bosdyn::api::StandCommand_Feedback* stand_feedback_;
      ::bosdyn::api::StanceCommand_Feedback* stance_feedback_;
      ::bosdyn::api::StopCommand_Feedback* stop_feedback_;
      ::bosdyn::api::FollowArmCommand_Feedback* follow_arm_feedback_;
    } feedback_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fmobility_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class MobilityCommand final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:bosdyn.api.MobilityCommand) */ {
 public:
  inline MobilityCommand() : MobilityCommand(nullptr) {}
  explicit PROTOBUF_CONSTEXPR MobilityCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MobilityCommand(const MobilityCommand& from);
  MobilityCommand(MobilityCommand&& from) noexcept
    : MobilityCommand() {
    *this = ::std::move(from);
  }

  inline MobilityCommand& operator=(const MobilityCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline MobilityCommand& operator=(MobilityCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MobilityCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const MobilityCommand* internal_default_instance() {
    return reinterpret_cast<const MobilityCommand*>(
               &_MobilityCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MobilityCommand& a, MobilityCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(MobilityCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MobilityCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MobilityCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MobilityCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MobilityCommand& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MobilityCommand& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.MobilityCommand";
  }
  protected:
  explicit MobilityCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MobilityCommand_Request Request;
  typedef MobilityCommand_Feedback Feedback;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.MobilityCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_bosdyn_2fapi_2fmobility_5fcommand_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MobilityCommand_Request

// .bosdyn.api.SE2TrajectoryCommand.Request se2_trajectory_request = 1;
inline bool MobilityCommand_Request::_internal_has_se2_trajectory_request() const {
  return command_case() == kSe2TrajectoryRequest;
}
inline bool MobilityCommand_Request::has_se2_trajectory_request() const {
  return _internal_has_se2_trajectory_request();
}
inline void MobilityCommand_Request::set_has_se2_trajectory_request() {
  _impl_._oneof_case_[0] = kSe2TrajectoryRequest;
}
inline ::bosdyn::api::SE2TrajectoryCommand_Request* MobilityCommand_Request::release_se2_trajectory_request() {
  // @@protoc_insertion_point(field_release:bosdyn.api.MobilityCommand.Request.se2_trajectory_request)
  if (_internal_has_se2_trajectory_request()) {
    clear_has_command();
    ::bosdyn::api::SE2TrajectoryCommand_Request* temp = _impl_.command_.se2_trajectory_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.se2_trajectory_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::SE2TrajectoryCommand_Request& MobilityCommand_Request::_internal_se2_trajectory_request() const {
  return _internal_has_se2_trajectory_request()
      ? *_impl_.command_.se2_trajectory_request_
      : reinterpret_cast< ::bosdyn::api::SE2TrajectoryCommand_Request&>(::bosdyn::api::_SE2TrajectoryCommand_Request_default_instance_);
}
inline const ::bosdyn::api::SE2TrajectoryCommand_Request& MobilityCommand_Request::se2_trajectory_request() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MobilityCommand.Request.se2_trajectory_request)
  return _internal_se2_trajectory_request();
}
inline ::bosdyn::api::SE2TrajectoryCommand_Request* MobilityCommand_Request::unsafe_arena_release_se2_trajectory_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.MobilityCommand.Request.se2_trajectory_request)
  if (_internal_has_se2_trajectory_request()) {
    clear_has_command();
    ::bosdyn::api::SE2TrajectoryCommand_Request* temp = _impl_.command_.se2_trajectory_request_;
    _impl_.command_.se2_trajectory_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MobilityCommand_Request::unsafe_arena_set_allocated_se2_trajectory_request(::bosdyn::api::SE2TrajectoryCommand_Request* se2_trajectory_request) {
  clear_command();
  if (se2_trajectory_request) {
    set_has_se2_trajectory_request();
    _impl_.command_.se2_trajectory_request_ = se2_trajectory_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.MobilityCommand.Request.se2_trajectory_request)
}
inline ::bosdyn::api::SE2TrajectoryCommand_Request* MobilityCommand_Request::_internal_mutable_se2_trajectory_request() {
  if (!_internal_has_se2_trajectory_request()) {
    clear_command();
    set_has_se2_trajectory_request();
    _impl_.command_.se2_trajectory_request_ = CreateMaybeMessage< ::bosdyn::api::SE2TrajectoryCommand_Request >(GetArenaForAllocation());
  }
  return _impl_.command_.se2_trajectory_request_;
}
inline ::bosdyn::api::SE2TrajectoryCommand_Request* MobilityCommand_Request::mutable_se2_trajectory_request() {
  ::bosdyn::api::SE2TrajectoryCommand_Request* _msg = _internal_mutable_se2_trajectory_request();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.MobilityCommand.Request.se2_trajectory_request)
  return _msg;
}

// .bosdyn.api.SE2VelocityCommand.Request se2_velocity_request = 2;
inline bool MobilityCommand_Request::_internal_has_se2_velocity_request() const {
  return command_case() == kSe2VelocityRequest;
}
inline bool MobilityCommand_Request::has_se2_velocity_request() const {
  return _internal_has_se2_velocity_request();
}
inline void MobilityCommand_Request::set_has_se2_velocity_request() {
  _impl_._oneof_case_[0] = kSe2VelocityRequest;
}
inline ::bosdyn::api::SE2VelocityCommand_Request* MobilityCommand_Request::release_se2_velocity_request() {
  // @@protoc_insertion_point(field_release:bosdyn.api.MobilityCommand.Request.se2_velocity_request)
  if (_internal_has_se2_velocity_request()) {
    clear_has_command();
    ::bosdyn::api::SE2VelocityCommand_Request* temp = _impl_.command_.se2_velocity_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.se2_velocity_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::SE2VelocityCommand_Request& MobilityCommand_Request::_internal_se2_velocity_request() const {
  return _internal_has_se2_velocity_request()
      ? *_impl_.command_.se2_velocity_request_
      : reinterpret_cast< ::bosdyn::api::SE2VelocityCommand_Request&>(::bosdyn::api::_SE2VelocityCommand_Request_default_instance_);
}
inline const ::bosdyn::api::SE2VelocityCommand_Request& MobilityCommand_Request::se2_velocity_request() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MobilityCommand.Request.se2_velocity_request)
  return _internal_se2_velocity_request();
}
inline ::bosdyn::api::SE2VelocityCommand_Request* MobilityCommand_Request::unsafe_arena_release_se2_velocity_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.MobilityCommand.Request.se2_velocity_request)
  if (_internal_has_se2_velocity_request()) {
    clear_has_command();
    ::bosdyn::api::SE2VelocityCommand_Request* temp = _impl_.command_.se2_velocity_request_;
    _impl_.command_.se2_velocity_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MobilityCommand_Request::unsafe_arena_set_allocated_se2_velocity_request(::bosdyn::api::SE2VelocityCommand_Request* se2_velocity_request) {
  clear_command();
  if (se2_velocity_request) {
    set_has_se2_velocity_request();
    _impl_.command_.se2_velocity_request_ = se2_velocity_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.MobilityCommand.Request.se2_velocity_request)
}
inline ::bosdyn::api::SE2VelocityCommand_Request* MobilityCommand_Request::_internal_mutable_se2_velocity_request() {
  if (!_internal_has_se2_velocity_request()) {
    clear_command();
    set_has_se2_velocity_request();
    _impl_.command_.se2_velocity_request_ = CreateMaybeMessage< ::bosdyn::api::SE2VelocityCommand_Request >(GetArenaForAllocation());
  }
  return _impl_.command_.se2_velocity_request_;
}
inline ::bosdyn::api::SE2VelocityCommand_Request* MobilityCommand_Request::mutable_se2_velocity_request() {
  ::bosdyn::api::SE2VelocityCommand_Request* _msg = _internal_mutable_se2_velocity_request();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.MobilityCommand.Request.se2_velocity_request)
  return _msg;
}

// .bosdyn.api.SitCommand.Request sit_request = 3;
inline bool MobilityCommand_Request::_internal_has_sit_request() const {
  return command_case() == kSitRequest;
}
inline bool MobilityCommand_Request::has_sit_request() const {
  return _internal_has_sit_request();
}
inline void MobilityCommand_Request::set_has_sit_request() {
  _impl_._oneof_case_[0] = kSitRequest;
}
inline ::bosdyn::api::SitCommand_Request* MobilityCommand_Request::release_sit_request() {
  // @@protoc_insertion_point(field_release:bosdyn.api.MobilityCommand.Request.sit_request)
  if (_internal_has_sit_request()) {
    clear_has_command();
    ::bosdyn::api::SitCommand_Request* temp = _impl_.command_.sit_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.sit_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::SitCommand_Request& MobilityCommand_Request::_internal_sit_request() const {
  return _internal_has_sit_request()
      ? *_impl_.command_.sit_request_
      : reinterpret_cast< ::bosdyn::api::SitCommand_Request&>(::bosdyn::api::_SitCommand_Request_default_instance_);
}
inline const ::bosdyn::api::SitCommand_Request& MobilityCommand_Request::sit_request() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MobilityCommand.Request.sit_request)
  return _internal_sit_request();
}
inline ::bosdyn::api::SitCommand_Request* MobilityCommand_Request::unsafe_arena_release_sit_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.MobilityCommand.Request.sit_request)
  if (_internal_has_sit_request()) {
    clear_has_command();
    ::bosdyn::api::SitCommand_Request* temp = _impl_.command_.sit_request_;
    _impl_.command_.sit_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MobilityCommand_Request::unsafe_arena_set_allocated_sit_request(::bosdyn::api::SitCommand_Request* sit_request) {
  clear_command();
  if (sit_request) {
    set_has_sit_request();
    _impl_.command_.sit_request_ = sit_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.MobilityCommand.Request.sit_request)
}
inline ::bosdyn::api::SitCommand_Request* MobilityCommand_Request::_internal_mutable_sit_request() {
  if (!_internal_has_sit_request()) {
    clear_command();
    set_has_sit_request();
    _impl_.command_.sit_request_ = CreateMaybeMessage< ::bosdyn::api::SitCommand_Request >(GetArenaForAllocation());
  }
  return _impl_.command_.sit_request_;
}
inline ::bosdyn::api::SitCommand_Request* MobilityCommand_Request::mutable_sit_request() {
  ::bosdyn::api::SitCommand_Request* _msg = _internal_mutable_sit_request();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.MobilityCommand.Request.sit_request)
  return _msg;
}

// .bosdyn.api.StandCommand.Request stand_request = 4;
inline bool MobilityCommand_Request::_internal_has_stand_request() const {
  return command_case() == kStandRequest;
}
inline bool MobilityCommand_Request::has_stand_request() const {
  return _internal_has_stand_request();
}
inline void MobilityCommand_Request::set_has_stand_request() {
  _impl_._oneof_case_[0] = kStandRequest;
}
inline ::bosdyn::api::StandCommand_Request* MobilityCommand_Request::release_stand_request() {
  // @@protoc_insertion_point(field_release:bosdyn.api.MobilityCommand.Request.stand_request)
  if (_internal_has_stand_request()) {
    clear_has_command();
    ::bosdyn::api::StandCommand_Request* temp = _impl_.command_.stand_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.stand_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::StandCommand_Request& MobilityCommand_Request::_internal_stand_request() const {
  return _internal_has_stand_request()
      ? *_impl_.command_.stand_request_
      : reinterpret_cast< ::bosdyn::api::StandCommand_Request&>(::bosdyn::api::_StandCommand_Request_default_instance_);
}
inline const ::bosdyn::api::StandCommand_Request& MobilityCommand_Request::stand_request() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MobilityCommand.Request.stand_request)
  return _internal_stand_request();
}
inline ::bosdyn::api::StandCommand_Request* MobilityCommand_Request::unsafe_arena_release_stand_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.MobilityCommand.Request.stand_request)
  if (_internal_has_stand_request()) {
    clear_has_command();
    ::bosdyn::api::StandCommand_Request* temp = _impl_.command_.stand_request_;
    _impl_.command_.stand_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MobilityCommand_Request::unsafe_arena_set_allocated_stand_request(::bosdyn::api::StandCommand_Request* stand_request) {
  clear_command();
  if (stand_request) {
    set_has_stand_request();
    _impl_.command_.stand_request_ = stand_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.MobilityCommand.Request.stand_request)
}
inline ::bosdyn::api::StandCommand_Request* MobilityCommand_Request::_internal_mutable_stand_request() {
  if (!_internal_has_stand_request()) {
    clear_command();
    set_has_stand_request();
    _impl_.command_.stand_request_ = CreateMaybeMessage< ::bosdyn::api::StandCommand_Request >(GetArenaForAllocation());
  }
  return _impl_.command_.stand_request_;
}
inline ::bosdyn::api::StandCommand_Request* MobilityCommand_Request::mutable_stand_request() {
  ::bosdyn::api::StandCommand_Request* _msg = _internal_mutable_stand_request();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.MobilityCommand.Request.stand_request)
  return _msg;
}

// .bosdyn.api.StanceCommand.Request stance_request = 5;
inline bool MobilityCommand_Request::_internal_has_stance_request() const {
  return command_case() == kStanceRequest;
}
inline bool MobilityCommand_Request::has_stance_request() const {
  return _internal_has_stance_request();
}
inline void MobilityCommand_Request::set_has_stance_request() {
  _impl_._oneof_case_[0] = kStanceRequest;
}
inline ::bosdyn::api::StanceCommand_Request* MobilityCommand_Request::release_stance_request() {
  // @@protoc_insertion_point(field_release:bosdyn.api.MobilityCommand.Request.stance_request)
  if (_internal_has_stance_request()) {
    clear_has_command();
    ::bosdyn::api::StanceCommand_Request* temp = _impl_.command_.stance_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.stance_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::StanceCommand_Request& MobilityCommand_Request::_internal_stance_request() const {
  return _internal_has_stance_request()
      ? *_impl_.command_.stance_request_
      : reinterpret_cast< ::bosdyn::api::StanceCommand_Request&>(::bosdyn::api::_StanceCommand_Request_default_instance_);
}
inline const ::bosdyn::api::StanceCommand_Request& MobilityCommand_Request::stance_request() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MobilityCommand.Request.stance_request)
  return _internal_stance_request();
}
inline ::bosdyn::api::StanceCommand_Request* MobilityCommand_Request::unsafe_arena_release_stance_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.MobilityCommand.Request.stance_request)
  if (_internal_has_stance_request()) {
    clear_has_command();
    ::bosdyn::api::StanceCommand_Request* temp = _impl_.command_.stance_request_;
    _impl_.command_.stance_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MobilityCommand_Request::unsafe_arena_set_allocated_stance_request(::bosdyn::api::StanceCommand_Request* stance_request) {
  clear_command();
  if (stance_request) {
    set_has_stance_request();
    _impl_.command_.stance_request_ = stance_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.MobilityCommand.Request.stance_request)
}
inline ::bosdyn::api::StanceCommand_Request* MobilityCommand_Request::_internal_mutable_stance_request() {
  if (!_internal_has_stance_request()) {
    clear_command();
    set_has_stance_request();
    _impl_.command_.stance_request_ = CreateMaybeMessage< ::bosdyn::api::StanceCommand_Request >(GetArenaForAllocation());
  }
  return _impl_.command_.stance_request_;
}
inline ::bosdyn::api::StanceCommand_Request* MobilityCommand_Request::mutable_stance_request() {
  ::bosdyn::api::StanceCommand_Request* _msg = _internal_mutable_stance_request();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.MobilityCommand.Request.stance_request)
  return _msg;
}

// .bosdyn.api.StopCommand.Request stop_request = 6;
inline bool MobilityCommand_Request::_internal_has_stop_request() const {
  return command_case() == kStopRequest;
}
inline bool MobilityCommand_Request::has_stop_request() const {
  return _internal_has_stop_request();
}
inline void MobilityCommand_Request::set_has_stop_request() {
  _impl_._oneof_case_[0] = kStopRequest;
}
inline ::bosdyn::api::StopCommand_Request* MobilityCommand_Request::release_stop_request() {
  // @@protoc_insertion_point(field_release:bosdyn.api.MobilityCommand.Request.stop_request)
  if (_internal_has_stop_request()) {
    clear_has_command();
    ::bosdyn::api::StopCommand_Request* temp = _impl_.command_.stop_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.stop_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::StopCommand_Request& MobilityCommand_Request::_internal_stop_request() const {
  return _internal_has_stop_request()
      ? *_impl_.command_.stop_request_
      : reinterpret_cast< ::bosdyn::api::StopCommand_Request&>(::bosdyn::api::_StopCommand_Request_default_instance_);
}
inline const ::bosdyn::api::StopCommand_Request& MobilityCommand_Request::stop_request() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MobilityCommand.Request.stop_request)
  return _internal_stop_request();
}
inline ::bosdyn::api::StopCommand_Request* MobilityCommand_Request::unsafe_arena_release_stop_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.MobilityCommand.Request.stop_request)
  if (_internal_has_stop_request()) {
    clear_has_command();
    ::bosdyn::api::StopCommand_Request* temp = _impl_.command_.stop_request_;
    _impl_.command_.stop_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MobilityCommand_Request::unsafe_arena_set_allocated_stop_request(::bosdyn::api::StopCommand_Request* stop_request) {
  clear_command();
  if (stop_request) {
    set_has_stop_request();
    _impl_.command_.stop_request_ = stop_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.MobilityCommand.Request.stop_request)
}
inline ::bosdyn::api::StopCommand_Request* MobilityCommand_Request::_internal_mutable_stop_request() {
  if (!_internal_has_stop_request()) {
    clear_command();
    set_has_stop_request();
    _impl_.command_.stop_request_ = CreateMaybeMessage< ::bosdyn::api::StopCommand_Request >(GetArenaForAllocation());
  }
  return _impl_.command_.stop_request_;
}
inline ::bosdyn::api::StopCommand_Request* MobilityCommand_Request::mutable_stop_request() {
  ::bosdyn::api::StopCommand_Request* _msg = _internal_mutable_stop_request();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.MobilityCommand.Request.stop_request)
  return _msg;
}

// .bosdyn.api.FollowArmCommand.Request follow_arm_request = 7;
inline bool MobilityCommand_Request::_internal_has_follow_arm_request() const {
  return command_case() == kFollowArmRequest;
}
inline bool MobilityCommand_Request::has_follow_arm_request() const {
  return _internal_has_follow_arm_request();
}
inline void MobilityCommand_Request::set_has_follow_arm_request() {
  _impl_._oneof_case_[0] = kFollowArmRequest;
}
inline ::bosdyn::api::FollowArmCommand_Request* MobilityCommand_Request::release_follow_arm_request() {
  // @@protoc_insertion_point(field_release:bosdyn.api.MobilityCommand.Request.follow_arm_request)
  if (_internal_has_follow_arm_request()) {
    clear_has_command();
    ::bosdyn::api::FollowArmCommand_Request* temp = _impl_.command_.follow_arm_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.follow_arm_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::FollowArmCommand_Request& MobilityCommand_Request::_internal_follow_arm_request() const {
  return _internal_has_follow_arm_request()
      ? *_impl_.command_.follow_arm_request_
      : reinterpret_cast< ::bosdyn::api::FollowArmCommand_Request&>(::bosdyn::api::_FollowArmCommand_Request_default_instance_);
}
inline const ::bosdyn::api::FollowArmCommand_Request& MobilityCommand_Request::follow_arm_request() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MobilityCommand.Request.follow_arm_request)
  return _internal_follow_arm_request();
}
inline ::bosdyn::api::FollowArmCommand_Request* MobilityCommand_Request::unsafe_arena_release_follow_arm_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.MobilityCommand.Request.follow_arm_request)
  if (_internal_has_follow_arm_request()) {
    clear_has_command();
    ::bosdyn::api::FollowArmCommand_Request* temp = _impl_.command_.follow_arm_request_;
    _impl_.command_.follow_arm_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MobilityCommand_Request::unsafe_arena_set_allocated_follow_arm_request(::bosdyn::api::FollowArmCommand_Request* follow_arm_request) {
  clear_command();
  if (follow_arm_request) {
    set_has_follow_arm_request();
    _impl_.command_.follow_arm_request_ = follow_arm_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.MobilityCommand.Request.follow_arm_request)
}
inline ::bosdyn::api::FollowArmCommand_Request* MobilityCommand_Request::_internal_mutable_follow_arm_request() {
  if (!_internal_has_follow_arm_request()) {
    clear_command();
    set_has_follow_arm_request();
    _impl_.command_.follow_arm_request_ = CreateMaybeMessage< ::bosdyn::api::FollowArmCommand_Request >(GetArenaForAllocation());
  }
  return _impl_.command_.follow_arm_request_;
}
inline ::bosdyn::api::FollowArmCommand_Request* MobilityCommand_Request::mutable_follow_arm_request() {
  ::bosdyn::api::FollowArmCommand_Request* _msg = _internal_mutable_follow_arm_request();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.MobilityCommand.Request.follow_arm_request)
  return _msg;
}

// .google.protobuf.Any params = 100;
inline bool MobilityCommand_Request::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool MobilityCommand_Request::has_params() const {
  return _internal_has_params();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& MobilityCommand_Request::_internal_params() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& MobilityCommand_Request::params() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MobilityCommand.Request.params)
  return _internal_params();
}
inline void MobilityCommand_Request::unsafe_arena_set_allocated_params(
    ::PROTOBUF_NAMESPACE_ID::Any* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.MobilityCommand.Request.params)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MobilityCommand_Request::release_params() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MobilityCommand_Request::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:bosdyn.api.MobilityCommand.Request.params)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MobilityCommand_Request::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MobilityCommand_Request::mutable_params() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.MobilityCommand.Request.params)
  return _msg;
}
inline void MobilityCommand_Request::set_allocated_params(::PROTOBUF_NAMESPACE_ID::Any* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.MobilityCommand.Request.params)
}

inline bool MobilityCommand_Request::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
inline void MobilityCommand_Request::clear_has_command() {
  _impl_._oneof_case_[0] = COMMAND_NOT_SET;
}
inline MobilityCommand_Request::CommandCase MobilityCommand_Request::command_case() const {
  return MobilityCommand_Request::CommandCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// MobilityCommand_Feedback

// .bosdyn.api.SE2TrajectoryCommand.Feedback se2_trajectory_feedback = 1;
inline bool MobilityCommand_Feedback::_internal_has_se2_trajectory_feedback() const {
  return feedback_case() == kSe2TrajectoryFeedback;
}
inline bool MobilityCommand_Feedback::has_se2_trajectory_feedback() const {
  return _internal_has_se2_trajectory_feedback();
}
inline void MobilityCommand_Feedback::set_has_se2_trajectory_feedback() {
  _impl_._oneof_case_[0] = kSe2TrajectoryFeedback;
}
inline ::bosdyn::api::SE2TrajectoryCommand_Feedback* MobilityCommand_Feedback::release_se2_trajectory_feedback() {
  // @@protoc_insertion_point(field_release:bosdyn.api.MobilityCommand.Feedback.se2_trajectory_feedback)
  if (_internal_has_se2_trajectory_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::SE2TrajectoryCommand_Feedback* temp = _impl_.feedback_.se2_trajectory_feedback_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.feedback_.se2_trajectory_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::SE2TrajectoryCommand_Feedback& MobilityCommand_Feedback::_internal_se2_trajectory_feedback() const {
  return _internal_has_se2_trajectory_feedback()
      ? *_impl_.feedback_.se2_trajectory_feedback_
      : reinterpret_cast< ::bosdyn::api::SE2TrajectoryCommand_Feedback&>(::bosdyn::api::_SE2TrajectoryCommand_Feedback_default_instance_);
}
inline const ::bosdyn::api::SE2TrajectoryCommand_Feedback& MobilityCommand_Feedback::se2_trajectory_feedback() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MobilityCommand.Feedback.se2_trajectory_feedback)
  return _internal_se2_trajectory_feedback();
}
inline ::bosdyn::api::SE2TrajectoryCommand_Feedback* MobilityCommand_Feedback::unsafe_arena_release_se2_trajectory_feedback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.MobilityCommand.Feedback.se2_trajectory_feedback)
  if (_internal_has_se2_trajectory_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::SE2TrajectoryCommand_Feedback* temp = _impl_.feedback_.se2_trajectory_feedback_;
    _impl_.feedback_.se2_trajectory_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MobilityCommand_Feedback::unsafe_arena_set_allocated_se2_trajectory_feedback(::bosdyn::api::SE2TrajectoryCommand_Feedback* se2_trajectory_feedback) {
  clear_feedback();
  if (se2_trajectory_feedback) {
    set_has_se2_trajectory_feedback();
    _impl_.feedback_.se2_trajectory_feedback_ = se2_trajectory_feedback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.MobilityCommand.Feedback.se2_trajectory_feedback)
}
inline ::bosdyn::api::SE2TrajectoryCommand_Feedback* MobilityCommand_Feedback::_internal_mutable_se2_trajectory_feedback() {
  if (!_internal_has_se2_trajectory_feedback()) {
    clear_feedback();
    set_has_se2_trajectory_feedback();
    _impl_.feedback_.se2_trajectory_feedback_ = CreateMaybeMessage< ::bosdyn::api::SE2TrajectoryCommand_Feedback >(GetArenaForAllocation());
  }
  return _impl_.feedback_.se2_trajectory_feedback_;
}
inline ::bosdyn::api::SE2TrajectoryCommand_Feedback* MobilityCommand_Feedback::mutable_se2_trajectory_feedback() {
  ::bosdyn::api::SE2TrajectoryCommand_Feedback* _msg = _internal_mutable_se2_trajectory_feedback();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.MobilityCommand.Feedback.se2_trajectory_feedback)
  return _msg;
}

// .bosdyn.api.SE2VelocityCommand.Feedback se2_velocity_feedback = 2;
inline bool MobilityCommand_Feedback::_internal_has_se2_velocity_feedback() const {
  return feedback_case() == kSe2VelocityFeedback;
}
inline bool MobilityCommand_Feedback::has_se2_velocity_feedback() const {
  return _internal_has_se2_velocity_feedback();
}
inline void MobilityCommand_Feedback::set_has_se2_velocity_feedback() {
  _impl_._oneof_case_[0] = kSe2VelocityFeedback;
}
inline ::bosdyn::api::SE2VelocityCommand_Feedback* MobilityCommand_Feedback::release_se2_velocity_feedback() {
  // @@protoc_insertion_point(field_release:bosdyn.api.MobilityCommand.Feedback.se2_velocity_feedback)
  if (_internal_has_se2_velocity_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::SE2VelocityCommand_Feedback* temp = _impl_.feedback_.se2_velocity_feedback_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.feedback_.se2_velocity_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::SE2VelocityCommand_Feedback& MobilityCommand_Feedback::_internal_se2_velocity_feedback() const {
  return _internal_has_se2_velocity_feedback()
      ? *_impl_.feedback_.se2_velocity_feedback_
      : reinterpret_cast< ::bosdyn::api::SE2VelocityCommand_Feedback&>(::bosdyn::api::_SE2VelocityCommand_Feedback_default_instance_);
}
inline const ::bosdyn::api::SE2VelocityCommand_Feedback& MobilityCommand_Feedback::se2_velocity_feedback() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MobilityCommand.Feedback.se2_velocity_feedback)
  return _internal_se2_velocity_feedback();
}
inline ::bosdyn::api::SE2VelocityCommand_Feedback* MobilityCommand_Feedback::unsafe_arena_release_se2_velocity_feedback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.MobilityCommand.Feedback.se2_velocity_feedback)
  if (_internal_has_se2_velocity_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::SE2VelocityCommand_Feedback* temp = _impl_.feedback_.se2_velocity_feedback_;
    _impl_.feedback_.se2_velocity_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MobilityCommand_Feedback::unsafe_arena_set_allocated_se2_velocity_feedback(::bosdyn::api::SE2VelocityCommand_Feedback* se2_velocity_feedback) {
  clear_feedback();
  if (se2_velocity_feedback) {
    set_has_se2_velocity_feedback();
    _impl_.feedback_.se2_velocity_feedback_ = se2_velocity_feedback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.MobilityCommand.Feedback.se2_velocity_feedback)
}
inline ::bosdyn::api::SE2VelocityCommand_Feedback* MobilityCommand_Feedback::_internal_mutable_se2_velocity_feedback() {
  if (!_internal_has_se2_velocity_feedback()) {
    clear_feedback();
    set_has_se2_velocity_feedback();
    _impl_.feedback_.se2_velocity_feedback_ = CreateMaybeMessage< ::bosdyn::api::SE2VelocityCommand_Feedback >(GetArenaForAllocation());
  }
  return _impl_.feedback_.se2_velocity_feedback_;
}
inline ::bosdyn::api::SE2VelocityCommand_Feedback* MobilityCommand_Feedback::mutable_se2_velocity_feedback() {
  ::bosdyn::api::SE2VelocityCommand_Feedback* _msg = _internal_mutable_se2_velocity_feedback();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.MobilityCommand.Feedback.se2_velocity_feedback)
  return _msg;
}

// .bosdyn.api.SitCommand.Feedback sit_feedback = 3;
inline bool MobilityCommand_Feedback::_internal_has_sit_feedback() const {
  return feedback_case() == kSitFeedback;
}
inline bool MobilityCommand_Feedback::has_sit_feedback() const {
  return _internal_has_sit_feedback();
}
inline void MobilityCommand_Feedback::set_has_sit_feedback() {
  _impl_._oneof_case_[0] = kSitFeedback;
}
inline ::bosdyn::api::SitCommand_Feedback* MobilityCommand_Feedback::release_sit_feedback() {
  // @@protoc_insertion_point(field_release:bosdyn.api.MobilityCommand.Feedback.sit_feedback)
  if (_internal_has_sit_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::SitCommand_Feedback* temp = _impl_.feedback_.sit_feedback_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.feedback_.sit_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::SitCommand_Feedback& MobilityCommand_Feedback::_internal_sit_feedback() const {
  return _internal_has_sit_feedback()
      ? *_impl_.feedback_.sit_feedback_
      : reinterpret_cast< ::bosdyn::api::SitCommand_Feedback&>(::bosdyn::api::_SitCommand_Feedback_default_instance_);
}
inline const ::bosdyn::api::SitCommand_Feedback& MobilityCommand_Feedback::sit_feedback() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MobilityCommand.Feedback.sit_feedback)
  return _internal_sit_feedback();
}
inline ::bosdyn::api::SitCommand_Feedback* MobilityCommand_Feedback::unsafe_arena_release_sit_feedback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.MobilityCommand.Feedback.sit_feedback)
  if (_internal_has_sit_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::SitCommand_Feedback* temp = _impl_.feedback_.sit_feedback_;
    _impl_.feedback_.sit_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MobilityCommand_Feedback::unsafe_arena_set_allocated_sit_feedback(::bosdyn::api::SitCommand_Feedback* sit_feedback) {
  clear_feedback();
  if (sit_feedback) {
    set_has_sit_feedback();
    _impl_.feedback_.sit_feedback_ = sit_feedback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.MobilityCommand.Feedback.sit_feedback)
}
inline ::bosdyn::api::SitCommand_Feedback* MobilityCommand_Feedback::_internal_mutable_sit_feedback() {
  if (!_internal_has_sit_feedback()) {
    clear_feedback();
    set_has_sit_feedback();
    _impl_.feedback_.sit_feedback_ = CreateMaybeMessage< ::bosdyn::api::SitCommand_Feedback >(GetArenaForAllocation());
  }
  return _impl_.feedback_.sit_feedback_;
}
inline ::bosdyn::api::SitCommand_Feedback* MobilityCommand_Feedback::mutable_sit_feedback() {
  ::bosdyn::api::SitCommand_Feedback* _msg = _internal_mutable_sit_feedback();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.MobilityCommand.Feedback.sit_feedback)
  return _msg;
}

// .bosdyn.api.StandCommand.Feedback stand_feedback = 4;
inline bool MobilityCommand_Feedback::_internal_has_stand_feedback() const {
  return feedback_case() == kStandFeedback;
}
inline bool MobilityCommand_Feedback::has_stand_feedback() const {
  return _internal_has_stand_feedback();
}
inline void MobilityCommand_Feedback::set_has_stand_feedback() {
  _impl_._oneof_case_[0] = kStandFeedback;
}
inline ::bosdyn::api::StandCommand_Feedback* MobilityCommand_Feedback::release_stand_feedback() {
  // @@protoc_insertion_point(field_release:bosdyn.api.MobilityCommand.Feedback.stand_feedback)
  if (_internal_has_stand_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::StandCommand_Feedback* temp = _impl_.feedback_.stand_feedback_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.feedback_.stand_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::StandCommand_Feedback& MobilityCommand_Feedback::_internal_stand_feedback() const {
  return _internal_has_stand_feedback()
      ? *_impl_.feedback_.stand_feedback_
      : reinterpret_cast< ::bosdyn::api::StandCommand_Feedback&>(::bosdyn::api::_StandCommand_Feedback_default_instance_);
}
inline const ::bosdyn::api::StandCommand_Feedback& MobilityCommand_Feedback::stand_feedback() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MobilityCommand.Feedback.stand_feedback)
  return _internal_stand_feedback();
}
inline ::bosdyn::api::StandCommand_Feedback* MobilityCommand_Feedback::unsafe_arena_release_stand_feedback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.MobilityCommand.Feedback.stand_feedback)
  if (_internal_has_stand_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::StandCommand_Feedback* temp = _impl_.feedback_.stand_feedback_;
    _impl_.feedback_.stand_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MobilityCommand_Feedback::unsafe_arena_set_allocated_stand_feedback(::bosdyn::api::StandCommand_Feedback* stand_feedback) {
  clear_feedback();
  if (stand_feedback) {
    set_has_stand_feedback();
    _impl_.feedback_.stand_feedback_ = stand_feedback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.MobilityCommand.Feedback.stand_feedback)
}
inline ::bosdyn::api::StandCommand_Feedback* MobilityCommand_Feedback::_internal_mutable_stand_feedback() {
  if (!_internal_has_stand_feedback()) {
    clear_feedback();
    set_has_stand_feedback();
    _impl_.feedback_.stand_feedback_ = CreateMaybeMessage< ::bosdyn::api::StandCommand_Feedback >(GetArenaForAllocation());
  }
  return _impl_.feedback_.stand_feedback_;
}
inline ::bosdyn::api::StandCommand_Feedback* MobilityCommand_Feedback::mutable_stand_feedback() {
  ::bosdyn::api::StandCommand_Feedback* _msg = _internal_mutable_stand_feedback();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.MobilityCommand.Feedback.stand_feedback)
  return _msg;
}

// .bosdyn.api.StanceCommand.Feedback stance_feedback = 5;
inline bool MobilityCommand_Feedback::_internal_has_stance_feedback() const {
  return feedback_case() == kStanceFeedback;
}
inline bool MobilityCommand_Feedback::has_stance_feedback() const {
  return _internal_has_stance_feedback();
}
inline void MobilityCommand_Feedback::set_has_stance_feedback() {
  _impl_._oneof_case_[0] = kStanceFeedback;
}
inline ::bosdyn::api::StanceCommand_Feedback* MobilityCommand_Feedback::release_stance_feedback() {
  // @@protoc_insertion_point(field_release:bosdyn.api.MobilityCommand.Feedback.stance_feedback)
  if (_internal_has_stance_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::StanceCommand_Feedback* temp = _impl_.feedback_.stance_feedback_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.feedback_.stance_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::StanceCommand_Feedback& MobilityCommand_Feedback::_internal_stance_feedback() const {
  return _internal_has_stance_feedback()
      ? *_impl_.feedback_.stance_feedback_
      : reinterpret_cast< ::bosdyn::api::StanceCommand_Feedback&>(::bosdyn::api::_StanceCommand_Feedback_default_instance_);
}
inline const ::bosdyn::api::StanceCommand_Feedback& MobilityCommand_Feedback::stance_feedback() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MobilityCommand.Feedback.stance_feedback)
  return _internal_stance_feedback();
}
inline ::bosdyn::api::StanceCommand_Feedback* MobilityCommand_Feedback::unsafe_arena_release_stance_feedback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.MobilityCommand.Feedback.stance_feedback)
  if (_internal_has_stance_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::StanceCommand_Feedback* temp = _impl_.feedback_.stance_feedback_;
    _impl_.feedback_.stance_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MobilityCommand_Feedback::unsafe_arena_set_allocated_stance_feedback(::bosdyn::api::StanceCommand_Feedback* stance_feedback) {
  clear_feedback();
  if (stance_feedback) {
    set_has_stance_feedback();
    _impl_.feedback_.stance_feedback_ = stance_feedback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.MobilityCommand.Feedback.stance_feedback)
}
inline ::bosdyn::api::StanceCommand_Feedback* MobilityCommand_Feedback::_internal_mutable_stance_feedback() {
  if (!_internal_has_stance_feedback()) {
    clear_feedback();
    set_has_stance_feedback();
    _impl_.feedback_.stance_feedback_ = CreateMaybeMessage< ::bosdyn::api::StanceCommand_Feedback >(GetArenaForAllocation());
  }
  return _impl_.feedback_.stance_feedback_;
}
inline ::bosdyn::api::StanceCommand_Feedback* MobilityCommand_Feedback::mutable_stance_feedback() {
  ::bosdyn::api::StanceCommand_Feedback* _msg = _internal_mutable_stance_feedback();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.MobilityCommand.Feedback.stance_feedback)
  return _msg;
}

// .bosdyn.api.StopCommand.Feedback stop_feedback = 6;
inline bool MobilityCommand_Feedback::_internal_has_stop_feedback() const {
  return feedback_case() == kStopFeedback;
}
inline bool MobilityCommand_Feedback::has_stop_feedback() const {
  return _internal_has_stop_feedback();
}
inline void MobilityCommand_Feedback::set_has_stop_feedback() {
  _impl_._oneof_case_[0] = kStopFeedback;
}
inline ::bosdyn::api::StopCommand_Feedback* MobilityCommand_Feedback::release_stop_feedback() {
  // @@protoc_insertion_point(field_release:bosdyn.api.MobilityCommand.Feedback.stop_feedback)
  if (_internal_has_stop_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::StopCommand_Feedback* temp = _impl_.feedback_.stop_feedback_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.feedback_.stop_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::StopCommand_Feedback& MobilityCommand_Feedback::_internal_stop_feedback() const {
  return _internal_has_stop_feedback()
      ? *_impl_.feedback_.stop_feedback_
      : reinterpret_cast< ::bosdyn::api::StopCommand_Feedback&>(::bosdyn::api::_StopCommand_Feedback_default_instance_);
}
inline const ::bosdyn::api::StopCommand_Feedback& MobilityCommand_Feedback::stop_feedback() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MobilityCommand.Feedback.stop_feedback)
  return _internal_stop_feedback();
}
inline ::bosdyn::api::StopCommand_Feedback* MobilityCommand_Feedback::unsafe_arena_release_stop_feedback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.MobilityCommand.Feedback.stop_feedback)
  if (_internal_has_stop_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::StopCommand_Feedback* temp = _impl_.feedback_.stop_feedback_;
    _impl_.feedback_.stop_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MobilityCommand_Feedback::unsafe_arena_set_allocated_stop_feedback(::bosdyn::api::StopCommand_Feedback* stop_feedback) {
  clear_feedback();
  if (stop_feedback) {
    set_has_stop_feedback();
    _impl_.feedback_.stop_feedback_ = stop_feedback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.MobilityCommand.Feedback.stop_feedback)
}
inline ::bosdyn::api::StopCommand_Feedback* MobilityCommand_Feedback::_internal_mutable_stop_feedback() {
  if (!_internal_has_stop_feedback()) {
    clear_feedback();
    set_has_stop_feedback();
    _impl_.feedback_.stop_feedback_ = CreateMaybeMessage< ::bosdyn::api::StopCommand_Feedback >(GetArenaForAllocation());
  }
  return _impl_.feedback_.stop_feedback_;
}
inline ::bosdyn::api::StopCommand_Feedback* MobilityCommand_Feedback::mutable_stop_feedback() {
  ::bosdyn::api::StopCommand_Feedback* _msg = _internal_mutable_stop_feedback();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.MobilityCommand.Feedback.stop_feedback)
  return _msg;
}

// .bosdyn.api.FollowArmCommand.Feedback follow_arm_feedback = 7;
inline bool MobilityCommand_Feedback::_internal_has_follow_arm_feedback() const {
  return feedback_case() == kFollowArmFeedback;
}
inline bool MobilityCommand_Feedback::has_follow_arm_feedback() const {
  return _internal_has_follow_arm_feedback();
}
inline void MobilityCommand_Feedback::set_has_follow_arm_feedback() {
  _impl_._oneof_case_[0] = kFollowArmFeedback;
}
inline ::bosdyn::api::FollowArmCommand_Feedback* MobilityCommand_Feedback::release_follow_arm_feedback() {
  // @@protoc_insertion_point(field_release:bosdyn.api.MobilityCommand.Feedback.follow_arm_feedback)
  if (_internal_has_follow_arm_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::FollowArmCommand_Feedback* temp = _impl_.feedback_.follow_arm_feedback_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.feedback_.follow_arm_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::FollowArmCommand_Feedback& MobilityCommand_Feedback::_internal_follow_arm_feedback() const {
  return _internal_has_follow_arm_feedback()
      ? *_impl_.feedback_.follow_arm_feedback_
      : reinterpret_cast< ::bosdyn::api::FollowArmCommand_Feedback&>(::bosdyn::api::_FollowArmCommand_Feedback_default_instance_);
}
inline const ::bosdyn::api::FollowArmCommand_Feedback& MobilityCommand_Feedback::follow_arm_feedback() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MobilityCommand.Feedback.follow_arm_feedback)
  return _internal_follow_arm_feedback();
}
inline ::bosdyn::api::FollowArmCommand_Feedback* MobilityCommand_Feedback::unsafe_arena_release_follow_arm_feedback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.MobilityCommand.Feedback.follow_arm_feedback)
  if (_internal_has_follow_arm_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::FollowArmCommand_Feedback* temp = _impl_.feedback_.follow_arm_feedback_;
    _impl_.feedback_.follow_arm_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MobilityCommand_Feedback::unsafe_arena_set_allocated_follow_arm_feedback(::bosdyn::api::FollowArmCommand_Feedback* follow_arm_feedback) {
  clear_feedback();
  if (follow_arm_feedback) {
    set_has_follow_arm_feedback();
    _impl_.feedback_.follow_arm_feedback_ = follow_arm_feedback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.MobilityCommand.Feedback.follow_arm_feedback)
}
inline ::bosdyn::api::FollowArmCommand_Feedback* MobilityCommand_Feedback::_internal_mutable_follow_arm_feedback() {
  if (!_internal_has_follow_arm_feedback()) {
    clear_feedback();
    set_has_follow_arm_feedback();
    _impl_.feedback_.follow_arm_feedback_ = CreateMaybeMessage< ::bosdyn::api::FollowArmCommand_Feedback >(GetArenaForAllocation());
  }
  return _impl_.feedback_.follow_arm_feedback_;
}
inline ::bosdyn::api::FollowArmCommand_Feedback* MobilityCommand_Feedback::mutable_follow_arm_feedback() {
  ::bosdyn::api::FollowArmCommand_Feedback* _msg = _internal_mutable_follow_arm_feedback();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.MobilityCommand.Feedback.follow_arm_feedback)
  return _msg;
}

// .bosdyn.api.RobotCommandFeedbackStatus.Status status = 100;
inline void MobilityCommand_Feedback::clear_status() {
  _impl_.status_ = 0;
}
inline ::bosdyn::api::RobotCommandFeedbackStatus_Status MobilityCommand_Feedback::_internal_status() const {
  return static_cast< ::bosdyn::api::RobotCommandFeedbackStatus_Status >(_impl_.status_);
}
inline ::bosdyn::api::RobotCommandFeedbackStatus_Status MobilityCommand_Feedback::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MobilityCommand.Feedback.status)
  return _internal_status();
}
inline void MobilityCommand_Feedback::_internal_set_status(::bosdyn::api::RobotCommandFeedbackStatus_Status value) {
  
  _impl_.status_ = value;
}
inline void MobilityCommand_Feedback::set_status(::bosdyn::api::RobotCommandFeedbackStatus_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.MobilityCommand.Feedback.status)
}

inline bool MobilityCommand_Feedback::has_feedback() const {
  return feedback_case() != FEEDBACK_NOT_SET;
}
inline void MobilityCommand_Feedback::clear_has_feedback() {
  _impl_._oneof_case_[0] = FEEDBACK_NOT_SET;
}
inline MobilityCommand_Feedback::FeedbackCase MobilityCommand_Feedback::feedback_case() const {
  return MobilityCommand_Feedback::FeedbackCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// MobilityCommand

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace bosdyn

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fmobility_5fcommand_2eproto

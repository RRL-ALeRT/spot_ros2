// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/synchronized_command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fsynchronized_5fcommand_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fsynchronized_5fcommand_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/arm_command.pb.h"
#include "bosdyn/api/gripper_command.pb.h"
#include "bosdyn/api/mobility_command.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fsynchronized_5fcommand_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fsynchronized_5fcommand_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fsynchronized_5fcommand_2eproto;
namespace bosdyn {
namespace api {
class SynchronizedCommand;
struct SynchronizedCommandDefaultTypeInternal;
extern SynchronizedCommandDefaultTypeInternal _SynchronizedCommand_default_instance_;
class SynchronizedCommand_Feedback;
struct SynchronizedCommand_FeedbackDefaultTypeInternal;
extern SynchronizedCommand_FeedbackDefaultTypeInternal _SynchronizedCommand_Feedback_default_instance_;
class SynchronizedCommand_Request;
struct SynchronizedCommand_RequestDefaultTypeInternal;
extern SynchronizedCommand_RequestDefaultTypeInternal _SynchronizedCommand_Request_default_instance_;
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::SynchronizedCommand* Arena::CreateMaybeMessage<::bosdyn::api::SynchronizedCommand>(Arena*);
template<> ::bosdyn::api::SynchronizedCommand_Feedback* Arena::CreateMaybeMessage<::bosdyn::api::SynchronizedCommand_Feedback>(Arena*);
template<> ::bosdyn::api::SynchronizedCommand_Request* Arena::CreateMaybeMessage<::bosdyn::api::SynchronizedCommand_Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {

// ===================================================================

class SynchronizedCommand_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.SynchronizedCommand.Request) */ {
 public:
  inline SynchronizedCommand_Request() : SynchronizedCommand_Request(nullptr) {}
  ~SynchronizedCommand_Request() override;
  explicit PROTOBUF_CONSTEXPR SynchronizedCommand_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SynchronizedCommand_Request(const SynchronizedCommand_Request& from);
  SynchronizedCommand_Request(SynchronizedCommand_Request&& from) noexcept
    : SynchronizedCommand_Request() {
    *this = ::std::move(from);
  }

  inline SynchronizedCommand_Request& operator=(const SynchronizedCommand_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SynchronizedCommand_Request& operator=(SynchronizedCommand_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SynchronizedCommand_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const SynchronizedCommand_Request* internal_default_instance() {
    return reinterpret_cast<const SynchronizedCommand_Request*>(
               &_SynchronizedCommand_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SynchronizedCommand_Request& a, SynchronizedCommand_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SynchronizedCommand_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SynchronizedCommand_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SynchronizedCommand_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SynchronizedCommand_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SynchronizedCommand_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SynchronizedCommand_Request& from) {
    SynchronizedCommand_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SynchronizedCommand_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.SynchronizedCommand.Request";
  }
  protected:
  explicit SynchronizedCommand_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArmCommandFieldNumber = 1,
    kMobilityCommandFieldNumber = 2,
    kGripperCommandFieldNumber = 3,
  };
  // .bosdyn.api.ArmCommand.Request arm_command = 1;
  bool has_arm_command() const;
  private:
  bool _internal_has_arm_command() const;
  public:
  void clear_arm_command();
  const ::bosdyn::api::ArmCommand_Request& arm_command() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ArmCommand_Request* release_arm_command();
  ::bosdyn::api::ArmCommand_Request* mutable_arm_command();
  void set_allocated_arm_command(::bosdyn::api::ArmCommand_Request* arm_command);
  private:
  const ::bosdyn::api::ArmCommand_Request& _internal_arm_command() const;
  ::bosdyn::api::ArmCommand_Request* _internal_mutable_arm_command();
  public:
  void unsafe_arena_set_allocated_arm_command(
      ::bosdyn::api::ArmCommand_Request* arm_command);
  ::bosdyn::api::ArmCommand_Request* unsafe_arena_release_arm_command();

  // .bosdyn.api.MobilityCommand.Request mobility_command = 2;
  bool has_mobility_command() const;
  private:
  bool _internal_has_mobility_command() const;
  public:
  void clear_mobility_command();
  const ::bosdyn::api::MobilityCommand_Request& mobility_command() const;
  PROTOBUF_NODISCARD ::bosdyn::api::MobilityCommand_Request* release_mobility_command();
  ::bosdyn::api::MobilityCommand_Request* mutable_mobility_command();
  void set_allocated_mobility_command(::bosdyn::api::MobilityCommand_Request* mobility_command);
  private:
  const ::bosdyn::api::MobilityCommand_Request& _internal_mobility_command() const;
  ::bosdyn::api::MobilityCommand_Request* _internal_mutable_mobility_command();
  public:
  void unsafe_arena_set_allocated_mobility_command(
      ::bosdyn::api::MobilityCommand_Request* mobility_command);
  ::bosdyn::api::MobilityCommand_Request* unsafe_arena_release_mobility_command();

  // .bosdyn.api.GripperCommand.Request gripper_command = 3;
  bool has_gripper_command() const;
  private:
  bool _internal_has_gripper_command() const;
  public:
  void clear_gripper_command();
  const ::bosdyn::api::GripperCommand_Request& gripper_command() const;
  PROTOBUF_NODISCARD ::bosdyn::api::GripperCommand_Request* release_gripper_command();
  ::bosdyn::api::GripperCommand_Request* mutable_gripper_command();
  void set_allocated_gripper_command(::bosdyn::api::GripperCommand_Request* gripper_command);
  private:
  const ::bosdyn::api::GripperCommand_Request& _internal_gripper_command() const;
  ::bosdyn::api::GripperCommand_Request* _internal_mutable_gripper_command();
  public:
  void unsafe_arena_set_allocated_gripper_command(
      ::bosdyn::api::GripperCommand_Request* gripper_command);
  ::bosdyn::api::GripperCommand_Request* unsafe_arena_release_gripper_command();

  // @@protoc_insertion_point(class_scope:bosdyn.api.SynchronizedCommand.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::ArmCommand_Request* arm_command_;
    ::bosdyn::api::MobilityCommand_Request* mobility_command_;
    ::bosdyn::api::GripperCommand_Request* gripper_command_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fsynchronized_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class SynchronizedCommand_Feedback final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.SynchronizedCommand.Feedback) */ {
 public:
  inline SynchronizedCommand_Feedback() : SynchronizedCommand_Feedback(nullptr) {}
  ~SynchronizedCommand_Feedback() override;
  explicit PROTOBUF_CONSTEXPR SynchronizedCommand_Feedback(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SynchronizedCommand_Feedback(const SynchronizedCommand_Feedback& from);
  SynchronizedCommand_Feedback(SynchronizedCommand_Feedback&& from) noexcept
    : SynchronizedCommand_Feedback() {
    *this = ::std::move(from);
  }

  inline SynchronizedCommand_Feedback& operator=(const SynchronizedCommand_Feedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline SynchronizedCommand_Feedback& operator=(SynchronizedCommand_Feedback&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SynchronizedCommand_Feedback& default_instance() {
    return *internal_default_instance();
  }
  static inline const SynchronizedCommand_Feedback* internal_default_instance() {
    return reinterpret_cast<const SynchronizedCommand_Feedback*>(
               &_SynchronizedCommand_Feedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SynchronizedCommand_Feedback& a, SynchronizedCommand_Feedback& b) {
    a.Swap(&b);
  }
  inline void Swap(SynchronizedCommand_Feedback* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SynchronizedCommand_Feedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SynchronizedCommand_Feedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SynchronizedCommand_Feedback>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SynchronizedCommand_Feedback& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SynchronizedCommand_Feedback& from) {
    SynchronizedCommand_Feedback::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SynchronizedCommand_Feedback* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.SynchronizedCommand.Feedback";
  }
  protected:
  explicit SynchronizedCommand_Feedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArmCommandFeedbackFieldNumber = 1,
    kMobilityCommandFeedbackFieldNumber = 2,
    kGripperCommandFeedbackFieldNumber = 3,
  };
  // .bosdyn.api.ArmCommand.Feedback arm_command_feedback = 1;
  bool has_arm_command_feedback() const;
  private:
  bool _internal_has_arm_command_feedback() const;
  public:
  void clear_arm_command_feedback();
  const ::bosdyn::api::ArmCommand_Feedback& arm_command_feedback() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ArmCommand_Feedback* release_arm_command_feedback();
  ::bosdyn::api::ArmCommand_Feedback* mutable_arm_command_feedback();
  void set_allocated_arm_command_feedback(::bosdyn::api::ArmCommand_Feedback* arm_command_feedback);
  private:
  const ::bosdyn::api::ArmCommand_Feedback& _internal_arm_command_feedback() const;
  ::bosdyn::api::ArmCommand_Feedback* _internal_mutable_arm_command_feedback();
  public:
  void unsafe_arena_set_allocated_arm_command_feedback(
      ::bosdyn::api::ArmCommand_Feedback* arm_command_feedback);
  ::bosdyn::api::ArmCommand_Feedback* unsafe_arena_release_arm_command_feedback();

  // .bosdyn.api.MobilityCommand.Feedback mobility_command_feedback = 2;
  bool has_mobility_command_feedback() const;
  private:
  bool _internal_has_mobility_command_feedback() const;
  public:
  void clear_mobility_command_feedback();
  const ::bosdyn::api::MobilityCommand_Feedback& mobility_command_feedback() const;
  PROTOBUF_NODISCARD ::bosdyn::api::MobilityCommand_Feedback* release_mobility_command_feedback();
  ::bosdyn::api::MobilityCommand_Feedback* mutable_mobility_command_feedback();
  void set_allocated_mobility_command_feedback(::bosdyn::api::MobilityCommand_Feedback* mobility_command_feedback);
  private:
  const ::bosdyn::api::MobilityCommand_Feedback& _internal_mobility_command_feedback() const;
  ::bosdyn::api::MobilityCommand_Feedback* _internal_mutable_mobility_command_feedback();
  public:
  void unsafe_arena_set_allocated_mobility_command_feedback(
      ::bosdyn::api::MobilityCommand_Feedback* mobility_command_feedback);
  ::bosdyn::api::MobilityCommand_Feedback* unsafe_arena_release_mobility_command_feedback();

  // .bosdyn.api.GripperCommand.Feedback gripper_command_feedback = 3;
  bool has_gripper_command_feedback() const;
  private:
  bool _internal_has_gripper_command_feedback() const;
  public:
  void clear_gripper_command_feedback();
  const ::bosdyn::api::GripperCommand_Feedback& gripper_command_feedback() const;
  PROTOBUF_NODISCARD ::bosdyn::api::GripperCommand_Feedback* release_gripper_command_feedback();
  ::bosdyn::api::GripperCommand_Feedback* mutable_gripper_command_feedback();
  void set_allocated_gripper_command_feedback(::bosdyn::api::GripperCommand_Feedback* gripper_command_feedback);
  private:
  const ::bosdyn::api::GripperCommand_Feedback& _internal_gripper_command_feedback() const;
  ::bosdyn::api::GripperCommand_Feedback* _internal_mutable_gripper_command_feedback();
  public:
  void unsafe_arena_set_allocated_gripper_command_feedback(
      ::bosdyn::api::GripperCommand_Feedback* gripper_command_feedback);
  ::bosdyn::api::GripperCommand_Feedback* unsafe_arena_release_gripper_command_feedback();

  // @@protoc_insertion_point(class_scope:bosdyn.api.SynchronizedCommand.Feedback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::ArmCommand_Feedback* arm_command_feedback_;
    ::bosdyn::api::MobilityCommand_Feedback* mobility_command_feedback_;
    ::bosdyn::api::GripperCommand_Feedback* gripper_command_feedback_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fsynchronized_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class SynchronizedCommand final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:bosdyn.api.SynchronizedCommand) */ {
 public:
  inline SynchronizedCommand() : SynchronizedCommand(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SynchronizedCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SynchronizedCommand(const SynchronizedCommand& from);
  SynchronizedCommand(SynchronizedCommand&& from) noexcept
    : SynchronizedCommand() {
    *this = ::std::move(from);
  }

  inline SynchronizedCommand& operator=(const SynchronizedCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline SynchronizedCommand& operator=(SynchronizedCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SynchronizedCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const SynchronizedCommand* internal_default_instance() {
    return reinterpret_cast<const SynchronizedCommand*>(
               &_SynchronizedCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SynchronizedCommand& a, SynchronizedCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(SynchronizedCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SynchronizedCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SynchronizedCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SynchronizedCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SynchronizedCommand& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SynchronizedCommand& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.SynchronizedCommand";
  }
  protected:
  explicit SynchronizedCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SynchronizedCommand_Request Request;
  typedef SynchronizedCommand_Feedback Feedback;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.SynchronizedCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_bosdyn_2fapi_2fsynchronized_5fcommand_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SynchronizedCommand_Request

// .bosdyn.api.ArmCommand.Request arm_command = 1;
inline bool SynchronizedCommand_Request::_internal_has_arm_command() const {
  return this != internal_default_instance() && _impl_.arm_command_ != nullptr;
}
inline bool SynchronizedCommand_Request::has_arm_command() const {
  return _internal_has_arm_command();
}
inline const ::bosdyn::api::ArmCommand_Request& SynchronizedCommand_Request::_internal_arm_command() const {
  const ::bosdyn::api::ArmCommand_Request* p = _impl_.arm_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ArmCommand_Request&>(
      ::bosdyn::api::_ArmCommand_Request_default_instance_);
}
inline const ::bosdyn::api::ArmCommand_Request& SynchronizedCommand_Request::arm_command() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SynchronizedCommand.Request.arm_command)
  return _internal_arm_command();
}
inline void SynchronizedCommand_Request::unsafe_arena_set_allocated_arm_command(
    ::bosdyn::api::ArmCommand_Request* arm_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.arm_command_);
  }
  _impl_.arm_command_ = arm_command;
  if (arm_command) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.SynchronizedCommand.Request.arm_command)
}
inline ::bosdyn::api::ArmCommand_Request* SynchronizedCommand_Request::release_arm_command() {
  
  ::bosdyn::api::ArmCommand_Request* temp = _impl_.arm_command_;
  _impl_.arm_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ArmCommand_Request* SynchronizedCommand_Request::unsafe_arena_release_arm_command() {
  // @@protoc_insertion_point(field_release:bosdyn.api.SynchronizedCommand.Request.arm_command)
  
  ::bosdyn::api::ArmCommand_Request* temp = _impl_.arm_command_;
  _impl_.arm_command_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ArmCommand_Request* SynchronizedCommand_Request::_internal_mutable_arm_command() {
  
  if (_impl_.arm_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ArmCommand_Request>(GetArenaForAllocation());
    _impl_.arm_command_ = p;
  }
  return _impl_.arm_command_;
}
inline ::bosdyn::api::ArmCommand_Request* SynchronizedCommand_Request::mutable_arm_command() {
  ::bosdyn::api::ArmCommand_Request* _msg = _internal_mutable_arm_command();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.SynchronizedCommand.Request.arm_command)
  return _msg;
}
inline void SynchronizedCommand_Request::set_allocated_arm_command(::bosdyn::api::ArmCommand_Request* arm_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.arm_command_);
  }
  if (arm_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arm_command));
    if (message_arena != submessage_arena) {
      arm_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arm_command, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.arm_command_ = arm_command;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.SynchronizedCommand.Request.arm_command)
}

// .bosdyn.api.MobilityCommand.Request mobility_command = 2;
inline bool SynchronizedCommand_Request::_internal_has_mobility_command() const {
  return this != internal_default_instance() && _impl_.mobility_command_ != nullptr;
}
inline bool SynchronizedCommand_Request::has_mobility_command() const {
  return _internal_has_mobility_command();
}
inline const ::bosdyn::api::MobilityCommand_Request& SynchronizedCommand_Request::_internal_mobility_command() const {
  const ::bosdyn::api::MobilityCommand_Request* p = _impl_.mobility_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::MobilityCommand_Request&>(
      ::bosdyn::api::_MobilityCommand_Request_default_instance_);
}
inline const ::bosdyn::api::MobilityCommand_Request& SynchronizedCommand_Request::mobility_command() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SynchronizedCommand.Request.mobility_command)
  return _internal_mobility_command();
}
inline void SynchronizedCommand_Request::unsafe_arena_set_allocated_mobility_command(
    ::bosdyn::api::MobilityCommand_Request* mobility_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mobility_command_);
  }
  _impl_.mobility_command_ = mobility_command;
  if (mobility_command) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.SynchronizedCommand.Request.mobility_command)
}
inline ::bosdyn::api::MobilityCommand_Request* SynchronizedCommand_Request::release_mobility_command() {
  
  ::bosdyn::api::MobilityCommand_Request* temp = _impl_.mobility_command_;
  _impl_.mobility_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::MobilityCommand_Request* SynchronizedCommand_Request::unsafe_arena_release_mobility_command() {
  // @@protoc_insertion_point(field_release:bosdyn.api.SynchronizedCommand.Request.mobility_command)
  
  ::bosdyn::api::MobilityCommand_Request* temp = _impl_.mobility_command_;
  _impl_.mobility_command_ = nullptr;
  return temp;
}
inline ::bosdyn::api::MobilityCommand_Request* SynchronizedCommand_Request::_internal_mutable_mobility_command() {
  
  if (_impl_.mobility_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::MobilityCommand_Request>(GetArenaForAllocation());
    _impl_.mobility_command_ = p;
  }
  return _impl_.mobility_command_;
}
inline ::bosdyn::api::MobilityCommand_Request* SynchronizedCommand_Request::mutable_mobility_command() {
  ::bosdyn::api::MobilityCommand_Request* _msg = _internal_mutable_mobility_command();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.SynchronizedCommand.Request.mobility_command)
  return _msg;
}
inline void SynchronizedCommand_Request::set_allocated_mobility_command(::bosdyn::api::MobilityCommand_Request* mobility_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mobility_command_);
  }
  if (mobility_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mobility_command));
    if (message_arena != submessage_arena) {
      mobility_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mobility_command, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mobility_command_ = mobility_command;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.SynchronizedCommand.Request.mobility_command)
}

// .bosdyn.api.GripperCommand.Request gripper_command = 3;
inline bool SynchronizedCommand_Request::_internal_has_gripper_command() const {
  return this != internal_default_instance() && _impl_.gripper_command_ != nullptr;
}
inline bool SynchronizedCommand_Request::has_gripper_command() const {
  return _internal_has_gripper_command();
}
inline const ::bosdyn::api::GripperCommand_Request& SynchronizedCommand_Request::_internal_gripper_command() const {
  const ::bosdyn::api::GripperCommand_Request* p = _impl_.gripper_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::GripperCommand_Request&>(
      ::bosdyn::api::_GripperCommand_Request_default_instance_);
}
inline const ::bosdyn::api::GripperCommand_Request& SynchronizedCommand_Request::gripper_command() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SynchronizedCommand.Request.gripper_command)
  return _internal_gripper_command();
}
inline void SynchronizedCommand_Request::unsafe_arena_set_allocated_gripper_command(
    ::bosdyn::api::GripperCommand_Request* gripper_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gripper_command_);
  }
  _impl_.gripper_command_ = gripper_command;
  if (gripper_command) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.SynchronizedCommand.Request.gripper_command)
}
inline ::bosdyn::api::GripperCommand_Request* SynchronizedCommand_Request::release_gripper_command() {
  
  ::bosdyn::api::GripperCommand_Request* temp = _impl_.gripper_command_;
  _impl_.gripper_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::GripperCommand_Request* SynchronizedCommand_Request::unsafe_arena_release_gripper_command() {
  // @@protoc_insertion_point(field_release:bosdyn.api.SynchronizedCommand.Request.gripper_command)
  
  ::bosdyn::api::GripperCommand_Request* temp = _impl_.gripper_command_;
  _impl_.gripper_command_ = nullptr;
  return temp;
}
inline ::bosdyn::api::GripperCommand_Request* SynchronizedCommand_Request::_internal_mutable_gripper_command() {
  
  if (_impl_.gripper_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::GripperCommand_Request>(GetArenaForAllocation());
    _impl_.gripper_command_ = p;
  }
  return _impl_.gripper_command_;
}
inline ::bosdyn::api::GripperCommand_Request* SynchronizedCommand_Request::mutable_gripper_command() {
  ::bosdyn::api::GripperCommand_Request* _msg = _internal_mutable_gripper_command();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.SynchronizedCommand.Request.gripper_command)
  return _msg;
}
inline void SynchronizedCommand_Request::set_allocated_gripper_command(::bosdyn::api::GripperCommand_Request* gripper_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gripper_command_);
  }
  if (gripper_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gripper_command));
    if (message_arena != submessage_arena) {
      gripper_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gripper_command, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gripper_command_ = gripper_command;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.SynchronizedCommand.Request.gripper_command)
}

// -------------------------------------------------------------------

// SynchronizedCommand_Feedback

// .bosdyn.api.ArmCommand.Feedback arm_command_feedback = 1;
inline bool SynchronizedCommand_Feedback::_internal_has_arm_command_feedback() const {
  return this != internal_default_instance() && _impl_.arm_command_feedback_ != nullptr;
}
inline bool SynchronizedCommand_Feedback::has_arm_command_feedback() const {
  return _internal_has_arm_command_feedback();
}
inline const ::bosdyn::api::ArmCommand_Feedback& SynchronizedCommand_Feedback::_internal_arm_command_feedback() const {
  const ::bosdyn::api::ArmCommand_Feedback* p = _impl_.arm_command_feedback_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ArmCommand_Feedback&>(
      ::bosdyn::api::_ArmCommand_Feedback_default_instance_);
}
inline const ::bosdyn::api::ArmCommand_Feedback& SynchronizedCommand_Feedback::arm_command_feedback() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SynchronizedCommand.Feedback.arm_command_feedback)
  return _internal_arm_command_feedback();
}
inline void SynchronizedCommand_Feedback::unsafe_arena_set_allocated_arm_command_feedback(
    ::bosdyn::api::ArmCommand_Feedback* arm_command_feedback) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.arm_command_feedback_);
  }
  _impl_.arm_command_feedback_ = arm_command_feedback;
  if (arm_command_feedback) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.SynchronizedCommand.Feedback.arm_command_feedback)
}
inline ::bosdyn::api::ArmCommand_Feedback* SynchronizedCommand_Feedback::release_arm_command_feedback() {
  
  ::bosdyn::api::ArmCommand_Feedback* temp = _impl_.arm_command_feedback_;
  _impl_.arm_command_feedback_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ArmCommand_Feedback* SynchronizedCommand_Feedback::unsafe_arena_release_arm_command_feedback() {
  // @@protoc_insertion_point(field_release:bosdyn.api.SynchronizedCommand.Feedback.arm_command_feedback)
  
  ::bosdyn::api::ArmCommand_Feedback* temp = _impl_.arm_command_feedback_;
  _impl_.arm_command_feedback_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ArmCommand_Feedback* SynchronizedCommand_Feedback::_internal_mutable_arm_command_feedback() {
  
  if (_impl_.arm_command_feedback_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ArmCommand_Feedback>(GetArenaForAllocation());
    _impl_.arm_command_feedback_ = p;
  }
  return _impl_.arm_command_feedback_;
}
inline ::bosdyn::api::ArmCommand_Feedback* SynchronizedCommand_Feedback::mutable_arm_command_feedback() {
  ::bosdyn::api::ArmCommand_Feedback* _msg = _internal_mutable_arm_command_feedback();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.SynchronizedCommand.Feedback.arm_command_feedback)
  return _msg;
}
inline void SynchronizedCommand_Feedback::set_allocated_arm_command_feedback(::bosdyn::api::ArmCommand_Feedback* arm_command_feedback) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.arm_command_feedback_);
  }
  if (arm_command_feedback) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arm_command_feedback));
    if (message_arena != submessage_arena) {
      arm_command_feedback = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arm_command_feedback, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.arm_command_feedback_ = arm_command_feedback;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.SynchronizedCommand.Feedback.arm_command_feedback)
}

// .bosdyn.api.MobilityCommand.Feedback mobility_command_feedback = 2;
inline bool SynchronizedCommand_Feedback::_internal_has_mobility_command_feedback() const {
  return this != internal_default_instance() && _impl_.mobility_command_feedback_ != nullptr;
}
inline bool SynchronizedCommand_Feedback::has_mobility_command_feedback() const {
  return _internal_has_mobility_command_feedback();
}
inline const ::bosdyn::api::MobilityCommand_Feedback& SynchronizedCommand_Feedback::_internal_mobility_command_feedback() const {
  const ::bosdyn::api::MobilityCommand_Feedback* p = _impl_.mobility_command_feedback_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::MobilityCommand_Feedback&>(
      ::bosdyn::api::_MobilityCommand_Feedback_default_instance_);
}
inline const ::bosdyn::api::MobilityCommand_Feedback& SynchronizedCommand_Feedback::mobility_command_feedback() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SynchronizedCommand.Feedback.mobility_command_feedback)
  return _internal_mobility_command_feedback();
}
inline void SynchronizedCommand_Feedback::unsafe_arena_set_allocated_mobility_command_feedback(
    ::bosdyn::api::MobilityCommand_Feedback* mobility_command_feedback) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mobility_command_feedback_);
  }
  _impl_.mobility_command_feedback_ = mobility_command_feedback;
  if (mobility_command_feedback) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.SynchronizedCommand.Feedback.mobility_command_feedback)
}
inline ::bosdyn::api::MobilityCommand_Feedback* SynchronizedCommand_Feedback::release_mobility_command_feedback() {
  
  ::bosdyn::api::MobilityCommand_Feedback* temp = _impl_.mobility_command_feedback_;
  _impl_.mobility_command_feedback_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::MobilityCommand_Feedback* SynchronizedCommand_Feedback::unsafe_arena_release_mobility_command_feedback() {
  // @@protoc_insertion_point(field_release:bosdyn.api.SynchronizedCommand.Feedback.mobility_command_feedback)
  
  ::bosdyn::api::MobilityCommand_Feedback* temp = _impl_.mobility_command_feedback_;
  _impl_.mobility_command_feedback_ = nullptr;
  return temp;
}
inline ::bosdyn::api::MobilityCommand_Feedback* SynchronizedCommand_Feedback::_internal_mutable_mobility_command_feedback() {
  
  if (_impl_.mobility_command_feedback_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::MobilityCommand_Feedback>(GetArenaForAllocation());
    _impl_.mobility_command_feedback_ = p;
  }
  return _impl_.mobility_command_feedback_;
}
inline ::bosdyn::api::MobilityCommand_Feedback* SynchronizedCommand_Feedback::mutable_mobility_command_feedback() {
  ::bosdyn::api::MobilityCommand_Feedback* _msg = _internal_mutable_mobility_command_feedback();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.SynchronizedCommand.Feedback.mobility_command_feedback)
  return _msg;
}
inline void SynchronizedCommand_Feedback::set_allocated_mobility_command_feedback(::bosdyn::api::MobilityCommand_Feedback* mobility_command_feedback) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mobility_command_feedback_);
  }
  if (mobility_command_feedback) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mobility_command_feedback));
    if (message_arena != submessage_arena) {
      mobility_command_feedback = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mobility_command_feedback, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mobility_command_feedback_ = mobility_command_feedback;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.SynchronizedCommand.Feedback.mobility_command_feedback)
}

// .bosdyn.api.GripperCommand.Feedback gripper_command_feedback = 3;
inline bool SynchronizedCommand_Feedback::_internal_has_gripper_command_feedback() const {
  return this != internal_default_instance() && _impl_.gripper_command_feedback_ != nullptr;
}
inline bool SynchronizedCommand_Feedback::has_gripper_command_feedback() const {
  return _internal_has_gripper_command_feedback();
}
inline const ::bosdyn::api::GripperCommand_Feedback& SynchronizedCommand_Feedback::_internal_gripper_command_feedback() const {
  const ::bosdyn::api::GripperCommand_Feedback* p = _impl_.gripper_command_feedback_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::GripperCommand_Feedback&>(
      ::bosdyn::api::_GripperCommand_Feedback_default_instance_);
}
inline const ::bosdyn::api::GripperCommand_Feedback& SynchronizedCommand_Feedback::gripper_command_feedback() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SynchronizedCommand.Feedback.gripper_command_feedback)
  return _internal_gripper_command_feedback();
}
inline void SynchronizedCommand_Feedback::unsafe_arena_set_allocated_gripper_command_feedback(
    ::bosdyn::api::GripperCommand_Feedback* gripper_command_feedback) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gripper_command_feedback_);
  }
  _impl_.gripper_command_feedback_ = gripper_command_feedback;
  if (gripper_command_feedback) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.SynchronizedCommand.Feedback.gripper_command_feedback)
}
inline ::bosdyn::api::GripperCommand_Feedback* SynchronizedCommand_Feedback::release_gripper_command_feedback() {
  
  ::bosdyn::api::GripperCommand_Feedback* temp = _impl_.gripper_command_feedback_;
  _impl_.gripper_command_feedback_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::GripperCommand_Feedback* SynchronizedCommand_Feedback::unsafe_arena_release_gripper_command_feedback() {
  // @@protoc_insertion_point(field_release:bosdyn.api.SynchronizedCommand.Feedback.gripper_command_feedback)
  
  ::bosdyn::api::GripperCommand_Feedback* temp = _impl_.gripper_command_feedback_;
  _impl_.gripper_command_feedback_ = nullptr;
  return temp;
}
inline ::bosdyn::api::GripperCommand_Feedback* SynchronizedCommand_Feedback::_internal_mutable_gripper_command_feedback() {
  
  if (_impl_.gripper_command_feedback_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::GripperCommand_Feedback>(GetArenaForAllocation());
    _impl_.gripper_command_feedback_ = p;
  }
  return _impl_.gripper_command_feedback_;
}
inline ::bosdyn::api::GripperCommand_Feedback* SynchronizedCommand_Feedback::mutable_gripper_command_feedback() {
  ::bosdyn::api::GripperCommand_Feedback* _msg = _internal_mutable_gripper_command_feedback();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.SynchronizedCommand.Feedback.gripper_command_feedback)
  return _msg;
}
inline void SynchronizedCommand_Feedback::set_allocated_gripper_command_feedback(::bosdyn::api::GripperCommand_Feedback* gripper_command_feedback) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gripper_command_feedback_);
  }
  if (gripper_command_feedback) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gripper_command_feedback));
    if (message_arena != submessage_arena) {
      gripper_command_feedback = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gripper_command_feedback, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gripper_command_feedback_ = gripper_command_feedback;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.SynchronizedCommand.Feedback.gripper_command_feedback)
}

// -------------------------------------------------------------------

// SynchronizedCommand

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace bosdyn

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fsynchronized_5fcommand_2eproto

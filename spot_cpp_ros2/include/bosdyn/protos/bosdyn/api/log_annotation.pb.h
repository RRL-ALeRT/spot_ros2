// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/log_annotation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2flog_5fannotation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2flog_5fannotation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/header.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2flog_5fannotation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2flog_5fannotation_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2flog_5fannotation_2eproto;
namespace bosdyn {
namespace api {
class AddLogAnnotationRequest;
struct AddLogAnnotationRequestDefaultTypeInternal;
extern AddLogAnnotationRequestDefaultTypeInternal _AddLogAnnotationRequest_default_instance_;
class AddLogAnnotationResponse;
struct AddLogAnnotationResponseDefaultTypeInternal;
extern AddLogAnnotationResponseDefaultTypeInternal _AddLogAnnotationResponse_default_instance_;
class LogAnnotationLogBlob;
struct LogAnnotationLogBlobDefaultTypeInternal;
extern LogAnnotationLogBlobDefaultTypeInternal _LogAnnotationLogBlob_default_instance_;
class LogAnnotationOperatorMessage;
struct LogAnnotationOperatorMessageDefaultTypeInternal;
extern LogAnnotationOperatorMessageDefaultTypeInternal _LogAnnotationOperatorMessage_default_instance_;
class LogAnnotationTextMessage;
struct LogAnnotationTextMessageDefaultTypeInternal;
extern LogAnnotationTextMessageDefaultTypeInternal _LogAnnotationTextMessage_default_instance_;
class LogAnnotations;
struct LogAnnotationsDefaultTypeInternal;
extern LogAnnotationsDefaultTypeInternal _LogAnnotations_default_instance_;
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::AddLogAnnotationRequest* Arena::CreateMaybeMessage<::bosdyn::api::AddLogAnnotationRequest>(Arena*);
template<> ::bosdyn::api::AddLogAnnotationResponse* Arena::CreateMaybeMessage<::bosdyn::api::AddLogAnnotationResponse>(Arena*);
template<> ::bosdyn::api::LogAnnotationLogBlob* Arena::CreateMaybeMessage<::bosdyn::api::LogAnnotationLogBlob>(Arena*);
template<> ::bosdyn::api::LogAnnotationOperatorMessage* Arena::CreateMaybeMessage<::bosdyn::api::LogAnnotationOperatorMessage>(Arena*);
template<> ::bosdyn::api::LogAnnotationTextMessage* Arena::CreateMaybeMessage<::bosdyn::api::LogAnnotationTextMessage>(Arena*);
template<> ::bosdyn::api::LogAnnotations* Arena::CreateMaybeMessage<::bosdyn::api::LogAnnotations>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {

enum LogAnnotationTextMessage_Level : int {
  LogAnnotationTextMessage_Level_LEVEL_UNKNOWN = 0,
  LogAnnotationTextMessage_Level_LEVEL_DEBUG = 1,
  LogAnnotationTextMessage_Level_LEVEL_INFO = 2,
  LogAnnotationTextMessage_Level_LEVEL_WARN = 3,
  LogAnnotationTextMessage_Level_LEVEL_ERROR = 4,
  LogAnnotationTextMessage_Level_LogAnnotationTextMessage_Level_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LogAnnotationTextMessage_Level_LogAnnotationTextMessage_Level_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LogAnnotationTextMessage_Level_IsValid(int value);
constexpr LogAnnotationTextMessage_Level LogAnnotationTextMessage_Level_Level_MIN = LogAnnotationTextMessage_Level_LEVEL_UNKNOWN;
constexpr LogAnnotationTextMessage_Level LogAnnotationTextMessage_Level_Level_MAX = LogAnnotationTextMessage_Level_LEVEL_ERROR;
constexpr int LogAnnotationTextMessage_Level_Level_ARRAYSIZE = LogAnnotationTextMessage_Level_Level_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogAnnotationTextMessage_Level_descriptor();
template<typename T>
inline const std::string& LogAnnotationTextMessage_Level_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LogAnnotationTextMessage_Level>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LogAnnotationTextMessage_Level_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LogAnnotationTextMessage_Level_descriptor(), enum_t_value);
}
inline bool LogAnnotationTextMessage_Level_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LogAnnotationTextMessage_Level* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LogAnnotationTextMessage_Level>(
    LogAnnotationTextMessage_Level_descriptor(), name, value);
}
// ===================================================================

class AddLogAnnotationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.AddLogAnnotationRequest) */ {
 public:
  inline AddLogAnnotationRequest() : AddLogAnnotationRequest(nullptr) {}
  ~AddLogAnnotationRequest() override;
  explicit PROTOBUF_CONSTEXPR AddLogAnnotationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddLogAnnotationRequest(const AddLogAnnotationRequest& from);
  AddLogAnnotationRequest(AddLogAnnotationRequest&& from) noexcept
    : AddLogAnnotationRequest() {
    *this = ::std::move(from);
  }

  inline AddLogAnnotationRequest& operator=(const AddLogAnnotationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddLogAnnotationRequest& operator=(AddLogAnnotationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddLogAnnotationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddLogAnnotationRequest* internal_default_instance() {
    return reinterpret_cast<const AddLogAnnotationRequest*>(
               &_AddLogAnnotationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddLogAnnotationRequest& a, AddLogAnnotationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddLogAnnotationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddLogAnnotationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddLogAnnotationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddLogAnnotationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddLogAnnotationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddLogAnnotationRequest& from) {
    AddLogAnnotationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddLogAnnotationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.AddLogAnnotationRequest";
  }
  protected:
  explicit AddLogAnnotationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kAnnotationsFieldNumber = 2,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // .bosdyn.api.LogAnnotations annotations = 2;
  bool has_annotations() const;
  private:
  bool _internal_has_annotations() const;
  public:
  void clear_annotations();
  const ::bosdyn::api::LogAnnotations& annotations() const;
  PROTOBUF_NODISCARD ::bosdyn::api::LogAnnotations* release_annotations();
  ::bosdyn::api::LogAnnotations* mutable_annotations();
  void set_allocated_annotations(::bosdyn::api::LogAnnotations* annotations);
  private:
  const ::bosdyn::api::LogAnnotations& _internal_annotations() const;
  ::bosdyn::api::LogAnnotations* _internal_mutable_annotations();
  public:
  void unsafe_arena_set_allocated_annotations(
      ::bosdyn::api::LogAnnotations* annotations);
  ::bosdyn::api::LogAnnotations* unsafe_arena_release_annotations();

  // @@protoc_insertion_point(class_scope:bosdyn.api.AddLogAnnotationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::RequestHeader* header_;
    ::bosdyn::api::LogAnnotations* annotations_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2flog_5fannotation_2eproto;
};
// -------------------------------------------------------------------

class LogAnnotations final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.LogAnnotations) */ {
 public:
  inline LogAnnotations() : LogAnnotations(nullptr) {}
  ~LogAnnotations() override;
  explicit PROTOBUF_CONSTEXPR LogAnnotations(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogAnnotations(const LogAnnotations& from);
  LogAnnotations(LogAnnotations&& from) noexcept
    : LogAnnotations() {
    *this = ::std::move(from);
  }

  inline LogAnnotations& operator=(const LogAnnotations& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogAnnotations& operator=(LogAnnotations&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogAnnotations& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogAnnotations* internal_default_instance() {
    return reinterpret_cast<const LogAnnotations*>(
               &_LogAnnotations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LogAnnotations& a, LogAnnotations& b) {
    a.Swap(&b);
  }
  inline void Swap(LogAnnotations* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogAnnotations* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogAnnotations* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogAnnotations>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogAnnotations& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogAnnotations& from) {
    LogAnnotations::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogAnnotations* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.LogAnnotations";
  }
  protected:
  explicit LogAnnotations(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextMessagesFieldNumber = 1,
    kOperatorMessagesFieldNumber = 2,
    kBlobDataFieldNumber = 3,
  };
  // repeated .bosdyn.api.LogAnnotationTextMessage text_messages = 1;
  int text_messages_size() const;
  private:
  int _internal_text_messages_size() const;
  public:
  void clear_text_messages();
  ::bosdyn::api::LogAnnotationTextMessage* mutable_text_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LogAnnotationTextMessage >*
      mutable_text_messages();
  private:
  const ::bosdyn::api::LogAnnotationTextMessage& _internal_text_messages(int index) const;
  ::bosdyn::api::LogAnnotationTextMessage* _internal_add_text_messages();
  public:
  const ::bosdyn::api::LogAnnotationTextMessage& text_messages(int index) const;
  ::bosdyn::api::LogAnnotationTextMessage* add_text_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LogAnnotationTextMessage >&
      text_messages() const;

  // repeated .bosdyn.api.LogAnnotationOperatorMessage operator_messages = 2;
  int operator_messages_size() const;
  private:
  int _internal_operator_messages_size() const;
  public:
  void clear_operator_messages();
  ::bosdyn::api::LogAnnotationOperatorMessage* mutable_operator_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LogAnnotationOperatorMessage >*
      mutable_operator_messages();
  private:
  const ::bosdyn::api::LogAnnotationOperatorMessage& _internal_operator_messages(int index) const;
  ::bosdyn::api::LogAnnotationOperatorMessage* _internal_add_operator_messages();
  public:
  const ::bosdyn::api::LogAnnotationOperatorMessage& operator_messages(int index) const;
  ::bosdyn::api::LogAnnotationOperatorMessage* add_operator_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LogAnnotationOperatorMessage >&
      operator_messages() const;

  // repeated .bosdyn.api.LogAnnotationLogBlob blob_data = 3;
  int blob_data_size() const;
  private:
  int _internal_blob_data_size() const;
  public:
  void clear_blob_data();
  ::bosdyn::api::LogAnnotationLogBlob* mutable_blob_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LogAnnotationLogBlob >*
      mutable_blob_data();
  private:
  const ::bosdyn::api::LogAnnotationLogBlob& _internal_blob_data(int index) const;
  ::bosdyn::api::LogAnnotationLogBlob* _internal_add_blob_data();
  public:
  const ::bosdyn::api::LogAnnotationLogBlob& blob_data(int index) const;
  ::bosdyn::api::LogAnnotationLogBlob* add_blob_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LogAnnotationLogBlob >&
      blob_data() const;

  // @@protoc_insertion_point(class_scope:bosdyn.api.LogAnnotations)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LogAnnotationTextMessage > text_messages_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LogAnnotationOperatorMessage > operator_messages_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LogAnnotationLogBlob > blob_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2flog_5fannotation_2eproto;
};
// -------------------------------------------------------------------

class LogAnnotationTextMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.LogAnnotationTextMessage) */ {
 public:
  inline LogAnnotationTextMessage() : LogAnnotationTextMessage(nullptr) {}
  ~LogAnnotationTextMessage() override;
  explicit PROTOBUF_CONSTEXPR LogAnnotationTextMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogAnnotationTextMessage(const LogAnnotationTextMessage& from);
  LogAnnotationTextMessage(LogAnnotationTextMessage&& from) noexcept
    : LogAnnotationTextMessage() {
    *this = ::std::move(from);
  }

  inline LogAnnotationTextMessage& operator=(const LogAnnotationTextMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogAnnotationTextMessage& operator=(LogAnnotationTextMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogAnnotationTextMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogAnnotationTextMessage* internal_default_instance() {
    return reinterpret_cast<const LogAnnotationTextMessage*>(
               &_LogAnnotationTextMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LogAnnotationTextMessage& a, LogAnnotationTextMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(LogAnnotationTextMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogAnnotationTextMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogAnnotationTextMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogAnnotationTextMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogAnnotationTextMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogAnnotationTextMessage& from) {
    LogAnnotationTextMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogAnnotationTextMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.LogAnnotationTextMessage";
  }
  protected:
  explicit LogAnnotationTextMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LogAnnotationTextMessage_Level Level;
  static constexpr Level LEVEL_UNKNOWN =
    LogAnnotationTextMessage_Level_LEVEL_UNKNOWN;
  static constexpr Level LEVEL_DEBUG =
    LogAnnotationTextMessage_Level_LEVEL_DEBUG;
  static constexpr Level LEVEL_INFO =
    LogAnnotationTextMessage_Level_LEVEL_INFO;
  static constexpr Level LEVEL_WARN =
    LogAnnotationTextMessage_Level_LEVEL_WARN;
  static constexpr Level LEVEL_ERROR =
    LogAnnotationTextMessage_Level_LEVEL_ERROR;
  static inline bool Level_IsValid(int value) {
    return LogAnnotationTextMessage_Level_IsValid(value);
  }
  static constexpr Level Level_MIN =
    LogAnnotationTextMessage_Level_Level_MIN;
  static constexpr Level Level_MAX =
    LogAnnotationTextMessage_Level_Level_MAX;
  static constexpr int Level_ARRAYSIZE =
    LogAnnotationTextMessage_Level_Level_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Level_descriptor() {
    return LogAnnotationTextMessage_Level_descriptor();
  }
  template<typename T>
  static inline const std::string& Level_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Level>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Level_Name.");
    return LogAnnotationTextMessage_Level_Name(enum_t_value);
  }
  static inline bool Level_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Level* value) {
    return LogAnnotationTextMessage_Level_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kServiceFieldNumber = 3,
    kTagFieldNumber = 5,
    kFilenameFieldNumber = 6,
    kTimestampFieldNumber = 2,
    kTimestampClientFieldNumber = 8,
    kLevelFieldNumber = 4,
    kLineNumberFieldNumber = 7,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string service = 3;
  void clear_service();
  const std::string& service() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service();
  PROTOBUF_NODISCARD std::string* release_service();
  void set_allocated_service(std::string* service);
  private:
  const std::string& _internal_service() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service(const std::string& value);
  std::string* _internal_mutable_service();
  public:

  // string tag = 5;
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // string filename = 6;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // .google.protobuf.Timestamp timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .google.protobuf.Timestamp timestamp_client = 8;
  bool has_timestamp_client() const;
  private:
  bool _internal_has_timestamp_client() const;
  public:
  void clear_timestamp_client();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp_client() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp_client();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp_client();
  void set_allocated_timestamp_client(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_client);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp_client() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp_client();
  public:
  void unsafe_arena_set_allocated_timestamp_client(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_client);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp_client();

  // .bosdyn.api.LogAnnotationTextMessage.Level level = 4;
  void clear_level();
  ::bosdyn::api::LogAnnotationTextMessage_Level level() const;
  void set_level(::bosdyn::api::LogAnnotationTextMessage_Level value);
  private:
  ::bosdyn::api::LogAnnotationTextMessage_Level _internal_level() const;
  void _internal_set_level(::bosdyn::api::LogAnnotationTextMessage_Level value);
  public:

  // int32 line_number = 7;
  void clear_line_number();
  int32_t line_number() const;
  void set_line_number(int32_t value);
  private:
  int32_t _internal_line_number() const;
  void _internal_set_line_number(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.LogAnnotationTextMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_client_;
    int level_;
    int32_t line_number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2flog_5fannotation_2eproto;
};
// -------------------------------------------------------------------

class LogAnnotationOperatorMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.LogAnnotationOperatorMessage) */ {
 public:
  inline LogAnnotationOperatorMessage() : LogAnnotationOperatorMessage(nullptr) {}
  ~LogAnnotationOperatorMessage() override;
  explicit PROTOBUF_CONSTEXPR LogAnnotationOperatorMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogAnnotationOperatorMessage(const LogAnnotationOperatorMessage& from);
  LogAnnotationOperatorMessage(LogAnnotationOperatorMessage&& from) noexcept
    : LogAnnotationOperatorMessage() {
    *this = ::std::move(from);
  }

  inline LogAnnotationOperatorMessage& operator=(const LogAnnotationOperatorMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogAnnotationOperatorMessage& operator=(LogAnnotationOperatorMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogAnnotationOperatorMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogAnnotationOperatorMessage* internal_default_instance() {
    return reinterpret_cast<const LogAnnotationOperatorMessage*>(
               &_LogAnnotationOperatorMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LogAnnotationOperatorMessage& a, LogAnnotationOperatorMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(LogAnnotationOperatorMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogAnnotationOperatorMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogAnnotationOperatorMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogAnnotationOperatorMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogAnnotationOperatorMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogAnnotationOperatorMessage& from) {
    LogAnnotationOperatorMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogAnnotationOperatorMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.LogAnnotationOperatorMessage";
  }
  protected:
  explicit LogAnnotationOperatorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kTimestampClientFieldNumber = 3,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .google.protobuf.Timestamp timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .google.protobuf.Timestamp timestamp_client = 3;
  bool has_timestamp_client() const;
  private:
  bool _internal_has_timestamp_client() const;
  public:
  void clear_timestamp_client();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp_client() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp_client();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp_client();
  void set_allocated_timestamp_client(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_client);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp_client() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp_client();
  public:
  void unsafe_arena_set_allocated_timestamp_client(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_client);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp_client();

  // @@protoc_insertion_point(class_scope:bosdyn.api.LogAnnotationOperatorMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_client_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2flog_5fannotation_2eproto;
};
// -------------------------------------------------------------------

class LogAnnotationLogBlob final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.LogAnnotationLogBlob) */ {
 public:
  inline LogAnnotationLogBlob() : LogAnnotationLogBlob(nullptr) {}
  ~LogAnnotationLogBlob() override;
  explicit PROTOBUF_CONSTEXPR LogAnnotationLogBlob(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogAnnotationLogBlob(const LogAnnotationLogBlob& from);
  LogAnnotationLogBlob(LogAnnotationLogBlob&& from) noexcept
    : LogAnnotationLogBlob() {
    *this = ::std::move(from);
  }

  inline LogAnnotationLogBlob& operator=(const LogAnnotationLogBlob& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogAnnotationLogBlob& operator=(LogAnnotationLogBlob&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogAnnotationLogBlob& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogAnnotationLogBlob* internal_default_instance() {
    return reinterpret_cast<const LogAnnotationLogBlob*>(
               &_LogAnnotationLogBlob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LogAnnotationLogBlob& a, LogAnnotationLogBlob& b) {
    a.Swap(&b);
  }
  inline void Swap(LogAnnotationLogBlob* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogAnnotationLogBlob* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogAnnotationLogBlob* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogAnnotationLogBlob>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogAnnotationLogBlob& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogAnnotationLogBlob& from) {
    LogAnnotationLogBlob::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogAnnotationLogBlob* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.LogAnnotationLogBlob";
  }
  protected:
  explicit LogAnnotationLogBlob(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 2,
    kTypeIdFieldNumber = 3,
    kDataFieldNumber = 4,
    kTimestampFieldNumber = 1,
    kTimestampClientFieldNumber = 5,
  };
  // string channel = 2;
  void clear_channel();
  const std::string& channel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channel();
  PROTOBUF_NODISCARD std::string* release_channel();
  void set_allocated_channel(std::string* channel);
  private:
  const std::string& _internal_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel(const std::string& value);
  std::string* _internal_mutable_channel();
  public:

  // string type_id = 3;
  void clear_type_id();
  const std::string& type_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_id();
  PROTOBUF_NODISCARD std::string* release_type_id();
  void set_allocated_type_id(std::string* type_id);
  private:
  const std::string& _internal_type_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_id(const std::string& value);
  std::string* _internal_mutable_type_id();
  public:

  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .google.protobuf.Timestamp timestamp_client = 5;
  bool has_timestamp_client() const;
  private:
  bool _internal_has_timestamp_client() const;
  public:
  void clear_timestamp_client();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp_client() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp_client();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp_client();
  void set_allocated_timestamp_client(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_client);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp_client() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp_client();
  public:
  void unsafe_arena_set_allocated_timestamp_client(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_client);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp_client();

  // @@protoc_insertion_point(class_scope:bosdyn.api.LogAnnotationLogBlob)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_client_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2flog_5fannotation_2eproto;
};
// -------------------------------------------------------------------

class AddLogAnnotationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.AddLogAnnotationResponse) */ {
 public:
  inline AddLogAnnotationResponse() : AddLogAnnotationResponse(nullptr) {}
  ~AddLogAnnotationResponse() override;
  explicit PROTOBUF_CONSTEXPR AddLogAnnotationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddLogAnnotationResponse(const AddLogAnnotationResponse& from);
  AddLogAnnotationResponse(AddLogAnnotationResponse&& from) noexcept
    : AddLogAnnotationResponse() {
    *this = ::std::move(from);
  }

  inline AddLogAnnotationResponse& operator=(const AddLogAnnotationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddLogAnnotationResponse& operator=(AddLogAnnotationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddLogAnnotationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddLogAnnotationResponse* internal_default_instance() {
    return reinterpret_cast<const AddLogAnnotationResponse*>(
               &_AddLogAnnotationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AddLogAnnotationResponse& a, AddLogAnnotationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddLogAnnotationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddLogAnnotationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddLogAnnotationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddLogAnnotationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddLogAnnotationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddLogAnnotationResponse& from) {
    AddLogAnnotationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddLogAnnotationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.AddLogAnnotationResponse";
  }
  protected:
  explicit AddLogAnnotationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.AddLogAnnotationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::ResponseHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2flog_5fannotation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddLogAnnotationRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool AddLogAnnotationRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool AddLogAnnotationRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& AddLogAnnotationRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RequestHeader&>(
      ::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& AddLogAnnotationRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.AddLogAnnotationRequest.header)
  return _internal_header();
}
inline void AddLogAnnotationRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.AddLogAnnotationRequest.header)
}
inline ::bosdyn::api::RequestHeader* AddLogAnnotationRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RequestHeader* AddLogAnnotationRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.AddLogAnnotationRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* AddLogAnnotationRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::RequestHeader* AddLogAnnotationRequest::mutable_header() {
  ::bosdyn::api::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.AddLogAnnotationRequest.header)
  return _msg;
}
inline void AddLogAnnotationRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.AddLogAnnotationRequest.header)
}

// .bosdyn.api.LogAnnotations annotations = 2;
inline bool AddLogAnnotationRequest::_internal_has_annotations() const {
  return this != internal_default_instance() && _impl_.annotations_ != nullptr;
}
inline bool AddLogAnnotationRequest::has_annotations() const {
  return _internal_has_annotations();
}
inline void AddLogAnnotationRequest::clear_annotations() {
  if (GetArenaForAllocation() == nullptr && _impl_.annotations_ != nullptr) {
    delete _impl_.annotations_;
  }
  _impl_.annotations_ = nullptr;
}
inline const ::bosdyn::api::LogAnnotations& AddLogAnnotationRequest::_internal_annotations() const {
  const ::bosdyn::api::LogAnnotations* p = _impl_.annotations_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::LogAnnotations&>(
      ::bosdyn::api::_LogAnnotations_default_instance_);
}
inline const ::bosdyn::api::LogAnnotations& AddLogAnnotationRequest::annotations() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.AddLogAnnotationRequest.annotations)
  return _internal_annotations();
}
inline void AddLogAnnotationRequest::unsafe_arena_set_allocated_annotations(
    ::bosdyn::api::LogAnnotations* annotations) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.annotations_);
  }
  _impl_.annotations_ = annotations;
  if (annotations) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.AddLogAnnotationRequest.annotations)
}
inline ::bosdyn::api::LogAnnotations* AddLogAnnotationRequest::release_annotations() {
  
  ::bosdyn::api::LogAnnotations* temp = _impl_.annotations_;
  _impl_.annotations_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::LogAnnotations* AddLogAnnotationRequest::unsafe_arena_release_annotations() {
  // @@protoc_insertion_point(field_release:bosdyn.api.AddLogAnnotationRequest.annotations)
  
  ::bosdyn::api::LogAnnotations* temp = _impl_.annotations_;
  _impl_.annotations_ = nullptr;
  return temp;
}
inline ::bosdyn::api::LogAnnotations* AddLogAnnotationRequest::_internal_mutable_annotations() {
  
  if (_impl_.annotations_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::LogAnnotations>(GetArenaForAllocation());
    _impl_.annotations_ = p;
  }
  return _impl_.annotations_;
}
inline ::bosdyn::api::LogAnnotations* AddLogAnnotationRequest::mutable_annotations() {
  ::bosdyn::api::LogAnnotations* _msg = _internal_mutable_annotations();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.AddLogAnnotationRequest.annotations)
  return _msg;
}
inline void AddLogAnnotationRequest::set_allocated_annotations(::bosdyn::api::LogAnnotations* annotations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.annotations_;
  }
  if (annotations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(annotations);
    if (message_arena != submessage_arena) {
      annotations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotations, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.annotations_ = annotations;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.AddLogAnnotationRequest.annotations)
}

// -------------------------------------------------------------------

// LogAnnotations

// repeated .bosdyn.api.LogAnnotationTextMessage text_messages = 1;
inline int LogAnnotations::_internal_text_messages_size() const {
  return _impl_.text_messages_.size();
}
inline int LogAnnotations::text_messages_size() const {
  return _internal_text_messages_size();
}
inline void LogAnnotations::clear_text_messages() {
  _impl_.text_messages_.Clear();
}
inline ::bosdyn::api::LogAnnotationTextMessage* LogAnnotations::mutable_text_messages(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.LogAnnotations.text_messages)
  return _impl_.text_messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LogAnnotationTextMessage >*
LogAnnotations::mutable_text_messages() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.LogAnnotations.text_messages)
  return &_impl_.text_messages_;
}
inline const ::bosdyn::api::LogAnnotationTextMessage& LogAnnotations::_internal_text_messages(int index) const {
  return _impl_.text_messages_.Get(index);
}
inline const ::bosdyn::api::LogAnnotationTextMessage& LogAnnotations::text_messages(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LogAnnotations.text_messages)
  return _internal_text_messages(index);
}
inline ::bosdyn::api::LogAnnotationTextMessage* LogAnnotations::_internal_add_text_messages() {
  return _impl_.text_messages_.Add();
}
inline ::bosdyn::api::LogAnnotationTextMessage* LogAnnotations::add_text_messages() {
  ::bosdyn::api::LogAnnotationTextMessage* _add = _internal_add_text_messages();
  // @@protoc_insertion_point(field_add:bosdyn.api.LogAnnotations.text_messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LogAnnotationTextMessage >&
LogAnnotations::text_messages() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.LogAnnotations.text_messages)
  return _impl_.text_messages_;
}

// repeated .bosdyn.api.LogAnnotationOperatorMessage operator_messages = 2;
inline int LogAnnotations::_internal_operator_messages_size() const {
  return _impl_.operator_messages_.size();
}
inline int LogAnnotations::operator_messages_size() const {
  return _internal_operator_messages_size();
}
inline void LogAnnotations::clear_operator_messages() {
  _impl_.operator_messages_.Clear();
}
inline ::bosdyn::api::LogAnnotationOperatorMessage* LogAnnotations::mutable_operator_messages(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.LogAnnotations.operator_messages)
  return _impl_.operator_messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LogAnnotationOperatorMessage >*
LogAnnotations::mutable_operator_messages() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.LogAnnotations.operator_messages)
  return &_impl_.operator_messages_;
}
inline const ::bosdyn::api::LogAnnotationOperatorMessage& LogAnnotations::_internal_operator_messages(int index) const {
  return _impl_.operator_messages_.Get(index);
}
inline const ::bosdyn::api::LogAnnotationOperatorMessage& LogAnnotations::operator_messages(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LogAnnotations.operator_messages)
  return _internal_operator_messages(index);
}
inline ::bosdyn::api::LogAnnotationOperatorMessage* LogAnnotations::_internal_add_operator_messages() {
  return _impl_.operator_messages_.Add();
}
inline ::bosdyn::api::LogAnnotationOperatorMessage* LogAnnotations::add_operator_messages() {
  ::bosdyn::api::LogAnnotationOperatorMessage* _add = _internal_add_operator_messages();
  // @@protoc_insertion_point(field_add:bosdyn.api.LogAnnotations.operator_messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LogAnnotationOperatorMessage >&
LogAnnotations::operator_messages() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.LogAnnotations.operator_messages)
  return _impl_.operator_messages_;
}

// repeated .bosdyn.api.LogAnnotationLogBlob blob_data = 3;
inline int LogAnnotations::_internal_blob_data_size() const {
  return _impl_.blob_data_.size();
}
inline int LogAnnotations::blob_data_size() const {
  return _internal_blob_data_size();
}
inline void LogAnnotations::clear_blob_data() {
  _impl_.blob_data_.Clear();
}
inline ::bosdyn::api::LogAnnotationLogBlob* LogAnnotations::mutable_blob_data(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.LogAnnotations.blob_data)
  return _impl_.blob_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LogAnnotationLogBlob >*
LogAnnotations::mutable_blob_data() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.LogAnnotations.blob_data)
  return &_impl_.blob_data_;
}
inline const ::bosdyn::api::LogAnnotationLogBlob& LogAnnotations::_internal_blob_data(int index) const {
  return _impl_.blob_data_.Get(index);
}
inline const ::bosdyn::api::LogAnnotationLogBlob& LogAnnotations::blob_data(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LogAnnotations.blob_data)
  return _internal_blob_data(index);
}
inline ::bosdyn::api::LogAnnotationLogBlob* LogAnnotations::_internal_add_blob_data() {
  return _impl_.blob_data_.Add();
}
inline ::bosdyn::api::LogAnnotationLogBlob* LogAnnotations::add_blob_data() {
  ::bosdyn::api::LogAnnotationLogBlob* _add = _internal_add_blob_data();
  // @@protoc_insertion_point(field_add:bosdyn.api.LogAnnotations.blob_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LogAnnotationLogBlob >&
LogAnnotations::blob_data() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.LogAnnotations.blob_data)
  return _impl_.blob_data_;
}

// -------------------------------------------------------------------

// LogAnnotationTextMessage

// string message = 1;
inline void LogAnnotationTextMessage::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& LogAnnotationTextMessage::message() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LogAnnotationTextMessage.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogAnnotationTextMessage::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.LogAnnotationTextMessage.message)
}
inline std::string* LogAnnotationTextMessage::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.LogAnnotationTextMessage.message)
  return _s;
}
inline const std::string& LogAnnotationTextMessage::_internal_message() const {
  return _impl_.message_.Get();
}
inline void LogAnnotationTextMessage::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* LogAnnotationTextMessage::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* LogAnnotationTextMessage::release_message() {
  // @@protoc_insertion_point(field_release:bosdyn.api.LogAnnotationTextMessage.message)
  return _impl_.message_.Release();
}
inline void LogAnnotationTextMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.LogAnnotationTextMessage.message)
}

// .google.protobuf.Timestamp timestamp = 2;
inline bool LogAnnotationTextMessage::_internal_has_timestamp() const {
  return this != internal_default_instance() && _impl_.timestamp_ != nullptr;
}
inline bool LogAnnotationTextMessage::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LogAnnotationTextMessage::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LogAnnotationTextMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LogAnnotationTextMessage.timestamp)
  return _internal_timestamp();
}
inline void LogAnnotationTextMessage::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.LogAnnotationTextMessage.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogAnnotationTextMessage::release_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogAnnotationTextMessage::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:bosdyn.api.LogAnnotationTextMessage.timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogAnnotationTextMessage::_internal_mutable_timestamp() {
  
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogAnnotationTextMessage::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.LogAnnotationTextMessage.timestamp)
  return _msg;
}
inline void LogAnnotationTextMessage::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.LogAnnotationTextMessage.timestamp)
}

// string service = 3;
inline void LogAnnotationTextMessage::clear_service() {
  _impl_.service_.ClearToEmpty();
}
inline const std::string& LogAnnotationTextMessage::service() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LogAnnotationTextMessage.service)
  return _internal_service();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogAnnotationTextMessage::set_service(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.LogAnnotationTextMessage.service)
}
inline std::string* LogAnnotationTextMessage::mutable_service() {
  std::string* _s = _internal_mutable_service();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.LogAnnotationTextMessage.service)
  return _s;
}
inline const std::string& LogAnnotationTextMessage::_internal_service() const {
  return _impl_.service_.Get();
}
inline void LogAnnotationTextMessage::_internal_set_service(const std::string& value) {
  
  _impl_.service_.Set(value, GetArenaForAllocation());
}
inline std::string* LogAnnotationTextMessage::_internal_mutable_service() {
  
  return _impl_.service_.Mutable(GetArenaForAllocation());
}
inline std::string* LogAnnotationTextMessage::release_service() {
  // @@protoc_insertion_point(field_release:bosdyn.api.LogAnnotationTextMessage.service)
  return _impl_.service_.Release();
}
inline void LogAnnotationTextMessage::set_allocated_service(std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  _impl_.service_.SetAllocated(service, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_.IsDefault()) {
    _impl_.service_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.LogAnnotationTextMessage.service)
}

// .bosdyn.api.LogAnnotationTextMessage.Level level = 4;
inline void LogAnnotationTextMessage::clear_level() {
  _impl_.level_ = 0;
}
inline ::bosdyn::api::LogAnnotationTextMessage_Level LogAnnotationTextMessage::_internal_level() const {
  return static_cast< ::bosdyn::api::LogAnnotationTextMessage_Level >(_impl_.level_);
}
inline ::bosdyn::api::LogAnnotationTextMessage_Level LogAnnotationTextMessage::level() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LogAnnotationTextMessage.level)
  return _internal_level();
}
inline void LogAnnotationTextMessage::_internal_set_level(::bosdyn::api::LogAnnotationTextMessage_Level value) {
  
  _impl_.level_ = value;
}
inline void LogAnnotationTextMessage::set_level(::bosdyn::api::LogAnnotationTextMessage_Level value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.LogAnnotationTextMessage.level)
}

// string tag = 5;
inline void LogAnnotationTextMessage::clear_tag() {
  _impl_.tag_.ClearToEmpty();
}
inline const std::string& LogAnnotationTextMessage::tag() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LogAnnotationTextMessage.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogAnnotationTextMessage::set_tag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.LogAnnotationTextMessage.tag)
}
inline std::string* LogAnnotationTextMessage::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.LogAnnotationTextMessage.tag)
  return _s;
}
inline const std::string& LogAnnotationTextMessage::_internal_tag() const {
  return _impl_.tag_.Get();
}
inline void LogAnnotationTextMessage::_internal_set_tag(const std::string& value) {
  
  _impl_.tag_.Set(value, GetArenaForAllocation());
}
inline std::string* LogAnnotationTextMessage::_internal_mutable_tag() {
  
  return _impl_.tag_.Mutable(GetArenaForAllocation());
}
inline std::string* LogAnnotationTextMessage::release_tag() {
  // @@protoc_insertion_point(field_release:bosdyn.api.LogAnnotationTextMessage.tag)
  return _impl_.tag_.Release();
}
inline void LogAnnotationTextMessage::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  _impl_.tag_.SetAllocated(tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.LogAnnotationTextMessage.tag)
}

// string filename = 6;
inline void LogAnnotationTextMessage::clear_filename() {
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& LogAnnotationTextMessage::filename() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LogAnnotationTextMessage.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogAnnotationTextMessage::set_filename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.LogAnnotationTextMessage.filename)
}
inline std::string* LogAnnotationTextMessage::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.LogAnnotationTextMessage.filename)
  return _s;
}
inline const std::string& LogAnnotationTextMessage::_internal_filename() const {
  return _impl_.filename_.Get();
}
inline void LogAnnotationTextMessage::_internal_set_filename(const std::string& value) {
  
  _impl_.filename_.Set(value, GetArenaForAllocation());
}
inline std::string* LogAnnotationTextMessage::_internal_mutable_filename() {
  
  return _impl_.filename_.Mutable(GetArenaForAllocation());
}
inline std::string* LogAnnotationTextMessage::release_filename() {
  // @@protoc_insertion_point(field_release:bosdyn.api.LogAnnotationTextMessage.filename)
  return _impl_.filename_.Release();
}
inline void LogAnnotationTextMessage::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  _impl_.filename_.SetAllocated(filename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.LogAnnotationTextMessage.filename)
}

// int32 line_number = 7;
inline void LogAnnotationTextMessage::clear_line_number() {
  _impl_.line_number_ = 0;
}
inline int32_t LogAnnotationTextMessage::_internal_line_number() const {
  return _impl_.line_number_;
}
inline int32_t LogAnnotationTextMessage::line_number() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LogAnnotationTextMessage.line_number)
  return _internal_line_number();
}
inline void LogAnnotationTextMessage::_internal_set_line_number(int32_t value) {
  
  _impl_.line_number_ = value;
}
inline void LogAnnotationTextMessage::set_line_number(int32_t value) {
  _internal_set_line_number(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.LogAnnotationTextMessage.line_number)
}

// .google.protobuf.Timestamp timestamp_client = 8;
inline bool LogAnnotationTextMessage::_internal_has_timestamp_client() const {
  return this != internal_default_instance() && _impl_.timestamp_client_ != nullptr;
}
inline bool LogAnnotationTextMessage::has_timestamp_client() const {
  return _internal_has_timestamp_client();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LogAnnotationTextMessage::_internal_timestamp_client() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_client_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LogAnnotationTextMessage::timestamp_client() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LogAnnotationTextMessage.timestamp_client)
  return _internal_timestamp_client();
}
inline void LogAnnotationTextMessage::unsafe_arena_set_allocated_timestamp_client(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_client) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_client_);
  }
  _impl_.timestamp_client_ = timestamp_client;
  if (timestamp_client) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.LogAnnotationTextMessage.timestamp_client)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogAnnotationTextMessage::release_timestamp_client() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_client_;
  _impl_.timestamp_client_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogAnnotationTextMessage::unsafe_arena_release_timestamp_client() {
  // @@protoc_insertion_point(field_release:bosdyn.api.LogAnnotationTextMessage.timestamp_client)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_client_;
  _impl_.timestamp_client_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogAnnotationTextMessage::_internal_mutable_timestamp_client() {
  
  if (_impl_.timestamp_client_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_client_ = p;
  }
  return _impl_.timestamp_client_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogAnnotationTextMessage::mutable_timestamp_client() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp_client();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.LogAnnotationTextMessage.timestamp_client)
  return _msg;
}
inline void LogAnnotationTextMessage::set_allocated_timestamp_client(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_client_);
  }
  if (timestamp_client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_client));
    if (message_arena != submessage_arena) {
      timestamp_client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp_client, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.timestamp_client_ = timestamp_client;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.LogAnnotationTextMessage.timestamp_client)
}

// -------------------------------------------------------------------

// LogAnnotationOperatorMessage

// string message = 1;
inline void LogAnnotationOperatorMessage::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& LogAnnotationOperatorMessage::message() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LogAnnotationOperatorMessage.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogAnnotationOperatorMessage::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.LogAnnotationOperatorMessage.message)
}
inline std::string* LogAnnotationOperatorMessage::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.LogAnnotationOperatorMessage.message)
  return _s;
}
inline const std::string& LogAnnotationOperatorMessage::_internal_message() const {
  return _impl_.message_.Get();
}
inline void LogAnnotationOperatorMessage::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* LogAnnotationOperatorMessage::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* LogAnnotationOperatorMessage::release_message() {
  // @@protoc_insertion_point(field_release:bosdyn.api.LogAnnotationOperatorMessage.message)
  return _impl_.message_.Release();
}
inline void LogAnnotationOperatorMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.LogAnnotationOperatorMessage.message)
}

// .google.protobuf.Timestamp timestamp = 2;
inline bool LogAnnotationOperatorMessage::_internal_has_timestamp() const {
  return this != internal_default_instance() && _impl_.timestamp_ != nullptr;
}
inline bool LogAnnotationOperatorMessage::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LogAnnotationOperatorMessage::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LogAnnotationOperatorMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LogAnnotationOperatorMessage.timestamp)
  return _internal_timestamp();
}
inline void LogAnnotationOperatorMessage::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.LogAnnotationOperatorMessage.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogAnnotationOperatorMessage::release_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogAnnotationOperatorMessage::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:bosdyn.api.LogAnnotationOperatorMessage.timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogAnnotationOperatorMessage::_internal_mutable_timestamp() {
  
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogAnnotationOperatorMessage::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.LogAnnotationOperatorMessage.timestamp)
  return _msg;
}
inline void LogAnnotationOperatorMessage::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.LogAnnotationOperatorMessage.timestamp)
}

// .google.protobuf.Timestamp timestamp_client = 3;
inline bool LogAnnotationOperatorMessage::_internal_has_timestamp_client() const {
  return this != internal_default_instance() && _impl_.timestamp_client_ != nullptr;
}
inline bool LogAnnotationOperatorMessage::has_timestamp_client() const {
  return _internal_has_timestamp_client();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LogAnnotationOperatorMessage::_internal_timestamp_client() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_client_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LogAnnotationOperatorMessage::timestamp_client() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LogAnnotationOperatorMessage.timestamp_client)
  return _internal_timestamp_client();
}
inline void LogAnnotationOperatorMessage::unsafe_arena_set_allocated_timestamp_client(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_client) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_client_);
  }
  _impl_.timestamp_client_ = timestamp_client;
  if (timestamp_client) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.LogAnnotationOperatorMessage.timestamp_client)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogAnnotationOperatorMessage::release_timestamp_client() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_client_;
  _impl_.timestamp_client_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogAnnotationOperatorMessage::unsafe_arena_release_timestamp_client() {
  // @@protoc_insertion_point(field_release:bosdyn.api.LogAnnotationOperatorMessage.timestamp_client)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_client_;
  _impl_.timestamp_client_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogAnnotationOperatorMessage::_internal_mutable_timestamp_client() {
  
  if (_impl_.timestamp_client_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_client_ = p;
  }
  return _impl_.timestamp_client_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogAnnotationOperatorMessage::mutable_timestamp_client() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp_client();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.LogAnnotationOperatorMessage.timestamp_client)
  return _msg;
}
inline void LogAnnotationOperatorMessage::set_allocated_timestamp_client(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_client_);
  }
  if (timestamp_client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_client));
    if (message_arena != submessage_arena) {
      timestamp_client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp_client, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.timestamp_client_ = timestamp_client;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.LogAnnotationOperatorMessage.timestamp_client)
}

// -------------------------------------------------------------------

// LogAnnotationLogBlob

// .google.protobuf.Timestamp timestamp = 1;
inline bool LogAnnotationLogBlob::_internal_has_timestamp() const {
  return this != internal_default_instance() && _impl_.timestamp_ != nullptr;
}
inline bool LogAnnotationLogBlob::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LogAnnotationLogBlob::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LogAnnotationLogBlob::timestamp() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LogAnnotationLogBlob.timestamp)
  return _internal_timestamp();
}
inline void LogAnnotationLogBlob::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.LogAnnotationLogBlob.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogAnnotationLogBlob::release_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogAnnotationLogBlob::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:bosdyn.api.LogAnnotationLogBlob.timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogAnnotationLogBlob::_internal_mutable_timestamp() {
  
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogAnnotationLogBlob::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.LogAnnotationLogBlob.timestamp)
  return _msg;
}
inline void LogAnnotationLogBlob::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.LogAnnotationLogBlob.timestamp)
}

// string channel = 2;
inline void LogAnnotationLogBlob::clear_channel() {
  _impl_.channel_.ClearToEmpty();
}
inline const std::string& LogAnnotationLogBlob::channel() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LogAnnotationLogBlob.channel)
  return _internal_channel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogAnnotationLogBlob::set_channel(ArgT0&& arg0, ArgT... args) {
 
 _impl_.channel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.LogAnnotationLogBlob.channel)
}
inline std::string* LogAnnotationLogBlob::mutable_channel() {
  std::string* _s = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.LogAnnotationLogBlob.channel)
  return _s;
}
inline const std::string& LogAnnotationLogBlob::_internal_channel() const {
  return _impl_.channel_.Get();
}
inline void LogAnnotationLogBlob::_internal_set_channel(const std::string& value) {
  
  _impl_.channel_.Set(value, GetArenaForAllocation());
}
inline std::string* LogAnnotationLogBlob::_internal_mutable_channel() {
  
  return _impl_.channel_.Mutable(GetArenaForAllocation());
}
inline std::string* LogAnnotationLogBlob::release_channel() {
  // @@protoc_insertion_point(field_release:bosdyn.api.LogAnnotationLogBlob.channel)
  return _impl_.channel_.Release();
}
inline void LogAnnotationLogBlob::set_allocated_channel(std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  _impl_.channel_.SetAllocated(channel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channel_.IsDefault()) {
    _impl_.channel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.LogAnnotationLogBlob.channel)
}

// string type_id = 3;
inline void LogAnnotationLogBlob::clear_type_id() {
  _impl_.type_id_.ClearToEmpty();
}
inline const std::string& LogAnnotationLogBlob::type_id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LogAnnotationLogBlob.type_id)
  return _internal_type_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogAnnotationLogBlob::set_type_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.LogAnnotationLogBlob.type_id)
}
inline std::string* LogAnnotationLogBlob::mutable_type_id() {
  std::string* _s = _internal_mutable_type_id();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.LogAnnotationLogBlob.type_id)
  return _s;
}
inline const std::string& LogAnnotationLogBlob::_internal_type_id() const {
  return _impl_.type_id_.Get();
}
inline void LogAnnotationLogBlob::_internal_set_type_id(const std::string& value) {
  
  _impl_.type_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LogAnnotationLogBlob::_internal_mutable_type_id() {
  
  return _impl_.type_id_.Mutable(GetArenaForAllocation());
}
inline std::string* LogAnnotationLogBlob::release_type_id() {
  // @@protoc_insertion_point(field_release:bosdyn.api.LogAnnotationLogBlob.type_id)
  return _impl_.type_id_.Release();
}
inline void LogAnnotationLogBlob::set_allocated_type_id(std::string* type_id) {
  if (type_id != nullptr) {
    
  } else {
    
  }
  _impl_.type_id_.SetAllocated(type_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_id_.IsDefault()) {
    _impl_.type_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.LogAnnotationLogBlob.type_id)
}

// bytes data = 4;
inline void LogAnnotationLogBlob::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& LogAnnotationLogBlob::data() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LogAnnotationLogBlob.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogAnnotationLogBlob::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.LogAnnotationLogBlob.data)
}
inline std::string* LogAnnotationLogBlob::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.LogAnnotationLogBlob.data)
  return _s;
}
inline const std::string& LogAnnotationLogBlob::_internal_data() const {
  return _impl_.data_.Get();
}
inline void LogAnnotationLogBlob::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* LogAnnotationLogBlob::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* LogAnnotationLogBlob::release_data() {
  // @@protoc_insertion_point(field_release:bosdyn.api.LogAnnotationLogBlob.data)
  return _impl_.data_.Release();
}
inline void LogAnnotationLogBlob::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.LogAnnotationLogBlob.data)
}

// .google.protobuf.Timestamp timestamp_client = 5;
inline bool LogAnnotationLogBlob::_internal_has_timestamp_client() const {
  return this != internal_default_instance() && _impl_.timestamp_client_ != nullptr;
}
inline bool LogAnnotationLogBlob::has_timestamp_client() const {
  return _internal_has_timestamp_client();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LogAnnotationLogBlob::_internal_timestamp_client() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_client_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LogAnnotationLogBlob::timestamp_client() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.LogAnnotationLogBlob.timestamp_client)
  return _internal_timestamp_client();
}
inline void LogAnnotationLogBlob::unsafe_arena_set_allocated_timestamp_client(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_client) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_client_);
  }
  _impl_.timestamp_client_ = timestamp_client;
  if (timestamp_client) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.LogAnnotationLogBlob.timestamp_client)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogAnnotationLogBlob::release_timestamp_client() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_client_;
  _impl_.timestamp_client_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogAnnotationLogBlob::unsafe_arena_release_timestamp_client() {
  // @@protoc_insertion_point(field_release:bosdyn.api.LogAnnotationLogBlob.timestamp_client)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_client_;
  _impl_.timestamp_client_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogAnnotationLogBlob::_internal_mutable_timestamp_client() {
  
  if (_impl_.timestamp_client_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_client_ = p;
  }
  return _impl_.timestamp_client_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogAnnotationLogBlob::mutable_timestamp_client() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp_client();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.LogAnnotationLogBlob.timestamp_client)
  return _msg;
}
inline void LogAnnotationLogBlob::set_allocated_timestamp_client(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_client_);
  }
  if (timestamp_client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_client));
    if (message_arena != submessage_arena) {
      timestamp_client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp_client, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.timestamp_client_ = timestamp_client;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.LogAnnotationLogBlob.timestamp_client)
}

// -------------------------------------------------------------------

// AddLogAnnotationResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool AddLogAnnotationResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool AddLogAnnotationResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& AddLogAnnotationResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ResponseHeader&>(
      ::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& AddLogAnnotationResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.AddLogAnnotationResponse.header)
  return _internal_header();
}
inline void AddLogAnnotationResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.AddLogAnnotationResponse.header)
}
inline ::bosdyn::api::ResponseHeader* AddLogAnnotationResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ResponseHeader* AddLogAnnotationResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.AddLogAnnotationResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* AddLogAnnotationResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::ResponseHeader* AddLogAnnotationResponse::mutable_header() {
  ::bosdyn::api::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.AddLogAnnotationResponse.header)
  return _msg;
}
inline void AddLogAnnotationResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.AddLogAnnotationResponse.header)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::LogAnnotationTextMessage_Level> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::LogAnnotationTextMessage_Level>() {
  return ::bosdyn::api::LogAnnotationTextMessage_Level_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2flog_5fannotation_2eproto

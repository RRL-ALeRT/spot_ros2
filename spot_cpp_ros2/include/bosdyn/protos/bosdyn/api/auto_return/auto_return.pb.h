// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/auto_return/auto_return.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fauto_5freturn_2fauto_5freturn_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fauto_5freturn_2fauto_5freturn_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/duration.pb.h>
#include "bosdyn/api/header.pb.h"
#include "bosdyn/api/lease.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fauto_5freturn_2fauto_5freturn_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fauto_5freturn_2fauto_5freturn_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fauto_5freturn_2fauto_5freturn_2eproto;
namespace bosdyn {
namespace api {
namespace auto_return {
class ConfigureRequest;
struct ConfigureRequestDefaultTypeInternal;
extern ConfigureRequestDefaultTypeInternal _ConfigureRequest_default_instance_;
class ConfigureResponse;
struct ConfigureResponseDefaultTypeInternal;
extern ConfigureResponseDefaultTypeInternal _ConfigureResponse_default_instance_;
class GetConfigurationRequest;
struct GetConfigurationRequestDefaultTypeInternal;
extern GetConfigurationRequestDefaultTypeInternal _GetConfigurationRequest_default_instance_;
class GetConfigurationResponse;
struct GetConfigurationResponseDefaultTypeInternal;
extern GetConfigurationResponseDefaultTypeInternal _GetConfigurationResponse_default_instance_;
class Params;
struct ParamsDefaultTypeInternal;
extern ParamsDefaultTypeInternal _Params_default_instance_;
class StartRequest;
struct StartRequestDefaultTypeInternal;
extern StartRequestDefaultTypeInternal _StartRequest_default_instance_;
class StartResponse;
struct StartResponseDefaultTypeInternal;
extern StartResponseDefaultTypeInternal _StartResponse_default_instance_;
}  // namespace auto_return
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::auto_return::ConfigureRequest* Arena::CreateMaybeMessage<::bosdyn::api::auto_return::ConfigureRequest>(Arena*);
template<> ::bosdyn::api::auto_return::ConfigureResponse* Arena::CreateMaybeMessage<::bosdyn::api::auto_return::ConfigureResponse>(Arena*);
template<> ::bosdyn::api::auto_return::GetConfigurationRequest* Arena::CreateMaybeMessage<::bosdyn::api::auto_return::GetConfigurationRequest>(Arena*);
template<> ::bosdyn::api::auto_return::GetConfigurationResponse* Arena::CreateMaybeMessage<::bosdyn::api::auto_return::GetConfigurationResponse>(Arena*);
template<> ::bosdyn::api::auto_return::Params* Arena::CreateMaybeMessage<::bosdyn::api::auto_return::Params>(Arena*);
template<> ::bosdyn::api::auto_return::StartRequest* Arena::CreateMaybeMessage<::bosdyn::api::auto_return::StartRequest>(Arena*);
template<> ::bosdyn::api::auto_return::StartResponse* Arena::CreateMaybeMessage<::bosdyn::api::auto_return::StartResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {
namespace auto_return {

enum ConfigureResponse_Status : int {
  ConfigureResponse_Status_STATUS_UNKNOWN = 0,
  ConfigureResponse_Status_STATUS_OK = 1,
  ConfigureResponse_Status_STATUS_INVALID_PARAMS = 2,
  ConfigureResponse_Status_ConfigureResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ConfigureResponse_Status_ConfigureResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ConfigureResponse_Status_IsValid(int value);
constexpr ConfigureResponse_Status ConfigureResponse_Status_Status_MIN = ConfigureResponse_Status_STATUS_UNKNOWN;
constexpr ConfigureResponse_Status ConfigureResponse_Status_Status_MAX = ConfigureResponse_Status_STATUS_INVALID_PARAMS;
constexpr int ConfigureResponse_Status_Status_ARRAYSIZE = ConfigureResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConfigureResponse_Status_descriptor();
template<typename T>
inline const std::string& ConfigureResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConfigureResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConfigureResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConfigureResponse_Status_descriptor(), enum_t_value);
}
inline bool ConfigureResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConfigureResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConfigureResponse_Status>(
    ConfigureResponse_Status_descriptor(), name, value);
}
// ===================================================================

class Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.auto_return.Params) */ {
 public:
  inline Params() : Params(nullptr) {}
  ~Params() override;
  explicit PROTOBUF_CONSTEXPR Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Params(const Params& from);
  Params(Params&& from) noexcept
    : Params() {
    *this = ::std::move(from);
  }

  inline Params& operator=(const Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params& operator=(Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params* internal_default_instance() {
    return reinterpret_cast<const Params*>(
               &_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Params& a, Params& b) {
    a.Swap(&b);
  }
  inline void Swap(Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Params& from) {
    Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.auto_return.Params";
  }
  protected:
  explicit Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMobilityParamsFieldNumber = 1,
    kMaxDurationFieldNumber = 3,
    kMaxDisplacementFieldNumber = 2,
  };
  // .google.protobuf.Any mobility_params = 1;
  bool has_mobility_params() const;
  private:
  bool _internal_has_mobility_params() const;
  public:
  void clear_mobility_params();
  const ::PROTOBUF_NAMESPACE_ID::Any& mobility_params() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_mobility_params();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_mobility_params();
  void set_allocated_mobility_params(::PROTOBUF_NAMESPACE_ID::Any* mobility_params);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_mobility_params() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_mobility_params();
  public:
  void unsafe_arena_set_allocated_mobility_params(
      ::PROTOBUF_NAMESPACE_ID::Any* mobility_params);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_mobility_params();

  // .google.protobuf.Duration max_duration = 3;
  bool has_max_duration() const;
  private:
  bool _internal_has_max_duration() const;
  public:
  void clear_max_duration();
  const ::PROTOBUF_NAMESPACE_ID::Duration& max_duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_max_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_max_duration();
  void set_allocated_max_duration(::PROTOBUF_NAMESPACE_ID::Duration* max_duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_max_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_max_duration();
  public:
  void unsafe_arena_set_allocated_max_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* max_duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_max_duration();

  // float max_displacement = 2;
  void clear_max_displacement();
  float max_displacement() const;
  void set_max_displacement(float value);
  private:
  float _internal_max_displacement() const;
  void _internal_set_max_displacement(float value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.auto_return.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Any* mobility_params_;
    ::PROTOBUF_NAMESPACE_ID::Duration* max_duration_;
    float max_displacement_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fauto_5freturn_2fauto_5freturn_2eproto;
};
// -------------------------------------------------------------------

class ConfigureRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.auto_return.ConfigureRequest) */ {
 public:
  inline ConfigureRequest() : ConfigureRequest(nullptr) {}
  ~ConfigureRequest() override;
  explicit PROTOBUF_CONSTEXPR ConfigureRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigureRequest(const ConfigureRequest& from);
  ConfigureRequest(ConfigureRequest&& from) noexcept
    : ConfigureRequest() {
    *this = ::std::move(from);
  }

  inline ConfigureRequest& operator=(const ConfigureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigureRequest& operator=(ConfigureRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigureRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigureRequest* internal_default_instance() {
    return reinterpret_cast<const ConfigureRequest*>(
               &_ConfigureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConfigureRequest& a, ConfigureRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigureRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigureRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigureRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigureRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigureRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConfigureRequest& from) {
    ConfigureRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigureRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.auto_return.ConfigureRequest";
  }
  protected:
  explicit ConfigureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeasesFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kParamsFieldNumber = 3,
    kClearBufferFieldNumber = 4,
  };
  // repeated .bosdyn.api.Lease leases = 2;
  int leases_size() const;
  private:
  int _internal_leases_size() const;
  public:
  void clear_leases();
  ::bosdyn::api::Lease* mutable_leases(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Lease >*
      mutable_leases();
  private:
  const ::bosdyn::api::Lease& _internal_leases(int index) const;
  ::bosdyn::api::Lease* _internal_add_leases();
  public:
  const ::bosdyn::api::Lease& leases(int index) const;
  ::bosdyn::api::Lease* add_leases();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Lease >&
      leases() const;

  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // .bosdyn.api.auto_return.Params params = 3;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::bosdyn::api::auto_return::Params& params() const;
  PROTOBUF_NODISCARD ::bosdyn::api::auto_return::Params* release_params();
  ::bosdyn::api::auto_return::Params* mutable_params();
  void set_allocated_params(::bosdyn::api::auto_return::Params* params);
  private:
  const ::bosdyn::api::auto_return::Params& _internal_params() const;
  ::bosdyn::api::auto_return::Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::bosdyn::api::auto_return::Params* params);
  ::bosdyn::api::auto_return::Params* unsafe_arena_release_params();

  // bool clear_buffer = 4;
  void clear_clear_buffer();
  bool clear_buffer() const;
  void set_clear_buffer(bool value);
  private:
  bool _internal_clear_buffer() const;
  void _internal_set_clear_buffer(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.auto_return.ConfigureRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Lease > leases_;
    ::bosdyn::api::RequestHeader* header_;
    ::bosdyn::api::auto_return::Params* params_;
    bool clear_buffer_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fauto_5freturn_2fauto_5freturn_2eproto;
};
// -------------------------------------------------------------------

class ConfigureResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.auto_return.ConfigureResponse) */ {
 public:
  inline ConfigureResponse() : ConfigureResponse(nullptr) {}
  ~ConfigureResponse() override;
  explicit PROTOBUF_CONSTEXPR ConfigureResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigureResponse(const ConfigureResponse& from);
  ConfigureResponse(ConfigureResponse&& from) noexcept
    : ConfigureResponse() {
    *this = ::std::move(from);
  }

  inline ConfigureResponse& operator=(const ConfigureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigureResponse& operator=(ConfigureResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigureResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigureResponse* internal_default_instance() {
    return reinterpret_cast<const ConfigureResponse*>(
               &_ConfigureResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ConfigureResponse& a, ConfigureResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigureResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigureResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigureResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigureResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigureResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConfigureResponse& from) {
    ConfigureResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigureResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.auto_return.ConfigureResponse";
  }
  protected:
  explicit ConfigureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConfigureResponse_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    ConfigureResponse_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_OK =
    ConfigureResponse_Status_STATUS_OK;
  static constexpr Status STATUS_INVALID_PARAMS =
    ConfigureResponse_Status_STATUS_INVALID_PARAMS;
  static inline bool Status_IsValid(int value) {
    return ConfigureResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ConfigureResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ConfigureResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ConfigureResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ConfigureResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ConfigureResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return ConfigureResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kInvalidParamsFieldNumber = 3,
    kStatusFieldNumber = 2,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.auto_return.Params invalid_params = 3;
  bool has_invalid_params() const;
  private:
  bool _internal_has_invalid_params() const;
  public:
  void clear_invalid_params();
  const ::bosdyn::api::auto_return::Params& invalid_params() const;
  PROTOBUF_NODISCARD ::bosdyn::api::auto_return::Params* release_invalid_params();
  ::bosdyn::api::auto_return::Params* mutable_invalid_params();
  void set_allocated_invalid_params(::bosdyn::api::auto_return::Params* invalid_params);
  private:
  const ::bosdyn::api::auto_return::Params& _internal_invalid_params() const;
  ::bosdyn::api::auto_return::Params* _internal_mutable_invalid_params();
  public:
  void unsafe_arena_set_allocated_invalid_params(
      ::bosdyn::api::auto_return::Params* invalid_params);
  ::bosdyn::api::auto_return::Params* unsafe_arena_release_invalid_params();

  // .bosdyn.api.auto_return.ConfigureResponse.Status status = 2;
  void clear_status();
  ::bosdyn::api::auto_return::ConfigureResponse_Status status() const;
  void set_status(::bosdyn::api::auto_return::ConfigureResponse_Status value);
  private:
  ::bosdyn::api::auto_return::ConfigureResponse_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::auto_return::ConfigureResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.auto_return.ConfigureResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::ResponseHeader* header_;
    ::bosdyn::api::auto_return::Params* invalid_params_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fauto_5freturn_2fauto_5freturn_2eproto;
};
// -------------------------------------------------------------------

class GetConfigurationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.auto_return.GetConfigurationRequest) */ {
 public:
  inline GetConfigurationRequest() : GetConfigurationRequest(nullptr) {}
  ~GetConfigurationRequest() override;
  explicit PROTOBUF_CONSTEXPR GetConfigurationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConfigurationRequest(const GetConfigurationRequest& from);
  GetConfigurationRequest(GetConfigurationRequest&& from) noexcept
    : GetConfigurationRequest() {
    *this = ::std::move(from);
  }

  inline GetConfigurationRequest& operator=(const GetConfigurationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConfigurationRequest& operator=(GetConfigurationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConfigurationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConfigurationRequest* internal_default_instance() {
    return reinterpret_cast<const GetConfigurationRequest*>(
               &_GetConfigurationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetConfigurationRequest& a, GetConfigurationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConfigurationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConfigurationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetConfigurationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetConfigurationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetConfigurationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetConfigurationRequest& from) {
    GetConfigurationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConfigurationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.auto_return.GetConfigurationRequest";
  }
  protected:
  explicit GetConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.auto_return.GetConfigurationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::RequestHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fauto_5freturn_2fauto_5freturn_2eproto;
};
// -------------------------------------------------------------------

class GetConfigurationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.auto_return.GetConfigurationResponse) */ {
 public:
  inline GetConfigurationResponse() : GetConfigurationResponse(nullptr) {}
  ~GetConfigurationResponse() override;
  explicit PROTOBUF_CONSTEXPR GetConfigurationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConfigurationResponse(const GetConfigurationResponse& from);
  GetConfigurationResponse(GetConfigurationResponse&& from) noexcept
    : GetConfigurationResponse() {
    *this = ::std::move(from);
  }

  inline GetConfigurationResponse& operator=(const GetConfigurationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConfigurationResponse& operator=(GetConfigurationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConfigurationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConfigurationResponse* internal_default_instance() {
    return reinterpret_cast<const GetConfigurationResponse*>(
               &_GetConfigurationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetConfigurationResponse& a, GetConfigurationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConfigurationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConfigurationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetConfigurationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetConfigurationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetConfigurationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetConfigurationResponse& from) {
    GetConfigurationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConfigurationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.auto_return.GetConfigurationResponse";
  }
  protected:
  explicit GetConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kRequestFieldNumber = 3,
    kEnabledFieldNumber = 2,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.auto_return.ConfigureRequest request = 3;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::bosdyn::api::auto_return::ConfigureRequest& request() const;
  PROTOBUF_NODISCARD ::bosdyn::api::auto_return::ConfigureRequest* release_request();
  ::bosdyn::api::auto_return::ConfigureRequest* mutable_request();
  void set_allocated_request(::bosdyn::api::auto_return::ConfigureRequest* request);
  private:
  const ::bosdyn::api::auto_return::ConfigureRequest& _internal_request() const;
  ::bosdyn::api::auto_return::ConfigureRequest* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::bosdyn::api::auto_return::ConfigureRequest* request);
  ::bosdyn::api::auto_return::ConfigureRequest* unsafe_arena_release_request();

  // bool enabled = 2;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.auto_return.GetConfigurationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::ResponseHeader* header_;
    ::bosdyn::api::auto_return::ConfigureRequest* request_;
    bool enabled_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fauto_5freturn_2fauto_5freturn_2eproto;
};
// -------------------------------------------------------------------

class StartRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.auto_return.StartRequest) */ {
 public:
  inline StartRequest() : StartRequest(nullptr) {}
  ~StartRequest() override;
  explicit PROTOBUF_CONSTEXPR StartRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartRequest(const StartRequest& from);
  StartRequest(StartRequest&& from) noexcept
    : StartRequest() {
    *this = ::std::move(from);
  }

  inline StartRequest& operator=(const StartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartRequest& operator=(StartRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartRequest* internal_default_instance() {
    return reinterpret_cast<const StartRequest*>(
               &_StartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StartRequest& a, StartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StartRequest& from) {
    StartRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.auto_return.StartRequest";
  }
  protected:
  explicit StartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.auto_return.StartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::RequestHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fauto_5freturn_2fauto_5freturn_2eproto;
};
// -------------------------------------------------------------------

class StartResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.auto_return.StartResponse) */ {
 public:
  inline StartResponse() : StartResponse(nullptr) {}
  ~StartResponse() override;
  explicit PROTOBUF_CONSTEXPR StartResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartResponse(const StartResponse& from);
  StartResponse(StartResponse&& from) noexcept
    : StartResponse() {
    *this = ::std::move(from);
  }

  inline StartResponse& operator=(const StartResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartResponse& operator=(StartResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartResponse* internal_default_instance() {
    return reinterpret_cast<const StartResponse*>(
               &_StartResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StartResponse& a, StartResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StartResponse& from) {
    StartResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.auto_return.StartResponse";
  }
  protected:
  explicit StartResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.auto_return.StartResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::ResponseHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fauto_5freturn_2fauto_5freturn_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Params

// .google.protobuf.Any mobility_params = 1;
inline bool Params::_internal_has_mobility_params() const {
  return this != internal_default_instance() && _impl_.mobility_params_ != nullptr;
}
inline bool Params::has_mobility_params() const {
  return _internal_has_mobility_params();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Params::_internal_mobility_params() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.mobility_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Params::mobility_params() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.auto_return.Params.mobility_params)
  return _internal_mobility_params();
}
inline void Params::unsafe_arena_set_allocated_mobility_params(
    ::PROTOBUF_NAMESPACE_ID::Any* mobility_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mobility_params_);
  }
  _impl_.mobility_params_ = mobility_params;
  if (mobility_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.auto_return.Params.mobility_params)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Params::release_mobility_params() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.mobility_params_;
  _impl_.mobility_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Params::unsafe_arena_release_mobility_params() {
  // @@protoc_insertion_point(field_release:bosdyn.api.auto_return.Params.mobility_params)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.mobility_params_;
  _impl_.mobility_params_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Params::_internal_mutable_mobility_params() {
  
  if (_impl_.mobility_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.mobility_params_ = p;
  }
  return _impl_.mobility_params_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Params::mutable_mobility_params() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_mobility_params();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.auto_return.Params.mobility_params)
  return _msg;
}
inline void Params::set_allocated_mobility_params(::PROTOBUF_NAMESPACE_ID::Any* mobility_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mobility_params_);
  }
  if (mobility_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mobility_params));
    if (message_arena != submessage_arena) {
      mobility_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mobility_params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mobility_params_ = mobility_params;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.auto_return.Params.mobility_params)
}

// float max_displacement = 2;
inline void Params::clear_max_displacement() {
  _impl_.max_displacement_ = 0;
}
inline float Params::_internal_max_displacement() const {
  return _impl_.max_displacement_;
}
inline float Params::max_displacement() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.auto_return.Params.max_displacement)
  return _internal_max_displacement();
}
inline void Params::_internal_set_max_displacement(float value) {
  
  _impl_.max_displacement_ = value;
}
inline void Params::set_max_displacement(float value) {
  _internal_set_max_displacement(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.auto_return.Params.max_displacement)
}

// .google.protobuf.Duration max_duration = 3;
inline bool Params::_internal_has_max_duration() const {
  return this != internal_default_instance() && _impl_.max_duration_ != nullptr;
}
inline bool Params::has_max_duration() const {
  return _internal_has_max_duration();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Params::_internal_max_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.max_duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Params::max_duration() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.auto_return.Params.max_duration)
  return _internal_max_duration();
}
inline void Params::unsafe_arena_set_allocated_max_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* max_duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_duration_);
  }
  _impl_.max_duration_ = max_duration;
  if (max_duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.auto_return.Params.max_duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Params::release_max_duration() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.max_duration_;
  _impl_.max_duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Params::unsafe_arena_release_max_duration() {
  // @@protoc_insertion_point(field_release:bosdyn.api.auto_return.Params.max_duration)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.max_duration_;
  _impl_.max_duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Params::_internal_mutable_max_duration() {
  
  if (_impl_.max_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.max_duration_ = p;
  }
  return _impl_.max_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Params::mutable_max_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_max_duration();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.auto_return.Params.max_duration)
  return _msg;
}
inline void Params::set_allocated_max_duration(::PROTOBUF_NAMESPACE_ID::Duration* max_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_duration_);
  }
  if (max_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_duration));
    if (message_arena != submessage_arena) {
      max_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_duration, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_duration_ = max_duration;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.auto_return.Params.max_duration)
}

// -------------------------------------------------------------------

// ConfigureRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool ConfigureRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool ConfigureRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& ConfigureRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RequestHeader&>(
      ::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& ConfigureRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.auto_return.ConfigureRequest.header)
  return _internal_header();
}
inline void ConfigureRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.auto_return.ConfigureRequest.header)
}
inline ::bosdyn::api::RequestHeader* ConfigureRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RequestHeader* ConfigureRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.auto_return.ConfigureRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* ConfigureRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::RequestHeader* ConfigureRequest::mutable_header() {
  ::bosdyn::api::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.auto_return.ConfigureRequest.header)
  return _msg;
}
inline void ConfigureRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.auto_return.ConfigureRequest.header)
}

// repeated .bosdyn.api.Lease leases = 2;
inline int ConfigureRequest::_internal_leases_size() const {
  return _impl_.leases_.size();
}
inline int ConfigureRequest::leases_size() const {
  return _internal_leases_size();
}
inline ::bosdyn::api::Lease* ConfigureRequest::mutable_leases(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.auto_return.ConfigureRequest.leases)
  return _impl_.leases_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Lease >*
ConfigureRequest::mutable_leases() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.auto_return.ConfigureRequest.leases)
  return &_impl_.leases_;
}
inline const ::bosdyn::api::Lease& ConfigureRequest::_internal_leases(int index) const {
  return _impl_.leases_.Get(index);
}
inline const ::bosdyn::api::Lease& ConfigureRequest::leases(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.auto_return.ConfigureRequest.leases)
  return _internal_leases(index);
}
inline ::bosdyn::api::Lease* ConfigureRequest::_internal_add_leases() {
  return _impl_.leases_.Add();
}
inline ::bosdyn::api::Lease* ConfigureRequest::add_leases() {
  ::bosdyn::api::Lease* _add = _internal_add_leases();
  // @@protoc_insertion_point(field_add:bosdyn.api.auto_return.ConfigureRequest.leases)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Lease >&
ConfigureRequest::leases() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.auto_return.ConfigureRequest.leases)
  return _impl_.leases_;
}

// .bosdyn.api.auto_return.Params params = 3;
inline bool ConfigureRequest::_internal_has_params() const {
  return this != internal_default_instance() && _impl_.params_ != nullptr;
}
inline bool ConfigureRequest::has_params() const {
  return _internal_has_params();
}
inline void ConfigureRequest::clear_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.params_ != nullptr) {
    delete _impl_.params_;
  }
  _impl_.params_ = nullptr;
}
inline const ::bosdyn::api::auto_return::Params& ConfigureRequest::_internal_params() const {
  const ::bosdyn::api::auto_return::Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::auto_return::Params&>(
      ::bosdyn::api::auto_return::_Params_default_instance_);
}
inline const ::bosdyn::api::auto_return::Params& ConfigureRequest::params() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.auto_return.ConfigureRequest.params)
  return _internal_params();
}
inline void ConfigureRequest::unsafe_arena_set_allocated_params(
    ::bosdyn::api::auto_return::Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.auto_return.ConfigureRequest.params)
}
inline ::bosdyn::api::auto_return::Params* ConfigureRequest::release_params() {
  
  ::bosdyn::api::auto_return::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::auto_return::Params* ConfigureRequest::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:bosdyn.api.auto_return.ConfigureRequest.params)
  
  ::bosdyn::api::auto_return::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::bosdyn::api::auto_return::Params* ConfigureRequest::_internal_mutable_params() {
  
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::auto_return::Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::bosdyn::api::auto_return::Params* ConfigureRequest::mutable_params() {
  ::bosdyn::api::auto_return::Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.auto_return.ConfigureRequest.params)
  return _msg;
}
inline void ConfigureRequest::set_allocated_params(::bosdyn::api::auto_return::Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.auto_return.ConfigureRequest.params)
}

// bool clear_buffer = 4;
inline void ConfigureRequest::clear_clear_buffer() {
  _impl_.clear_buffer_ = false;
}
inline bool ConfigureRequest::_internal_clear_buffer() const {
  return _impl_.clear_buffer_;
}
inline bool ConfigureRequest::clear_buffer() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.auto_return.ConfigureRequest.clear_buffer)
  return _internal_clear_buffer();
}
inline void ConfigureRequest::_internal_set_clear_buffer(bool value) {
  
  _impl_.clear_buffer_ = value;
}
inline void ConfigureRequest::set_clear_buffer(bool value) {
  _internal_set_clear_buffer(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.auto_return.ConfigureRequest.clear_buffer)
}

// -------------------------------------------------------------------

// ConfigureResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool ConfigureResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool ConfigureResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& ConfigureResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ResponseHeader&>(
      ::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& ConfigureResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.auto_return.ConfigureResponse.header)
  return _internal_header();
}
inline void ConfigureResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.auto_return.ConfigureResponse.header)
}
inline ::bosdyn::api::ResponseHeader* ConfigureResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ResponseHeader* ConfigureResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.auto_return.ConfigureResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* ConfigureResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::ResponseHeader* ConfigureResponse::mutable_header() {
  ::bosdyn::api::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.auto_return.ConfigureResponse.header)
  return _msg;
}
inline void ConfigureResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.auto_return.ConfigureResponse.header)
}

// .bosdyn.api.auto_return.ConfigureResponse.Status status = 2;
inline void ConfigureResponse::clear_status() {
  _impl_.status_ = 0;
}
inline ::bosdyn::api::auto_return::ConfigureResponse_Status ConfigureResponse::_internal_status() const {
  return static_cast< ::bosdyn::api::auto_return::ConfigureResponse_Status >(_impl_.status_);
}
inline ::bosdyn::api::auto_return::ConfigureResponse_Status ConfigureResponse::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.auto_return.ConfigureResponse.status)
  return _internal_status();
}
inline void ConfigureResponse::_internal_set_status(::bosdyn::api::auto_return::ConfigureResponse_Status value) {
  
  _impl_.status_ = value;
}
inline void ConfigureResponse::set_status(::bosdyn::api::auto_return::ConfigureResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.auto_return.ConfigureResponse.status)
}

// .bosdyn.api.auto_return.Params invalid_params = 3;
inline bool ConfigureResponse::_internal_has_invalid_params() const {
  return this != internal_default_instance() && _impl_.invalid_params_ != nullptr;
}
inline bool ConfigureResponse::has_invalid_params() const {
  return _internal_has_invalid_params();
}
inline void ConfigureResponse::clear_invalid_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.invalid_params_ != nullptr) {
    delete _impl_.invalid_params_;
  }
  _impl_.invalid_params_ = nullptr;
}
inline const ::bosdyn::api::auto_return::Params& ConfigureResponse::_internal_invalid_params() const {
  const ::bosdyn::api::auto_return::Params* p = _impl_.invalid_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::auto_return::Params&>(
      ::bosdyn::api::auto_return::_Params_default_instance_);
}
inline const ::bosdyn::api::auto_return::Params& ConfigureResponse::invalid_params() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.auto_return.ConfigureResponse.invalid_params)
  return _internal_invalid_params();
}
inline void ConfigureResponse::unsafe_arena_set_allocated_invalid_params(
    ::bosdyn::api::auto_return::Params* invalid_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.invalid_params_);
  }
  _impl_.invalid_params_ = invalid_params;
  if (invalid_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.auto_return.ConfigureResponse.invalid_params)
}
inline ::bosdyn::api::auto_return::Params* ConfigureResponse::release_invalid_params() {
  
  ::bosdyn::api::auto_return::Params* temp = _impl_.invalid_params_;
  _impl_.invalid_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::auto_return::Params* ConfigureResponse::unsafe_arena_release_invalid_params() {
  // @@protoc_insertion_point(field_release:bosdyn.api.auto_return.ConfigureResponse.invalid_params)
  
  ::bosdyn::api::auto_return::Params* temp = _impl_.invalid_params_;
  _impl_.invalid_params_ = nullptr;
  return temp;
}
inline ::bosdyn::api::auto_return::Params* ConfigureResponse::_internal_mutable_invalid_params() {
  
  if (_impl_.invalid_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::auto_return::Params>(GetArenaForAllocation());
    _impl_.invalid_params_ = p;
  }
  return _impl_.invalid_params_;
}
inline ::bosdyn::api::auto_return::Params* ConfigureResponse::mutable_invalid_params() {
  ::bosdyn::api::auto_return::Params* _msg = _internal_mutable_invalid_params();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.auto_return.ConfigureResponse.invalid_params)
  return _msg;
}
inline void ConfigureResponse::set_allocated_invalid_params(::bosdyn::api::auto_return::Params* invalid_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.invalid_params_;
  }
  if (invalid_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(invalid_params);
    if (message_arena != submessage_arena) {
      invalid_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invalid_params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.invalid_params_ = invalid_params;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.auto_return.ConfigureResponse.invalid_params)
}

// -------------------------------------------------------------------

// GetConfigurationRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool GetConfigurationRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool GetConfigurationRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& GetConfigurationRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RequestHeader&>(
      ::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& GetConfigurationRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.auto_return.GetConfigurationRequest.header)
  return _internal_header();
}
inline void GetConfigurationRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.auto_return.GetConfigurationRequest.header)
}
inline ::bosdyn::api::RequestHeader* GetConfigurationRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetConfigurationRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.auto_return.GetConfigurationRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetConfigurationRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::RequestHeader* GetConfigurationRequest::mutable_header() {
  ::bosdyn::api::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.auto_return.GetConfigurationRequest.header)
  return _msg;
}
inline void GetConfigurationRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.auto_return.GetConfigurationRequest.header)
}

// -------------------------------------------------------------------

// GetConfigurationResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool GetConfigurationResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool GetConfigurationResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& GetConfigurationResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ResponseHeader&>(
      ::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& GetConfigurationResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.auto_return.GetConfigurationResponse.header)
  return _internal_header();
}
inline void GetConfigurationResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.auto_return.GetConfigurationResponse.header)
}
inline ::bosdyn::api::ResponseHeader* GetConfigurationResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetConfigurationResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.auto_return.GetConfigurationResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetConfigurationResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::ResponseHeader* GetConfigurationResponse::mutable_header() {
  ::bosdyn::api::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.auto_return.GetConfigurationResponse.header)
  return _msg;
}
inline void GetConfigurationResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.auto_return.GetConfigurationResponse.header)
}

// bool enabled = 2;
inline void GetConfigurationResponse::clear_enabled() {
  _impl_.enabled_ = false;
}
inline bool GetConfigurationResponse::_internal_enabled() const {
  return _impl_.enabled_;
}
inline bool GetConfigurationResponse::enabled() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.auto_return.GetConfigurationResponse.enabled)
  return _internal_enabled();
}
inline void GetConfigurationResponse::_internal_set_enabled(bool value) {
  
  _impl_.enabled_ = value;
}
inline void GetConfigurationResponse::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.auto_return.GetConfigurationResponse.enabled)
}

// .bosdyn.api.auto_return.ConfigureRequest request = 3;
inline bool GetConfigurationResponse::_internal_has_request() const {
  return this != internal_default_instance() && _impl_.request_ != nullptr;
}
inline bool GetConfigurationResponse::has_request() const {
  return _internal_has_request();
}
inline void GetConfigurationResponse::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
inline const ::bosdyn::api::auto_return::ConfigureRequest& GetConfigurationResponse::_internal_request() const {
  const ::bosdyn::api::auto_return::ConfigureRequest* p = _impl_.request_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::auto_return::ConfigureRequest&>(
      ::bosdyn::api::auto_return::_ConfigureRequest_default_instance_);
}
inline const ::bosdyn::api::auto_return::ConfigureRequest& GetConfigurationResponse::request() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.auto_return.GetConfigurationResponse.request)
  return _internal_request();
}
inline void GetConfigurationResponse::unsafe_arena_set_allocated_request(
    ::bosdyn::api::auto_return::ConfigureRequest* request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_);
  }
  _impl_.request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.auto_return.GetConfigurationResponse.request)
}
inline ::bosdyn::api::auto_return::ConfigureRequest* GetConfigurationResponse::release_request() {
  
  ::bosdyn::api::auto_return::ConfigureRequest* temp = _impl_.request_;
  _impl_.request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::auto_return::ConfigureRequest* GetConfigurationResponse::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:bosdyn.api.auto_return.GetConfigurationResponse.request)
  
  ::bosdyn::api::auto_return::ConfigureRequest* temp = _impl_.request_;
  _impl_.request_ = nullptr;
  return temp;
}
inline ::bosdyn::api::auto_return::ConfigureRequest* GetConfigurationResponse::_internal_mutable_request() {
  
  if (_impl_.request_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::auto_return::ConfigureRequest>(GetArenaForAllocation());
    _impl_.request_ = p;
  }
  return _impl_.request_;
}
inline ::bosdyn::api::auto_return::ConfigureRequest* GetConfigurationResponse::mutable_request() {
  ::bosdyn::api::auto_return::ConfigureRequest* _msg = _internal_mutable_request();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.auto_return.GetConfigurationResponse.request)
  return _msg;
}
inline void GetConfigurationResponse::set_allocated_request(::bosdyn::api::auto_return::ConfigureRequest* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(request);
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.request_ = request;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.auto_return.GetConfigurationResponse.request)
}

// -------------------------------------------------------------------

// StartRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool StartRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool StartRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& StartRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RequestHeader&>(
      ::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& StartRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.auto_return.StartRequest.header)
  return _internal_header();
}
inline void StartRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.auto_return.StartRequest.header)
}
inline ::bosdyn::api::RequestHeader* StartRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RequestHeader* StartRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.auto_return.StartRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* StartRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::RequestHeader* StartRequest::mutable_header() {
  ::bosdyn::api::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.auto_return.StartRequest.header)
  return _msg;
}
inline void StartRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.auto_return.StartRequest.header)
}

// -------------------------------------------------------------------

// StartResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool StartResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool StartResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& StartResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ResponseHeader&>(
      ::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& StartResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.auto_return.StartResponse.header)
  return _internal_header();
}
inline void StartResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.auto_return.StartResponse.header)
}
inline ::bosdyn::api::ResponseHeader* StartResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ResponseHeader* StartResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.auto_return.StartResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* StartResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::ResponseHeader* StartResponse::mutable_header() {
  ::bosdyn::api::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.auto_return.StartResponse.header)
  return _msg;
}
inline void StartResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.auto_return.StartResponse.header)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace auto_return
}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::auto_return::ConfigureResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::auto_return::ConfigureResponse_Status>() {
  return ::bosdyn::api::auto_return::ConfigureResponse_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fauto_5freturn_2fauto_5freturn_2eproto

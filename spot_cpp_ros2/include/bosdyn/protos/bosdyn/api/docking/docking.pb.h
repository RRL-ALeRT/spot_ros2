// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/docking/docking.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fdocking_2fdocking_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fdocking_2fdocking_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/header.pb.h"
#include "bosdyn/api/lease.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fdocking_2fdocking_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fdocking_2fdocking_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fdocking_2fdocking_2eproto;
namespace bosdyn {
namespace api {
namespace docking {
class ConfigRange;
struct ConfigRangeDefaultTypeInternal;
extern ConfigRangeDefaultTypeInternal _ConfigRange_default_instance_;
class DockState;
struct DockStateDefaultTypeInternal;
extern DockStateDefaultTypeInternal _DockState_default_instance_;
class DockingCommandFeedbackRequest;
struct DockingCommandFeedbackRequestDefaultTypeInternal;
extern DockingCommandFeedbackRequestDefaultTypeInternal _DockingCommandFeedbackRequest_default_instance_;
class DockingCommandFeedbackResponse;
struct DockingCommandFeedbackResponseDefaultTypeInternal;
extern DockingCommandFeedbackResponseDefaultTypeInternal _DockingCommandFeedbackResponse_default_instance_;
class DockingCommandRequest;
struct DockingCommandRequestDefaultTypeInternal;
extern DockingCommandRequestDefaultTypeInternal _DockingCommandRequest_default_instance_;
class DockingCommandResponse;
struct DockingCommandResponseDefaultTypeInternal;
extern DockingCommandResponseDefaultTypeInternal _DockingCommandResponse_default_instance_;
class GetDockingConfigRequest;
struct GetDockingConfigRequestDefaultTypeInternal;
extern GetDockingConfigRequestDefaultTypeInternal _GetDockingConfigRequest_default_instance_;
class GetDockingConfigResponse;
struct GetDockingConfigResponseDefaultTypeInternal;
extern GetDockingConfigResponseDefaultTypeInternal _GetDockingConfigResponse_default_instance_;
class GetDockingStateRequest;
struct GetDockingStateRequestDefaultTypeInternal;
extern GetDockingStateRequestDefaultTypeInternal _GetDockingStateRequest_default_instance_;
class GetDockingStateResponse;
struct GetDockingStateResponseDefaultTypeInternal;
extern GetDockingStateResponseDefaultTypeInternal _GetDockingStateResponse_default_instance_;
class UpdateDockingParams;
struct UpdateDockingParamsDefaultTypeInternal;
extern UpdateDockingParamsDefaultTypeInternal _UpdateDockingParams_default_instance_;
}  // namespace docking
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::docking::ConfigRange* Arena::CreateMaybeMessage<::bosdyn::api::docking::ConfigRange>(Arena*);
template<> ::bosdyn::api::docking::DockState* Arena::CreateMaybeMessage<::bosdyn::api::docking::DockState>(Arena*);
template<> ::bosdyn::api::docking::DockingCommandFeedbackRequest* Arena::CreateMaybeMessage<::bosdyn::api::docking::DockingCommandFeedbackRequest>(Arena*);
template<> ::bosdyn::api::docking::DockingCommandFeedbackResponse* Arena::CreateMaybeMessage<::bosdyn::api::docking::DockingCommandFeedbackResponse>(Arena*);
template<> ::bosdyn::api::docking::DockingCommandRequest* Arena::CreateMaybeMessage<::bosdyn::api::docking::DockingCommandRequest>(Arena*);
template<> ::bosdyn::api::docking::DockingCommandResponse* Arena::CreateMaybeMessage<::bosdyn::api::docking::DockingCommandResponse>(Arena*);
template<> ::bosdyn::api::docking::GetDockingConfigRequest* Arena::CreateMaybeMessage<::bosdyn::api::docking::GetDockingConfigRequest>(Arena*);
template<> ::bosdyn::api::docking::GetDockingConfigResponse* Arena::CreateMaybeMessage<::bosdyn::api::docking::GetDockingConfigResponse>(Arena*);
template<> ::bosdyn::api::docking::GetDockingStateRequest* Arena::CreateMaybeMessage<::bosdyn::api::docking::GetDockingStateRequest>(Arena*);
template<> ::bosdyn::api::docking::GetDockingStateResponse* Arena::CreateMaybeMessage<::bosdyn::api::docking::GetDockingStateResponse>(Arena*);
template<> ::bosdyn::api::docking::UpdateDockingParams* Arena::CreateMaybeMessage<::bosdyn::api::docking::UpdateDockingParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {
namespace docking {

enum DockingCommandResponse_Status : int {
  DockingCommandResponse_Status_STATUS_UNKNOWN = 0,
  DockingCommandResponse_Status_STATUS_OK = 1,
  DockingCommandResponse_Status_STATUS_ERROR_LEASE = 4,
  DockingCommandResponse_Status_STATUS_ERROR_DOCK_NOT_FOUND = 5,
  DockingCommandResponse_Status_STATUS_ERROR_NOT_DOCKED = 6,
  DockingCommandResponse_Status_STATUS_ERROR_GRIPPER_HOLDING_ITEM = 8,
  DockingCommandResponse_Status_STATUS_ERROR_NOT_AVAILABLE = 9,
  DockingCommandResponse_Status_STATUS_ERROR_SYSTEM = 7,
  DockingCommandResponse_Status_DockingCommandResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DockingCommandResponse_Status_DockingCommandResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DockingCommandResponse_Status_IsValid(int value);
constexpr DockingCommandResponse_Status DockingCommandResponse_Status_Status_MIN = DockingCommandResponse_Status_STATUS_UNKNOWN;
constexpr DockingCommandResponse_Status DockingCommandResponse_Status_Status_MAX = DockingCommandResponse_Status_STATUS_ERROR_NOT_AVAILABLE;
constexpr int DockingCommandResponse_Status_Status_ARRAYSIZE = DockingCommandResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DockingCommandResponse_Status_descriptor();
template<typename T>
inline const std::string& DockingCommandResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DockingCommandResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DockingCommandResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DockingCommandResponse_Status_descriptor(), enum_t_value);
}
inline bool DockingCommandResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DockingCommandResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DockingCommandResponse_Status>(
    DockingCommandResponse_Status_descriptor(), name, value);
}
enum DockingCommandFeedbackResponse_Status : int {
  DockingCommandFeedbackResponse_Status_STATUS_UNKNOWN = 0,
  DockingCommandFeedbackResponse_Status_STATUS_IN_PROGRESS = 1,
  DockingCommandFeedbackResponse_Status_STATUS_DOCKED = 2,
  DockingCommandFeedbackResponse_Status_STATUS_AT_PREP_POSE = 11,
  DockingCommandFeedbackResponse_Status_STATUS_MISALIGNED = 10,
  DockingCommandFeedbackResponse_Status_STATUS_OLD_DOCKING_COMMAND = 3,
  DockingCommandFeedbackResponse_Status_STATUS_ERROR_DOCK_LOST = 4,
  DockingCommandFeedbackResponse_Status_STATUS_ERROR_LEASE = 5,
  DockingCommandFeedbackResponse_Status_STATUS_ERROR_COMMAND_TIMED_OUT = 6,
  DockingCommandFeedbackResponse_Status_STATUS_ERROR_NO_TIMESYNC = 7,
  DockingCommandFeedbackResponse_Status_STATUS_ERROR_TOO_DISTANT = 8,
  DockingCommandFeedbackResponse_Status_STATUS_ERROR_NOT_AVAILABLE = 12,
  DockingCommandFeedbackResponse_Status_STATUS_ERROR_UNREFINED_PRIOR = 13,
  DockingCommandFeedbackResponse_Status_STATUS_ERROR_STUCK = 14,
  DockingCommandFeedbackResponse_Status_STATUS_ERROR_SYSTEM = 9,
  DockingCommandFeedbackResponse_Status_DockingCommandFeedbackResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DockingCommandFeedbackResponse_Status_DockingCommandFeedbackResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DockingCommandFeedbackResponse_Status_IsValid(int value);
constexpr DockingCommandFeedbackResponse_Status DockingCommandFeedbackResponse_Status_Status_MIN = DockingCommandFeedbackResponse_Status_STATUS_UNKNOWN;
constexpr DockingCommandFeedbackResponse_Status DockingCommandFeedbackResponse_Status_Status_MAX = DockingCommandFeedbackResponse_Status_STATUS_ERROR_STUCK;
constexpr int DockingCommandFeedbackResponse_Status_Status_ARRAYSIZE = DockingCommandFeedbackResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DockingCommandFeedbackResponse_Status_descriptor();
template<typename T>
inline const std::string& DockingCommandFeedbackResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DockingCommandFeedbackResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DockingCommandFeedbackResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DockingCommandFeedbackResponse_Status_descriptor(), enum_t_value);
}
inline bool DockingCommandFeedbackResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DockingCommandFeedbackResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DockingCommandFeedbackResponse_Status>(
    DockingCommandFeedbackResponse_Status_descriptor(), name, value);
}
enum DockState_DockedStatus : int {
  DockState_DockedStatus_DOCK_STATUS_UNKNOWN = 0,
  DockState_DockedStatus_DOCK_STATUS_DOCKED = 1,
  DockState_DockedStatus_DOCK_STATUS_DOCKING = 2,
  DockState_DockedStatus_DOCK_STATUS_UNDOCKED = 3,
  DockState_DockedStatus_DOCK_STATUS_UNDOCKING = 4,
  DockState_DockedStatus_DockState_DockedStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DockState_DockedStatus_DockState_DockedStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DockState_DockedStatus_IsValid(int value);
constexpr DockState_DockedStatus DockState_DockedStatus_DockedStatus_MIN = DockState_DockedStatus_DOCK_STATUS_UNKNOWN;
constexpr DockState_DockedStatus DockState_DockedStatus_DockedStatus_MAX = DockState_DockedStatus_DOCK_STATUS_UNDOCKING;
constexpr int DockState_DockedStatus_DockedStatus_ARRAYSIZE = DockState_DockedStatus_DockedStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DockState_DockedStatus_descriptor();
template<typename T>
inline const std::string& DockState_DockedStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DockState_DockedStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DockState_DockedStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DockState_DockedStatus_descriptor(), enum_t_value);
}
inline bool DockState_DockedStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DockState_DockedStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DockState_DockedStatus>(
    DockState_DockedStatus_descriptor(), name, value);
}
enum DockState_LinkStatus : int {
  DockState_LinkStatus_LINK_STATUS_UNKNOWN = 0,
  DockState_LinkStatus_LINK_STATUS_DETECTING = 3,
  DockState_LinkStatus_LINK_STATUS_CONNECTED = 1,
  DockState_LinkStatus_LINK_STATUS_ERROR = 2,
  DockState_LinkStatus_DockState_LinkStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DockState_LinkStatus_DockState_LinkStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DockState_LinkStatus_IsValid(int value);
constexpr DockState_LinkStatus DockState_LinkStatus_LinkStatus_MIN = DockState_LinkStatus_LINK_STATUS_UNKNOWN;
constexpr DockState_LinkStatus DockState_LinkStatus_LinkStatus_MAX = DockState_LinkStatus_LINK_STATUS_DETECTING;
constexpr int DockState_LinkStatus_LinkStatus_ARRAYSIZE = DockState_LinkStatus_LinkStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DockState_LinkStatus_descriptor();
template<typename T>
inline const std::string& DockState_LinkStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DockState_LinkStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DockState_LinkStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DockState_LinkStatus_descriptor(), enum_t_value);
}
inline bool DockState_LinkStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DockState_LinkStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DockState_LinkStatus>(
    DockState_LinkStatus_descriptor(), name, value);
}
enum DockType : int {
  DOCK_TYPE_UNKNOWN = 0,
  DOCK_TYPE_CONTACT_PROTOTYPE = 2,
  DOCK_TYPE_SPOT_DOCK = 3,
  DockType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DockType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DockType_IsValid(int value);
constexpr DockType DockType_MIN = DOCK_TYPE_UNKNOWN;
constexpr DockType DockType_MAX = DOCK_TYPE_SPOT_DOCK;
constexpr int DockType_ARRAYSIZE = DockType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DockType_descriptor();
template<typename T>
inline const std::string& DockType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DockType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DockType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DockType_descriptor(), enum_t_value);
}
inline bool DockType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DockType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DockType>(
    DockType_descriptor(), name, value);
}
enum PrepPoseBehavior : int {
  PREP_POSE_UNKNOWN = 0,
  PREP_POSE_USE_POSE = 1,
  PREP_POSE_SKIP_POSE = 2,
  PREP_POSE_ONLY_POSE = 3,
  PREP_POSE_UNDOCK = 4,
  PrepPoseBehavior_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PrepPoseBehavior_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PrepPoseBehavior_IsValid(int value);
constexpr PrepPoseBehavior PrepPoseBehavior_MIN = PREP_POSE_UNKNOWN;
constexpr PrepPoseBehavior PrepPoseBehavior_MAX = PREP_POSE_UNDOCK;
constexpr int PrepPoseBehavior_ARRAYSIZE = PrepPoseBehavior_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrepPoseBehavior_descriptor();
template<typename T>
inline const std::string& PrepPoseBehavior_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PrepPoseBehavior>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PrepPoseBehavior_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PrepPoseBehavior_descriptor(), enum_t_value);
}
inline bool PrepPoseBehavior_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PrepPoseBehavior* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PrepPoseBehavior>(
    PrepPoseBehavior_descriptor(), name, value);
}
// ===================================================================

class DockingCommandRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.docking.DockingCommandRequest) */ {
 public:
  inline DockingCommandRequest() : DockingCommandRequest(nullptr) {}
  ~DockingCommandRequest() override;
  explicit PROTOBUF_CONSTEXPR DockingCommandRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DockingCommandRequest(const DockingCommandRequest& from);
  DockingCommandRequest(DockingCommandRequest&& from) noexcept
    : DockingCommandRequest() {
    *this = ::std::move(from);
  }

  inline DockingCommandRequest& operator=(const DockingCommandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DockingCommandRequest& operator=(DockingCommandRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DockingCommandRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DockingCommandRequest* internal_default_instance() {
    return reinterpret_cast<const DockingCommandRequest*>(
               &_DockingCommandRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DockingCommandRequest& a, DockingCommandRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DockingCommandRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DockingCommandRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DockingCommandRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DockingCommandRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DockingCommandRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DockingCommandRequest& from) {
    DockingCommandRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DockingCommandRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.docking.DockingCommandRequest";
  }
  protected:
  explicit DockingCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClockIdentifierFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kLeaseFieldNumber = 2,
    kEndTimeFieldNumber = 5,
    kDockingStationIdFieldNumber = 3,
    kPrepPoseBehaviorFieldNumber = 9,
  };
  // string clock_identifier = 4;
  void clear_clock_identifier();
  const std::string& clock_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clock_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clock_identifier();
  PROTOBUF_NODISCARD std::string* release_clock_identifier();
  void set_allocated_clock_identifier(std::string* clock_identifier);
  private:
  const std::string& _internal_clock_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clock_identifier(const std::string& value);
  std::string* _internal_mutable_clock_identifier();
  public:

  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // .bosdyn.api.Lease lease = 2;
  bool has_lease() const;
  private:
  bool _internal_has_lease() const;
  public:
  void clear_lease();
  const ::bosdyn::api::Lease& lease() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Lease* release_lease();
  ::bosdyn::api::Lease* mutable_lease();
  void set_allocated_lease(::bosdyn::api::Lease* lease);
  private:
  const ::bosdyn::api::Lease& _internal_lease() const;
  ::bosdyn::api::Lease* _internal_mutable_lease();
  public:
  void unsafe_arena_set_allocated_lease(
      ::bosdyn::api::Lease* lease);
  ::bosdyn::api::Lease* unsafe_arena_release_lease();

  // .google.protobuf.Timestamp end_time = 5;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // uint32 docking_station_id = 3;
  void clear_docking_station_id();
  uint32_t docking_station_id() const;
  void set_docking_station_id(uint32_t value);
  private:
  uint32_t _internal_docking_station_id() const;
  void _internal_set_docking_station_id(uint32_t value);
  public:

  // .bosdyn.api.docking.PrepPoseBehavior prep_pose_behavior = 9;
  void clear_prep_pose_behavior();
  ::bosdyn::api::docking::PrepPoseBehavior prep_pose_behavior() const;
  void set_prep_pose_behavior(::bosdyn::api::docking::PrepPoseBehavior value);
  private:
  ::bosdyn::api::docking::PrepPoseBehavior _internal_prep_pose_behavior() const;
  void _internal_set_prep_pose_behavior(::bosdyn::api::docking::PrepPoseBehavior value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.docking.DockingCommandRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clock_identifier_;
    ::bosdyn::api::RequestHeader* header_;
    ::bosdyn::api::Lease* lease_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
    uint32_t docking_station_id_;
    int prep_pose_behavior_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fdocking_2fdocking_2eproto;
};
// -------------------------------------------------------------------

class DockingCommandResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.docking.DockingCommandResponse) */ {
 public:
  inline DockingCommandResponse() : DockingCommandResponse(nullptr) {}
  ~DockingCommandResponse() override;
  explicit PROTOBUF_CONSTEXPR DockingCommandResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DockingCommandResponse(const DockingCommandResponse& from);
  DockingCommandResponse(DockingCommandResponse&& from) noexcept
    : DockingCommandResponse() {
    *this = ::std::move(from);
  }

  inline DockingCommandResponse& operator=(const DockingCommandResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DockingCommandResponse& operator=(DockingCommandResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DockingCommandResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DockingCommandResponse* internal_default_instance() {
    return reinterpret_cast<const DockingCommandResponse*>(
               &_DockingCommandResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DockingCommandResponse& a, DockingCommandResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DockingCommandResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DockingCommandResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DockingCommandResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DockingCommandResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DockingCommandResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DockingCommandResponse& from) {
    DockingCommandResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DockingCommandResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.docking.DockingCommandResponse";
  }
  protected:
  explicit DockingCommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DockingCommandResponse_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    DockingCommandResponse_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_OK =
    DockingCommandResponse_Status_STATUS_OK;
  static constexpr Status STATUS_ERROR_LEASE =
    DockingCommandResponse_Status_STATUS_ERROR_LEASE;
  static constexpr Status STATUS_ERROR_DOCK_NOT_FOUND =
    DockingCommandResponse_Status_STATUS_ERROR_DOCK_NOT_FOUND;
  static constexpr Status STATUS_ERROR_NOT_DOCKED =
    DockingCommandResponse_Status_STATUS_ERROR_NOT_DOCKED;
  static constexpr Status STATUS_ERROR_GRIPPER_HOLDING_ITEM =
    DockingCommandResponse_Status_STATUS_ERROR_GRIPPER_HOLDING_ITEM;
  static constexpr Status STATUS_ERROR_NOT_AVAILABLE =
    DockingCommandResponse_Status_STATUS_ERROR_NOT_AVAILABLE;
  static constexpr Status STATUS_ERROR_SYSTEM =
    DockingCommandResponse_Status_STATUS_ERROR_SYSTEM;
  static inline bool Status_IsValid(int value) {
    return DockingCommandResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    DockingCommandResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    DockingCommandResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    DockingCommandResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return DockingCommandResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return DockingCommandResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return DockingCommandResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kLeaseUseResultFieldNumber = 2,
    kStatusFieldNumber = 3,
    kDockingCommandIdFieldNumber = 5,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.LeaseUseResult lease_use_result = 2;
  bool has_lease_use_result() const;
  private:
  bool _internal_has_lease_use_result() const;
  public:
  void clear_lease_use_result();
  const ::bosdyn::api::LeaseUseResult& lease_use_result() const;
  PROTOBUF_NODISCARD ::bosdyn::api::LeaseUseResult* release_lease_use_result();
  ::bosdyn::api::LeaseUseResult* mutable_lease_use_result();
  void set_allocated_lease_use_result(::bosdyn::api::LeaseUseResult* lease_use_result);
  private:
  const ::bosdyn::api::LeaseUseResult& _internal_lease_use_result() const;
  ::bosdyn::api::LeaseUseResult* _internal_mutable_lease_use_result();
  public:
  void unsafe_arena_set_allocated_lease_use_result(
      ::bosdyn::api::LeaseUseResult* lease_use_result);
  ::bosdyn::api::LeaseUseResult* unsafe_arena_release_lease_use_result();

  // .bosdyn.api.docking.DockingCommandResponse.Status status = 3;
  void clear_status();
  ::bosdyn::api::docking::DockingCommandResponse_Status status() const;
  void set_status(::bosdyn::api::docking::DockingCommandResponse_Status value);
  private:
  ::bosdyn::api::docking::DockingCommandResponse_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::docking::DockingCommandResponse_Status value);
  public:

  // uint32 docking_command_id = 5;
  void clear_docking_command_id();
  uint32_t docking_command_id() const;
  void set_docking_command_id(uint32_t value);
  private:
  uint32_t _internal_docking_command_id() const;
  void _internal_set_docking_command_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.docking.DockingCommandResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::ResponseHeader* header_;
    ::bosdyn::api::LeaseUseResult* lease_use_result_;
    int status_;
    uint32_t docking_command_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fdocking_2fdocking_2eproto;
};
// -------------------------------------------------------------------

class UpdateDockingParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.docking.UpdateDockingParams) */ {
 public:
  inline UpdateDockingParams() : UpdateDockingParams(nullptr) {}
  ~UpdateDockingParams() override;
  explicit PROTOBUF_CONSTEXPR UpdateDockingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateDockingParams(const UpdateDockingParams& from);
  UpdateDockingParams(UpdateDockingParams&& from) noexcept
    : UpdateDockingParams() {
    *this = ::std::move(from);
  }

  inline UpdateDockingParams& operator=(const UpdateDockingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDockingParams& operator=(UpdateDockingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateDockingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateDockingParams* internal_default_instance() {
    return reinterpret_cast<const UpdateDockingParams*>(
               &_UpdateDockingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UpdateDockingParams& a, UpdateDockingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDockingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDockingParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateDockingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateDockingParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateDockingParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateDockingParams& from) {
    UpdateDockingParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDockingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.docking.UpdateDockingParams";
  }
  protected:
  explicit UpdateDockingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndTimeFieldNumber = 5,
  };
  // .google.protobuf.Timestamp end_time = 5;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // @@protoc_insertion_point(class_scope:bosdyn.api.docking.UpdateDockingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fdocking_2fdocking_2eproto;
};
// -------------------------------------------------------------------

class DockingCommandFeedbackRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.docking.DockingCommandFeedbackRequest) */ {
 public:
  inline DockingCommandFeedbackRequest() : DockingCommandFeedbackRequest(nullptr) {}
  ~DockingCommandFeedbackRequest() override;
  explicit PROTOBUF_CONSTEXPR DockingCommandFeedbackRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DockingCommandFeedbackRequest(const DockingCommandFeedbackRequest& from);
  DockingCommandFeedbackRequest(DockingCommandFeedbackRequest&& from) noexcept
    : DockingCommandFeedbackRequest() {
    *this = ::std::move(from);
  }

  inline DockingCommandFeedbackRequest& operator=(const DockingCommandFeedbackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DockingCommandFeedbackRequest& operator=(DockingCommandFeedbackRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DockingCommandFeedbackRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DockingCommandFeedbackRequest* internal_default_instance() {
    return reinterpret_cast<const DockingCommandFeedbackRequest*>(
               &_DockingCommandFeedbackRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DockingCommandFeedbackRequest& a, DockingCommandFeedbackRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DockingCommandFeedbackRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DockingCommandFeedbackRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DockingCommandFeedbackRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DockingCommandFeedbackRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DockingCommandFeedbackRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DockingCommandFeedbackRequest& from) {
    DockingCommandFeedbackRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DockingCommandFeedbackRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.docking.DockingCommandFeedbackRequest";
  }
  protected:
  explicit DockingCommandFeedbackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kUpdateDockingParamsFieldNumber = 3,
    kDockingCommandIdFieldNumber = 2,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // .bosdyn.api.docking.UpdateDockingParams update_docking_params = 3;
  bool has_update_docking_params() const;
  private:
  bool _internal_has_update_docking_params() const;
  public:
  void clear_update_docking_params();
  const ::bosdyn::api::docking::UpdateDockingParams& update_docking_params() const;
  PROTOBUF_NODISCARD ::bosdyn::api::docking::UpdateDockingParams* release_update_docking_params();
  ::bosdyn::api::docking::UpdateDockingParams* mutable_update_docking_params();
  void set_allocated_update_docking_params(::bosdyn::api::docking::UpdateDockingParams* update_docking_params);
  private:
  const ::bosdyn::api::docking::UpdateDockingParams& _internal_update_docking_params() const;
  ::bosdyn::api::docking::UpdateDockingParams* _internal_mutable_update_docking_params();
  public:
  void unsafe_arena_set_allocated_update_docking_params(
      ::bosdyn::api::docking::UpdateDockingParams* update_docking_params);
  ::bosdyn::api::docking::UpdateDockingParams* unsafe_arena_release_update_docking_params();

  // uint32 docking_command_id = 2;
  void clear_docking_command_id();
  uint32_t docking_command_id() const;
  void set_docking_command_id(uint32_t value);
  private:
  uint32_t _internal_docking_command_id() const;
  void _internal_set_docking_command_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.docking.DockingCommandFeedbackRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::RequestHeader* header_;
    ::bosdyn::api::docking::UpdateDockingParams* update_docking_params_;
    uint32_t docking_command_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fdocking_2fdocking_2eproto;
};
// -------------------------------------------------------------------

class DockingCommandFeedbackResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.docking.DockingCommandFeedbackResponse) */ {
 public:
  inline DockingCommandFeedbackResponse() : DockingCommandFeedbackResponse(nullptr) {}
  ~DockingCommandFeedbackResponse() override;
  explicit PROTOBUF_CONSTEXPR DockingCommandFeedbackResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DockingCommandFeedbackResponse(const DockingCommandFeedbackResponse& from);
  DockingCommandFeedbackResponse(DockingCommandFeedbackResponse&& from) noexcept
    : DockingCommandFeedbackResponse() {
    *this = ::std::move(from);
  }

  inline DockingCommandFeedbackResponse& operator=(const DockingCommandFeedbackResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DockingCommandFeedbackResponse& operator=(DockingCommandFeedbackResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DockingCommandFeedbackResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DockingCommandFeedbackResponse* internal_default_instance() {
    return reinterpret_cast<const DockingCommandFeedbackResponse*>(
               &_DockingCommandFeedbackResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DockingCommandFeedbackResponse& a, DockingCommandFeedbackResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DockingCommandFeedbackResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DockingCommandFeedbackResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DockingCommandFeedbackResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DockingCommandFeedbackResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DockingCommandFeedbackResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DockingCommandFeedbackResponse& from) {
    DockingCommandFeedbackResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DockingCommandFeedbackResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.docking.DockingCommandFeedbackResponse";
  }
  protected:
  explicit DockingCommandFeedbackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DockingCommandFeedbackResponse_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    DockingCommandFeedbackResponse_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_IN_PROGRESS =
    DockingCommandFeedbackResponse_Status_STATUS_IN_PROGRESS;
  static constexpr Status STATUS_DOCKED =
    DockingCommandFeedbackResponse_Status_STATUS_DOCKED;
  static constexpr Status STATUS_AT_PREP_POSE =
    DockingCommandFeedbackResponse_Status_STATUS_AT_PREP_POSE;
  static constexpr Status STATUS_MISALIGNED =
    DockingCommandFeedbackResponse_Status_STATUS_MISALIGNED;
  static constexpr Status STATUS_OLD_DOCKING_COMMAND =
    DockingCommandFeedbackResponse_Status_STATUS_OLD_DOCKING_COMMAND;
  static constexpr Status STATUS_ERROR_DOCK_LOST =
    DockingCommandFeedbackResponse_Status_STATUS_ERROR_DOCK_LOST;
  static constexpr Status STATUS_ERROR_LEASE =
    DockingCommandFeedbackResponse_Status_STATUS_ERROR_LEASE;
  static constexpr Status STATUS_ERROR_COMMAND_TIMED_OUT =
    DockingCommandFeedbackResponse_Status_STATUS_ERROR_COMMAND_TIMED_OUT;
  static constexpr Status STATUS_ERROR_NO_TIMESYNC =
    DockingCommandFeedbackResponse_Status_STATUS_ERROR_NO_TIMESYNC;
  static constexpr Status STATUS_ERROR_TOO_DISTANT =
    DockingCommandFeedbackResponse_Status_STATUS_ERROR_TOO_DISTANT;
  static constexpr Status STATUS_ERROR_NOT_AVAILABLE =
    DockingCommandFeedbackResponse_Status_STATUS_ERROR_NOT_AVAILABLE;
  static constexpr Status STATUS_ERROR_UNREFINED_PRIOR =
    DockingCommandFeedbackResponse_Status_STATUS_ERROR_UNREFINED_PRIOR;
  static constexpr Status STATUS_ERROR_STUCK =
    DockingCommandFeedbackResponse_Status_STATUS_ERROR_STUCK;
  static constexpr Status STATUS_ERROR_SYSTEM =
    DockingCommandFeedbackResponse_Status_STATUS_ERROR_SYSTEM;
  static inline bool Status_IsValid(int value) {
    return DockingCommandFeedbackResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    DockingCommandFeedbackResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    DockingCommandFeedbackResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    DockingCommandFeedbackResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return DockingCommandFeedbackResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return DockingCommandFeedbackResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return DockingCommandFeedbackResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kLeaseUseResultFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.LeaseUseResult lease_use_result = 2;
  bool has_lease_use_result() const;
  private:
  bool _internal_has_lease_use_result() const;
  public:
  void clear_lease_use_result();
  const ::bosdyn::api::LeaseUseResult& lease_use_result() const;
  PROTOBUF_NODISCARD ::bosdyn::api::LeaseUseResult* release_lease_use_result();
  ::bosdyn::api::LeaseUseResult* mutable_lease_use_result();
  void set_allocated_lease_use_result(::bosdyn::api::LeaseUseResult* lease_use_result);
  private:
  const ::bosdyn::api::LeaseUseResult& _internal_lease_use_result() const;
  ::bosdyn::api::LeaseUseResult* _internal_mutable_lease_use_result();
  public:
  void unsafe_arena_set_allocated_lease_use_result(
      ::bosdyn::api::LeaseUseResult* lease_use_result);
  ::bosdyn::api::LeaseUseResult* unsafe_arena_release_lease_use_result();

  // .bosdyn.api.docking.DockingCommandFeedbackResponse.Status status = 3;
  void clear_status();
  ::bosdyn::api::docking::DockingCommandFeedbackResponse_Status status() const;
  void set_status(::bosdyn::api::docking::DockingCommandFeedbackResponse_Status value);
  private:
  ::bosdyn::api::docking::DockingCommandFeedbackResponse_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::docking::DockingCommandFeedbackResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.docking.DockingCommandFeedbackResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::ResponseHeader* header_;
    ::bosdyn::api::LeaseUseResult* lease_use_result_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fdocking_2fdocking_2eproto;
};
// -------------------------------------------------------------------

class ConfigRange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.docking.ConfigRange) */ {
 public:
  inline ConfigRange() : ConfigRange(nullptr) {}
  ~ConfigRange() override;
  explicit PROTOBUF_CONSTEXPR ConfigRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigRange(const ConfigRange& from);
  ConfigRange(ConfigRange&& from) noexcept
    : ConfigRange() {
    *this = ::std::move(from);
  }

  inline ConfigRange& operator=(const ConfigRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigRange& operator=(ConfigRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigRange* internal_default_instance() {
    return reinterpret_cast<const ConfigRange*>(
               &_ConfigRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ConfigRange& a, ConfigRange& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigRange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigRange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConfigRange& from) {
    ConfigRange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.docking.ConfigRange";
  }
  protected:
  explicit ConfigRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdStartFieldNumber = 1,
    kIdEndFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // uint32 id_start = 1;
  void clear_id_start();
  uint32_t id_start() const;
  void set_id_start(uint32_t value);
  private:
  uint32_t _internal_id_start() const;
  void _internal_set_id_start(uint32_t value);
  public:

  // uint32 id_end = 2;
  void clear_id_end();
  uint32_t id_end() const;
  void set_id_end(uint32_t value);
  private:
  uint32_t _internal_id_end() const;
  void _internal_set_id_end(uint32_t value);
  public:

  // .bosdyn.api.docking.DockType type = 3;
  void clear_type();
  ::bosdyn::api::docking::DockType type() const;
  void set_type(::bosdyn::api::docking::DockType value);
  private:
  ::bosdyn::api::docking::DockType _internal_type() const;
  void _internal_set_type(::bosdyn::api::docking::DockType value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.docking.ConfigRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_start_;
    uint32_t id_end_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fdocking_2fdocking_2eproto;
};
// -------------------------------------------------------------------

class GetDockingConfigRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.docking.GetDockingConfigRequest) */ {
 public:
  inline GetDockingConfigRequest() : GetDockingConfigRequest(nullptr) {}
  ~GetDockingConfigRequest() override;
  explicit PROTOBUF_CONSTEXPR GetDockingConfigRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDockingConfigRequest(const GetDockingConfigRequest& from);
  GetDockingConfigRequest(GetDockingConfigRequest&& from) noexcept
    : GetDockingConfigRequest() {
    *this = ::std::move(from);
  }

  inline GetDockingConfigRequest& operator=(const GetDockingConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDockingConfigRequest& operator=(GetDockingConfigRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDockingConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDockingConfigRequest* internal_default_instance() {
    return reinterpret_cast<const GetDockingConfigRequest*>(
               &_GetDockingConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetDockingConfigRequest& a, GetDockingConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDockingConfigRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDockingConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDockingConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDockingConfigRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDockingConfigRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDockingConfigRequest& from) {
    GetDockingConfigRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDockingConfigRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.docking.GetDockingConfigRequest";
  }
  protected:
  explicit GetDockingConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.docking.GetDockingConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::RequestHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fdocking_2fdocking_2eproto;
};
// -------------------------------------------------------------------

class GetDockingConfigResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.docking.GetDockingConfigResponse) */ {
 public:
  inline GetDockingConfigResponse() : GetDockingConfigResponse(nullptr) {}
  ~GetDockingConfigResponse() override;
  explicit PROTOBUF_CONSTEXPR GetDockingConfigResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDockingConfigResponse(const GetDockingConfigResponse& from);
  GetDockingConfigResponse(GetDockingConfigResponse&& from) noexcept
    : GetDockingConfigResponse() {
    *this = ::std::move(from);
  }

  inline GetDockingConfigResponse& operator=(const GetDockingConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDockingConfigResponse& operator=(GetDockingConfigResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDockingConfigResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDockingConfigResponse* internal_default_instance() {
    return reinterpret_cast<const GetDockingConfigResponse*>(
               &_GetDockingConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetDockingConfigResponse& a, GetDockingConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDockingConfigResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDockingConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDockingConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDockingConfigResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDockingConfigResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDockingConfigResponse& from) {
    GetDockingConfigResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDockingConfigResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.docking.GetDockingConfigResponse";
  }
  protected:
  explicit GetDockingConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDockConfigsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .bosdyn.api.docking.ConfigRange dock_configs = 2;
  int dock_configs_size() const;
  private:
  int _internal_dock_configs_size() const;
  public:
  void clear_dock_configs();
  ::bosdyn::api::docking::ConfigRange* mutable_dock_configs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::docking::ConfigRange >*
      mutable_dock_configs();
  private:
  const ::bosdyn::api::docking::ConfigRange& _internal_dock_configs(int index) const;
  ::bosdyn::api::docking::ConfigRange* _internal_add_dock_configs();
  public:
  const ::bosdyn::api::docking::ConfigRange& dock_configs(int index) const;
  ::bosdyn::api::docking::ConfigRange* add_dock_configs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::docking::ConfigRange >&
      dock_configs() const;

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.docking.GetDockingConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::docking::ConfigRange > dock_configs_;
    ::bosdyn::api::ResponseHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fdocking_2fdocking_2eproto;
};
// -------------------------------------------------------------------

class DockState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.docking.DockState) */ {
 public:
  inline DockState() : DockState(nullptr) {}
  ~DockState() override;
  explicit PROTOBUF_CONSTEXPR DockState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DockState(const DockState& from);
  DockState(DockState&& from) noexcept
    : DockState() {
    *this = ::std::move(from);
  }

  inline DockState& operator=(const DockState& from) {
    CopyFrom(from);
    return *this;
  }
  inline DockState& operator=(DockState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DockState& default_instance() {
    return *internal_default_instance();
  }
  static inline const DockState* internal_default_instance() {
    return reinterpret_cast<const DockState*>(
               &_DockState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DockState& a, DockState& b) {
    a.Swap(&b);
  }
  inline void Swap(DockState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DockState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DockState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DockState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DockState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DockState& from) {
    DockState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DockState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.docking.DockState";
  }
  protected:
  explicit DockState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DockState_DockedStatus DockedStatus;
  static constexpr DockedStatus DOCK_STATUS_UNKNOWN =
    DockState_DockedStatus_DOCK_STATUS_UNKNOWN;
  static constexpr DockedStatus DOCK_STATUS_DOCKED =
    DockState_DockedStatus_DOCK_STATUS_DOCKED;
  static constexpr DockedStatus DOCK_STATUS_DOCKING =
    DockState_DockedStatus_DOCK_STATUS_DOCKING;
  static constexpr DockedStatus DOCK_STATUS_UNDOCKED =
    DockState_DockedStatus_DOCK_STATUS_UNDOCKED;
  static constexpr DockedStatus DOCK_STATUS_UNDOCKING =
    DockState_DockedStatus_DOCK_STATUS_UNDOCKING;
  static inline bool DockedStatus_IsValid(int value) {
    return DockState_DockedStatus_IsValid(value);
  }
  static constexpr DockedStatus DockedStatus_MIN =
    DockState_DockedStatus_DockedStatus_MIN;
  static constexpr DockedStatus DockedStatus_MAX =
    DockState_DockedStatus_DockedStatus_MAX;
  static constexpr int DockedStatus_ARRAYSIZE =
    DockState_DockedStatus_DockedStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DockedStatus_descriptor() {
    return DockState_DockedStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& DockedStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DockedStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DockedStatus_Name.");
    return DockState_DockedStatus_Name(enum_t_value);
  }
  static inline bool DockedStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DockedStatus* value) {
    return DockState_DockedStatus_Parse(name, value);
  }

  typedef DockState_LinkStatus LinkStatus;
  static constexpr LinkStatus LINK_STATUS_UNKNOWN =
    DockState_LinkStatus_LINK_STATUS_UNKNOWN;
  static constexpr LinkStatus LINK_STATUS_DETECTING =
    DockState_LinkStatus_LINK_STATUS_DETECTING;
  static constexpr LinkStatus LINK_STATUS_CONNECTED =
    DockState_LinkStatus_LINK_STATUS_CONNECTED;
  static constexpr LinkStatus LINK_STATUS_ERROR =
    DockState_LinkStatus_LINK_STATUS_ERROR;
  static inline bool LinkStatus_IsValid(int value) {
    return DockState_LinkStatus_IsValid(value);
  }
  static constexpr LinkStatus LinkStatus_MIN =
    DockState_LinkStatus_LinkStatus_MIN;
  static constexpr LinkStatus LinkStatus_MAX =
    DockState_LinkStatus_LinkStatus_MAX;
  static constexpr int LinkStatus_ARRAYSIZE =
    DockState_LinkStatus_LinkStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LinkStatus_descriptor() {
    return DockState_LinkStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& LinkStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LinkStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LinkStatus_Name.");
    return DockState_LinkStatus_Name(enum_t_value);
  }
  static inline bool LinkStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LinkStatus* value) {
    return DockState_LinkStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDockTypeFieldNumber = 2,
    kDockIdFieldNumber = 3,
    kPowerStatusFieldNumber = 4,
  };
  // .bosdyn.api.docking.DockState.DockedStatus status = 1;
  void clear_status();
  ::bosdyn::api::docking::DockState_DockedStatus status() const;
  void set_status(::bosdyn::api::docking::DockState_DockedStatus value);
  private:
  ::bosdyn::api::docking::DockState_DockedStatus _internal_status() const;
  void _internal_set_status(::bosdyn::api::docking::DockState_DockedStatus value);
  public:

  // .bosdyn.api.docking.DockType dock_type = 2;
  void clear_dock_type();
  ::bosdyn::api::docking::DockType dock_type() const;
  void set_dock_type(::bosdyn::api::docking::DockType value);
  private:
  ::bosdyn::api::docking::DockType _internal_dock_type() const;
  void _internal_set_dock_type(::bosdyn::api::docking::DockType value);
  public:

  // uint32 dock_id = 3;
  void clear_dock_id();
  uint32_t dock_id() const;
  void set_dock_id(uint32_t value);
  private:
  uint32_t _internal_dock_id() const;
  void _internal_set_dock_id(uint32_t value);
  public:

  // .bosdyn.api.docking.DockState.LinkStatus power_status = 4;
  void clear_power_status();
  ::bosdyn::api::docking::DockState_LinkStatus power_status() const;
  void set_power_status(::bosdyn::api::docking::DockState_LinkStatus value);
  private:
  ::bosdyn::api::docking::DockState_LinkStatus _internal_power_status() const;
  void _internal_set_power_status(::bosdyn::api::docking::DockState_LinkStatus value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.docking.DockState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int status_;
    int dock_type_;
    uint32_t dock_id_;
    int power_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fdocking_2fdocking_2eproto;
};
// -------------------------------------------------------------------

class GetDockingStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.docking.GetDockingStateRequest) */ {
 public:
  inline GetDockingStateRequest() : GetDockingStateRequest(nullptr) {}
  ~GetDockingStateRequest() override;
  explicit PROTOBUF_CONSTEXPR GetDockingStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDockingStateRequest(const GetDockingStateRequest& from);
  GetDockingStateRequest(GetDockingStateRequest&& from) noexcept
    : GetDockingStateRequest() {
    *this = ::std::move(from);
  }

  inline GetDockingStateRequest& operator=(const GetDockingStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDockingStateRequest& operator=(GetDockingStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDockingStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDockingStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetDockingStateRequest*>(
               &_GetDockingStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetDockingStateRequest& a, GetDockingStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDockingStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDockingStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDockingStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDockingStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDockingStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDockingStateRequest& from) {
    GetDockingStateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDockingStateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.docking.GetDockingStateRequest";
  }
  protected:
  explicit GetDockingStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.docking.GetDockingStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::RequestHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fdocking_2fdocking_2eproto;
};
// -------------------------------------------------------------------

class GetDockingStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.docking.GetDockingStateResponse) */ {
 public:
  inline GetDockingStateResponse() : GetDockingStateResponse(nullptr) {}
  ~GetDockingStateResponse() override;
  explicit PROTOBUF_CONSTEXPR GetDockingStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDockingStateResponse(const GetDockingStateResponse& from);
  GetDockingStateResponse(GetDockingStateResponse&& from) noexcept
    : GetDockingStateResponse() {
    *this = ::std::move(from);
  }

  inline GetDockingStateResponse& operator=(const GetDockingStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDockingStateResponse& operator=(GetDockingStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDockingStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDockingStateResponse* internal_default_instance() {
    return reinterpret_cast<const GetDockingStateResponse*>(
               &_GetDockingStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetDockingStateResponse& a, GetDockingStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDockingStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDockingStateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDockingStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDockingStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDockingStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDockingStateResponse& from) {
    GetDockingStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDockingStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.docking.GetDockingStateResponse";
  }
  protected:
  explicit GetDockingStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kDockStateFieldNumber = 2,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.docking.DockState dock_state = 2;
  bool has_dock_state() const;
  private:
  bool _internal_has_dock_state() const;
  public:
  void clear_dock_state();
  const ::bosdyn::api::docking::DockState& dock_state() const;
  PROTOBUF_NODISCARD ::bosdyn::api::docking::DockState* release_dock_state();
  ::bosdyn::api::docking::DockState* mutable_dock_state();
  void set_allocated_dock_state(::bosdyn::api::docking::DockState* dock_state);
  private:
  const ::bosdyn::api::docking::DockState& _internal_dock_state() const;
  ::bosdyn::api::docking::DockState* _internal_mutable_dock_state();
  public:
  void unsafe_arena_set_allocated_dock_state(
      ::bosdyn::api::docking::DockState* dock_state);
  ::bosdyn::api::docking::DockState* unsafe_arena_release_dock_state();

  // @@protoc_insertion_point(class_scope:bosdyn.api.docking.GetDockingStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::ResponseHeader* header_;
    ::bosdyn::api::docking::DockState* dock_state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fdocking_2fdocking_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DockingCommandRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool DockingCommandRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool DockingCommandRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& DockingCommandRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RequestHeader&>(
      ::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& DockingCommandRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.docking.DockingCommandRequest.header)
  return _internal_header();
}
inline void DockingCommandRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.docking.DockingCommandRequest.header)
}
inline ::bosdyn::api::RequestHeader* DockingCommandRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RequestHeader* DockingCommandRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.docking.DockingCommandRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* DockingCommandRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::RequestHeader* DockingCommandRequest::mutable_header() {
  ::bosdyn::api::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.docking.DockingCommandRequest.header)
  return _msg;
}
inline void DockingCommandRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.docking.DockingCommandRequest.header)
}

// .bosdyn.api.Lease lease = 2;
inline bool DockingCommandRequest::_internal_has_lease() const {
  return this != internal_default_instance() && _impl_.lease_ != nullptr;
}
inline bool DockingCommandRequest::has_lease() const {
  return _internal_has_lease();
}
inline const ::bosdyn::api::Lease& DockingCommandRequest::_internal_lease() const {
  const ::bosdyn::api::Lease* p = _impl_.lease_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Lease&>(
      ::bosdyn::api::_Lease_default_instance_);
}
inline const ::bosdyn::api::Lease& DockingCommandRequest::lease() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.docking.DockingCommandRequest.lease)
  return _internal_lease();
}
inline void DockingCommandRequest::unsafe_arena_set_allocated_lease(
    ::bosdyn::api::Lease* lease) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lease_);
  }
  _impl_.lease_ = lease;
  if (lease) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.docking.DockingCommandRequest.lease)
}
inline ::bosdyn::api::Lease* DockingCommandRequest::release_lease() {
  
  ::bosdyn::api::Lease* temp = _impl_.lease_;
  _impl_.lease_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Lease* DockingCommandRequest::unsafe_arena_release_lease() {
  // @@protoc_insertion_point(field_release:bosdyn.api.docking.DockingCommandRequest.lease)
  
  ::bosdyn::api::Lease* temp = _impl_.lease_;
  _impl_.lease_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Lease* DockingCommandRequest::_internal_mutable_lease() {
  
  if (_impl_.lease_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Lease>(GetArenaForAllocation());
    _impl_.lease_ = p;
  }
  return _impl_.lease_;
}
inline ::bosdyn::api::Lease* DockingCommandRequest::mutable_lease() {
  ::bosdyn::api::Lease* _msg = _internal_mutable_lease();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.docking.DockingCommandRequest.lease)
  return _msg;
}
inline void DockingCommandRequest::set_allocated_lease(::bosdyn::api::Lease* lease) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lease_);
  }
  if (lease) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease));
    if (message_arena != submessage_arena) {
      lease = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lease, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lease_ = lease;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.docking.DockingCommandRequest.lease)
}

// uint32 docking_station_id = 3;
inline void DockingCommandRequest::clear_docking_station_id() {
  _impl_.docking_station_id_ = 0u;
}
inline uint32_t DockingCommandRequest::_internal_docking_station_id() const {
  return _impl_.docking_station_id_;
}
inline uint32_t DockingCommandRequest::docking_station_id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.docking.DockingCommandRequest.docking_station_id)
  return _internal_docking_station_id();
}
inline void DockingCommandRequest::_internal_set_docking_station_id(uint32_t value) {
  
  _impl_.docking_station_id_ = value;
}
inline void DockingCommandRequest::set_docking_station_id(uint32_t value) {
  _internal_set_docking_station_id(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.docking.DockingCommandRequest.docking_station_id)
}

// string clock_identifier = 4;
inline void DockingCommandRequest::clear_clock_identifier() {
  _impl_.clock_identifier_.ClearToEmpty();
}
inline const std::string& DockingCommandRequest::clock_identifier() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.docking.DockingCommandRequest.clock_identifier)
  return _internal_clock_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DockingCommandRequest::set_clock_identifier(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clock_identifier_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.docking.DockingCommandRequest.clock_identifier)
}
inline std::string* DockingCommandRequest::mutable_clock_identifier() {
  std::string* _s = _internal_mutable_clock_identifier();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.docking.DockingCommandRequest.clock_identifier)
  return _s;
}
inline const std::string& DockingCommandRequest::_internal_clock_identifier() const {
  return _impl_.clock_identifier_.Get();
}
inline void DockingCommandRequest::_internal_set_clock_identifier(const std::string& value) {
  
  _impl_.clock_identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* DockingCommandRequest::_internal_mutable_clock_identifier() {
  
  return _impl_.clock_identifier_.Mutable(GetArenaForAllocation());
}
inline std::string* DockingCommandRequest::release_clock_identifier() {
  // @@protoc_insertion_point(field_release:bosdyn.api.docking.DockingCommandRequest.clock_identifier)
  return _impl_.clock_identifier_.Release();
}
inline void DockingCommandRequest::set_allocated_clock_identifier(std::string* clock_identifier) {
  if (clock_identifier != nullptr) {
    
  } else {
    
  }
  _impl_.clock_identifier_.SetAllocated(clock_identifier, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clock_identifier_.IsDefault()) {
    _impl_.clock_identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.docking.DockingCommandRequest.clock_identifier)
}

// .google.protobuf.Timestamp end_time = 5;
inline bool DockingCommandRequest::_internal_has_end_time() const {
  return this != internal_default_instance() && _impl_.end_time_ != nullptr;
}
inline bool DockingCommandRequest::has_end_time() const {
  return _internal_has_end_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& DockingCommandRequest::_internal_end_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& DockingCommandRequest::end_time() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.docking.DockingCommandRequest.end_time)
  return _internal_end_time();
}
inline void DockingCommandRequest::unsafe_arena_set_allocated_end_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  _impl_.end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.docking.DockingCommandRequest.end_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DockingCommandRequest::release_end_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DockingCommandRequest::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:bosdyn.api.docking.DockingCommandRequest.end_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DockingCommandRequest::_internal_mutable_end_time() {
  
  if (_impl_.end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.end_time_ = p;
  }
  return _impl_.end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DockingCommandRequest::mutable_end_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_end_time();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.docking.DockingCommandRequest.end_time)
  return _msg;
}
inline void DockingCommandRequest::set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time));
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.docking.DockingCommandRequest.end_time)
}

// .bosdyn.api.docking.PrepPoseBehavior prep_pose_behavior = 9;
inline void DockingCommandRequest::clear_prep_pose_behavior() {
  _impl_.prep_pose_behavior_ = 0;
}
inline ::bosdyn::api::docking::PrepPoseBehavior DockingCommandRequest::_internal_prep_pose_behavior() const {
  return static_cast< ::bosdyn::api::docking::PrepPoseBehavior >(_impl_.prep_pose_behavior_);
}
inline ::bosdyn::api::docking::PrepPoseBehavior DockingCommandRequest::prep_pose_behavior() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.docking.DockingCommandRequest.prep_pose_behavior)
  return _internal_prep_pose_behavior();
}
inline void DockingCommandRequest::_internal_set_prep_pose_behavior(::bosdyn::api::docking::PrepPoseBehavior value) {
  
  _impl_.prep_pose_behavior_ = value;
}
inline void DockingCommandRequest::set_prep_pose_behavior(::bosdyn::api::docking::PrepPoseBehavior value) {
  _internal_set_prep_pose_behavior(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.docking.DockingCommandRequest.prep_pose_behavior)
}

// -------------------------------------------------------------------

// DockingCommandResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool DockingCommandResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool DockingCommandResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& DockingCommandResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ResponseHeader&>(
      ::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& DockingCommandResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.docking.DockingCommandResponse.header)
  return _internal_header();
}
inline void DockingCommandResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.docking.DockingCommandResponse.header)
}
inline ::bosdyn::api::ResponseHeader* DockingCommandResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ResponseHeader* DockingCommandResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.docking.DockingCommandResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* DockingCommandResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::ResponseHeader* DockingCommandResponse::mutable_header() {
  ::bosdyn::api::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.docking.DockingCommandResponse.header)
  return _msg;
}
inline void DockingCommandResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.docking.DockingCommandResponse.header)
}

// .bosdyn.api.LeaseUseResult lease_use_result = 2;
inline bool DockingCommandResponse::_internal_has_lease_use_result() const {
  return this != internal_default_instance() && _impl_.lease_use_result_ != nullptr;
}
inline bool DockingCommandResponse::has_lease_use_result() const {
  return _internal_has_lease_use_result();
}
inline const ::bosdyn::api::LeaseUseResult& DockingCommandResponse::_internal_lease_use_result() const {
  const ::bosdyn::api::LeaseUseResult* p = _impl_.lease_use_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::LeaseUseResult&>(
      ::bosdyn::api::_LeaseUseResult_default_instance_);
}
inline const ::bosdyn::api::LeaseUseResult& DockingCommandResponse::lease_use_result() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.docking.DockingCommandResponse.lease_use_result)
  return _internal_lease_use_result();
}
inline void DockingCommandResponse::unsafe_arena_set_allocated_lease_use_result(
    ::bosdyn::api::LeaseUseResult* lease_use_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lease_use_result_);
  }
  _impl_.lease_use_result_ = lease_use_result;
  if (lease_use_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.docking.DockingCommandResponse.lease_use_result)
}
inline ::bosdyn::api::LeaseUseResult* DockingCommandResponse::release_lease_use_result() {
  
  ::bosdyn::api::LeaseUseResult* temp = _impl_.lease_use_result_;
  _impl_.lease_use_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::LeaseUseResult* DockingCommandResponse::unsafe_arena_release_lease_use_result() {
  // @@protoc_insertion_point(field_release:bosdyn.api.docking.DockingCommandResponse.lease_use_result)
  
  ::bosdyn::api::LeaseUseResult* temp = _impl_.lease_use_result_;
  _impl_.lease_use_result_ = nullptr;
  return temp;
}
inline ::bosdyn::api::LeaseUseResult* DockingCommandResponse::_internal_mutable_lease_use_result() {
  
  if (_impl_.lease_use_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::LeaseUseResult>(GetArenaForAllocation());
    _impl_.lease_use_result_ = p;
  }
  return _impl_.lease_use_result_;
}
inline ::bosdyn::api::LeaseUseResult* DockingCommandResponse::mutable_lease_use_result() {
  ::bosdyn::api::LeaseUseResult* _msg = _internal_mutable_lease_use_result();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.docking.DockingCommandResponse.lease_use_result)
  return _msg;
}
inline void DockingCommandResponse::set_allocated_lease_use_result(::bosdyn::api::LeaseUseResult* lease_use_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lease_use_result_);
  }
  if (lease_use_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease_use_result));
    if (message_arena != submessage_arena) {
      lease_use_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lease_use_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lease_use_result_ = lease_use_result;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.docking.DockingCommandResponse.lease_use_result)
}

// .bosdyn.api.docking.DockingCommandResponse.Status status = 3;
inline void DockingCommandResponse::clear_status() {
  _impl_.status_ = 0;
}
inline ::bosdyn::api::docking::DockingCommandResponse_Status DockingCommandResponse::_internal_status() const {
  return static_cast< ::bosdyn::api::docking::DockingCommandResponse_Status >(_impl_.status_);
}
inline ::bosdyn::api::docking::DockingCommandResponse_Status DockingCommandResponse::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.docking.DockingCommandResponse.status)
  return _internal_status();
}
inline void DockingCommandResponse::_internal_set_status(::bosdyn::api::docking::DockingCommandResponse_Status value) {
  
  _impl_.status_ = value;
}
inline void DockingCommandResponse::set_status(::bosdyn::api::docking::DockingCommandResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.docking.DockingCommandResponse.status)
}

// uint32 docking_command_id = 5;
inline void DockingCommandResponse::clear_docking_command_id() {
  _impl_.docking_command_id_ = 0u;
}
inline uint32_t DockingCommandResponse::_internal_docking_command_id() const {
  return _impl_.docking_command_id_;
}
inline uint32_t DockingCommandResponse::docking_command_id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.docking.DockingCommandResponse.docking_command_id)
  return _internal_docking_command_id();
}
inline void DockingCommandResponse::_internal_set_docking_command_id(uint32_t value) {
  
  _impl_.docking_command_id_ = value;
}
inline void DockingCommandResponse::set_docking_command_id(uint32_t value) {
  _internal_set_docking_command_id(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.docking.DockingCommandResponse.docking_command_id)
}

// -------------------------------------------------------------------

// UpdateDockingParams

// .google.protobuf.Timestamp end_time = 5;
inline bool UpdateDockingParams::_internal_has_end_time() const {
  return this != internal_default_instance() && _impl_.end_time_ != nullptr;
}
inline bool UpdateDockingParams::has_end_time() const {
  return _internal_has_end_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& UpdateDockingParams::_internal_end_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& UpdateDockingParams::end_time() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.docking.UpdateDockingParams.end_time)
  return _internal_end_time();
}
inline void UpdateDockingParams::unsafe_arena_set_allocated_end_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  _impl_.end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.docking.UpdateDockingParams.end_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UpdateDockingParams::release_end_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UpdateDockingParams::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:bosdyn.api.docking.UpdateDockingParams.end_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UpdateDockingParams::_internal_mutable_end_time() {
  
  if (_impl_.end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.end_time_ = p;
  }
  return _impl_.end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UpdateDockingParams::mutable_end_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_end_time();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.docking.UpdateDockingParams.end_time)
  return _msg;
}
inline void UpdateDockingParams::set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time));
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.docking.UpdateDockingParams.end_time)
}

// -------------------------------------------------------------------

// DockingCommandFeedbackRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool DockingCommandFeedbackRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool DockingCommandFeedbackRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& DockingCommandFeedbackRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RequestHeader&>(
      ::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& DockingCommandFeedbackRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.docking.DockingCommandFeedbackRequest.header)
  return _internal_header();
}
inline void DockingCommandFeedbackRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.docking.DockingCommandFeedbackRequest.header)
}
inline ::bosdyn::api::RequestHeader* DockingCommandFeedbackRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RequestHeader* DockingCommandFeedbackRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.docking.DockingCommandFeedbackRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* DockingCommandFeedbackRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::RequestHeader* DockingCommandFeedbackRequest::mutable_header() {
  ::bosdyn::api::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.docking.DockingCommandFeedbackRequest.header)
  return _msg;
}
inline void DockingCommandFeedbackRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.docking.DockingCommandFeedbackRequest.header)
}

// uint32 docking_command_id = 2;
inline void DockingCommandFeedbackRequest::clear_docking_command_id() {
  _impl_.docking_command_id_ = 0u;
}
inline uint32_t DockingCommandFeedbackRequest::_internal_docking_command_id() const {
  return _impl_.docking_command_id_;
}
inline uint32_t DockingCommandFeedbackRequest::docking_command_id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.docking.DockingCommandFeedbackRequest.docking_command_id)
  return _internal_docking_command_id();
}
inline void DockingCommandFeedbackRequest::_internal_set_docking_command_id(uint32_t value) {
  
  _impl_.docking_command_id_ = value;
}
inline void DockingCommandFeedbackRequest::set_docking_command_id(uint32_t value) {
  _internal_set_docking_command_id(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.docking.DockingCommandFeedbackRequest.docking_command_id)
}

// .bosdyn.api.docking.UpdateDockingParams update_docking_params = 3;
inline bool DockingCommandFeedbackRequest::_internal_has_update_docking_params() const {
  return this != internal_default_instance() && _impl_.update_docking_params_ != nullptr;
}
inline bool DockingCommandFeedbackRequest::has_update_docking_params() const {
  return _internal_has_update_docking_params();
}
inline void DockingCommandFeedbackRequest::clear_update_docking_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.update_docking_params_ != nullptr) {
    delete _impl_.update_docking_params_;
  }
  _impl_.update_docking_params_ = nullptr;
}
inline const ::bosdyn::api::docking::UpdateDockingParams& DockingCommandFeedbackRequest::_internal_update_docking_params() const {
  const ::bosdyn::api::docking::UpdateDockingParams* p = _impl_.update_docking_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::docking::UpdateDockingParams&>(
      ::bosdyn::api::docking::_UpdateDockingParams_default_instance_);
}
inline const ::bosdyn::api::docking::UpdateDockingParams& DockingCommandFeedbackRequest::update_docking_params() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.docking.DockingCommandFeedbackRequest.update_docking_params)
  return _internal_update_docking_params();
}
inline void DockingCommandFeedbackRequest::unsafe_arena_set_allocated_update_docking_params(
    ::bosdyn::api::docking::UpdateDockingParams* update_docking_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_docking_params_);
  }
  _impl_.update_docking_params_ = update_docking_params;
  if (update_docking_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.docking.DockingCommandFeedbackRequest.update_docking_params)
}
inline ::bosdyn::api::docking::UpdateDockingParams* DockingCommandFeedbackRequest::release_update_docking_params() {
  
  ::bosdyn::api::docking::UpdateDockingParams* temp = _impl_.update_docking_params_;
  _impl_.update_docking_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::docking::UpdateDockingParams* DockingCommandFeedbackRequest::unsafe_arena_release_update_docking_params() {
  // @@protoc_insertion_point(field_release:bosdyn.api.docking.DockingCommandFeedbackRequest.update_docking_params)
  
  ::bosdyn::api::docking::UpdateDockingParams* temp = _impl_.update_docking_params_;
  _impl_.update_docking_params_ = nullptr;
  return temp;
}
inline ::bosdyn::api::docking::UpdateDockingParams* DockingCommandFeedbackRequest::_internal_mutable_update_docking_params() {
  
  if (_impl_.update_docking_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::docking::UpdateDockingParams>(GetArenaForAllocation());
    _impl_.update_docking_params_ = p;
  }
  return _impl_.update_docking_params_;
}
inline ::bosdyn::api::docking::UpdateDockingParams* DockingCommandFeedbackRequest::mutable_update_docking_params() {
  ::bosdyn::api::docking::UpdateDockingParams* _msg = _internal_mutable_update_docking_params();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.docking.DockingCommandFeedbackRequest.update_docking_params)
  return _msg;
}
inline void DockingCommandFeedbackRequest::set_allocated_update_docking_params(::bosdyn::api::docking::UpdateDockingParams* update_docking_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.update_docking_params_;
  }
  if (update_docking_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(update_docking_params);
    if (message_arena != submessage_arena) {
      update_docking_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_docking_params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_docking_params_ = update_docking_params;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.docking.DockingCommandFeedbackRequest.update_docking_params)
}

// -------------------------------------------------------------------

// DockingCommandFeedbackResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool DockingCommandFeedbackResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool DockingCommandFeedbackResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& DockingCommandFeedbackResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ResponseHeader&>(
      ::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& DockingCommandFeedbackResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.docking.DockingCommandFeedbackResponse.header)
  return _internal_header();
}
inline void DockingCommandFeedbackResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.docking.DockingCommandFeedbackResponse.header)
}
inline ::bosdyn::api::ResponseHeader* DockingCommandFeedbackResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ResponseHeader* DockingCommandFeedbackResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.docking.DockingCommandFeedbackResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* DockingCommandFeedbackResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::ResponseHeader* DockingCommandFeedbackResponse::mutable_header() {
  ::bosdyn::api::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.docking.DockingCommandFeedbackResponse.header)
  return _msg;
}
inline void DockingCommandFeedbackResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.docking.DockingCommandFeedbackResponse.header)
}

// .bosdyn.api.LeaseUseResult lease_use_result = 2;
inline bool DockingCommandFeedbackResponse::_internal_has_lease_use_result() const {
  return this != internal_default_instance() && _impl_.lease_use_result_ != nullptr;
}
inline bool DockingCommandFeedbackResponse::has_lease_use_result() const {
  return _internal_has_lease_use_result();
}
inline const ::bosdyn::api::LeaseUseResult& DockingCommandFeedbackResponse::_internal_lease_use_result() const {
  const ::bosdyn::api::LeaseUseResult* p = _impl_.lease_use_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::LeaseUseResult&>(
      ::bosdyn::api::_LeaseUseResult_default_instance_);
}
inline const ::bosdyn::api::LeaseUseResult& DockingCommandFeedbackResponse::lease_use_result() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.docking.DockingCommandFeedbackResponse.lease_use_result)
  return _internal_lease_use_result();
}
inline void DockingCommandFeedbackResponse::unsafe_arena_set_allocated_lease_use_result(
    ::bosdyn::api::LeaseUseResult* lease_use_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lease_use_result_);
  }
  _impl_.lease_use_result_ = lease_use_result;
  if (lease_use_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.docking.DockingCommandFeedbackResponse.lease_use_result)
}
inline ::bosdyn::api::LeaseUseResult* DockingCommandFeedbackResponse::release_lease_use_result() {
  
  ::bosdyn::api::LeaseUseResult* temp = _impl_.lease_use_result_;
  _impl_.lease_use_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::LeaseUseResult* DockingCommandFeedbackResponse::unsafe_arena_release_lease_use_result() {
  // @@protoc_insertion_point(field_release:bosdyn.api.docking.DockingCommandFeedbackResponse.lease_use_result)
  
  ::bosdyn::api::LeaseUseResult* temp = _impl_.lease_use_result_;
  _impl_.lease_use_result_ = nullptr;
  return temp;
}
inline ::bosdyn::api::LeaseUseResult* DockingCommandFeedbackResponse::_internal_mutable_lease_use_result() {
  
  if (_impl_.lease_use_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::LeaseUseResult>(GetArenaForAllocation());
    _impl_.lease_use_result_ = p;
  }
  return _impl_.lease_use_result_;
}
inline ::bosdyn::api::LeaseUseResult* DockingCommandFeedbackResponse::mutable_lease_use_result() {
  ::bosdyn::api::LeaseUseResult* _msg = _internal_mutable_lease_use_result();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.docking.DockingCommandFeedbackResponse.lease_use_result)
  return _msg;
}
inline void DockingCommandFeedbackResponse::set_allocated_lease_use_result(::bosdyn::api::LeaseUseResult* lease_use_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lease_use_result_);
  }
  if (lease_use_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease_use_result));
    if (message_arena != submessage_arena) {
      lease_use_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lease_use_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lease_use_result_ = lease_use_result;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.docking.DockingCommandFeedbackResponse.lease_use_result)
}

// .bosdyn.api.docking.DockingCommandFeedbackResponse.Status status = 3;
inline void DockingCommandFeedbackResponse::clear_status() {
  _impl_.status_ = 0;
}
inline ::bosdyn::api::docking::DockingCommandFeedbackResponse_Status DockingCommandFeedbackResponse::_internal_status() const {
  return static_cast< ::bosdyn::api::docking::DockingCommandFeedbackResponse_Status >(_impl_.status_);
}
inline ::bosdyn::api::docking::DockingCommandFeedbackResponse_Status DockingCommandFeedbackResponse::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.docking.DockingCommandFeedbackResponse.status)
  return _internal_status();
}
inline void DockingCommandFeedbackResponse::_internal_set_status(::bosdyn::api::docking::DockingCommandFeedbackResponse_Status value) {
  
  _impl_.status_ = value;
}
inline void DockingCommandFeedbackResponse::set_status(::bosdyn::api::docking::DockingCommandFeedbackResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.docking.DockingCommandFeedbackResponse.status)
}

// -------------------------------------------------------------------

// ConfigRange

// uint32 id_start = 1;
inline void ConfigRange::clear_id_start() {
  _impl_.id_start_ = 0u;
}
inline uint32_t ConfigRange::_internal_id_start() const {
  return _impl_.id_start_;
}
inline uint32_t ConfigRange::id_start() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.docking.ConfigRange.id_start)
  return _internal_id_start();
}
inline void ConfigRange::_internal_set_id_start(uint32_t value) {
  
  _impl_.id_start_ = value;
}
inline void ConfigRange::set_id_start(uint32_t value) {
  _internal_set_id_start(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.docking.ConfigRange.id_start)
}

// uint32 id_end = 2;
inline void ConfigRange::clear_id_end() {
  _impl_.id_end_ = 0u;
}
inline uint32_t ConfigRange::_internal_id_end() const {
  return _impl_.id_end_;
}
inline uint32_t ConfigRange::id_end() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.docking.ConfigRange.id_end)
  return _internal_id_end();
}
inline void ConfigRange::_internal_set_id_end(uint32_t value) {
  
  _impl_.id_end_ = value;
}
inline void ConfigRange::set_id_end(uint32_t value) {
  _internal_set_id_end(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.docking.ConfigRange.id_end)
}

// .bosdyn.api.docking.DockType type = 3;
inline void ConfigRange::clear_type() {
  _impl_.type_ = 0;
}
inline ::bosdyn::api::docking::DockType ConfigRange::_internal_type() const {
  return static_cast< ::bosdyn::api::docking::DockType >(_impl_.type_);
}
inline ::bosdyn::api::docking::DockType ConfigRange::type() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.docking.ConfigRange.type)
  return _internal_type();
}
inline void ConfigRange::_internal_set_type(::bosdyn::api::docking::DockType value) {
  
  _impl_.type_ = value;
}
inline void ConfigRange::set_type(::bosdyn::api::docking::DockType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.docking.ConfigRange.type)
}

// -------------------------------------------------------------------

// GetDockingConfigRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool GetDockingConfigRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool GetDockingConfigRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& GetDockingConfigRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RequestHeader&>(
      ::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& GetDockingConfigRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.docking.GetDockingConfigRequest.header)
  return _internal_header();
}
inline void GetDockingConfigRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.docking.GetDockingConfigRequest.header)
}
inline ::bosdyn::api::RequestHeader* GetDockingConfigRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetDockingConfigRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.docking.GetDockingConfigRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetDockingConfigRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::RequestHeader* GetDockingConfigRequest::mutable_header() {
  ::bosdyn::api::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.docking.GetDockingConfigRequest.header)
  return _msg;
}
inline void GetDockingConfigRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.docking.GetDockingConfigRequest.header)
}

// -------------------------------------------------------------------

// GetDockingConfigResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool GetDockingConfigResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool GetDockingConfigResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& GetDockingConfigResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ResponseHeader&>(
      ::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& GetDockingConfigResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.docking.GetDockingConfigResponse.header)
  return _internal_header();
}
inline void GetDockingConfigResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.docking.GetDockingConfigResponse.header)
}
inline ::bosdyn::api::ResponseHeader* GetDockingConfigResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetDockingConfigResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.docking.GetDockingConfigResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetDockingConfigResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::ResponseHeader* GetDockingConfigResponse::mutable_header() {
  ::bosdyn::api::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.docking.GetDockingConfigResponse.header)
  return _msg;
}
inline void GetDockingConfigResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.docking.GetDockingConfigResponse.header)
}

// repeated .bosdyn.api.docking.ConfigRange dock_configs = 2;
inline int GetDockingConfigResponse::_internal_dock_configs_size() const {
  return _impl_.dock_configs_.size();
}
inline int GetDockingConfigResponse::dock_configs_size() const {
  return _internal_dock_configs_size();
}
inline void GetDockingConfigResponse::clear_dock_configs() {
  _impl_.dock_configs_.Clear();
}
inline ::bosdyn::api::docking::ConfigRange* GetDockingConfigResponse::mutable_dock_configs(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.docking.GetDockingConfigResponse.dock_configs)
  return _impl_.dock_configs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::docking::ConfigRange >*
GetDockingConfigResponse::mutable_dock_configs() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.docking.GetDockingConfigResponse.dock_configs)
  return &_impl_.dock_configs_;
}
inline const ::bosdyn::api::docking::ConfigRange& GetDockingConfigResponse::_internal_dock_configs(int index) const {
  return _impl_.dock_configs_.Get(index);
}
inline const ::bosdyn::api::docking::ConfigRange& GetDockingConfigResponse::dock_configs(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.docking.GetDockingConfigResponse.dock_configs)
  return _internal_dock_configs(index);
}
inline ::bosdyn::api::docking::ConfigRange* GetDockingConfigResponse::_internal_add_dock_configs() {
  return _impl_.dock_configs_.Add();
}
inline ::bosdyn::api::docking::ConfigRange* GetDockingConfigResponse::add_dock_configs() {
  ::bosdyn::api::docking::ConfigRange* _add = _internal_add_dock_configs();
  // @@protoc_insertion_point(field_add:bosdyn.api.docking.GetDockingConfigResponse.dock_configs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::docking::ConfigRange >&
GetDockingConfigResponse::dock_configs() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.docking.GetDockingConfigResponse.dock_configs)
  return _impl_.dock_configs_;
}

// -------------------------------------------------------------------

// DockState

// .bosdyn.api.docking.DockState.DockedStatus status = 1;
inline void DockState::clear_status() {
  _impl_.status_ = 0;
}
inline ::bosdyn::api::docking::DockState_DockedStatus DockState::_internal_status() const {
  return static_cast< ::bosdyn::api::docking::DockState_DockedStatus >(_impl_.status_);
}
inline ::bosdyn::api::docking::DockState_DockedStatus DockState::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.docking.DockState.status)
  return _internal_status();
}
inline void DockState::_internal_set_status(::bosdyn::api::docking::DockState_DockedStatus value) {
  
  _impl_.status_ = value;
}
inline void DockState::set_status(::bosdyn::api::docking::DockState_DockedStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.docking.DockState.status)
}

// .bosdyn.api.docking.DockType dock_type = 2;
inline void DockState::clear_dock_type() {
  _impl_.dock_type_ = 0;
}
inline ::bosdyn::api::docking::DockType DockState::_internal_dock_type() const {
  return static_cast< ::bosdyn::api::docking::DockType >(_impl_.dock_type_);
}
inline ::bosdyn::api::docking::DockType DockState::dock_type() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.docking.DockState.dock_type)
  return _internal_dock_type();
}
inline void DockState::_internal_set_dock_type(::bosdyn::api::docking::DockType value) {
  
  _impl_.dock_type_ = value;
}
inline void DockState::set_dock_type(::bosdyn::api::docking::DockType value) {
  _internal_set_dock_type(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.docking.DockState.dock_type)
}

// uint32 dock_id = 3;
inline void DockState::clear_dock_id() {
  _impl_.dock_id_ = 0u;
}
inline uint32_t DockState::_internal_dock_id() const {
  return _impl_.dock_id_;
}
inline uint32_t DockState::dock_id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.docking.DockState.dock_id)
  return _internal_dock_id();
}
inline void DockState::_internal_set_dock_id(uint32_t value) {
  
  _impl_.dock_id_ = value;
}
inline void DockState::set_dock_id(uint32_t value) {
  _internal_set_dock_id(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.docking.DockState.dock_id)
}

// .bosdyn.api.docking.DockState.LinkStatus power_status = 4;
inline void DockState::clear_power_status() {
  _impl_.power_status_ = 0;
}
inline ::bosdyn::api::docking::DockState_LinkStatus DockState::_internal_power_status() const {
  return static_cast< ::bosdyn::api::docking::DockState_LinkStatus >(_impl_.power_status_);
}
inline ::bosdyn::api::docking::DockState_LinkStatus DockState::power_status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.docking.DockState.power_status)
  return _internal_power_status();
}
inline void DockState::_internal_set_power_status(::bosdyn::api::docking::DockState_LinkStatus value) {
  
  _impl_.power_status_ = value;
}
inline void DockState::set_power_status(::bosdyn::api::docking::DockState_LinkStatus value) {
  _internal_set_power_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.docking.DockState.power_status)
}

// -------------------------------------------------------------------

// GetDockingStateRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool GetDockingStateRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool GetDockingStateRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& GetDockingStateRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RequestHeader&>(
      ::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& GetDockingStateRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.docking.GetDockingStateRequest.header)
  return _internal_header();
}
inline void GetDockingStateRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.docking.GetDockingStateRequest.header)
}
inline ::bosdyn::api::RequestHeader* GetDockingStateRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetDockingStateRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.docking.GetDockingStateRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetDockingStateRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::RequestHeader* GetDockingStateRequest::mutable_header() {
  ::bosdyn::api::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.docking.GetDockingStateRequest.header)
  return _msg;
}
inline void GetDockingStateRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.docking.GetDockingStateRequest.header)
}

// -------------------------------------------------------------------

// GetDockingStateResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool GetDockingStateResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool GetDockingStateResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& GetDockingStateResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ResponseHeader&>(
      ::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& GetDockingStateResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.docking.GetDockingStateResponse.header)
  return _internal_header();
}
inline void GetDockingStateResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.docking.GetDockingStateResponse.header)
}
inline ::bosdyn::api::ResponseHeader* GetDockingStateResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetDockingStateResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.docking.GetDockingStateResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetDockingStateResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::ResponseHeader* GetDockingStateResponse::mutable_header() {
  ::bosdyn::api::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.docking.GetDockingStateResponse.header)
  return _msg;
}
inline void GetDockingStateResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.docking.GetDockingStateResponse.header)
}

// .bosdyn.api.docking.DockState dock_state = 2;
inline bool GetDockingStateResponse::_internal_has_dock_state() const {
  return this != internal_default_instance() && _impl_.dock_state_ != nullptr;
}
inline bool GetDockingStateResponse::has_dock_state() const {
  return _internal_has_dock_state();
}
inline void GetDockingStateResponse::clear_dock_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.dock_state_ != nullptr) {
    delete _impl_.dock_state_;
  }
  _impl_.dock_state_ = nullptr;
}
inline const ::bosdyn::api::docking::DockState& GetDockingStateResponse::_internal_dock_state() const {
  const ::bosdyn::api::docking::DockState* p = _impl_.dock_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::docking::DockState&>(
      ::bosdyn::api::docking::_DockState_default_instance_);
}
inline const ::bosdyn::api::docking::DockState& GetDockingStateResponse::dock_state() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.docking.GetDockingStateResponse.dock_state)
  return _internal_dock_state();
}
inline void GetDockingStateResponse::unsafe_arena_set_allocated_dock_state(
    ::bosdyn::api::docking::DockState* dock_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dock_state_);
  }
  _impl_.dock_state_ = dock_state;
  if (dock_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.docking.GetDockingStateResponse.dock_state)
}
inline ::bosdyn::api::docking::DockState* GetDockingStateResponse::release_dock_state() {
  
  ::bosdyn::api::docking::DockState* temp = _impl_.dock_state_;
  _impl_.dock_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::docking::DockState* GetDockingStateResponse::unsafe_arena_release_dock_state() {
  // @@protoc_insertion_point(field_release:bosdyn.api.docking.GetDockingStateResponse.dock_state)
  
  ::bosdyn::api::docking::DockState* temp = _impl_.dock_state_;
  _impl_.dock_state_ = nullptr;
  return temp;
}
inline ::bosdyn::api::docking::DockState* GetDockingStateResponse::_internal_mutable_dock_state() {
  
  if (_impl_.dock_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::docking::DockState>(GetArenaForAllocation());
    _impl_.dock_state_ = p;
  }
  return _impl_.dock_state_;
}
inline ::bosdyn::api::docking::DockState* GetDockingStateResponse::mutable_dock_state() {
  ::bosdyn::api::docking::DockState* _msg = _internal_mutable_dock_state();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.docking.GetDockingStateResponse.dock_state)
  return _msg;
}
inline void GetDockingStateResponse::set_allocated_dock_state(::bosdyn::api::docking::DockState* dock_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dock_state_;
  }
  if (dock_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dock_state);
    if (message_arena != submessage_arena) {
      dock_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dock_state, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dock_state_ = dock_state;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.docking.GetDockingStateResponse.dock_state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace docking
}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::docking::DockingCommandResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::docking::DockingCommandResponse_Status>() {
  return ::bosdyn::api::docking::DockingCommandResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::docking::DockingCommandFeedbackResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::docking::DockingCommandFeedbackResponse_Status>() {
  return ::bosdyn::api::docking::DockingCommandFeedbackResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::docking::DockState_DockedStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::docking::DockState_DockedStatus>() {
  return ::bosdyn::api::docking::DockState_DockedStatus_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::docking::DockState_LinkStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::docking::DockState_LinkStatus>() {
  return ::bosdyn::api::docking::DockState_LinkStatus_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::docking::DockType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::docking::DockType>() {
  return ::bosdyn::api::docking::DockType_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::docking::PrepPoseBehavior> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::docking::PrepPoseBehavior>() {
  return ::bosdyn::api::docking::PrepPoseBehavior_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fdocking_2fdocking_2eproto

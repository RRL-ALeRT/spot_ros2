// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bosdyn/api/robot_command_service.proto
// Original file comments:
// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).
//
#ifndef GRPC_bosdyn_2fapi_2frobot_5fcommand_5fservice_2eproto__INCLUDED
#define GRPC_bosdyn_2fapi_2frobot_5fcommand_5fservice_2eproto__INCLUDED

#include "bosdyn/api/robot_command_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace bosdyn {
namespace api {

// The robot command service allows a client application to control and move the robot.
class RobotCommandService final {
 public:
  static constexpr char const* service_full_name() {
    return "bosdyn.api.RobotCommandService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Starts a behavior command on the robot. Issuing a new command overrides the active command.
    // Each command is issued a UID for feedback retrieval.
    virtual ::grpc::Status RobotCommand(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandRequest& request, ::bosdyn::api::RobotCommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RobotCommandResponse>> AsyncRobotCommand(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RobotCommandResponse>>(AsyncRobotCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RobotCommandResponse>> PrepareAsyncRobotCommand(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RobotCommandResponse>>(PrepareAsyncRobotCommandRaw(context, request, cq));
    }
    // A client queries this RPC to determine a robot's progress towards completion of a command.
    // This updates the client with metrics like "distance to goal."
    // The client should use this feedback to determine whether the current command has
    // succeeeded or failed, and thus send the next command.
    virtual ::grpc::Status RobotCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandFeedbackRequest& request, ::bosdyn::api::RobotCommandFeedbackResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RobotCommandFeedbackResponse>> AsyncRobotCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RobotCommandFeedbackResponse>>(AsyncRobotCommandFeedbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RobotCommandFeedbackResponse>> PrepareAsyncRobotCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RobotCommandFeedbackResponse>>(PrepareAsyncRobotCommandFeedbackRaw(context, request, cq));
    }
    // Clear robot behavior fault.
    virtual ::grpc::Status ClearBehaviorFault(::grpc::ClientContext* context, const ::bosdyn::api::ClearBehaviorFaultRequest& request, ::bosdyn::api::ClearBehaviorFaultResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::ClearBehaviorFaultResponse>> AsyncClearBehaviorFault(::grpc::ClientContext* context, const ::bosdyn::api::ClearBehaviorFaultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::ClearBehaviorFaultResponse>>(AsyncClearBehaviorFaultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::ClearBehaviorFaultResponse>> PrepareAsyncClearBehaviorFault(::grpc::ClientContext* context, const ::bosdyn::api::ClearBehaviorFaultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::ClearBehaviorFaultResponse>>(PrepareAsyncClearBehaviorFaultRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Starts a behavior command on the robot. Issuing a new command overrides the active command.
      // Each command is issued a UID for feedback retrieval.
      virtual void RobotCommand(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandRequest* request, ::bosdyn::api::RobotCommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RobotCommand(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandRequest* request, ::bosdyn::api::RobotCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // A client queries this RPC to determine a robot's progress towards completion of a command.
      // This updates the client with metrics like "distance to goal."
      // The client should use this feedback to determine whether the current command has
      // succeeeded or failed, and thus send the next command.
      virtual void RobotCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandFeedbackRequest* request, ::bosdyn::api::RobotCommandFeedbackResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RobotCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandFeedbackRequest* request, ::bosdyn::api::RobotCommandFeedbackResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Clear robot behavior fault.
      virtual void ClearBehaviorFault(::grpc::ClientContext* context, const ::bosdyn::api::ClearBehaviorFaultRequest* request, ::bosdyn::api::ClearBehaviorFaultResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ClearBehaviorFault(::grpc::ClientContext* context, const ::bosdyn::api::ClearBehaviorFaultRequest* request, ::bosdyn::api::ClearBehaviorFaultResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RobotCommandResponse>* AsyncRobotCommandRaw(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RobotCommandResponse>* PrepareAsyncRobotCommandRaw(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RobotCommandFeedbackResponse>* AsyncRobotCommandFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RobotCommandFeedbackResponse>* PrepareAsyncRobotCommandFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::ClearBehaviorFaultResponse>* AsyncClearBehaviorFaultRaw(::grpc::ClientContext* context, const ::bosdyn::api::ClearBehaviorFaultRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::ClearBehaviorFaultResponse>* PrepareAsyncClearBehaviorFaultRaw(::grpc::ClientContext* context, const ::bosdyn::api::ClearBehaviorFaultRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status RobotCommand(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandRequest& request, ::bosdyn::api::RobotCommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RobotCommandResponse>> AsyncRobotCommand(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RobotCommandResponse>>(AsyncRobotCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RobotCommandResponse>> PrepareAsyncRobotCommand(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RobotCommandResponse>>(PrepareAsyncRobotCommandRaw(context, request, cq));
    }
    ::grpc::Status RobotCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandFeedbackRequest& request, ::bosdyn::api::RobotCommandFeedbackResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RobotCommandFeedbackResponse>> AsyncRobotCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RobotCommandFeedbackResponse>>(AsyncRobotCommandFeedbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RobotCommandFeedbackResponse>> PrepareAsyncRobotCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RobotCommandFeedbackResponse>>(PrepareAsyncRobotCommandFeedbackRaw(context, request, cq));
    }
    ::grpc::Status ClearBehaviorFault(::grpc::ClientContext* context, const ::bosdyn::api::ClearBehaviorFaultRequest& request, ::bosdyn::api::ClearBehaviorFaultResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::ClearBehaviorFaultResponse>> AsyncClearBehaviorFault(::grpc::ClientContext* context, const ::bosdyn::api::ClearBehaviorFaultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::ClearBehaviorFaultResponse>>(AsyncClearBehaviorFaultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::ClearBehaviorFaultResponse>> PrepareAsyncClearBehaviorFault(::grpc::ClientContext* context, const ::bosdyn::api::ClearBehaviorFaultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::ClearBehaviorFaultResponse>>(PrepareAsyncClearBehaviorFaultRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RobotCommand(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandRequest* request, ::bosdyn::api::RobotCommandResponse* response, std::function<void(::grpc::Status)>) override;
      void RobotCommand(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandRequest* request, ::bosdyn::api::RobotCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RobotCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandFeedbackRequest* request, ::bosdyn::api::RobotCommandFeedbackResponse* response, std::function<void(::grpc::Status)>) override;
      void RobotCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandFeedbackRequest* request, ::bosdyn::api::RobotCommandFeedbackResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ClearBehaviorFault(::grpc::ClientContext* context, const ::bosdyn::api::ClearBehaviorFaultRequest* request, ::bosdyn::api::ClearBehaviorFaultResponse* response, std::function<void(::grpc::Status)>) override;
      void ClearBehaviorFault(::grpc::ClientContext* context, const ::bosdyn::api::ClearBehaviorFaultRequest* request, ::bosdyn::api::ClearBehaviorFaultResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RobotCommandResponse>* AsyncRobotCommandRaw(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RobotCommandResponse>* PrepareAsyncRobotCommandRaw(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RobotCommandFeedbackResponse>* AsyncRobotCommandFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RobotCommandFeedbackResponse>* PrepareAsyncRobotCommandFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::ClearBehaviorFaultResponse>* AsyncClearBehaviorFaultRaw(::grpc::ClientContext* context, const ::bosdyn::api::ClearBehaviorFaultRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::ClearBehaviorFaultResponse>* PrepareAsyncClearBehaviorFaultRaw(::grpc::ClientContext* context, const ::bosdyn::api::ClearBehaviorFaultRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RobotCommand_;
    const ::grpc::internal::RpcMethod rpcmethod_RobotCommandFeedback_;
    const ::grpc::internal::RpcMethod rpcmethod_ClearBehaviorFault_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Starts a behavior command on the robot. Issuing a new command overrides the active command.
    // Each command is issued a UID for feedback retrieval.
    virtual ::grpc::Status RobotCommand(::grpc::ServerContext* context, const ::bosdyn::api::RobotCommandRequest* request, ::bosdyn::api::RobotCommandResponse* response);
    // A client queries this RPC to determine a robot's progress towards completion of a command.
    // This updates the client with metrics like "distance to goal."
    // The client should use this feedback to determine whether the current command has
    // succeeeded or failed, and thus send the next command.
    virtual ::grpc::Status RobotCommandFeedback(::grpc::ServerContext* context, const ::bosdyn::api::RobotCommandFeedbackRequest* request, ::bosdyn::api::RobotCommandFeedbackResponse* response);
    // Clear robot behavior fault.
    virtual ::grpc::Status ClearBehaviorFault(::grpc::ServerContext* context, const ::bosdyn::api::ClearBehaviorFaultRequest* request, ::bosdyn::api::ClearBehaviorFaultResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RobotCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RobotCommand() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RobotCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RobotCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RobotCommandRequest* /*request*/, ::bosdyn::api::RobotCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRobotCommand(::grpc::ServerContext* context, ::bosdyn::api::RobotCommandRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::RobotCommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RobotCommandFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RobotCommandFeedback() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RobotCommandFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RobotCommandFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RobotCommandFeedbackRequest* /*request*/, ::bosdyn::api::RobotCommandFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRobotCommandFeedback(::grpc::ServerContext* context, ::bosdyn::api::RobotCommandFeedbackRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::RobotCommandFeedbackResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ClearBehaviorFault : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ClearBehaviorFault() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ClearBehaviorFault() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearBehaviorFault(::grpc::ServerContext* /*context*/, const ::bosdyn::api::ClearBehaviorFaultRequest* /*request*/, ::bosdyn::api::ClearBehaviorFaultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClearBehaviorFault(::grpc::ServerContext* context, ::bosdyn::api::ClearBehaviorFaultRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::ClearBehaviorFaultResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RobotCommand<WithAsyncMethod_RobotCommandFeedback<WithAsyncMethod_ClearBehaviorFault<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RobotCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RobotCommand() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::RobotCommandRequest, ::bosdyn::api::RobotCommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::RobotCommandRequest* request, ::bosdyn::api::RobotCommandResponse* response) { return this->RobotCommand(context, request, response); }));}
    void SetMessageAllocatorFor_RobotCommand(
        ::grpc::MessageAllocator< ::bosdyn::api::RobotCommandRequest, ::bosdyn::api::RobotCommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::RobotCommandRequest, ::bosdyn::api::RobotCommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RobotCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RobotCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RobotCommandRequest* /*request*/, ::bosdyn::api::RobotCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RobotCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::RobotCommandRequest* /*request*/, ::bosdyn::api::RobotCommandResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RobotCommandFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RobotCommandFeedback() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::RobotCommandFeedbackRequest, ::bosdyn::api::RobotCommandFeedbackResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::RobotCommandFeedbackRequest* request, ::bosdyn::api::RobotCommandFeedbackResponse* response) { return this->RobotCommandFeedback(context, request, response); }));}
    void SetMessageAllocatorFor_RobotCommandFeedback(
        ::grpc::MessageAllocator< ::bosdyn::api::RobotCommandFeedbackRequest, ::bosdyn::api::RobotCommandFeedbackResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::RobotCommandFeedbackRequest, ::bosdyn::api::RobotCommandFeedbackResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RobotCommandFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RobotCommandFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RobotCommandFeedbackRequest* /*request*/, ::bosdyn::api::RobotCommandFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RobotCommandFeedback(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::RobotCommandFeedbackRequest* /*request*/, ::bosdyn::api::RobotCommandFeedbackResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ClearBehaviorFault : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ClearBehaviorFault() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::ClearBehaviorFaultRequest, ::bosdyn::api::ClearBehaviorFaultResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::ClearBehaviorFaultRequest* request, ::bosdyn::api::ClearBehaviorFaultResponse* response) { return this->ClearBehaviorFault(context, request, response); }));}
    void SetMessageAllocatorFor_ClearBehaviorFault(
        ::grpc::MessageAllocator< ::bosdyn::api::ClearBehaviorFaultRequest, ::bosdyn::api::ClearBehaviorFaultResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::ClearBehaviorFaultRequest, ::bosdyn::api::ClearBehaviorFaultResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ClearBehaviorFault() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearBehaviorFault(::grpc::ServerContext* /*context*/, const ::bosdyn::api::ClearBehaviorFaultRequest* /*request*/, ::bosdyn::api::ClearBehaviorFaultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ClearBehaviorFault(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::ClearBehaviorFaultRequest* /*request*/, ::bosdyn::api::ClearBehaviorFaultResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_RobotCommand<WithCallbackMethod_RobotCommandFeedback<WithCallbackMethod_ClearBehaviorFault<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RobotCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RobotCommand() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RobotCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RobotCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RobotCommandRequest* /*request*/, ::bosdyn::api::RobotCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RobotCommandFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RobotCommandFeedback() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RobotCommandFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RobotCommandFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RobotCommandFeedbackRequest* /*request*/, ::bosdyn::api::RobotCommandFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ClearBehaviorFault : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ClearBehaviorFault() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ClearBehaviorFault() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearBehaviorFault(::grpc::ServerContext* /*context*/, const ::bosdyn::api::ClearBehaviorFaultRequest* /*request*/, ::bosdyn::api::ClearBehaviorFaultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RobotCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RobotCommand() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RobotCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RobotCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RobotCommandRequest* /*request*/, ::bosdyn::api::RobotCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRobotCommand(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RobotCommandFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RobotCommandFeedback() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RobotCommandFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RobotCommandFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RobotCommandFeedbackRequest* /*request*/, ::bosdyn::api::RobotCommandFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRobotCommandFeedback(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ClearBehaviorFault : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ClearBehaviorFault() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ClearBehaviorFault() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearBehaviorFault(::grpc::ServerContext* /*context*/, const ::bosdyn::api::ClearBehaviorFaultRequest* /*request*/, ::bosdyn::api::ClearBehaviorFaultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClearBehaviorFault(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RobotCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RobotCommand() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RobotCommand(context, request, response); }));
    }
    ~WithRawCallbackMethod_RobotCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RobotCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RobotCommandRequest* /*request*/, ::bosdyn::api::RobotCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RobotCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RobotCommandFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RobotCommandFeedback() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RobotCommandFeedback(context, request, response); }));
    }
    ~WithRawCallbackMethod_RobotCommandFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RobotCommandFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RobotCommandFeedbackRequest* /*request*/, ::bosdyn::api::RobotCommandFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RobotCommandFeedback(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ClearBehaviorFault : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ClearBehaviorFault() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ClearBehaviorFault(context, request, response); }));
    }
    ~WithRawCallbackMethod_ClearBehaviorFault() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearBehaviorFault(::grpc::ServerContext* /*context*/, const ::bosdyn::api::ClearBehaviorFaultRequest* /*request*/, ::bosdyn::api::ClearBehaviorFaultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ClearBehaviorFault(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RobotCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RobotCommand() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::RobotCommandRequest, ::bosdyn::api::RobotCommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::RobotCommandRequest, ::bosdyn::api::RobotCommandResponse>* streamer) {
                       return this->StreamedRobotCommand(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RobotCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RobotCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RobotCommandRequest* /*request*/, ::bosdyn::api::RobotCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRobotCommand(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::RobotCommandRequest,::bosdyn::api::RobotCommandResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RobotCommandFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RobotCommandFeedback() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::RobotCommandFeedbackRequest, ::bosdyn::api::RobotCommandFeedbackResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::RobotCommandFeedbackRequest, ::bosdyn::api::RobotCommandFeedbackResponse>* streamer) {
                       return this->StreamedRobotCommandFeedback(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RobotCommandFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RobotCommandFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RobotCommandFeedbackRequest* /*request*/, ::bosdyn::api::RobotCommandFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRobotCommandFeedback(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::RobotCommandFeedbackRequest,::bosdyn::api::RobotCommandFeedbackResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ClearBehaviorFault : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ClearBehaviorFault() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::ClearBehaviorFaultRequest, ::bosdyn::api::ClearBehaviorFaultResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::ClearBehaviorFaultRequest, ::bosdyn::api::ClearBehaviorFaultResponse>* streamer) {
                       return this->StreamedClearBehaviorFault(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ClearBehaviorFault() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ClearBehaviorFault(::grpc::ServerContext* /*context*/, const ::bosdyn::api::ClearBehaviorFaultRequest* /*request*/, ::bosdyn::api::ClearBehaviorFaultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClearBehaviorFault(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::ClearBehaviorFaultRequest,::bosdyn::api::ClearBehaviorFaultResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RobotCommand<WithStreamedUnaryMethod_RobotCommandFeedback<WithStreamedUnaryMethod_ClearBehaviorFault<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RobotCommand<WithStreamedUnaryMethod_RobotCommandFeedback<WithStreamedUnaryMethod_ClearBehaviorFault<Service > > > StreamedService;
};

}  // namespace api
}  // namespace bosdyn


#endif  // GRPC_bosdyn_2fapi_2frobot_5fcommand_5fservice_2eproto__INCLUDED

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bosdyn/api/graph_nav/map_processing_service.proto
// Original file comments:
// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).
//
#ifndef GRPC_bosdyn_2fapi_2fgraph_5fnav_2fmap_5fprocessing_5fservice_2eproto__INCLUDED
#define GRPC_bosdyn_2fapi_2fgraph_5fnav_2fmap_5fprocessing_5fservice_2eproto__INCLUDED

#include "bosdyn/api/graph_nav/map_processing_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace bosdyn {
namespace api {
namespace graph_nav {

// Defines services for processing an existing GraphNav map.
class MapProcessingService final {
 public:
  static constexpr char const* service_full_name() {
    return "bosdyn.api.graph_nav.MapProcessingService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Processes a GraphNav map by creating additional edges or waypoints. After processing,
    // a new subgraph is created containing additional waypoints or edges to add to the map.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::bosdyn::api::graph_nav::ProcessTopologyResponse>> ProcessTopology(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ProcessTopologyRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::bosdyn::api::graph_nav::ProcessTopologyResponse>>(ProcessTopologyRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::bosdyn::api::graph_nav::ProcessTopologyResponse>> AsyncProcessTopology(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ProcessTopologyRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::bosdyn::api::graph_nav::ProcessTopologyResponse>>(AsyncProcessTopologyRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::bosdyn::api::graph_nav::ProcessTopologyResponse>> PrepareAsyncProcessTopology(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ProcessTopologyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::bosdyn::api::graph_nav::ProcessTopologyResponse>>(PrepareAsyncProcessTopologyRaw(context, request, cq));
    }
    // Processes a GraphNav map by modifying the anchoring of waypoints and world objects in the map
    // with respect to a seed frame. After processing, a new anchoring is streamed back.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::bosdyn::api::graph_nav::ProcessAnchoringResponse>> ProcessAnchoring(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ProcessAnchoringRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::bosdyn::api::graph_nav::ProcessAnchoringResponse>>(ProcessAnchoringRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::bosdyn::api::graph_nav::ProcessAnchoringResponse>> AsyncProcessAnchoring(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ProcessAnchoringRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::bosdyn::api::graph_nav::ProcessAnchoringResponse>>(AsyncProcessAnchoringRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::bosdyn::api::graph_nav::ProcessAnchoringResponse>> PrepareAsyncProcessAnchoring(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ProcessAnchoringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::bosdyn::api::graph_nav::ProcessAnchoringResponse>>(PrepareAsyncProcessAnchoringRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Processes a GraphNav map by creating additional edges or waypoints. After processing,
      // a new subgraph is created containing additional waypoints or edges to add to the map.
      virtual void ProcessTopology(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ProcessTopologyRequest* request, ::grpc::ClientReadReactor< ::bosdyn::api::graph_nav::ProcessTopologyResponse>* reactor) = 0;
      // Processes a GraphNav map by modifying the anchoring of waypoints and world objects in the map
      // with respect to a seed frame. After processing, a new anchoring is streamed back.
      virtual void ProcessAnchoring(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ProcessAnchoringRequest* request, ::grpc::ClientReadReactor< ::bosdyn::api::graph_nav::ProcessAnchoringResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::bosdyn::api::graph_nav::ProcessTopologyResponse>* ProcessTopologyRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ProcessTopologyRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::bosdyn::api::graph_nav::ProcessTopologyResponse>* AsyncProcessTopologyRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ProcessTopologyRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::bosdyn::api::graph_nav::ProcessTopologyResponse>* PrepareAsyncProcessTopologyRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ProcessTopologyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::bosdyn::api::graph_nav::ProcessAnchoringResponse>* ProcessAnchoringRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ProcessAnchoringRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::bosdyn::api::graph_nav::ProcessAnchoringResponse>* AsyncProcessAnchoringRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ProcessAnchoringRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::bosdyn::api::graph_nav::ProcessAnchoringResponse>* PrepareAsyncProcessAnchoringRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ProcessAnchoringRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::bosdyn::api::graph_nav::ProcessTopologyResponse>> ProcessTopology(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ProcessTopologyRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::bosdyn::api::graph_nav::ProcessTopologyResponse>>(ProcessTopologyRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::bosdyn::api::graph_nav::ProcessTopologyResponse>> AsyncProcessTopology(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ProcessTopologyRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::bosdyn::api::graph_nav::ProcessTopologyResponse>>(AsyncProcessTopologyRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::bosdyn::api::graph_nav::ProcessTopologyResponse>> PrepareAsyncProcessTopology(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ProcessTopologyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::bosdyn::api::graph_nav::ProcessTopologyResponse>>(PrepareAsyncProcessTopologyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::bosdyn::api::graph_nav::ProcessAnchoringResponse>> ProcessAnchoring(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ProcessAnchoringRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::bosdyn::api::graph_nav::ProcessAnchoringResponse>>(ProcessAnchoringRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::bosdyn::api::graph_nav::ProcessAnchoringResponse>> AsyncProcessAnchoring(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ProcessAnchoringRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::bosdyn::api::graph_nav::ProcessAnchoringResponse>>(AsyncProcessAnchoringRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::bosdyn::api::graph_nav::ProcessAnchoringResponse>> PrepareAsyncProcessAnchoring(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ProcessAnchoringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::bosdyn::api::graph_nav::ProcessAnchoringResponse>>(PrepareAsyncProcessAnchoringRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ProcessTopology(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ProcessTopologyRequest* request, ::grpc::ClientReadReactor< ::bosdyn::api::graph_nav::ProcessTopologyResponse>* reactor) override;
      void ProcessAnchoring(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ProcessAnchoringRequest* request, ::grpc::ClientReadReactor< ::bosdyn::api::graph_nav::ProcessAnchoringResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::bosdyn::api::graph_nav::ProcessTopologyResponse>* ProcessTopologyRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ProcessTopologyRequest& request) override;
    ::grpc::ClientAsyncReader< ::bosdyn::api::graph_nav::ProcessTopologyResponse>* AsyncProcessTopologyRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ProcessTopologyRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::bosdyn::api::graph_nav::ProcessTopologyResponse>* PrepareAsyncProcessTopologyRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ProcessTopologyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::bosdyn::api::graph_nav::ProcessAnchoringResponse>* ProcessAnchoringRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ProcessAnchoringRequest& request) override;
    ::grpc::ClientAsyncReader< ::bosdyn::api::graph_nav::ProcessAnchoringResponse>* AsyncProcessAnchoringRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ProcessAnchoringRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::bosdyn::api::graph_nav::ProcessAnchoringResponse>* PrepareAsyncProcessAnchoringRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ProcessAnchoringRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ProcessTopology_;
    const ::grpc::internal::RpcMethod rpcmethod_ProcessAnchoring_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Processes a GraphNav map by creating additional edges or waypoints. After processing,
    // a new subgraph is created containing additional waypoints or edges to add to the map.
    virtual ::grpc::Status ProcessTopology(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::ProcessTopologyRequest* request, ::grpc::ServerWriter< ::bosdyn::api::graph_nav::ProcessTopologyResponse>* writer);
    // Processes a GraphNav map by modifying the anchoring of waypoints and world objects in the map
    // with respect to a seed frame. After processing, a new anchoring is streamed back.
    virtual ::grpc::Status ProcessAnchoring(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::ProcessAnchoringRequest* request, ::grpc::ServerWriter< ::bosdyn::api::graph_nav::ProcessAnchoringResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_ProcessTopology : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ProcessTopology() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ProcessTopology() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessTopology(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::ProcessTopologyRequest* /*request*/, ::grpc::ServerWriter< ::bosdyn::api::graph_nav::ProcessTopologyResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessTopology(::grpc::ServerContext* context, ::bosdyn::api::graph_nav::ProcessTopologyRequest* request, ::grpc::ServerAsyncWriter< ::bosdyn::api::graph_nav::ProcessTopologyResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ProcessAnchoring : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ProcessAnchoring() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ProcessAnchoring() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessAnchoring(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::ProcessAnchoringRequest* /*request*/, ::grpc::ServerWriter< ::bosdyn::api::graph_nav::ProcessAnchoringResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessAnchoring(::grpc::ServerContext* context, ::bosdyn::api::graph_nav::ProcessAnchoringRequest* request, ::grpc::ServerAsyncWriter< ::bosdyn::api::graph_nav::ProcessAnchoringResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ProcessTopology<WithAsyncMethod_ProcessAnchoring<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ProcessTopology : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ProcessTopology() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::bosdyn::api::graph_nav::ProcessTopologyRequest, ::bosdyn::api::graph_nav::ProcessTopologyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::graph_nav::ProcessTopologyRequest* request) { return this->ProcessTopology(context, request); }));
    }
    ~WithCallbackMethod_ProcessTopology() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessTopology(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::ProcessTopologyRequest* /*request*/, ::grpc::ServerWriter< ::bosdyn::api::graph_nav::ProcessTopologyResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::bosdyn::api::graph_nav::ProcessTopologyResponse>* ProcessTopology(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::ProcessTopologyRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ProcessAnchoring : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ProcessAnchoring() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::bosdyn::api::graph_nav::ProcessAnchoringRequest, ::bosdyn::api::graph_nav::ProcessAnchoringResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::graph_nav::ProcessAnchoringRequest* request) { return this->ProcessAnchoring(context, request); }));
    }
    ~WithCallbackMethod_ProcessAnchoring() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessAnchoring(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::ProcessAnchoringRequest* /*request*/, ::grpc::ServerWriter< ::bosdyn::api::graph_nav::ProcessAnchoringResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::bosdyn::api::graph_nav::ProcessAnchoringResponse>* ProcessAnchoring(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::ProcessAnchoringRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ProcessTopology<WithCallbackMethod_ProcessAnchoring<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ProcessTopology : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ProcessTopology() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ProcessTopology() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessTopology(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::ProcessTopologyRequest* /*request*/, ::grpc::ServerWriter< ::bosdyn::api::graph_nav::ProcessTopologyResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ProcessAnchoring : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ProcessAnchoring() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ProcessAnchoring() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessAnchoring(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::ProcessAnchoringRequest* /*request*/, ::grpc::ServerWriter< ::bosdyn::api::graph_nav::ProcessAnchoringResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ProcessTopology : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ProcessTopology() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ProcessTopology() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessTopology(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::ProcessTopologyRequest* /*request*/, ::grpc::ServerWriter< ::bosdyn::api::graph_nav::ProcessTopologyResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessTopology(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ProcessAnchoring : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ProcessAnchoring() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ProcessAnchoring() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessAnchoring(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::ProcessAnchoringRequest* /*request*/, ::grpc::ServerWriter< ::bosdyn::api::graph_nav::ProcessAnchoringResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessAnchoring(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ProcessTopology : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ProcessTopology() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ProcessTopology(context, request); }));
    }
    ~WithRawCallbackMethod_ProcessTopology() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessTopology(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::ProcessTopologyRequest* /*request*/, ::grpc::ServerWriter< ::bosdyn::api::graph_nav::ProcessTopologyResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ProcessTopology(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ProcessAnchoring : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ProcessAnchoring() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ProcessAnchoring(context, request); }));
    }
    ~WithRawCallbackMethod_ProcessAnchoring() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessAnchoring(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::ProcessAnchoringRequest* /*request*/, ::grpc::ServerWriter< ::bosdyn::api::graph_nav::ProcessAnchoringResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ProcessAnchoring(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ProcessTopology : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ProcessTopology() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::bosdyn::api::graph_nav::ProcessTopologyRequest, ::bosdyn::api::graph_nav::ProcessTopologyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::bosdyn::api::graph_nav::ProcessTopologyRequest, ::bosdyn::api::graph_nav::ProcessTopologyResponse>* streamer) {
                       return this->StreamedProcessTopology(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ProcessTopology() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ProcessTopology(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::ProcessTopologyRequest* /*request*/, ::grpc::ServerWriter< ::bosdyn::api::graph_nav::ProcessTopologyResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedProcessTopology(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::bosdyn::api::graph_nav::ProcessTopologyRequest,::bosdyn::api::graph_nav::ProcessTopologyResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_ProcessAnchoring : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ProcessAnchoring() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::bosdyn::api::graph_nav::ProcessAnchoringRequest, ::bosdyn::api::graph_nav::ProcessAnchoringResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::bosdyn::api::graph_nav::ProcessAnchoringRequest, ::bosdyn::api::graph_nav::ProcessAnchoringResponse>* streamer) {
                       return this->StreamedProcessAnchoring(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ProcessAnchoring() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ProcessAnchoring(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::ProcessAnchoringRequest* /*request*/, ::grpc::ServerWriter< ::bosdyn::api::graph_nav::ProcessAnchoringResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedProcessAnchoring(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::bosdyn::api::graph_nav::ProcessAnchoringRequest,::bosdyn::api::graph_nav::ProcessAnchoringResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ProcessTopology<WithSplitStreamingMethod_ProcessAnchoring<Service > > SplitStreamedService;
  typedef WithSplitStreamingMethod_ProcessTopology<WithSplitStreamingMethod_ProcessAnchoring<Service > > StreamedService;
};

}  // namespace graph_nav
}  // namespace api
}  // namespace bosdyn


#endif  // GRPC_bosdyn_2fapi_2fgraph_5fnav_2fmap_5fprocessing_5fservice_2eproto__INCLUDED

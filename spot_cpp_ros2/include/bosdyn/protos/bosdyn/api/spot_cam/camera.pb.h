// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/spot_cam/camera.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto;
namespace bosdyn {
namespace api {
namespace spot_cam {
class Camera;
struct CameraDefaultTypeInternal;
extern CameraDefaultTypeInternal _Camera_default_instance_;
class Camera_PinholeIntrinsics;
struct Camera_PinholeIntrinsicsDefaultTypeInternal;
extern Camera_PinholeIntrinsicsDefaultTypeInternal _Camera_PinholeIntrinsics_default_instance_;
class Camera_SphericalLimits;
struct Camera_SphericalLimitsDefaultTypeInternal;
extern Camera_SphericalLimitsDefaultTypeInternal _Camera_SphericalLimits_default_instance_;
}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::spot_cam::Camera* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::Camera>(Arena*);
template<> ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::Camera_PinholeIntrinsics>(Arena*);
template<> ::bosdyn::api::spot_cam::Camera_SphericalLimits* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::Camera_SphericalLimits>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {
namespace spot_cam {

// ===================================================================

class Camera_PinholeIntrinsics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.Camera.PinholeIntrinsics) */ {
 public:
  inline Camera_PinholeIntrinsics() : Camera_PinholeIntrinsics(nullptr) {}
  ~Camera_PinholeIntrinsics() override;
  explicit PROTOBUF_CONSTEXPR Camera_PinholeIntrinsics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Camera_PinholeIntrinsics(const Camera_PinholeIntrinsics& from);
  Camera_PinholeIntrinsics(Camera_PinholeIntrinsics&& from) noexcept
    : Camera_PinholeIntrinsics() {
    *this = ::std::move(from);
  }

  inline Camera_PinholeIntrinsics& operator=(const Camera_PinholeIntrinsics& from) {
    CopyFrom(from);
    return *this;
  }
  inline Camera_PinholeIntrinsics& operator=(Camera_PinholeIntrinsics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Camera_PinholeIntrinsics& default_instance() {
    return *internal_default_instance();
  }
  static inline const Camera_PinholeIntrinsics* internal_default_instance() {
    return reinterpret_cast<const Camera_PinholeIntrinsics*>(
               &_Camera_PinholeIntrinsics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Camera_PinholeIntrinsics& a, Camera_PinholeIntrinsics& b) {
    a.Swap(&b);
  }
  inline void Swap(Camera_PinholeIntrinsics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Camera_PinholeIntrinsics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Camera_PinholeIntrinsics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Camera_PinholeIntrinsics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Camera_PinholeIntrinsics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Camera_PinholeIntrinsics& from) {
    Camera_PinholeIntrinsics::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Camera_PinholeIntrinsics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.Camera.PinholeIntrinsics";
  }
  protected:
  explicit Camera_PinholeIntrinsics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFocalLengthFieldNumber = 1,
    kCenterPointFieldNumber = 2,
    kK1FieldNumber = 3,
    kK2FieldNumber = 4,
    kK3FieldNumber = 5,
    kK4FieldNumber = 6,
  };
  // .bosdyn.api.Vec2 focal_length = 1;
  bool has_focal_length() const;
  private:
  bool _internal_has_focal_length() const;
  public:
  void clear_focal_length();
  const ::bosdyn::api::Vec2& focal_length() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec2* release_focal_length();
  ::bosdyn::api::Vec2* mutable_focal_length();
  void set_allocated_focal_length(::bosdyn::api::Vec2* focal_length);
  private:
  const ::bosdyn::api::Vec2& _internal_focal_length() const;
  ::bosdyn::api::Vec2* _internal_mutable_focal_length();
  public:
  void unsafe_arena_set_allocated_focal_length(
      ::bosdyn::api::Vec2* focal_length);
  ::bosdyn::api::Vec2* unsafe_arena_release_focal_length();

  // .bosdyn.api.Vec2 center_point = 2;
  bool has_center_point() const;
  private:
  bool _internal_has_center_point() const;
  public:
  void clear_center_point();
  const ::bosdyn::api::Vec2& center_point() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec2* release_center_point();
  ::bosdyn::api::Vec2* mutable_center_point();
  void set_allocated_center_point(::bosdyn::api::Vec2* center_point);
  private:
  const ::bosdyn::api::Vec2& _internal_center_point() const;
  ::bosdyn::api::Vec2* _internal_mutable_center_point();
  public:
  void unsafe_arena_set_allocated_center_point(
      ::bosdyn::api::Vec2* center_point);
  ::bosdyn::api::Vec2* unsafe_arena_release_center_point();

  // float k1 = 3;
  void clear_k1();
  float k1() const;
  void set_k1(float value);
  private:
  float _internal_k1() const;
  void _internal_set_k1(float value);
  public:

  // float k2 = 4;
  void clear_k2();
  float k2() const;
  void set_k2(float value);
  private:
  float _internal_k2() const;
  void _internal_set_k2(float value);
  public:

  // float k3 = 5;
  void clear_k3();
  float k3() const;
  void set_k3(float value);
  private:
  float _internal_k3() const;
  void _internal_set_k3(float value);
  public:

  // float k4 = 6;
  void clear_k4();
  float k4() const;
  void set_k4(float value);
  private:
  float _internal_k4() const;
  void _internal_set_k4(float value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.Camera.PinholeIntrinsics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::Vec2* focal_length_;
    ::bosdyn::api::Vec2* center_point_;
    float k1_;
    float k2_;
    float k3_;
    float k4_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class Camera_SphericalLimits final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.Camera.SphericalLimits) */ {
 public:
  inline Camera_SphericalLimits() : Camera_SphericalLimits(nullptr) {}
  ~Camera_SphericalLimits() override;
  explicit PROTOBUF_CONSTEXPR Camera_SphericalLimits(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Camera_SphericalLimits(const Camera_SphericalLimits& from);
  Camera_SphericalLimits(Camera_SphericalLimits&& from) noexcept
    : Camera_SphericalLimits() {
    *this = ::std::move(from);
  }

  inline Camera_SphericalLimits& operator=(const Camera_SphericalLimits& from) {
    CopyFrom(from);
    return *this;
  }
  inline Camera_SphericalLimits& operator=(Camera_SphericalLimits&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Camera_SphericalLimits& default_instance() {
    return *internal_default_instance();
  }
  static inline const Camera_SphericalLimits* internal_default_instance() {
    return reinterpret_cast<const Camera_SphericalLimits*>(
               &_Camera_SphericalLimits_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Camera_SphericalLimits& a, Camera_SphericalLimits& b) {
    a.Swap(&b);
  }
  inline void Swap(Camera_SphericalLimits* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Camera_SphericalLimits* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Camera_SphericalLimits* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Camera_SphericalLimits>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Camera_SphericalLimits& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Camera_SphericalLimits& from) {
    Camera_SphericalLimits::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Camera_SphericalLimits* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.Camera.SphericalLimits";
  }
  protected:
  explicit Camera_SphericalLimits(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinAngleFieldNumber = 1,
    kMaxAngleFieldNumber = 2,
  };
  // .bosdyn.api.Vec2 min_angle = 1;
  bool has_min_angle() const;
  private:
  bool _internal_has_min_angle() const;
  public:
  void clear_min_angle();
  const ::bosdyn::api::Vec2& min_angle() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec2* release_min_angle();
  ::bosdyn::api::Vec2* mutable_min_angle();
  void set_allocated_min_angle(::bosdyn::api::Vec2* min_angle);
  private:
  const ::bosdyn::api::Vec2& _internal_min_angle() const;
  ::bosdyn::api::Vec2* _internal_mutable_min_angle();
  public:
  void unsafe_arena_set_allocated_min_angle(
      ::bosdyn::api::Vec2* min_angle);
  ::bosdyn::api::Vec2* unsafe_arena_release_min_angle();

  // .bosdyn.api.Vec2 max_angle = 2;
  bool has_max_angle() const;
  private:
  bool _internal_has_max_angle() const;
  public:
  void clear_max_angle();
  const ::bosdyn::api::Vec2& max_angle() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec2* release_max_angle();
  ::bosdyn::api::Vec2* mutable_max_angle();
  void set_allocated_max_angle(::bosdyn::api::Vec2* max_angle);
  private:
  const ::bosdyn::api::Vec2& _internal_max_angle() const;
  ::bosdyn::api::Vec2* _internal_mutable_max_angle();
  public:
  void unsafe_arena_set_allocated_max_angle(
      ::bosdyn::api::Vec2* max_angle);
  ::bosdyn::api::Vec2* unsafe_arena_release_max_angle();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.Camera.SphericalLimits)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::Vec2* min_angle_;
    ::bosdyn::api::Vec2* max_angle_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class Camera final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.Camera) */ {
 public:
  inline Camera() : Camera(nullptr) {}
  ~Camera() override;
  explicit PROTOBUF_CONSTEXPR Camera(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Camera(const Camera& from);
  Camera(Camera&& from) noexcept
    : Camera() {
    *this = ::std::move(from);
  }

  inline Camera& operator=(const Camera& from) {
    CopyFrom(from);
    return *this;
  }
  inline Camera& operator=(Camera&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Camera& default_instance() {
    return *internal_default_instance();
  }
  enum IntrinsicsCase {
    kPinhole = 5,
    kSpherical = 6,
    INTRINSICS_NOT_SET = 0,
  };

  static inline const Camera* internal_default_instance() {
    return reinterpret_cast<const Camera*>(
               &_Camera_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Camera& a, Camera& b) {
    a.Swap(&b);
  }
  inline void Swap(Camera* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Camera* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Camera* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Camera>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Camera& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Camera& from) {
    Camera::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Camera* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.Camera";
  }
  protected:
  explicit Camera(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Camera_PinholeIntrinsics PinholeIntrinsics;
  typedef Camera_SphericalLimits SphericalLimits;

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kBaseFrameNameFieldNumber = 3,
    kResolutionFieldNumber = 2,
    kBaseTfromSensorFieldNumber = 4,
    kBaseTformSensorFieldNumber = 7,
    kPinholeFieldNumber = 5,
    kSphericalFieldNumber = 6,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string base_frame_name = 3;
  void clear_base_frame_name();
  const std::string& base_frame_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_base_frame_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_base_frame_name();
  PROTOBUF_NODISCARD std::string* release_base_frame_name();
  void set_allocated_base_frame_name(std::string* base_frame_name);
  private:
  const std::string& _internal_base_frame_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base_frame_name(const std::string& value);
  std::string* _internal_mutable_base_frame_name();
  public:

  // .bosdyn.api.Vec2 resolution = 2;
  bool has_resolution() const;
  private:
  bool _internal_has_resolution() const;
  public:
  void clear_resolution();
  const ::bosdyn::api::Vec2& resolution() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec2* release_resolution();
  ::bosdyn::api::Vec2* mutable_resolution();
  void set_allocated_resolution(::bosdyn::api::Vec2* resolution);
  private:
  const ::bosdyn::api::Vec2& _internal_resolution() const;
  ::bosdyn::api::Vec2* _internal_mutable_resolution();
  public:
  void unsafe_arena_set_allocated_resolution(
      ::bosdyn::api::Vec2* resolution);
  ::bosdyn::api::Vec2* unsafe_arena_release_resolution();

  // .bosdyn.api.SE3Pose base_tfrom_sensor = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_base_tfrom_sensor() const;
  private:
  bool _internal_has_base_tfrom_sensor() const;
  public:
  PROTOBUF_DEPRECATED void clear_base_tfrom_sensor();
  PROTOBUF_DEPRECATED const ::bosdyn::api::SE3Pose& base_tfrom_sensor() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::bosdyn::api::SE3Pose* release_base_tfrom_sensor();
  PROTOBUF_DEPRECATED ::bosdyn::api::SE3Pose* mutable_base_tfrom_sensor();
  PROTOBUF_DEPRECATED void set_allocated_base_tfrom_sensor(::bosdyn::api::SE3Pose* base_tfrom_sensor);
  private:
  const ::bosdyn::api::SE3Pose& _internal_base_tfrom_sensor() const;
  ::bosdyn::api::SE3Pose* _internal_mutable_base_tfrom_sensor();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_base_tfrom_sensor(
      ::bosdyn::api::SE3Pose* base_tfrom_sensor);
  PROTOBUF_DEPRECATED ::bosdyn::api::SE3Pose* unsafe_arena_release_base_tfrom_sensor();

  // .bosdyn.api.SE3Pose base_tform_sensor = 7;
  bool has_base_tform_sensor() const;
  private:
  bool _internal_has_base_tform_sensor() const;
  public:
  void clear_base_tform_sensor();
  const ::bosdyn::api::SE3Pose& base_tform_sensor() const;
  PROTOBUF_NODISCARD ::bosdyn::api::SE3Pose* release_base_tform_sensor();
  ::bosdyn::api::SE3Pose* mutable_base_tform_sensor();
  void set_allocated_base_tform_sensor(::bosdyn::api::SE3Pose* base_tform_sensor);
  private:
  const ::bosdyn::api::SE3Pose& _internal_base_tform_sensor() const;
  ::bosdyn::api::SE3Pose* _internal_mutable_base_tform_sensor();
  public:
  void unsafe_arena_set_allocated_base_tform_sensor(
      ::bosdyn::api::SE3Pose* base_tform_sensor);
  ::bosdyn::api::SE3Pose* unsafe_arena_release_base_tform_sensor();

  // .bosdyn.api.spot_cam.Camera.PinholeIntrinsics pinhole = 5;
  bool has_pinhole() const;
  private:
  bool _internal_has_pinhole() const;
  public:
  void clear_pinhole();
  const ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics& pinhole() const;
  PROTOBUF_NODISCARD ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics* release_pinhole();
  ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics* mutable_pinhole();
  void set_allocated_pinhole(::bosdyn::api::spot_cam::Camera_PinholeIntrinsics* pinhole);
  private:
  const ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics& _internal_pinhole() const;
  ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics* _internal_mutable_pinhole();
  public:
  void unsafe_arena_set_allocated_pinhole(
      ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics* pinhole);
  ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics* unsafe_arena_release_pinhole();

  // .bosdyn.api.spot_cam.Camera.SphericalLimits spherical = 6;
  bool has_spherical() const;
  private:
  bool _internal_has_spherical() const;
  public:
  void clear_spherical();
  const ::bosdyn::api::spot_cam::Camera_SphericalLimits& spherical() const;
  PROTOBUF_NODISCARD ::bosdyn::api::spot_cam::Camera_SphericalLimits* release_spherical();
  ::bosdyn::api::spot_cam::Camera_SphericalLimits* mutable_spherical();
  void set_allocated_spherical(::bosdyn::api::spot_cam::Camera_SphericalLimits* spherical);
  private:
  const ::bosdyn::api::spot_cam::Camera_SphericalLimits& _internal_spherical() const;
  ::bosdyn::api::spot_cam::Camera_SphericalLimits* _internal_mutable_spherical();
  public:
  void unsafe_arena_set_allocated_spherical(
      ::bosdyn::api::spot_cam::Camera_SphericalLimits* spherical);
  ::bosdyn::api::spot_cam::Camera_SphericalLimits* unsafe_arena_release_spherical();

  void clear_intrinsics();
  IntrinsicsCase intrinsics_case() const;
  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.Camera)
 private:
  class _Internal;
  void set_has_pinhole();
  void set_has_spherical();

  inline bool has_intrinsics() const;
  inline void clear_has_intrinsics();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_frame_name_;
    ::bosdyn::api::Vec2* resolution_;
    ::bosdyn::api::SE3Pose* base_tfrom_sensor_;
    ::bosdyn::api::SE3Pose* base_tform_sensor_;
    union IntrinsicsUnion {
      constexpr IntrinsicsUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics* pinhole_;
      ::bosdyn::api::spot_cam::Camera_SphericalLimits* spherical_;
    } intrinsics_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Camera_PinholeIntrinsics

// .bosdyn.api.Vec2 focal_length = 1;
inline bool Camera_PinholeIntrinsics::_internal_has_focal_length() const {
  return this != internal_default_instance() && _impl_.focal_length_ != nullptr;
}
inline bool Camera_PinholeIntrinsics::has_focal_length() const {
  return _internal_has_focal_length();
}
inline const ::bosdyn::api::Vec2& Camera_PinholeIntrinsics::_internal_focal_length() const {
  const ::bosdyn::api::Vec2* p = _impl_.focal_length_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec2&>(
      ::bosdyn::api::_Vec2_default_instance_);
}
inline const ::bosdyn::api::Vec2& Camera_PinholeIntrinsics::focal_length() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.Camera.PinholeIntrinsics.focal_length)
  return _internal_focal_length();
}
inline void Camera_PinholeIntrinsics::unsafe_arena_set_allocated_focal_length(
    ::bosdyn::api::Vec2* focal_length) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.focal_length_);
  }
  _impl_.focal_length_ = focal_length;
  if (focal_length) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.Camera.PinholeIntrinsics.focal_length)
}
inline ::bosdyn::api::Vec2* Camera_PinholeIntrinsics::release_focal_length() {
  
  ::bosdyn::api::Vec2* temp = _impl_.focal_length_;
  _impl_.focal_length_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec2* Camera_PinholeIntrinsics::unsafe_arena_release_focal_length() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.Camera.PinholeIntrinsics.focal_length)
  
  ::bosdyn::api::Vec2* temp = _impl_.focal_length_;
  _impl_.focal_length_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec2* Camera_PinholeIntrinsics::_internal_mutable_focal_length() {
  
  if (_impl_.focal_length_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec2>(GetArenaForAllocation());
    _impl_.focal_length_ = p;
  }
  return _impl_.focal_length_;
}
inline ::bosdyn::api::Vec2* Camera_PinholeIntrinsics::mutable_focal_length() {
  ::bosdyn::api::Vec2* _msg = _internal_mutable_focal_length();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.Camera.PinholeIntrinsics.focal_length)
  return _msg;
}
inline void Camera_PinholeIntrinsics::set_allocated_focal_length(::bosdyn::api::Vec2* focal_length) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.focal_length_);
  }
  if (focal_length) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(focal_length));
    if (message_arena != submessage_arena) {
      focal_length = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, focal_length, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.focal_length_ = focal_length;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.Camera.PinholeIntrinsics.focal_length)
}

// .bosdyn.api.Vec2 center_point = 2;
inline bool Camera_PinholeIntrinsics::_internal_has_center_point() const {
  return this != internal_default_instance() && _impl_.center_point_ != nullptr;
}
inline bool Camera_PinholeIntrinsics::has_center_point() const {
  return _internal_has_center_point();
}
inline const ::bosdyn::api::Vec2& Camera_PinholeIntrinsics::_internal_center_point() const {
  const ::bosdyn::api::Vec2* p = _impl_.center_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec2&>(
      ::bosdyn::api::_Vec2_default_instance_);
}
inline const ::bosdyn::api::Vec2& Camera_PinholeIntrinsics::center_point() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.Camera.PinholeIntrinsics.center_point)
  return _internal_center_point();
}
inline void Camera_PinholeIntrinsics::unsafe_arena_set_allocated_center_point(
    ::bosdyn::api::Vec2* center_point) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.center_point_);
  }
  _impl_.center_point_ = center_point;
  if (center_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.Camera.PinholeIntrinsics.center_point)
}
inline ::bosdyn::api::Vec2* Camera_PinholeIntrinsics::release_center_point() {
  
  ::bosdyn::api::Vec2* temp = _impl_.center_point_;
  _impl_.center_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec2* Camera_PinholeIntrinsics::unsafe_arena_release_center_point() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.Camera.PinholeIntrinsics.center_point)
  
  ::bosdyn::api::Vec2* temp = _impl_.center_point_;
  _impl_.center_point_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec2* Camera_PinholeIntrinsics::_internal_mutable_center_point() {
  
  if (_impl_.center_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec2>(GetArenaForAllocation());
    _impl_.center_point_ = p;
  }
  return _impl_.center_point_;
}
inline ::bosdyn::api::Vec2* Camera_PinholeIntrinsics::mutable_center_point() {
  ::bosdyn::api::Vec2* _msg = _internal_mutable_center_point();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.Camera.PinholeIntrinsics.center_point)
  return _msg;
}
inline void Camera_PinholeIntrinsics::set_allocated_center_point(::bosdyn::api::Vec2* center_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.center_point_);
  }
  if (center_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_point));
    if (message_arena != submessage_arena) {
      center_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center_point, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.center_point_ = center_point;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.Camera.PinholeIntrinsics.center_point)
}

// float k1 = 3;
inline void Camera_PinholeIntrinsics::clear_k1() {
  _impl_.k1_ = 0;
}
inline float Camera_PinholeIntrinsics::_internal_k1() const {
  return _impl_.k1_;
}
inline float Camera_PinholeIntrinsics::k1() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.Camera.PinholeIntrinsics.k1)
  return _internal_k1();
}
inline void Camera_PinholeIntrinsics::_internal_set_k1(float value) {
  
  _impl_.k1_ = value;
}
inline void Camera_PinholeIntrinsics::set_k1(float value) {
  _internal_set_k1(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.Camera.PinholeIntrinsics.k1)
}

// float k2 = 4;
inline void Camera_PinholeIntrinsics::clear_k2() {
  _impl_.k2_ = 0;
}
inline float Camera_PinholeIntrinsics::_internal_k2() const {
  return _impl_.k2_;
}
inline float Camera_PinholeIntrinsics::k2() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.Camera.PinholeIntrinsics.k2)
  return _internal_k2();
}
inline void Camera_PinholeIntrinsics::_internal_set_k2(float value) {
  
  _impl_.k2_ = value;
}
inline void Camera_PinholeIntrinsics::set_k2(float value) {
  _internal_set_k2(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.Camera.PinholeIntrinsics.k2)
}

// float k3 = 5;
inline void Camera_PinholeIntrinsics::clear_k3() {
  _impl_.k3_ = 0;
}
inline float Camera_PinholeIntrinsics::_internal_k3() const {
  return _impl_.k3_;
}
inline float Camera_PinholeIntrinsics::k3() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.Camera.PinholeIntrinsics.k3)
  return _internal_k3();
}
inline void Camera_PinholeIntrinsics::_internal_set_k3(float value) {
  
  _impl_.k3_ = value;
}
inline void Camera_PinholeIntrinsics::set_k3(float value) {
  _internal_set_k3(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.Camera.PinholeIntrinsics.k3)
}

// float k4 = 6;
inline void Camera_PinholeIntrinsics::clear_k4() {
  _impl_.k4_ = 0;
}
inline float Camera_PinholeIntrinsics::_internal_k4() const {
  return _impl_.k4_;
}
inline float Camera_PinholeIntrinsics::k4() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.Camera.PinholeIntrinsics.k4)
  return _internal_k4();
}
inline void Camera_PinholeIntrinsics::_internal_set_k4(float value) {
  
  _impl_.k4_ = value;
}
inline void Camera_PinholeIntrinsics::set_k4(float value) {
  _internal_set_k4(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.Camera.PinholeIntrinsics.k4)
}

// -------------------------------------------------------------------

// Camera_SphericalLimits

// .bosdyn.api.Vec2 min_angle = 1;
inline bool Camera_SphericalLimits::_internal_has_min_angle() const {
  return this != internal_default_instance() && _impl_.min_angle_ != nullptr;
}
inline bool Camera_SphericalLimits::has_min_angle() const {
  return _internal_has_min_angle();
}
inline const ::bosdyn::api::Vec2& Camera_SphericalLimits::_internal_min_angle() const {
  const ::bosdyn::api::Vec2* p = _impl_.min_angle_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec2&>(
      ::bosdyn::api::_Vec2_default_instance_);
}
inline const ::bosdyn::api::Vec2& Camera_SphericalLimits::min_angle() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.Camera.SphericalLimits.min_angle)
  return _internal_min_angle();
}
inline void Camera_SphericalLimits::unsafe_arena_set_allocated_min_angle(
    ::bosdyn::api::Vec2* min_angle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.min_angle_);
  }
  _impl_.min_angle_ = min_angle;
  if (min_angle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.Camera.SphericalLimits.min_angle)
}
inline ::bosdyn::api::Vec2* Camera_SphericalLimits::release_min_angle() {
  
  ::bosdyn::api::Vec2* temp = _impl_.min_angle_;
  _impl_.min_angle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec2* Camera_SphericalLimits::unsafe_arena_release_min_angle() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.Camera.SphericalLimits.min_angle)
  
  ::bosdyn::api::Vec2* temp = _impl_.min_angle_;
  _impl_.min_angle_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec2* Camera_SphericalLimits::_internal_mutable_min_angle() {
  
  if (_impl_.min_angle_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec2>(GetArenaForAllocation());
    _impl_.min_angle_ = p;
  }
  return _impl_.min_angle_;
}
inline ::bosdyn::api::Vec2* Camera_SphericalLimits::mutable_min_angle() {
  ::bosdyn::api::Vec2* _msg = _internal_mutable_min_angle();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.Camera.SphericalLimits.min_angle)
  return _msg;
}
inline void Camera_SphericalLimits::set_allocated_min_angle(::bosdyn::api::Vec2* min_angle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.min_angle_);
  }
  if (min_angle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_angle));
    if (message_arena != submessage_arena) {
      min_angle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_angle, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.min_angle_ = min_angle;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.Camera.SphericalLimits.min_angle)
}

// .bosdyn.api.Vec2 max_angle = 2;
inline bool Camera_SphericalLimits::_internal_has_max_angle() const {
  return this != internal_default_instance() && _impl_.max_angle_ != nullptr;
}
inline bool Camera_SphericalLimits::has_max_angle() const {
  return _internal_has_max_angle();
}
inline const ::bosdyn::api::Vec2& Camera_SphericalLimits::_internal_max_angle() const {
  const ::bosdyn::api::Vec2* p = _impl_.max_angle_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec2&>(
      ::bosdyn::api::_Vec2_default_instance_);
}
inline const ::bosdyn::api::Vec2& Camera_SphericalLimits::max_angle() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.Camera.SphericalLimits.max_angle)
  return _internal_max_angle();
}
inline void Camera_SphericalLimits::unsafe_arena_set_allocated_max_angle(
    ::bosdyn::api::Vec2* max_angle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_angle_);
  }
  _impl_.max_angle_ = max_angle;
  if (max_angle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.Camera.SphericalLimits.max_angle)
}
inline ::bosdyn::api::Vec2* Camera_SphericalLimits::release_max_angle() {
  
  ::bosdyn::api::Vec2* temp = _impl_.max_angle_;
  _impl_.max_angle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec2* Camera_SphericalLimits::unsafe_arena_release_max_angle() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.Camera.SphericalLimits.max_angle)
  
  ::bosdyn::api::Vec2* temp = _impl_.max_angle_;
  _impl_.max_angle_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec2* Camera_SphericalLimits::_internal_mutable_max_angle() {
  
  if (_impl_.max_angle_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec2>(GetArenaForAllocation());
    _impl_.max_angle_ = p;
  }
  return _impl_.max_angle_;
}
inline ::bosdyn::api::Vec2* Camera_SphericalLimits::mutable_max_angle() {
  ::bosdyn::api::Vec2* _msg = _internal_mutable_max_angle();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.Camera.SphericalLimits.max_angle)
  return _msg;
}
inline void Camera_SphericalLimits::set_allocated_max_angle(::bosdyn::api::Vec2* max_angle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_angle_);
  }
  if (max_angle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_angle));
    if (message_arena != submessage_arena) {
      max_angle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_angle, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_angle_ = max_angle;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.Camera.SphericalLimits.max_angle)
}

// -------------------------------------------------------------------

// Camera

// string name = 1;
inline void Camera::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Camera::name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.Camera.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Camera::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.Camera.name)
}
inline std::string* Camera::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.Camera.name)
  return _s;
}
inline const std::string& Camera::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Camera::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Camera::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Camera::release_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.Camera.name)
  return _impl_.name_.Release();
}
inline void Camera::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.Camera.name)
}

// .bosdyn.api.Vec2 resolution = 2;
inline bool Camera::_internal_has_resolution() const {
  return this != internal_default_instance() && _impl_.resolution_ != nullptr;
}
inline bool Camera::has_resolution() const {
  return _internal_has_resolution();
}
inline const ::bosdyn::api::Vec2& Camera::_internal_resolution() const {
  const ::bosdyn::api::Vec2* p = _impl_.resolution_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec2&>(
      ::bosdyn::api::_Vec2_default_instance_);
}
inline const ::bosdyn::api::Vec2& Camera::resolution() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.Camera.resolution)
  return _internal_resolution();
}
inline void Camera::unsafe_arena_set_allocated_resolution(
    ::bosdyn::api::Vec2* resolution) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resolution_);
  }
  _impl_.resolution_ = resolution;
  if (resolution) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.Camera.resolution)
}
inline ::bosdyn::api::Vec2* Camera::release_resolution() {
  
  ::bosdyn::api::Vec2* temp = _impl_.resolution_;
  _impl_.resolution_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec2* Camera::unsafe_arena_release_resolution() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.Camera.resolution)
  
  ::bosdyn::api::Vec2* temp = _impl_.resolution_;
  _impl_.resolution_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec2* Camera::_internal_mutable_resolution() {
  
  if (_impl_.resolution_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec2>(GetArenaForAllocation());
    _impl_.resolution_ = p;
  }
  return _impl_.resolution_;
}
inline ::bosdyn::api::Vec2* Camera::mutable_resolution() {
  ::bosdyn::api::Vec2* _msg = _internal_mutable_resolution();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.Camera.resolution)
  return _msg;
}
inline void Camera::set_allocated_resolution(::bosdyn::api::Vec2* resolution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resolution_);
  }
  if (resolution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resolution));
    if (message_arena != submessage_arena) {
      resolution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolution, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.resolution_ = resolution;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.Camera.resolution)
}

// string base_frame_name = 3;
inline void Camera::clear_base_frame_name() {
  _impl_.base_frame_name_.ClearToEmpty();
}
inline const std::string& Camera::base_frame_name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.Camera.base_frame_name)
  return _internal_base_frame_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Camera::set_base_frame_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.base_frame_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.Camera.base_frame_name)
}
inline std::string* Camera::mutable_base_frame_name() {
  std::string* _s = _internal_mutable_base_frame_name();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.Camera.base_frame_name)
  return _s;
}
inline const std::string& Camera::_internal_base_frame_name() const {
  return _impl_.base_frame_name_.Get();
}
inline void Camera::_internal_set_base_frame_name(const std::string& value) {
  
  _impl_.base_frame_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Camera::_internal_mutable_base_frame_name() {
  
  return _impl_.base_frame_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Camera::release_base_frame_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.Camera.base_frame_name)
  return _impl_.base_frame_name_.Release();
}
inline void Camera::set_allocated_base_frame_name(std::string* base_frame_name) {
  if (base_frame_name != nullptr) {
    
  } else {
    
  }
  _impl_.base_frame_name_.SetAllocated(base_frame_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.base_frame_name_.IsDefault()) {
    _impl_.base_frame_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.Camera.base_frame_name)
}

// .bosdyn.api.SE3Pose base_tfrom_sensor = 4 [deprecated = true];
inline bool Camera::_internal_has_base_tfrom_sensor() const {
  return this != internal_default_instance() && _impl_.base_tfrom_sensor_ != nullptr;
}
inline bool Camera::has_base_tfrom_sensor() const {
  return _internal_has_base_tfrom_sensor();
}
inline const ::bosdyn::api::SE3Pose& Camera::_internal_base_tfrom_sensor() const {
  const ::bosdyn::api::SE3Pose* p = _impl_.base_tfrom_sensor_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::SE3Pose&>(
      ::bosdyn::api::_SE3Pose_default_instance_);
}
inline const ::bosdyn::api::SE3Pose& Camera::base_tfrom_sensor() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.Camera.base_tfrom_sensor)
  return _internal_base_tfrom_sensor();
}
inline void Camera::unsafe_arena_set_allocated_base_tfrom_sensor(
    ::bosdyn::api::SE3Pose* base_tfrom_sensor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_tfrom_sensor_);
  }
  _impl_.base_tfrom_sensor_ = base_tfrom_sensor;
  if (base_tfrom_sensor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.Camera.base_tfrom_sensor)
}
inline ::bosdyn::api::SE3Pose* Camera::release_base_tfrom_sensor() {
  
  ::bosdyn::api::SE3Pose* temp = _impl_.base_tfrom_sensor_;
  _impl_.base_tfrom_sensor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::SE3Pose* Camera::unsafe_arena_release_base_tfrom_sensor() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.Camera.base_tfrom_sensor)
  
  ::bosdyn::api::SE3Pose* temp = _impl_.base_tfrom_sensor_;
  _impl_.base_tfrom_sensor_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Pose* Camera::_internal_mutable_base_tfrom_sensor() {
  
  if (_impl_.base_tfrom_sensor_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Pose>(GetArenaForAllocation());
    _impl_.base_tfrom_sensor_ = p;
  }
  return _impl_.base_tfrom_sensor_;
}
inline ::bosdyn::api::SE3Pose* Camera::mutable_base_tfrom_sensor() {
  ::bosdyn::api::SE3Pose* _msg = _internal_mutable_base_tfrom_sensor();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.Camera.base_tfrom_sensor)
  return _msg;
}
inline void Camera::set_allocated_base_tfrom_sensor(::bosdyn::api::SE3Pose* base_tfrom_sensor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_tfrom_sensor_);
  }
  if (base_tfrom_sensor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_tfrom_sensor));
    if (message_arena != submessage_arena) {
      base_tfrom_sensor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_tfrom_sensor, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_tfrom_sensor_ = base_tfrom_sensor;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.Camera.base_tfrom_sensor)
}

// .bosdyn.api.SE3Pose base_tform_sensor = 7;
inline bool Camera::_internal_has_base_tform_sensor() const {
  return this != internal_default_instance() && _impl_.base_tform_sensor_ != nullptr;
}
inline bool Camera::has_base_tform_sensor() const {
  return _internal_has_base_tform_sensor();
}
inline const ::bosdyn::api::SE3Pose& Camera::_internal_base_tform_sensor() const {
  const ::bosdyn::api::SE3Pose* p = _impl_.base_tform_sensor_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::SE3Pose&>(
      ::bosdyn::api::_SE3Pose_default_instance_);
}
inline const ::bosdyn::api::SE3Pose& Camera::base_tform_sensor() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.Camera.base_tform_sensor)
  return _internal_base_tform_sensor();
}
inline void Camera::unsafe_arena_set_allocated_base_tform_sensor(
    ::bosdyn::api::SE3Pose* base_tform_sensor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_tform_sensor_);
  }
  _impl_.base_tform_sensor_ = base_tform_sensor;
  if (base_tform_sensor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.Camera.base_tform_sensor)
}
inline ::bosdyn::api::SE3Pose* Camera::release_base_tform_sensor() {
  
  ::bosdyn::api::SE3Pose* temp = _impl_.base_tform_sensor_;
  _impl_.base_tform_sensor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::SE3Pose* Camera::unsafe_arena_release_base_tform_sensor() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.Camera.base_tform_sensor)
  
  ::bosdyn::api::SE3Pose* temp = _impl_.base_tform_sensor_;
  _impl_.base_tform_sensor_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Pose* Camera::_internal_mutable_base_tform_sensor() {
  
  if (_impl_.base_tform_sensor_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Pose>(GetArenaForAllocation());
    _impl_.base_tform_sensor_ = p;
  }
  return _impl_.base_tform_sensor_;
}
inline ::bosdyn::api::SE3Pose* Camera::mutable_base_tform_sensor() {
  ::bosdyn::api::SE3Pose* _msg = _internal_mutable_base_tform_sensor();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.Camera.base_tform_sensor)
  return _msg;
}
inline void Camera::set_allocated_base_tform_sensor(::bosdyn::api::SE3Pose* base_tform_sensor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_tform_sensor_);
  }
  if (base_tform_sensor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_tform_sensor));
    if (message_arena != submessage_arena) {
      base_tform_sensor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_tform_sensor, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_tform_sensor_ = base_tform_sensor;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.Camera.base_tform_sensor)
}

// .bosdyn.api.spot_cam.Camera.PinholeIntrinsics pinhole = 5;
inline bool Camera::_internal_has_pinhole() const {
  return intrinsics_case() == kPinhole;
}
inline bool Camera::has_pinhole() const {
  return _internal_has_pinhole();
}
inline void Camera::set_has_pinhole() {
  _impl_._oneof_case_[0] = kPinhole;
}
inline void Camera::clear_pinhole() {
  if (_internal_has_pinhole()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.intrinsics_.pinhole_;
    }
    clear_has_intrinsics();
  }
}
inline ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics* Camera::release_pinhole() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.Camera.pinhole)
  if (_internal_has_pinhole()) {
    clear_has_intrinsics();
    ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics* temp = _impl_.intrinsics_.pinhole_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.intrinsics_.pinhole_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics& Camera::_internal_pinhole() const {
  return _internal_has_pinhole()
      ? *_impl_.intrinsics_.pinhole_
      : reinterpret_cast< ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics&>(::bosdyn::api::spot_cam::_Camera_PinholeIntrinsics_default_instance_);
}
inline const ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics& Camera::pinhole() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.Camera.pinhole)
  return _internal_pinhole();
}
inline ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics* Camera::unsafe_arena_release_pinhole() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.spot_cam.Camera.pinhole)
  if (_internal_has_pinhole()) {
    clear_has_intrinsics();
    ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics* temp = _impl_.intrinsics_.pinhole_;
    _impl_.intrinsics_.pinhole_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Camera::unsafe_arena_set_allocated_pinhole(::bosdyn::api::spot_cam::Camera_PinholeIntrinsics* pinhole) {
  clear_intrinsics();
  if (pinhole) {
    set_has_pinhole();
    _impl_.intrinsics_.pinhole_ = pinhole;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.Camera.pinhole)
}
inline ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics* Camera::_internal_mutable_pinhole() {
  if (!_internal_has_pinhole()) {
    clear_intrinsics();
    set_has_pinhole();
    _impl_.intrinsics_.pinhole_ = CreateMaybeMessage< ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics >(GetArenaForAllocation());
  }
  return _impl_.intrinsics_.pinhole_;
}
inline ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics* Camera::mutable_pinhole() {
  ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics* _msg = _internal_mutable_pinhole();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.Camera.pinhole)
  return _msg;
}

// .bosdyn.api.spot_cam.Camera.SphericalLimits spherical = 6;
inline bool Camera::_internal_has_spherical() const {
  return intrinsics_case() == kSpherical;
}
inline bool Camera::has_spherical() const {
  return _internal_has_spherical();
}
inline void Camera::set_has_spherical() {
  _impl_._oneof_case_[0] = kSpherical;
}
inline void Camera::clear_spherical() {
  if (_internal_has_spherical()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.intrinsics_.spherical_;
    }
    clear_has_intrinsics();
  }
}
inline ::bosdyn::api::spot_cam::Camera_SphericalLimits* Camera::release_spherical() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.Camera.spherical)
  if (_internal_has_spherical()) {
    clear_has_intrinsics();
    ::bosdyn::api::spot_cam::Camera_SphericalLimits* temp = _impl_.intrinsics_.spherical_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.intrinsics_.spherical_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::spot_cam::Camera_SphericalLimits& Camera::_internal_spherical() const {
  return _internal_has_spherical()
      ? *_impl_.intrinsics_.spherical_
      : reinterpret_cast< ::bosdyn::api::spot_cam::Camera_SphericalLimits&>(::bosdyn::api::spot_cam::_Camera_SphericalLimits_default_instance_);
}
inline const ::bosdyn::api::spot_cam::Camera_SphericalLimits& Camera::spherical() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.Camera.spherical)
  return _internal_spherical();
}
inline ::bosdyn::api::spot_cam::Camera_SphericalLimits* Camera::unsafe_arena_release_spherical() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.spot_cam.Camera.spherical)
  if (_internal_has_spherical()) {
    clear_has_intrinsics();
    ::bosdyn::api::spot_cam::Camera_SphericalLimits* temp = _impl_.intrinsics_.spherical_;
    _impl_.intrinsics_.spherical_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Camera::unsafe_arena_set_allocated_spherical(::bosdyn::api::spot_cam::Camera_SphericalLimits* spherical) {
  clear_intrinsics();
  if (spherical) {
    set_has_spherical();
    _impl_.intrinsics_.spherical_ = spherical;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.Camera.spherical)
}
inline ::bosdyn::api::spot_cam::Camera_SphericalLimits* Camera::_internal_mutable_spherical() {
  if (!_internal_has_spherical()) {
    clear_intrinsics();
    set_has_spherical();
    _impl_.intrinsics_.spherical_ = CreateMaybeMessage< ::bosdyn::api::spot_cam::Camera_SphericalLimits >(GetArenaForAllocation());
  }
  return _impl_.intrinsics_.spherical_;
}
inline ::bosdyn::api::spot_cam::Camera_SphericalLimits* Camera::mutable_spherical() {
  ::bosdyn::api::spot_cam::Camera_SphericalLimits* _msg = _internal_mutable_spherical();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.Camera.spherical)
  return _msg;
}

inline bool Camera::has_intrinsics() const {
  return intrinsics_case() != INTRINSICS_NOT_SET;
}
inline void Camera::clear_has_intrinsics() {
  _impl_._oneof_case_[0] = INTRINSICS_NOT_SET;
}
inline Camera::IntrinsicsCase Camera::intrinsics_case() const {
  return Camera::IntrinsicsCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto

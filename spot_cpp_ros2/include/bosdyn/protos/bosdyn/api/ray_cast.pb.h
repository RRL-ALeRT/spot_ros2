// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/ray_cast.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fray_5fcast_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fray_5fcast_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/header.pb.h"
#include "bosdyn/api/geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fray_5fcast_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fray_5fcast_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fray_5fcast_2eproto;
namespace bosdyn {
namespace api {
class RayIntersection;
struct RayIntersectionDefaultTypeInternal;
extern RayIntersectionDefaultTypeInternal _RayIntersection_default_instance_;
class RaycastRequest;
struct RaycastRequestDefaultTypeInternal;
extern RaycastRequestDefaultTypeInternal _RaycastRequest_default_instance_;
class RaycastResponse;
struct RaycastResponseDefaultTypeInternal;
extern RaycastResponseDefaultTypeInternal _RaycastResponse_default_instance_;
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::RayIntersection* Arena::CreateMaybeMessage<::bosdyn::api::RayIntersection>(Arena*);
template<> ::bosdyn::api::RaycastRequest* Arena::CreateMaybeMessage<::bosdyn::api::RaycastRequest>(Arena*);
template<> ::bosdyn::api::RaycastResponse* Arena::CreateMaybeMessage<::bosdyn::api::RaycastResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {

enum RayIntersection_Type : int {
  RayIntersection_Type_TYPE_UNKNOWN = 0,
  RayIntersection_Type_TYPE_GROUND_PLANE = 1,
  RayIntersection_Type_TYPE_TERRAIN_MAP = 2,
  RayIntersection_Type_TYPE_VOXEL_MAP = 3,
  RayIntersection_Type_TYPE_HAND_DEPTH = 4,
  RayIntersection_Type_RayIntersection_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RayIntersection_Type_RayIntersection_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RayIntersection_Type_IsValid(int value);
constexpr RayIntersection_Type RayIntersection_Type_Type_MIN = RayIntersection_Type_TYPE_UNKNOWN;
constexpr RayIntersection_Type RayIntersection_Type_Type_MAX = RayIntersection_Type_TYPE_HAND_DEPTH;
constexpr int RayIntersection_Type_Type_ARRAYSIZE = RayIntersection_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RayIntersection_Type_descriptor();
template<typename T>
inline const std::string& RayIntersection_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RayIntersection_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RayIntersection_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RayIntersection_Type_descriptor(), enum_t_value);
}
inline bool RayIntersection_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RayIntersection_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RayIntersection_Type>(
    RayIntersection_Type_descriptor(), name, value);
}
enum RaycastResponse_Status : int {
  RaycastResponse_Status_STATUS_UNKNOWN = 0,
  RaycastResponse_Status_STATUS_OK = 1,
  RaycastResponse_Status_STATUS_INVALID_REQUEST = 2,
  RaycastResponse_Status_STATUS_INVALID_INTERSECTION_TYPE = 3,
  RaycastResponse_Status_STATUS_UNKNOWN_FRAME = 4,
  RaycastResponse_Status_RaycastResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RaycastResponse_Status_RaycastResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RaycastResponse_Status_IsValid(int value);
constexpr RaycastResponse_Status RaycastResponse_Status_Status_MIN = RaycastResponse_Status_STATUS_UNKNOWN;
constexpr RaycastResponse_Status RaycastResponse_Status_Status_MAX = RaycastResponse_Status_STATUS_UNKNOWN_FRAME;
constexpr int RaycastResponse_Status_Status_ARRAYSIZE = RaycastResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RaycastResponse_Status_descriptor();
template<typename T>
inline const std::string& RaycastResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RaycastResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RaycastResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RaycastResponse_Status_descriptor(), enum_t_value);
}
inline bool RaycastResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RaycastResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RaycastResponse_Status>(
    RaycastResponse_Status_descriptor(), name, value);
}
// ===================================================================

class RaycastRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.RaycastRequest) */ {
 public:
  inline RaycastRequest() : RaycastRequest(nullptr) {}
  ~RaycastRequest() override;
  explicit PROTOBUF_CONSTEXPR RaycastRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RaycastRequest(const RaycastRequest& from);
  RaycastRequest(RaycastRequest&& from) noexcept
    : RaycastRequest() {
    *this = ::std::move(from);
  }

  inline RaycastRequest& operator=(const RaycastRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaycastRequest& operator=(RaycastRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RaycastRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RaycastRequest* internal_default_instance() {
    return reinterpret_cast<const RaycastRequest*>(
               &_RaycastRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RaycastRequest& a, RaycastRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RaycastRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RaycastRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RaycastRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RaycastRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RaycastRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RaycastRequest& from) {
    RaycastRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaycastRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.RaycastRequest";
  }
  protected:
  explicit RaycastRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntersectionTypesFieldNumber = 7,
    kRayFrameNameFieldNumber = 5,
    kHeaderFieldNumber = 1,
    kRayFieldNumber = 2,
    kMinIntersectionDistanceFieldNumber = 4,
  };
  // repeated .bosdyn.api.RayIntersection.Type intersection_types = 7;
  int intersection_types_size() const;
  private:
  int _internal_intersection_types_size() const;
  public:
  void clear_intersection_types();
  private:
  ::bosdyn::api::RayIntersection_Type _internal_intersection_types(int index) const;
  void _internal_add_intersection_types(::bosdyn::api::RayIntersection_Type value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_intersection_types();
  public:
  ::bosdyn::api::RayIntersection_Type intersection_types(int index) const;
  void set_intersection_types(int index, ::bosdyn::api::RayIntersection_Type value);
  void add_intersection_types(::bosdyn::api::RayIntersection_Type value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& intersection_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_intersection_types();

  // string ray_frame_name = 5;
  void clear_ray_frame_name();
  const std::string& ray_frame_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ray_frame_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ray_frame_name();
  PROTOBUF_NODISCARD std::string* release_ray_frame_name();
  void set_allocated_ray_frame_name(std::string* ray_frame_name);
  private:
  const std::string& _internal_ray_frame_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ray_frame_name(const std::string& value);
  std::string* _internal_mutable_ray_frame_name();
  public:

  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // .bosdyn.api.Ray ray = 2;
  bool has_ray() const;
  private:
  bool _internal_has_ray() const;
  public:
  void clear_ray();
  const ::bosdyn::api::Ray& ray() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Ray* release_ray();
  ::bosdyn::api::Ray* mutable_ray();
  void set_allocated_ray(::bosdyn::api::Ray* ray);
  private:
  const ::bosdyn::api::Ray& _internal_ray() const;
  ::bosdyn::api::Ray* _internal_mutable_ray();
  public:
  void unsafe_arena_set_allocated_ray(
      ::bosdyn::api::Ray* ray);
  ::bosdyn::api::Ray* unsafe_arena_release_ray();

  // float min_intersection_distance = 4;
  void clear_min_intersection_distance();
  float min_intersection_distance() const;
  void set_min_intersection_distance(float value);
  private:
  float _internal_min_intersection_distance() const;
  void _internal_set_min_intersection_distance(float value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.RaycastRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> intersection_types_;
    mutable std::atomic<int> _intersection_types_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ray_frame_name_;
    ::bosdyn::api::RequestHeader* header_;
    ::bosdyn::api::Ray* ray_;
    float min_intersection_distance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fray_5fcast_2eproto;
};
// -------------------------------------------------------------------

class RayIntersection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.RayIntersection) */ {
 public:
  inline RayIntersection() : RayIntersection(nullptr) {}
  ~RayIntersection() override;
  explicit PROTOBUF_CONSTEXPR RayIntersection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RayIntersection(const RayIntersection& from);
  RayIntersection(RayIntersection&& from) noexcept
    : RayIntersection() {
    *this = ::std::move(from);
  }

  inline RayIntersection& operator=(const RayIntersection& from) {
    CopyFrom(from);
    return *this;
  }
  inline RayIntersection& operator=(RayIntersection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RayIntersection& default_instance() {
    return *internal_default_instance();
  }
  static inline const RayIntersection* internal_default_instance() {
    return reinterpret_cast<const RayIntersection*>(
               &_RayIntersection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RayIntersection& a, RayIntersection& b) {
    a.Swap(&b);
  }
  inline void Swap(RayIntersection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RayIntersection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RayIntersection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RayIntersection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RayIntersection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RayIntersection& from) {
    RayIntersection::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RayIntersection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.RayIntersection";
  }
  protected:
  explicit RayIntersection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RayIntersection_Type Type;
  static constexpr Type TYPE_UNKNOWN =
    RayIntersection_Type_TYPE_UNKNOWN;
  static constexpr Type TYPE_GROUND_PLANE =
    RayIntersection_Type_TYPE_GROUND_PLANE;
  static constexpr Type TYPE_TERRAIN_MAP =
    RayIntersection_Type_TYPE_TERRAIN_MAP;
  static constexpr Type TYPE_VOXEL_MAP =
    RayIntersection_Type_TYPE_VOXEL_MAP;
  static constexpr Type TYPE_HAND_DEPTH =
    RayIntersection_Type_TYPE_HAND_DEPTH;
  static inline bool Type_IsValid(int value) {
    return RayIntersection_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    RayIntersection_Type_Type_MIN;
  static constexpr Type Type_MAX =
    RayIntersection_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    RayIntersection_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return RayIntersection_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return RayIntersection_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return RayIntersection_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHitPositionInHitFrameFieldNumber = 2,
    kDistanceMetersFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // .bosdyn.api.Vec3 hit_position_in_hit_frame = 2;
  bool has_hit_position_in_hit_frame() const;
  private:
  bool _internal_has_hit_position_in_hit_frame() const;
  public:
  void clear_hit_position_in_hit_frame();
  const ::bosdyn::api::Vec3& hit_position_in_hit_frame() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec3* release_hit_position_in_hit_frame();
  ::bosdyn::api::Vec3* mutable_hit_position_in_hit_frame();
  void set_allocated_hit_position_in_hit_frame(::bosdyn::api::Vec3* hit_position_in_hit_frame);
  private:
  const ::bosdyn::api::Vec3& _internal_hit_position_in_hit_frame() const;
  ::bosdyn::api::Vec3* _internal_mutable_hit_position_in_hit_frame();
  public:
  void unsafe_arena_set_allocated_hit_position_in_hit_frame(
      ::bosdyn::api::Vec3* hit_position_in_hit_frame);
  ::bosdyn::api::Vec3* unsafe_arena_release_hit_position_in_hit_frame();

  // double distance_meters = 3;
  void clear_distance_meters();
  double distance_meters() const;
  void set_distance_meters(double value);
  private:
  double _internal_distance_meters() const;
  void _internal_set_distance_meters(double value);
  public:

  // .bosdyn.api.RayIntersection.Type type = 1;
  void clear_type();
  ::bosdyn::api::RayIntersection_Type type() const;
  void set_type(::bosdyn::api::RayIntersection_Type value);
  private:
  ::bosdyn::api::RayIntersection_Type _internal_type() const;
  void _internal_set_type(::bosdyn::api::RayIntersection_Type value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.RayIntersection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::Vec3* hit_position_in_hit_frame_;
    double distance_meters_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fray_5fcast_2eproto;
};
// -------------------------------------------------------------------

class RaycastResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.RaycastResponse) */ {
 public:
  inline RaycastResponse() : RaycastResponse(nullptr) {}
  ~RaycastResponse() override;
  explicit PROTOBUF_CONSTEXPR RaycastResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RaycastResponse(const RaycastResponse& from);
  RaycastResponse(RaycastResponse&& from) noexcept
    : RaycastResponse() {
    *this = ::std::move(from);
  }

  inline RaycastResponse& operator=(const RaycastResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaycastResponse& operator=(RaycastResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RaycastResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RaycastResponse* internal_default_instance() {
    return reinterpret_cast<const RaycastResponse*>(
               &_RaycastResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RaycastResponse& a, RaycastResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RaycastResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RaycastResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RaycastResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RaycastResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RaycastResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RaycastResponse& from) {
    RaycastResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaycastResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.RaycastResponse";
  }
  protected:
  explicit RaycastResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RaycastResponse_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    RaycastResponse_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_OK =
    RaycastResponse_Status_STATUS_OK;
  static constexpr Status STATUS_INVALID_REQUEST =
    RaycastResponse_Status_STATUS_INVALID_REQUEST;
  static constexpr Status STATUS_INVALID_INTERSECTION_TYPE =
    RaycastResponse_Status_STATUS_INVALID_INTERSECTION_TYPE;
  static constexpr Status STATUS_UNKNOWN_FRAME =
    RaycastResponse_Status_STATUS_UNKNOWN_FRAME;
  static inline bool Status_IsValid(int value) {
    return RaycastResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    RaycastResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    RaycastResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    RaycastResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return RaycastResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return RaycastResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return RaycastResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHitsFieldNumber = 2,
    kHitFrameNameFieldNumber = 3,
    kMessageFieldNumber = 6,
    kHeaderFieldNumber = 1,
    kTransformsSnapshotFieldNumber = 4,
    kStatusFieldNumber = 5,
  };
  // repeated .bosdyn.api.RayIntersection hits = 2;
  int hits_size() const;
  private:
  int _internal_hits_size() const;
  public:
  void clear_hits();
  ::bosdyn::api::RayIntersection* mutable_hits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::RayIntersection >*
      mutable_hits();
  private:
  const ::bosdyn::api::RayIntersection& _internal_hits(int index) const;
  ::bosdyn::api::RayIntersection* _internal_add_hits();
  public:
  const ::bosdyn::api::RayIntersection& hits(int index) const;
  ::bosdyn::api::RayIntersection* add_hits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::RayIntersection >&
      hits() const;

  // string hit_frame_name = 3;
  void clear_hit_frame_name();
  const std::string& hit_frame_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hit_frame_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hit_frame_name();
  PROTOBUF_NODISCARD std::string* release_hit_frame_name();
  void set_allocated_hit_frame_name(std::string* hit_frame_name);
  private:
  const std::string& _internal_hit_frame_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hit_frame_name(const std::string& value);
  std::string* _internal_mutable_hit_frame_name();
  public:

  // string message = 6;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.FrameTreeSnapshot transforms_snapshot = 4;
  bool has_transforms_snapshot() const;
  private:
  bool _internal_has_transforms_snapshot() const;
  public:
  void clear_transforms_snapshot();
  const ::bosdyn::api::FrameTreeSnapshot& transforms_snapshot() const;
  PROTOBUF_NODISCARD ::bosdyn::api::FrameTreeSnapshot* release_transforms_snapshot();
  ::bosdyn::api::FrameTreeSnapshot* mutable_transforms_snapshot();
  void set_allocated_transforms_snapshot(::bosdyn::api::FrameTreeSnapshot* transforms_snapshot);
  private:
  const ::bosdyn::api::FrameTreeSnapshot& _internal_transforms_snapshot() const;
  ::bosdyn::api::FrameTreeSnapshot* _internal_mutable_transforms_snapshot();
  public:
  void unsafe_arena_set_allocated_transforms_snapshot(
      ::bosdyn::api::FrameTreeSnapshot* transforms_snapshot);
  ::bosdyn::api::FrameTreeSnapshot* unsafe_arena_release_transforms_snapshot();

  // .bosdyn.api.RaycastResponse.Status status = 5;
  void clear_status();
  ::bosdyn::api::RaycastResponse_Status status() const;
  void set_status(::bosdyn::api::RaycastResponse_Status value);
  private:
  ::bosdyn::api::RaycastResponse_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::RaycastResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.RaycastResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::RayIntersection > hits_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hit_frame_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::bosdyn::api::ResponseHeader* header_;
    ::bosdyn::api::FrameTreeSnapshot* transforms_snapshot_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fray_5fcast_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RaycastRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool RaycastRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool RaycastRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& RaycastRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::RequestHeader&>(
      ::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& RaycastRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RaycastRequest.header)
  return _internal_header();
}
inline void RaycastRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.RaycastRequest.header)
}
inline ::bosdyn::api::RequestHeader* RaycastRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::RequestHeader* RaycastRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RaycastRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* RaycastRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::RequestHeader* RaycastRequest::mutable_header() {
  ::bosdyn::api::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RaycastRequest.header)
  return _msg;
}
inline void RaycastRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RaycastRequest.header)
}

// string ray_frame_name = 5;
inline void RaycastRequest::clear_ray_frame_name() {
  _impl_.ray_frame_name_.ClearToEmpty();
}
inline const std::string& RaycastRequest::ray_frame_name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RaycastRequest.ray_frame_name)
  return _internal_ray_frame_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RaycastRequest::set_ray_frame_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ray_frame_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.RaycastRequest.ray_frame_name)
}
inline std::string* RaycastRequest::mutable_ray_frame_name() {
  std::string* _s = _internal_mutable_ray_frame_name();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RaycastRequest.ray_frame_name)
  return _s;
}
inline const std::string& RaycastRequest::_internal_ray_frame_name() const {
  return _impl_.ray_frame_name_.Get();
}
inline void RaycastRequest::_internal_set_ray_frame_name(const std::string& value) {
  
  _impl_.ray_frame_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RaycastRequest::_internal_mutable_ray_frame_name() {
  
  return _impl_.ray_frame_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RaycastRequest::release_ray_frame_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RaycastRequest.ray_frame_name)
  return _impl_.ray_frame_name_.Release();
}
inline void RaycastRequest::set_allocated_ray_frame_name(std::string* ray_frame_name) {
  if (ray_frame_name != nullptr) {
    
  } else {
    
  }
  _impl_.ray_frame_name_.SetAllocated(ray_frame_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ray_frame_name_.IsDefault()) {
    _impl_.ray_frame_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RaycastRequest.ray_frame_name)
}

// .bosdyn.api.Ray ray = 2;
inline bool RaycastRequest::_internal_has_ray() const {
  return this != internal_default_instance() && _impl_.ray_ != nullptr;
}
inline bool RaycastRequest::has_ray() const {
  return _internal_has_ray();
}
inline const ::bosdyn::api::Ray& RaycastRequest::_internal_ray() const {
  const ::bosdyn::api::Ray* p = _impl_.ray_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Ray&>(
      ::bosdyn::api::_Ray_default_instance_);
}
inline const ::bosdyn::api::Ray& RaycastRequest::ray() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RaycastRequest.ray)
  return _internal_ray();
}
inline void RaycastRequest::unsafe_arena_set_allocated_ray(
    ::bosdyn::api::Ray* ray) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ray_);
  }
  _impl_.ray_ = ray;
  if (ray) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.RaycastRequest.ray)
}
inline ::bosdyn::api::Ray* RaycastRequest::release_ray() {
  
  ::bosdyn::api::Ray* temp = _impl_.ray_;
  _impl_.ray_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Ray* RaycastRequest::unsafe_arena_release_ray() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RaycastRequest.ray)
  
  ::bosdyn::api::Ray* temp = _impl_.ray_;
  _impl_.ray_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Ray* RaycastRequest::_internal_mutable_ray() {
  
  if (_impl_.ray_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Ray>(GetArenaForAllocation());
    _impl_.ray_ = p;
  }
  return _impl_.ray_;
}
inline ::bosdyn::api::Ray* RaycastRequest::mutable_ray() {
  ::bosdyn::api::Ray* _msg = _internal_mutable_ray();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RaycastRequest.ray)
  return _msg;
}
inline void RaycastRequest::set_allocated_ray(::bosdyn::api::Ray* ray) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ray_);
  }
  if (ray) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ray));
    if (message_arena != submessage_arena) {
      ray = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ray, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ray_ = ray;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RaycastRequest.ray)
}

// float min_intersection_distance = 4;
inline void RaycastRequest::clear_min_intersection_distance() {
  _impl_.min_intersection_distance_ = 0;
}
inline float RaycastRequest::_internal_min_intersection_distance() const {
  return _impl_.min_intersection_distance_;
}
inline float RaycastRequest::min_intersection_distance() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RaycastRequest.min_intersection_distance)
  return _internal_min_intersection_distance();
}
inline void RaycastRequest::_internal_set_min_intersection_distance(float value) {
  
  _impl_.min_intersection_distance_ = value;
}
inline void RaycastRequest::set_min_intersection_distance(float value) {
  _internal_set_min_intersection_distance(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.RaycastRequest.min_intersection_distance)
}

// repeated .bosdyn.api.RayIntersection.Type intersection_types = 7;
inline int RaycastRequest::_internal_intersection_types_size() const {
  return _impl_.intersection_types_.size();
}
inline int RaycastRequest::intersection_types_size() const {
  return _internal_intersection_types_size();
}
inline void RaycastRequest::clear_intersection_types() {
  _impl_.intersection_types_.Clear();
}
inline ::bosdyn::api::RayIntersection_Type RaycastRequest::_internal_intersection_types(int index) const {
  return static_cast< ::bosdyn::api::RayIntersection_Type >(_impl_.intersection_types_.Get(index));
}
inline ::bosdyn::api::RayIntersection_Type RaycastRequest::intersection_types(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RaycastRequest.intersection_types)
  return _internal_intersection_types(index);
}
inline void RaycastRequest::set_intersection_types(int index, ::bosdyn::api::RayIntersection_Type value) {
  _impl_.intersection_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:bosdyn.api.RaycastRequest.intersection_types)
}
inline void RaycastRequest::_internal_add_intersection_types(::bosdyn::api::RayIntersection_Type value) {
  _impl_.intersection_types_.Add(value);
}
inline void RaycastRequest::add_intersection_types(::bosdyn::api::RayIntersection_Type value) {
  _internal_add_intersection_types(value);
  // @@protoc_insertion_point(field_add:bosdyn.api.RaycastRequest.intersection_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
RaycastRequest::intersection_types() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.RaycastRequest.intersection_types)
  return _impl_.intersection_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
RaycastRequest::_internal_mutable_intersection_types() {
  return &_impl_.intersection_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
RaycastRequest::mutable_intersection_types() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.RaycastRequest.intersection_types)
  return _internal_mutable_intersection_types();
}

// -------------------------------------------------------------------

// RayIntersection

// .bosdyn.api.RayIntersection.Type type = 1;
inline void RayIntersection::clear_type() {
  _impl_.type_ = 0;
}
inline ::bosdyn::api::RayIntersection_Type RayIntersection::_internal_type() const {
  return static_cast< ::bosdyn::api::RayIntersection_Type >(_impl_.type_);
}
inline ::bosdyn::api::RayIntersection_Type RayIntersection::type() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RayIntersection.type)
  return _internal_type();
}
inline void RayIntersection::_internal_set_type(::bosdyn::api::RayIntersection_Type value) {
  
  _impl_.type_ = value;
}
inline void RayIntersection::set_type(::bosdyn::api::RayIntersection_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.RayIntersection.type)
}

// .bosdyn.api.Vec3 hit_position_in_hit_frame = 2;
inline bool RayIntersection::_internal_has_hit_position_in_hit_frame() const {
  return this != internal_default_instance() && _impl_.hit_position_in_hit_frame_ != nullptr;
}
inline bool RayIntersection::has_hit_position_in_hit_frame() const {
  return _internal_has_hit_position_in_hit_frame();
}
inline const ::bosdyn::api::Vec3& RayIntersection::_internal_hit_position_in_hit_frame() const {
  const ::bosdyn::api::Vec3* p = _impl_.hit_position_in_hit_frame_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec3&>(
      ::bosdyn::api::_Vec3_default_instance_);
}
inline const ::bosdyn::api::Vec3& RayIntersection::hit_position_in_hit_frame() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RayIntersection.hit_position_in_hit_frame)
  return _internal_hit_position_in_hit_frame();
}
inline void RayIntersection::unsafe_arena_set_allocated_hit_position_in_hit_frame(
    ::bosdyn::api::Vec3* hit_position_in_hit_frame) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hit_position_in_hit_frame_);
  }
  _impl_.hit_position_in_hit_frame_ = hit_position_in_hit_frame;
  if (hit_position_in_hit_frame) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.RayIntersection.hit_position_in_hit_frame)
}
inline ::bosdyn::api::Vec3* RayIntersection::release_hit_position_in_hit_frame() {
  
  ::bosdyn::api::Vec3* temp = _impl_.hit_position_in_hit_frame_;
  _impl_.hit_position_in_hit_frame_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec3* RayIntersection::unsafe_arena_release_hit_position_in_hit_frame() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RayIntersection.hit_position_in_hit_frame)
  
  ::bosdyn::api::Vec3* temp = _impl_.hit_position_in_hit_frame_;
  _impl_.hit_position_in_hit_frame_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec3* RayIntersection::_internal_mutable_hit_position_in_hit_frame() {
  
  if (_impl_.hit_position_in_hit_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec3>(GetArenaForAllocation());
    _impl_.hit_position_in_hit_frame_ = p;
  }
  return _impl_.hit_position_in_hit_frame_;
}
inline ::bosdyn::api::Vec3* RayIntersection::mutable_hit_position_in_hit_frame() {
  ::bosdyn::api::Vec3* _msg = _internal_mutable_hit_position_in_hit_frame();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RayIntersection.hit_position_in_hit_frame)
  return _msg;
}
inline void RayIntersection::set_allocated_hit_position_in_hit_frame(::bosdyn::api::Vec3* hit_position_in_hit_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hit_position_in_hit_frame_);
  }
  if (hit_position_in_hit_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hit_position_in_hit_frame));
    if (message_arena != submessage_arena) {
      hit_position_in_hit_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hit_position_in_hit_frame, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.hit_position_in_hit_frame_ = hit_position_in_hit_frame;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RayIntersection.hit_position_in_hit_frame)
}

// double distance_meters = 3;
inline void RayIntersection::clear_distance_meters() {
  _impl_.distance_meters_ = 0;
}
inline double RayIntersection::_internal_distance_meters() const {
  return _impl_.distance_meters_;
}
inline double RayIntersection::distance_meters() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RayIntersection.distance_meters)
  return _internal_distance_meters();
}
inline void RayIntersection::_internal_set_distance_meters(double value) {
  
  _impl_.distance_meters_ = value;
}
inline void RayIntersection::set_distance_meters(double value) {
  _internal_set_distance_meters(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.RayIntersection.distance_meters)
}

// -------------------------------------------------------------------

// RaycastResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool RaycastResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool RaycastResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& RaycastResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::ResponseHeader&>(
      ::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& RaycastResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RaycastResponse.header)
  return _internal_header();
}
inline void RaycastResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.RaycastResponse.header)
}
inline ::bosdyn::api::ResponseHeader* RaycastResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::ResponseHeader* RaycastResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RaycastResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* RaycastResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::bosdyn::api::ResponseHeader* RaycastResponse::mutable_header() {
  ::bosdyn::api::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RaycastResponse.header)
  return _msg;
}
inline void RaycastResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RaycastResponse.header)
}

// .bosdyn.api.RaycastResponse.Status status = 5;
inline void RaycastResponse::clear_status() {
  _impl_.status_ = 0;
}
inline ::bosdyn::api::RaycastResponse_Status RaycastResponse::_internal_status() const {
  return static_cast< ::bosdyn::api::RaycastResponse_Status >(_impl_.status_);
}
inline ::bosdyn::api::RaycastResponse_Status RaycastResponse::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RaycastResponse.status)
  return _internal_status();
}
inline void RaycastResponse::_internal_set_status(::bosdyn::api::RaycastResponse_Status value) {
  
  _impl_.status_ = value;
}
inline void RaycastResponse::set_status(::bosdyn::api::RaycastResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.RaycastResponse.status)
}

// string message = 6;
inline void RaycastResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& RaycastResponse::message() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RaycastResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RaycastResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.RaycastResponse.message)
}
inline std::string* RaycastResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RaycastResponse.message)
  return _s;
}
inline const std::string& RaycastResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void RaycastResponse::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* RaycastResponse::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* RaycastResponse::release_message() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RaycastResponse.message)
  return _impl_.message_.Release();
}
inline void RaycastResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RaycastResponse.message)
}

// string hit_frame_name = 3;
inline void RaycastResponse::clear_hit_frame_name() {
  _impl_.hit_frame_name_.ClearToEmpty();
}
inline const std::string& RaycastResponse::hit_frame_name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RaycastResponse.hit_frame_name)
  return _internal_hit_frame_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RaycastResponse::set_hit_frame_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hit_frame_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.RaycastResponse.hit_frame_name)
}
inline std::string* RaycastResponse::mutable_hit_frame_name() {
  std::string* _s = _internal_mutable_hit_frame_name();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RaycastResponse.hit_frame_name)
  return _s;
}
inline const std::string& RaycastResponse::_internal_hit_frame_name() const {
  return _impl_.hit_frame_name_.Get();
}
inline void RaycastResponse::_internal_set_hit_frame_name(const std::string& value) {
  
  _impl_.hit_frame_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RaycastResponse::_internal_mutable_hit_frame_name() {
  
  return _impl_.hit_frame_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RaycastResponse::release_hit_frame_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RaycastResponse.hit_frame_name)
  return _impl_.hit_frame_name_.Release();
}
inline void RaycastResponse::set_allocated_hit_frame_name(std::string* hit_frame_name) {
  if (hit_frame_name != nullptr) {
    
  } else {
    
  }
  _impl_.hit_frame_name_.SetAllocated(hit_frame_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hit_frame_name_.IsDefault()) {
    _impl_.hit_frame_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RaycastResponse.hit_frame_name)
}

// repeated .bosdyn.api.RayIntersection hits = 2;
inline int RaycastResponse::_internal_hits_size() const {
  return _impl_.hits_.size();
}
inline int RaycastResponse::hits_size() const {
  return _internal_hits_size();
}
inline void RaycastResponse::clear_hits() {
  _impl_.hits_.Clear();
}
inline ::bosdyn::api::RayIntersection* RaycastResponse::mutable_hits(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RaycastResponse.hits)
  return _impl_.hits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::RayIntersection >*
RaycastResponse::mutable_hits() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.RaycastResponse.hits)
  return &_impl_.hits_;
}
inline const ::bosdyn::api::RayIntersection& RaycastResponse::_internal_hits(int index) const {
  return _impl_.hits_.Get(index);
}
inline const ::bosdyn::api::RayIntersection& RaycastResponse::hits(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RaycastResponse.hits)
  return _internal_hits(index);
}
inline ::bosdyn::api::RayIntersection* RaycastResponse::_internal_add_hits() {
  return _impl_.hits_.Add();
}
inline ::bosdyn::api::RayIntersection* RaycastResponse::add_hits() {
  ::bosdyn::api::RayIntersection* _add = _internal_add_hits();
  // @@protoc_insertion_point(field_add:bosdyn.api.RaycastResponse.hits)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::RayIntersection >&
RaycastResponse::hits() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.RaycastResponse.hits)
  return _impl_.hits_;
}

// .bosdyn.api.FrameTreeSnapshot transforms_snapshot = 4;
inline bool RaycastResponse::_internal_has_transforms_snapshot() const {
  return this != internal_default_instance() && _impl_.transforms_snapshot_ != nullptr;
}
inline bool RaycastResponse::has_transforms_snapshot() const {
  return _internal_has_transforms_snapshot();
}
inline const ::bosdyn::api::FrameTreeSnapshot& RaycastResponse::_internal_transforms_snapshot() const {
  const ::bosdyn::api::FrameTreeSnapshot* p = _impl_.transforms_snapshot_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::FrameTreeSnapshot&>(
      ::bosdyn::api::_FrameTreeSnapshot_default_instance_);
}
inline const ::bosdyn::api::FrameTreeSnapshot& RaycastResponse::transforms_snapshot() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RaycastResponse.transforms_snapshot)
  return _internal_transforms_snapshot();
}
inline void RaycastResponse::unsafe_arena_set_allocated_transforms_snapshot(
    ::bosdyn::api::FrameTreeSnapshot* transforms_snapshot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transforms_snapshot_);
  }
  _impl_.transforms_snapshot_ = transforms_snapshot;
  if (transforms_snapshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.RaycastResponse.transforms_snapshot)
}
inline ::bosdyn::api::FrameTreeSnapshot* RaycastResponse::release_transforms_snapshot() {
  
  ::bosdyn::api::FrameTreeSnapshot* temp = _impl_.transforms_snapshot_;
  _impl_.transforms_snapshot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::FrameTreeSnapshot* RaycastResponse::unsafe_arena_release_transforms_snapshot() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RaycastResponse.transforms_snapshot)
  
  ::bosdyn::api::FrameTreeSnapshot* temp = _impl_.transforms_snapshot_;
  _impl_.transforms_snapshot_ = nullptr;
  return temp;
}
inline ::bosdyn::api::FrameTreeSnapshot* RaycastResponse::_internal_mutable_transforms_snapshot() {
  
  if (_impl_.transforms_snapshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::FrameTreeSnapshot>(GetArenaForAllocation());
    _impl_.transforms_snapshot_ = p;
  }
  return _impl_.transforms_snapshot_;
}
inline ::bosdyn::api::FrameTreeSnapshot* RaycastResponse::mutable_transforms_snapshot() {
  ::bosdyn::api::FrameTreeSnapshot* _msg = _internal_mutable_transforms_snapshot();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RaycastResponse.transforms_snapshot)
  return _msg;
}
inline void RaycastResponse::set_allocated_transforms_snapshot(::bosdyn::api::FrameTreeSnapshot* transforms_snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transforms_snapshot_);
  }
  if (transforms_snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transforms_snapshot));
    if (message_arena != submessage_arena) {
      transforms_snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transforms_snapshot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transforms_snapshot_ = transforms_snapshot;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RaycastResponse.transforms_snapshot)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::RayIntersection_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::RayIntersection_Type>() {
  return ::bosdyn::api::RayIntersection_Type_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::RaycastResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::RaycastResponse_Status>() {
  return ::bosdyn::api::RaycastResponse_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fray_5fcast_2eproto

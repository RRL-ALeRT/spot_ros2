// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bosdyn/api/docking/docking_service.proto
// Original file comments:
// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).
//
#ifndef GRPC_bosdyn_2fapi_2fdocking_2fdocking_5fservice_2eproto__INCLUDED
#define GRPC_bosdyn_2fapi_2fdocking_2fdocking_5fservice_2eproto__INCLUDED

#include "bosdyn/api/docking/docking_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace bosdyn {
namespace api {
namespace docking {

// The DockingService provides an interface to dock and undock the robot from Spot Docks,
// as well as get feedback on command status, and get the current docked status of the robot.
class DockingService final {
 public:
  static constexpr char const* service_full_name() {
    return "bosdyn.api.docking.DockingService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Starts a docking command on the robot.
    virtual ::grpc::Status DockingCommand(::grpc::ClientContext* context, const ::bosdyn::api::docking::DockingCommandRequest& request, ::bosdyn::api::docking::DockingCommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::docking::DockingCommandResponse>> AsyncDockingCommand(::grpc::ClientContext* context, const ::bosdyn::api::docking::DockingCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::docking::DockingCommandResponse>>(AsyncDockingCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::docking::DockingCommandResponse>> PrepareAsyncDockingCommand(::grpc::ClientContext* context, const ::bosdyn::api::docking::DockingCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::docking::DockingCommandResponse>>(PrepareAsyncDockingCommandRaw(context, request, cq));
    }
    // Check the status of a docking command.
    virtual ::grpc::Status DockingCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::docking::DockingCommandFeedbackRequest& request, ::bosdyn::api::docking::DockingCommandFeedbackResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::docking::DockingCommandFeedbackResponse>> AsyncDockingCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::docking::DockingCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::docking::DockingCommandFeedbackResponse>>(AsyncDockingCommandFeedbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::docking::DockingCommandFeedbackResponse>> PrepareAsyncDockingCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::docking::DockingCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::docking::DockingCommandFeedbackResponse>>(PrepareAsyncDockingCommandFeedbackRaw(context, request, cq));
    }
    // Get the configured dock ID ranges.
    virtual ::grpc::Status GetDockingConfig(::grpc::ClientContext* context, const ::bosdyn::api::docking::GetDockingConfigRequest& request, ::bosdyn::api::docking::GetDockingConfigResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::docking::GetDockingConfigResponse>> AsyncGetDockingConfig(::grpc::ClientContext* context, const ::bosdyn::api::docking::GetDockingConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::docking::GetDockingConfigResponse>>(AsyncGetDockingConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::docking::GetDockingConfigResponse>> PrepareAsyncGetDockingConfig(::grpc::ClientContext* context, const ::bosdyn::api::docking::GetDockingConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::docking::GetDockingConfigResponse>>(PrepareAsyncGetDockingConfigRaw(context, request, cq));
    }
    // Get the robot's docking state
    virtual ::grpc::Status GetDockingState(::grpc::ClientContext* context, const ::bosdyn::api::docking::GetDockingStateRequest& request, ::bosdyn::api::docking::GetDockingStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::docking::GetDockingStateResponse>> AsyncGetDockingState(::grpc::ClientContext* context, const ::bosdyn::api::docking::GetDockingStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::docking::GetDockingStateResponse>>(AsyncGetDockingStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::docking::GetDockingStateResponse>> PrepareAsyncGetDockingState(::grpc::ClientContext* context, const ::bosdyn::api::docking::GetDockingStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::docking::GetDockingStateResponse>>(PrepareAsyncGetDockingStateRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Starts a docking command on the robot.
      virtual void DockingCommand(::grpc::ClientContext* context, const ::bosdyn::api::docking::DockingCommandRequest* request, ::bosdyn::api::docking::DockingCommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DockingCommand(::grpc::ClientContext* context, const ::bosdyn::api::docking::DockingCommandRequest* request, ::bosdyn::api::docking::DockingCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Check the status of a docking command.
      virtual void DockingCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::docking::DockingCommandFeedbackRequest* request, ::bosdyn::api::docking::DockingCommandFeedbackResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DockingCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::docking::DockingCommandFeedbackRequest* request, ::bosdyn::api::docking::DockingCommandFeedbackResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get the configured dock ID ranges.
      virtual void GetDockingConfig(::grpc::ClientContext* context, const ::bosdyn::api::docking::GetDockingConfigRequest* request, ::bosdyn::api::docking::GetDockingConfigResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDockingConfig(::grpc::ClientContext* context, const ::bosdyn::api::docking::GetDockingConfigRequest* request, ::bosdyn::api::docking::GetDockingConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get the robot's docking state
      virtual void GetDockingState(::grpc::ClientContext* context, const ::bosdyn::api::docking::GetDockingStateRequest* request, ::bosdyn::api::docking::GetDockingStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDockingState(::grpc::ClientContext* context, const ::bosdyn::api::docking::GetDockingStateRequest* request, ::bosdyn::api::docking::GetDockingStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::docking::DockingCommandResponse>* AsyncDockingCommandRaw(::grpc::ClientContext* context, const ::bosdyn::api::docking::DockingCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::docking::DockingCommandResponse>* PrepareAsyncDockingCommandRaw(::grpc::ClientContext* context, const ::bosdyn::api::docking::DockingCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::docking::DockingCommandFeedbackResponse>* AsyncDockingCommandFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::docking::DockingCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::docking::DockingCommandFeedbackResponse>* PrepareAsyncDockingCommandFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::docking::DockingCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::docking::GetDockingConfigResponse>* AsyncGetDockingConfigRaw(::grpc::ClientContext* context, const ::bosdyn::api::docking::GetDockingConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::docking::GetDockingConfigResponse>* PrepareAsyncGetDockingConfigRaw(::grpc::ClientContext* context, const ::bosdyn::api::docking::GetDockingConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::docking::GetDockingStateResponse>* AsyncGetDockingStateRaw(::grpc::ClientContext* context, const ::bosdyn::api::docking::GetDockingStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::docking::GetDockingStateResponse>* PrepareAsyncGetDockingStateRaw(::grpc::ClientContext* context, const ::bosdyn::api::docking::GetDockingStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status DockingCommand(::grpc::ClientContext* context, const ::bosdyn::api::docking::DockingCommandRequest& request, ::bosdyn::api::docking::DockingCommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::docking::DockingCommandResponse>> AsyncDockingCommand(::grpc::ClientContext* context, const ::bosdyn::api::docking::DockingCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::docking::DockingCommandResponse>>(AsyncDockingCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::docking::DockingCommandResponse>> PrepareAsyncDockingCommand(::grpc::ClientContext* context, const ::bosdyn::api::docking::DockingCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::docking::DockingCommandResponse>>(PrepareAsyncDockingCommandRaw(context, request, cq));
    }
    ::grpc::Status DockingCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::docking::DockingCommandFeedbackRequest& request, ::bosdyn::api::docking::DockingCommandFeedbackResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::docking::DockingCommandFeedbackResponse>> AsyncDockingCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::docking::DockingCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::docking::DockingCommandFeedbackResponse>>(AsyncDockingCommandFeedbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::docking::DockingCommandFeedbackResponse>> PrepareAsyncDockingCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::docking::DockingCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::docking::DockingCommandFeedbackResponse>>(PrepareAsyncDockingCommandFeedbackRaw(context, request, cq));
    }
    ::grpc::Status GetDockingConfig(::grpc::ClientContext* context, const ::bosdyn::api::docking::GetDockingConfigRequest& request, ::bosdyn::api::docking::GetDockingConfigResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::docking::GetDockingConfigResponse>> AsyncGetDockingConfig(::grpc::ClientContext* context, const ::bosdyn::api::docking::GetDockingConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::docking::GetDockingConfigResponse>>(AsyncGetDockingConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::docking::GetDockingConfigResponse>> PrepareAsyncGetDockingConfig(::grpc::ClientContext* context, const ::bosdyn::api::docking::GetDockingConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::docking::GetDockingConfigResponse>>(PrepareAsyncGetDockingConfigRaw(context, request, cq));
    }
    ::grpc::Status GetDockingState(::grpc::ClientContext* context, const ::bosdyn::api::docking::GetDockingStateRequest& request, ::bosdyn::api::docking::GetDockingStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::docking::GetDockingStateResponse>> AsyncGetDockingState(::grpc::ClientContext* context, const ::bosdyn::api::docking::GetDockingStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::docking::GetDockingStateResponse>>(AsyncGetDockingStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::docking::GetDockingStateResponse>> PrepareAsyncGetDockingState(::grpc::ClientContext* context, const ::bosdyn::api::docking::GetDockingStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::docking::GetDockingStateResponse>>(PrepareAsyncGetDockingStateRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void DockingCommand(::grpc::ClientContext* context, const ::bosdyn::api::docking::DockingCommandRequest* request, ::bosdyn::api::docking::DockingCommandResponse* response, std::function<void(::grpc::Status)>) override;
      void DockingCommand(::grpc::ClientContext* context, const ::bosdyn::api::docking::DockingCommandRequest* request, ::bosdyn::api::docking::DockingCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DockingCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::docking::DockingCommandFeedbackRequest* request, ::bosdyn::api::docking::DockingCommandFeedbackResponse* response, std::function<void(::grpc::Status)>) override;
      void DockingCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::docking::DockingCommandFeedbackRequest* request, ::bosdyn::api::docking::DockingCommandFeedbackResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDockingConfig(::grpc::ClientContext* context, const ::bosdyn::api::docking::GetDockingConfigRequest* request, ::bosdyn::api::docking::GetDockingConfigResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDockingConfig(::grpc::ClientContext* context, const ::bosdyn::api::docking::GetDockingConfigRequest* request, ::bosdyn::api::docking::GetDockingConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDockingState(::grpc::ClientContext* context, const ::bosdyn::api::docking::GetDockingStateRequest* request, ::bosdyn::api::docking::GetDockingStateResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDockingState(::grpc::ClientContext* context, const ::bosdyn::api::docking::GetDockingStateRequest* request, ::bosdyn::api::docking::GetDockingStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::docking::DockingCommandResponse>* AsyncDockingCommandRaw(::grpc::ClientContext* context, const ::bosdyn::api::docking::DockingCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::docking::DockingCommandResponse>* PrepareAsyncDockingCommandRaw(::grpc::ClientContext* context, const ::bosdyn::api::docking::DockingCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::docking::DockingCommandFeedbackResponse>* AsyncDockingCommandFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::docking::DockingCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::docking::DockingCommandFeedbackResponse>* PrepareAsyncDockingCommandFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::docking::DockingCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::docking::GetDockingConfigResponse>* AsyncGetDockingConfigRaw(::grpc::ClientContext* context, const ::bosdyn::api::docking::GetDockingConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::docking::GetDockingConfigResponse>* PrepareAsyncGetDockingConfigRaw(::grpc::ClientContext* context, const ::bosdyn::api::docking::GetDockingConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::docking::GetDockingStateResponse>* AsyncGetDockingStateRaw(::grpc::ClientContext* context, const ::bosdyn::api::docking::GetDockingStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::docking::GetDockingStateResponse>* PrepareAsyncGetDockingStateRaw(::grpc::ClientContext* context, const ::bosdyn::api::docking::GetDockingStateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_DockingCommand_;
    const ::grpc::internal::RpcMethod rpcmethod_DockingCommandFeedback_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDockingConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDockingState_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Starts a docking command on the robot.
    virtual ::grpc::Status DockingCommand(::grpc::ServerContext* context, const ::bosdyn::api::docking::DockingCommandRequest* request, ::bosdyn::api::docking::DockingCommandResponse* response);
    // Check the status of a docking command.
    virtual ::grpc::Status DockingCommandFeedback(::grpc::ServerContext* context, const ::bosdyn::api::docking::DockingCommandFeedbackRequest* request, ::bosdyn::api::docking::DockingCommandFeedbackResponse* response);
    // Get the configured dock ID ranges.
    virtual ::grpc::Status GetDockingConfig(::grpc::ServerContext* context, const ::bosdyn::api::docking::GetDockingConfigRequest* request, ::bosdyn::api::docking::GetDockingConfigResponse* response);
    // Get the robot's docking state
    virtual ::grpc::Status GetDockingState(::grpc::ServerContext* context, const ::bosdyn::api::docking::GetDockingStateRequest* request, ::bosdyn::api::docking::GetDockingStateResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_DockingCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DockingCommand() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_DockingCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DockingCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::docking::DockingCommandRequest* /*request*/, ::bosdyn::api::docking::DockingCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDockingCommand(::grpc::ServerContext* context, ::bosdyn::api::docking::DockingCommandRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::docking::DockingCommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DockingCommandFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DockingCommandFeedback() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DockingCommandFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DockingCommandFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::docking::DockingCommandFeedbackRequest* /*request*/, ::bosdyn::api::docking::DockingCommandFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDockingCommandFeedback(::grpc::ServerContext* context, ::bosdyn::api::docking::DockingCommandFeedbackRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::docking::DockingCommandFeedbackResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDockingConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDockingConfig() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetDockingConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDockingConfig(::grpc::ServerContext* /*context*/, const ::bosdyn::api::docking::GetDockingConfigRequest* /*request*/, ::bosdyn::api::docking::GetDockingConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDockingConfig(::grpc::ServerContext* context, ::bosdyn::api::docking::GetDockingConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::docking::GetDockingConfigResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDockingState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDockingState() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetDockingState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDockingState(::grpc::ServerContext* /*context*/, const ::bosdyn::api::docking::GetDockingStateRequest* /*request*/, ::bosdyn::api::docking::GetDockingStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDockingState(::grpc::ServerContext* context, ::bosdyn::api::docking::GetDockingStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::docking::GetDockingStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_DockingCommand<WithAsyncMethod_DockingCommandFeedback<WithAsyncMethod_GetDockingConfig<WithAsyncMethod_GetDockingState<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_DockingCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DockingCommand() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::docking::DockingCommandRequest, ::bosdyn::api::docking::DockingCommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::docking::DockingCommandRequest* request, ::bosdyn::api::docking::DockingCommandResponse* response) { return this->DockingCommand(context, request, response); }));}
    void SetMessageAllocatorFor_DockingCommand(
        ::grpc::MessageAllocator< ::bosdyn::api::docking::DockingCommandRequest, ::bosdyn::api::docking::DockingCommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::docking::DockingCommandRequest, ::bosdyn::api::docking::DockingCommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DockingCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DockingCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::docking::DockingCommandRequest* /*request*/, ::bosdyn::api::docking::DockingCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DockingCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::docking::DockingCommandRequest* /*request*/, ::bosdyn::api::docking::DockingCommandResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DockingCommandFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DockingCommandFeedback() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::docking::DockingCommandFeedbackRequest, ::bosdyn::api::docking::DockingCommandFeedbackResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::docking::DockingCommandFeedbackRequest* request, ::bosdyn::api::docking::DockingCommandFeedbackResponse* response) { return this->DockingCommandFeedback(context, request, response); }));}
    void SetMessageAllocatorFor_DockingCommandFeedback(
        ::grpc::MessageAllocator< ::bosdyn::api::docking::DockingCommandFeedbackRequest, ::bosdyn::api::docking::DockingCommandFeedbackResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::docking::DockingCommandFeedbackRequest, ::bosdyn::api::docking::DockingCommandFeedbackResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DockingCommandFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DockingCommandFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::docking::DockingCommandFeedbackRequest* /*request*/, ::bosdyn::api::docking::DockingCommandFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DockingCommandFeedback(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::docking::DockingCommandFeedbackRequest* /*request*/, ::bosdyn::api::docking::DockingCommandFeedbackResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDockingConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDockingConfig() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::docking::GetDockingConfigRequest, ::bosdyn::api::docking::GetDockingConfigResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::docking::GetDockingConfigRequest* request, ::bosdyn::api::docking::GetDockingConfigResponse* response) { return this->GetDockingConfig(context, request, response); }));}
    void SetMessageAllocatorFor_GetDockingConfig(
        ::grpc::MessageAllocator< ::bosdyn::api::docking::GetDockingConfigRequest, ::bosdyn::api::docking::GetDockingConfigResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::docking::GetDockingConfigRequest, ::bosdyn::api::docking::GetDockingConfigResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDockingConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDockingConfig(::grpc::ServerContext* /*context*/, const ::bosdyn::api::docking::GetDockingConfigRequest* /*request*/, ::bosdyn::api::docking::GetDockingConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDockingConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::docking::GetDockingConfigRequest* /*request*/, ::bosdyn::api::docking::GetDockingConfigResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDockingState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDockingState() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::docking::GetDockingStateRequest, ::bosdyn::api::docking::GetDockingStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::docking::GetDockingStateRequest* request, ::bosdyn::api::docking::GetDockingStateResponse* response) { return this->GetDockingState(context, request, response); }));}
    void SetMessageAllocatorFor_GetDockingState(
        ::grpc::MessageAllocator< ::bosdyn::api::docking::GetDockingStateRequest, ::bosdyn::api::docking::GetDockingStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::docking::GetDockingStateRequest, ::bosdyn::api::docking::GetDockingStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDockingState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDockingState(::grpc::ServerContext* /*context*/, const ::bosdyn::api::docking::GetDockingStateRequest* /*request*/, ::bosdyn::api::docking::GetDockingStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDockingState(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::docking::GetDockingStateRequest* /*request*/, ::bosdyn::api::docking::GetDockingStateResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_DockingCommand<WithCallbackMethod_DockingCommandFeedback<WithCallbackMethod_GetDockingConfig<WithCallbackMethod_GetDockingState<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_DockingCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DockingCommand() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_DockingCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DockingCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::docking::DockingCommandRequest* /*request*/, ::bosdyn::api::docking::DockingCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DockingCommandFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DockingCommandFeedback() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DockingCommandFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DockingCommandFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::docking::DockingCommandFeedbackRequest* /*request*/, ::bosdyn::api::docking::DockingCommandFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDockingConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDockingConfig() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetDockingConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDockingConfig(::grpc::ServerContext* /*context*/, const ::bosdyn::api::docking::GetDockingConfigRequest* /*request*/, ::bosdyn::api::docking::GetDockingConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDockingState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDockingState() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetDockingState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDockingState(::grpc::ServerContext* /*context*/, const ::bosdyn::api::docking::GetDockingStateRequest* /*request*/, ::bosdyn::api::docking::GetDockingStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_DockingCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DockingCommand() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_DockingCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DockingCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::docking::DockingCommandRequest* /*request*/, ::bosdyn::api::docking::DockingCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDockingCommand(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DockingCommandFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DockingCommandFeedback() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DockingCommandFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DockingCommandFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::docking::DockingCommandFeedbackRequest* /*request*/, ::bosdyn::api::docking::DockingCommandFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDockingCommandFeedback(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDockingConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDockingConfig() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetDockingConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDockingConfig(::grpc::ServerContext* /*context*/, const ::bosdyn::api::docking::GetDockingConfigRequest* /*request*/, ::bosdyn::api::docking::GetDockingConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDockingConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDockingState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDockingState() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetDockingState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDockingState(::grpc::ServerContext* /*context*/, const ::bosdyn::api::docking::GetDockingStateRequest* /*request*/, ::bosdyn::api::docking::GetDockingStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDockingState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DockingCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DockingCommand() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DockingCommand(context, request, response); }));
    }
    ~WithRawCallbackMethod_DockingCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DockingCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::docking::DockingCommandRequest* /*request*/, ::bosdyn::api::docking::DockingCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DockingCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DockingCommandFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DockingCommandFeedback() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DockingCommandFeedback(context, request, response); }));
    }
    ~WithRawCallbackMethod_DockingCommandFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DockingCommandFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::docking::DockingCommandFeedbackRequest* /*request*/, ::bosdyn::api::docking::DockingCommandFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DockingCommandFeedback(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDockingConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDockingConfig() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDockingConfig(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDockingConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDockingConfig(::grpc::ServerContext* /*context*/, const ::bosdyn::api::docking::GetDockingConfigRequest* /*request*/, ::bosdyn::api::docking::GetDockingConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDockingConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDockingState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDockingState() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDockingState(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDockingState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDockingState(::grpc::ServerContext* /*context*/, const ::bosdyn::api::docking::GetDockingStateRequest* /*request*/, ::bosdyn::api::docking::GetDockingStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDockingState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DockingCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DockingCommand() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::docking::DockingCommandRequest, ::bosdyn::api::docking::DockingCommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::docking::DockingCommandRequest, ::bosdyn::api::docking::DockingCommandResponse>* streamer) {
                       return this->StreamedDockingCommand(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DockingCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DockingCommand(::grpc::ServerContext* /*context*/, const ::bosdyn::api::docking::DockingCommandRequest* /*request*/, ::bosdyn::api::docking::DockingCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDockingCommand(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::docking::DockingCommandRequest,::bosdyn::api::docking::DockingCommandResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DockingCommandFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DockingCommandFeedback() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::docking::DockingCommandFeedbackRequest, ::bosdyn::api::docking::DockingCommandFeedbackResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::docking::DockingCommandFeedbackRequest, ::bosdyn::api::docking::DockingCommandFeedbackResponse>* streamer) {
                       return this->StreamedDockingCommandFeedback(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DockingCommandFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DockingCommandFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::docking::DockingCommandFeedbackRequest* /*request*/, ::bosdyn::api::docking::DockingCommandFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDockingCommandFeedback(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::docking::DockingCommandFeedbackRequest,::bosdyn::api::docking::DockingCommandFeedbackResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDockingConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDockingConfig() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::docking::GetDockingConfigRequest, ::bosdyn::api::docking::GetDockingConfigResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::docking::GetDockingConfigRequest, ::bosdyn::api::docking::GetDockingConfigResponse>* streamer) {
                       return this->StreamedGetDockingConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDockingConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDockingConfig(::grpc::ServerContext* /*context*/, const ::bosdyn::api::docking::GetDockingConfigRequest* /*request*/, ::bosdyn::api::docking::GetDockingConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDockingConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::docking::GetDockingConfigRequest,::bosdyn::api::docking::GetDockingConfigResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDockingState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDockingState() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::docking::GetDockingStateRequest, ::bosdyn::api::docking::GetDockingStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::docking::GetDockingStateRequest, ::bosdyn::api::docking::GetDockingStateResponse>* streamer) {
                       return this->StreamedGetDockingState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDockingState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDockingState(::grpc::ServerContext* /*context*/, const ::bosdyn::api::docking::GetDockingStateRequest* /*request*/, ::bosdyn::api::docking::GetDockingStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDockingState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::docking::GetDockingStateRequest,::bosdyn::api::docking::GetDockingStateResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_DockingCommand<WithStreamedUnaryMethod_DockingCommandFeedback<WithStreamedUnaryMethod_GetDockingConfig<WithStreamedUnaryMethod_GetDockingState<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_DockingCommand<WithStreamedUnaryMethod_DockingCommandFeedback<WithStreamedUnaryMethod_GetDockingConfig<WithStreamedUnaryMethod_GetDockingState<Service > > > > StreamedService;
};

}  // namespace docking
}  // namespace api
}  // namespace bosdyn


#endif  // GRPC_bosdyn_2fapi_2fdocking_2fdocking_5fservice_2eproto__INCLUDED

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bosdyn/api/mission/mission_service.proto
// Original file comments:
// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).
//
#ifndef GRPC_bosdyn_2fapi_2fmission_2fmission_5fservice_2eproto__INCLUDED
#define GRPC_bosdyn_2fapi_2fmission_2fmission_5fservice_2eproto__INCLUDED

#include "bosdyn/api/mission/mission_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace bosdyn {
namespace api {
namespace mission {

// The MissionService can be used to specify high level autonomous behaviors for Spot using behavior trees.
class MissionService final {
 public:
  static constexpr char const* service_full_name() {
    return "bosdyn.api.mission.MissionService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Load a mission to run later.
    virtual ::grpc::Status LoadMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::LoadMissionRequest& request, ::bosdyn::api::mission::LoadMissionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::LoadMissionResponse>> AsyncLoadMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::LoadMissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::LoadMissionResponse>>(AsyncLoadMissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::LoadMissionResponse>> PrepareAsyncLoadMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::LoadMissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::LoadMissionResponse>>(PrepareAsyncLoadMissionRaw(context, request, cq));
    }
    // Alternative loading method for large missions, that allows you to break the 
    // mission up into multiple streamed requests.  The data chunks should deserialize
    // into a LoadMissionRequest
    std::unique_ptr< ::grpc::ClientWriterInterface< ::bosdyn::api::DataChunk>> LoadMissionAsChunks(::grpc::ClientContext* context, ::bosdyn::api::mission::LoadMissionResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::bosdyn::api::DataChunk>>(LoadMissionAsChunksRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::bosdyn::api::DataChunk>> AsyncLoadMissionAsChunks(::grpc::ClientContext* context, ::bosdyn::api::mission::LoadMissionResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::bosdyn::api::DataChunk>>(AsyncLoadMissionAsChunksRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::bosdyn::api::DataChunk>> PrepareAsyncLoadMissionAsChunks(::grpc::ClientContext* context, ::bosdyn::api::mission::LoadMissionResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::bosdyn::api::DataChunk>>(PrepareAsyncLoadMissionAsChunksRaw(context, response, cq));
    }
    // Start executing a loaded mission.
    // Will not restart a mission that has run to completion. Use RestartMission to do that.
    virtual ::grpc::Status PlayMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::PlayMissionRequest& request, ::bosdyn::api::mission::PlayMissionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::PlayMissionResponse>> AsyncPlayMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::PlayMissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::PlayMissionResponse>>(AsyncPlayMissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::PlayMissionResponse>> PrepareAsyncPlayMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::PlayMissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::PlayMissionResponse>>(PrepareAsyncPlayMissionRaw(context, request, cq));
    }
    // Pause mission execution.
    virtual ::grpc::Status PauseMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::PauseMissionRequest& request, ::bosdyn::api::mission::PauseMissionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::PauseMissionResponse>> AsyncPauseMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::PauseMissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::PauseMissionResponse>>(AsyncPauseMissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::PauseMissionResponse>> PrepareAsyncPauseMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::PauseMissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::PauseMissionResponse>>(PrepareAsyncPauseMissionRaw(context, request, cq));
    }
    // Stop a running mission.
    // Must use RestartMission, not PlayMission, to begin from the beginning.
    virtual ::grpc::Status StopMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::StopMissionRequest& request, ::bosdyn::api::mission::StopMissionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::StopMissionResponse>> AsyncStopMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::StopMissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::StopMissionResponse>>(AsyncStopMissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::StopMissionResponse>> PrepareAsyncStopMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::StopMissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::StopMissionResponse>>(PrepareAsyncStopMissionRaw(context, request, cq));
    }
    // Start executing a loaded mission from the beginning.
    // Does not need to be called after LoadMission.
    virtual ::grpc::Status RestartMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::RestartMissionRequest& request, ::bosdyn::api::mission::RestartMissionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::RestartMissionResponse>> AsyncRestartMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::RestartMissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::RestartMissionResponse>>(AsyncRestartMissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::RestartMissionResponse>> PrepareAsyncRestartMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::RestartMissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::RestartMissionResponse>>(PrepareAsyncRestartMissionRaw(context, request, cq));
    }
    // Get the state of the mission.
    virtual ::grpc::Status GetState(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetStateRequest& request, ::bosdyn::api::mission::GetStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::GetStateResponse>> AsyncGetState(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::GetStateResponse>>(AsyncGetStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::GetStateResponse>> PrepareAsyncGetState(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::GetStateResponse>>(PrepareAsyncGetStateRaw(context, request, cq));
    }
    // Get static information regarding the mission. Used to interpret mission state.
    virtual ::grpc::Status GetInfo(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetInfoRequest& request, ::bosdyn::api::mission::GetInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::GetInfoResponse>> AsyncGetInfo(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::GetInfoResponse>>(AsyncGetInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::GetInfoResponse>> PrepareAsyncGetInfo(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::GetInfoResponse>>(PrepareAsyncGetInfoRaw(context, request, cq));
    }
    // Download the mission as it was uploaded to the service.
    virtual ::grpc::Status GetMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetMissionRequest& request, ::bosdyn::api::mission::GetMissionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::GetMissionResponse>> AsyncGetMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetMissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::GetMissionResponse>>(AsyncGetMissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::GetMissionResponse>> PrepareAsyncGetMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetMissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::GetMissionResponse>>(PrepareAsyncGetMissionRaw(context, request, cq));
    }
    // Specify an answer to the question asked by the mission.
    virtual ::grpc::Status AnswerQuestion(::grpc::ClientContext* context, const ::bosdyn::api::mission::AnswerQuestionRequest& request, ::bosdyn::api::mission::AnswerQuestionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::AnswerQuestionResponse>> AsyncAnswerQuestion(::grpc::ClientContext* context, const ::bosdyn::api::mission::AnswerQuestionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::AnswerQuestionResponse>>(AsyncAnswerQuestionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::AnswerQuestionResponse>> PrepareAsyncAnswerQuestion(::grpc::ClientContext* context, const ::bosdyn::api::mission::AnswerQuestionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::AnswerQuestionResponse>>(PrepareAsyncAnswerQuestionRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Load a mission to run later.
      virtual void LoadMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::LoadMissionRequest* request, ::bosdyn::api::mission::LoadMissionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LoadMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::LoadMissionRequest* request, ::bosdyn::api::mission::LoadMissionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Alternative loading method for large missions, that allows you to break the 
      // mission up into multiple streamed requests.  The data chunks should deserialize
      // into a LoadMissionRequest
      virtual void LoadMissionAsChunks(::grpc::ClientContext* context, ::bosdyn::api::mission::LoadMissionResponse* response, ::grpc::ClientWriteReactor< ::bosdyn::api::DataChunk>* reactor) = 0;
      // Start executing a loaded mission.
      // Will not restart a mission that has run to completion. Use RestartMission to do that.
      virtual void PlayMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::PlayMissionRequest* request, ::bosdyn::api::mission::PlayMissionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PlayMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::PlayMissionRequest* request, ::bosdyn::api::mission::PlayMissionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Pause mission execution.
      virtual void PauseMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::PauseMissionRequest* request, ::bosdyn::api::mission::PauseMissionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PauseMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::PauseMissionRequest* request, ::bosdyn::api::mission::PauseMissionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Stop a running mission.
      // Must use RestartMission, not PlayMission, to begin from the beginning.
      virtual void StopMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::StopMissionRequest* request, ::bosdyn::api::mission::StopMissionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::StopMissionRequest* request, ::bosdyn::api::mission::StopMissionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Start executing a loaded mission from the beginning.
      // Does not need to be called after LoadMission.
      virtual void RestartMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::RestartMissionRequest* request, ::bosdyn::api::mission::RestartMissionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RestartMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::RestartMissionRequest* request, ::bosdyn::api::mission::RestartMissionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get the state of the mission.
      virtual void GetState(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetStateRequest* request, ::bosdyn::api::mission::GetStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetState(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetStateRequest* request, ::bosdyn::api::mission::GetStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get static information regarding the mission. Used to interpret mission state.
      virtual void GetInfo(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetInfoRequest* request, ::bosdyn::api::mission::GetInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetInfo(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetInfoRequest* request, ::bosdyn::api::mission::GetInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Download the mission as it was uploaded to the service.
      virtual void GetMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetMissionRequest* request, ::bosdyn::api::mission::GetMissionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetMissionRequest* request, ::bosdyn::api::mission::GetMissionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Specify an answer to the question asked by the mission.
      virtual void AnswerQuestion(::grpc::ClientContext* context, const ::bosdyn::api::mission::AnswerQuestionRequest* request, ::bosdyn::api::mission::AnswerQuestionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AnswerQuestion(::grpc::ClientContext* context, const ::bosdyn::api::mission::AnswerQuestionRequest* request, ::bosdyn::api::mission::AnswerQuestionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::LoadMissionResponse>* AsyncLoadMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::LoadMissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::LoadMissionResponse>* PrepareAsyncLoadMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::LoadMissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::bosdyn::api::DataChunk>* LoadMissionAsChunksRaw(::grpc::ClientContext* context, ::bosdyn::api::mission::LoadMissionResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::bosdyn::api::DataChunk>* AsyncLoadMissionAsChunksRaw(::grpc::ClientContext* context, ::bosdyn::api::mission::LoadMissionResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::bosdyn::api::DataChunk>* PrepareAsyncLoadMissionAsChunksRaw(::grpc::ClientContext* context, ::bosdyn::api::mission::LoadMissionResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::PlayMissionResponse>* AsyncPlayMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::PlayMissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::PlayMissionResponse>* PrepareAsyncPlayMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::PlayMissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::PauseMissionResponse>* AsyncPauseMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::PauseMissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::PauseMissionResponse>* PrepareAsyncPauseMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::PauseMissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::StopMissionResponse>* AsyncStopMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::StopMissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::StopMissionResponse>* PrepareAsyncStopMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::StopMissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::RestartMissionResponse>* AsyncRestartMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::RestartMissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::RestartMissionResponse>* PrepareAsyncRestartMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::RestartMissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::GetStateResponse>* AsyncGetStateRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::GetStateResponse>* PrepareAsyncGetStateRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::GetInfoResponse>* AsyncGetInfoRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::GetInfoResponse>* PrepareAsyncGetInfoRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::GetMissionResponse>* AsyncGetMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetMissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::GetMissionResponse>* PrepareAsyncGetMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetMissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::AnswerQuestionResponse>* AsyncAnswerQuestionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::AnswerQuestionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::mission::AnswerQuestionResponse>* PrepareAsyncAnswerQuestionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::AnswerQuestionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status LoadMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::LoadMissionRequest& request, ::bosdyn::api::mission::LoadMissionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::LoadMissionResponse>> AsyncLoadMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::LoadMissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::LoadMissionResponse>>(AsyncLoadMissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::LoadMissionResponse>> PrepareAsyncLoadMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::LoadMissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::LoadMissionResponse>>(PrepareAsyncLoadMissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::bosdyn::api::DataChunk>> LoadMissionAsChunks(::grpc::ClientContext* context, ::bosdyn::api::mission::LoadMissionResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::bosdyn::api::DataChunk>>(LoadMissionAsChunksRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::bosdyn::api::DataChunk>> AsyncLoadMissionAsChunks(::grpc::ClientContext* context, ::bosdyn::api::mission::LoadMissionResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::bosdyn::api::DataChunk>>(AsyncLoadMissionAsChunksRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::bosdyn::api::DataChunk>> PrepareAsyncLoadMissionAsChunks(::grpc::ClientContext* context, ::bosdyn::api::mission::LoadMissionResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::bosdyn::api::DataChunk>>(PrepareAsyncLoadMissionAsChunksRaw(context, response, cq));
    }
    ::grpc::Status PlayMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::PlayMissionRequest& request, ::bosdyn::api::mission::PlayMissionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::PlayMissionResponse>> AsyncPlayMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::PlayMissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::PlayMissionResponse>>(AsyncPlayMissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::PlayMissionResponse>> PrepareAsyncPlayMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::PlayMissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::PlayMissionResponse>>(PrepareAsyncPlayMissionRaw(context, request, cq));
    }
    ::grpc::Status PauseMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::PauseMissionRequest& request, ::bosdyn::api::mission::PauseMissionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::PauseMissionResponse>> AsyncPauseMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::PauseMissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::PauseMissionResponse>>(AsyncPauseMissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::PauseMissionResponse>> PrepareAsyncPauseMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::PauseMissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::PauseMissionResponse>>(PrepareAsyncPauseMissionRaw(context, request, cq));
    }
    ::grpc::Status StopMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::StopMissionRequest& request, ::bosdyn::api::mission::StopMissionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::StopMissionResponse>> AsyncStopMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::StopMissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::StopMissionResponse>>(AsyncStopMissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::StopMissionResponse>> PrepareAsyncStopMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::StopMissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::StopMissionResponse>>(PrepareAsyncStopMissionRaw(context, request, cq));
    }
    ::grpc::Status RestartMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::RestartMissionRequest& request, ::bosdyn::api::mission::RestartMissionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::RestartMissionResponse>> AsyncRestartMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::RestartMissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::RestartMissionResponse>>(AsyncRestartMissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::RestartMissionResponse>> PrepareAsyncRestartMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::RestartMissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::RestartMissionResponse>>(PrepareAsyncRestartMissionRaw(context, request, cq));
    }
    ::grpc::Status GetState(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetStateRequest& request, ::bosdyn::api::mission::GetStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::GetStateResponse>> AsyncGetState(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::GetStateResponse>>(AsyncGetStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::GetStateResponse>> PrepareAsyncGetState(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::GetStateResponse>>(PrepareAsyncGetStateRaw(context, request, cq));
    }
    ::grpc::Status GetInfo(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetInfoRequest& request, ::bosdyn::api::mission::GetInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::GetInfoResponse>> AsyncGetInfo(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::GetInfoResponse>>(AsyncGetInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::GetInfoResponse>> PrepareAsyncGetInfo(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::GetInfoResponse>>(PrepareAsyncGetInfoRaw(context, request, cq));
    }
    ::grpc::Status GetMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetMissionRequest& request, ::bosdyn::api::mission::GetMissionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::GetMissionResponse>> AsyncGetMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetMissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::GetMissionResponse>>(AsyncGetMissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::GetMissionResponse>> PrepareAsyncGetMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetMissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::GetMissionResponse>>(PrepareAsyncGetMissionRaw(context, request, cq));
    }
    ::grpc::Status AnswerQuestion(::grpc::ClientContext* context, const ::bosdyn::api::mission::AnswerQuestionRequest& request, ::bosdyn::api::mission::AnswerQuestionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::AnswerQuestionResponse>> AsyncAnswerQuestion(::grpc::ClientContext* context, const ::bosdyn::api::mission::AnswerQuestionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::AnswerQuestionResponse>>(AsyncAnswerQuestionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::AnswerQuestionResponse>> PrepareAsyncAnswerQuestion(::grpc::ClientContext* context, const ::bosdyn::api::mission::AnswerQuestionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::AnswerQuestionResponse>>(PrepareAsyncAnswerQuestionRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void LoadMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::LoadMissionRequest* request, ::bosdyn::api::mission::LoadMissionResponse* response, std::function<void(::grpc::Status)>) override;
      void LoadMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::LoadMissionRequest* request, ::bosdyn::api::mission::LoadMissionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LoadMissionAsChunks(::grpc::ClientContext* context, ::bosdyn::api::mission::LoadMissionResponse* response, ::grpc::ClientWriteReactor< ::bosdyn::api::DataChunk>* reactor) override;
      void PlayMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::PlayMissionRequest* request, ::bosdyn::api::mission::PlayMissionResponse* response, std::function<void(::grpc::Status)>) override;
      void PlayMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::PlayMissionRequest* request, ::bosdyn::api::mission::PlayMissionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PauseMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::PauseMissionRequest* request, ::bosdyn::api::mission::PauseMissionResponse* response, std::function<void(::grpc::Status)>) override;
      void PauseMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::PauseMissionRequest* request, ::bosdyn::api::mission::PauseMissionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StopMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::StopMissionRequest* request, ::bosdyn::api::mission::StopMissionResponse* response, std::function<void(::grpc::Status)>) override;
      void StopMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::StopMissionRequest* request, ::bosdyn::api::mission::StopMissionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RestartMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::RestartMissionRequest* request, ::bosdyn::api::mission::RestartMissionResponse* response, std::function<void(::grpc::Status)>) override;
      void RestartMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::RestartMissionRequest* request, ::bosdyn::api::mission::RestartMissionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetState(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetStateRequest* request, ::bosdyn::api::mission::GetStateResponse* response, std::function<void(::grpc::Status)>) override;
      void GetState(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetStateRequest* request, ::bosdyn::api::mission::GetStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetInfo(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetInfoRequest* request, ::bosdyn::api::mission::GetInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void GetInfo(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetInfoRequest* request, ::bosdyn::api::mission::GetInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetMissionRequest* request, ::bosdyn::api::mission::GetMissionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetMissionRequest* request, ::bosdyn::api::mission::GetMissionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AnswerQuestion(::grpc::ClientContext* context, const ::bosdyn::api::mission::AnswerQuestionRequest* request, ::bosdyn::api::mission::AnswerQuestionResponse* response, std::function<void(::grpc::Status)>) override;
      void AnswerQuestion(::grpc::ClientContext* context, const ::bosdyn::api::mission::AnswerQuestionRequest* request, ::bosdyn::api::mission::AnswerQuestionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::LoadMissionResponse>* AsyncLoadMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::LoadMissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::LoadMissionResponse>* PrepareAsyncLoadMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::LoadMissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::bosdyn::api::DataChunk>* LoadMissionAsChunksRaw(::grpc::ClientContext* context, ::bosdyn::api::mission::LoadMissionResponse* response) override;
    ::grpc::ClientAsyncWriter< ::bosdyn::api::DataChunk>* AsyncLoadMissionAsChunksRaw(::grpc::ClientContext* context, ::bosdyn::api::mission::LoadMissionResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::bosdyn::api::DataChunk>* PrepareAsyncLoadMissionAsChunksRaw(::grpc::ClientContext* context, ::bosdyn::api::mission::LoadMissionResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::PlayMissionResponse>* AsyncPlayMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::PlayMissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::PlayMissionResponse>* PrepareAsyncPlayMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::PlayMissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::PauseMissionResponse>* AsyncPauseMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::PauseMissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::PauseMissionResponse>* PrepareAsyncPauseMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::PauseMissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::StopMissionResponse>* AsyncStopMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::StopMissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::StopMissionResponse>* PrepareAsyncStopMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::StopMissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::RestartMissionResponse>* AsyncRestartMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::RestartMissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::RestartMissionResponse>* PrepareAsyncRestartMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::RestartMissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::GetStateResponse>* AsyncGetStateRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::GetStateResponse>* PrepareAsyncGetStateRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::GetInfoResponse>* AsyncGetInfoRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::GetInfoResponse>* PrepareAsyncGetInfoRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::GetMissionResponse>* AsyncGetMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetMissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::GetMissionResponse>* PrepareAsyncGetMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetMissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::AnswerQuestionResponse>* AsyncAnswerQuestionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::AnswerQuestionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::AnswerQuestionResponse>* PrepareAsyncAnswerQuestionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::AnswerQuestionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_LoadMission_;
    const ::grpc::internal::RpcMethod rpcmethod_LoadMissionAsChunks_;
    const ::grpc::internal::RpcMethod rpcmethod_PlayMission_;
    const ::grpc::internal::RpcMethod rpcmethod_PauseMission_;
    const ::grpc::internal::RpcMethod rpcmethod_StopMission_;
    const ::grpc::internal::RpcMethod rpcmethod_RestartMission_;
    const ::grpc::internal::RpcMethod rpcmethod_GetState_;
    const ::grpc::internal::RpcMethod rpcmethod_GetInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMission_;
    const ::grpc::internal::RpcMethod rpcmethod_AnswerQuestion_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Load a mission to run later.
    virtual ::grpc::Status LoadMission(::grpc::ServerContext* context, const ::bosdyn::api::mission::LoadMissionRequest* request, ::bosdyn::api::mission::LoadMissionResponse* response);
    // Alternative loading method for large missions, that allows you to break the 
    // mission up into multiple streamed requests.  The data chunks should deserialize
    // into a LoadMissionRequest
    virtual ::grpc::Status LoadMissionAsChunks(::grpc::ServerContext* context, ::grpc::ServerReader< ::bosdyn::api::DataChunk>* reader, ::bosdyn::api::mission::LoadMissionResponse* response);
    // Start executing a loaded mission.
    // Will not restart a mission that has run to completion. Use RestartMission to do that.
    virtual ::grpc::Status PlayMission(::grpc::ServerContext* context, const ::bosdyn::api::mission::PlayMissionRequest* request, ::bosdyn::api::mission::PlayMissionResponse* response);
    // Pause mission execution.
    virtual ::grpc::Status PauseMission(::grpc::ServerContext* context, const ::bosdyn::api::mission::PauseMissionRequest* request, ::bosdyn::api::mission::PauseMissionResponse* response);
    // Stop a running mission.
    // Must use RestartMission, not PlayMission, to begin from the beginning.
    virtual ::grpc::Status StopMission(::grpc::ServerContext* context, const ::bosdyn::api::mission::StopMissionRequest* request, ::bosdyn::api::mission::StopMissionResponse* response);
    // Start executing a loaded mission from the beginning.
    // Does not need to be called after LoadMission.
    virtual ::grpc::Status RestartMission(::grpc::ServerContext* context, const ::bosdyn::api::mission::RestartMissionRequest* request, ::bosdyn::api::mission::RestartMissionResponse* response);
    // Get the state of the mission.
    virtual ::grpc::Status GetState(::grpc::ServerContext* context, const ::bosdyn::api::mission::GetStateRequest* request, ::bosdyn::api::mission::GetStateResponse* response);
    // Get static information regarding the mission. Used to interpret mission state.
    virtual ::grpc::Status GetInfo(::grpc::ServerContext* context, const ::bosdyn::api::mission::GetInfoRequest* request, ::bosdyn::api::mission::GetInfoResponse* response);
    // Download the mission as it was uploaded to the service.
    virtual ::grpc::Status GetMission(::grpc::ServerContext* context, const ::bosdyn::api::mission::GetMissionRequest* request, ::bosdyn::api::mission::GetMissionResponse* response);
    // Specify an answer to the question asked by the mission.
    virtual ::grpc::Status AnswerQuestion(::grpc::ServerContext* context, const ::bosdyn::api::mission::AnswerQuestionRequest* request, ::bosdyn::api::mission::AnswerQuestionResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LoadMission() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_LoadMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::LoadMissionRequest* /*request*/, ::bosdyn::api::mission::LoadMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadMission(::grpc::ServerContext* context, ::bosdyn::api::mission::LoadMissionRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::mission::LoadMissionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadMissionAsChunks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LoadMissionAsChunks() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_LoadMissionAsChunks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadMissionAsChunks(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::bosdyn::api::DataChunk>* /*reader*/, ::bosdyn::api::mission::LoadMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadMissionAsChunks(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::bosdyn::api::mission::LoadMissionResponse, ::bosdyn::api::DataChunk>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PlayMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PlayMission() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_PlayMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::PlayMissionRequest* /*request*/, ::bosdyn::api::mission::PlayMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPlayMission(::grpc::ServerContext* context, ::bosdyn::api::mission::PlayMissionRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::mission::PlayMissionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PauseMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PauseMission() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_PauseMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::PauseMissionRequest* /*request*/, ::bosdyn::api::mission::PauseMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPauseMission(::grpc::ServerContext* context, ::bosdyn::api::mission::PauseMissionRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::mission::PauseMissionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StopMission() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_StopMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::StopMissionRequest* /*request*/, ::bosdyn::api::mission::StopMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopMission(::grpc::ServerContext* context, ::bosdyn::api::mission::StopMissionRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::mission::StopMissionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RestartMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RestartMission() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_RestartMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::RestartMissionRequest* /*request*/, ::bosdyn::api::mission::RestartMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRestartMission(::grpc::ServerContext* context, ::bosdyn::api::mission::RestartMissionRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::mission::RestartMissionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetState() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetState(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::GetStateRequest* /*request*/, ::bosdyn::api::mission::GetStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetState(::grpc::ServerContext* context, ::bosdyn::api::mission::GetStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::mission::GetStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetInfo() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::GetInfoRequest* /*request*/, ::bosdyn::api::mission::GetInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInfo(::grpc::ServerContext* context, ::bosdyn::api::mission::GetInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::mission::GetInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMission() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::GetMissionRequest* /*request*/, ::bosdyn::api::mission::GetMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMission(::grpc::ServerContext* context, ::bosdyn::api::mission::GetMissionRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::mission::GetMissionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AnswerQuestion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AnswerQuestion() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_AnswerQuestion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AnswerQuestion(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::AnswerQuestionRequest* /*request*/, ::bosdyn::api::mission::AnswerQuestionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAnswerQuestion(::grpc::ServerContext* context, ::bosdyn::api::mission::AnswerQuestionRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::mission::AnswerQuestionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_LoadMission<WithAsyncMethod_LoadMissionAsChunks<WithAsyncMethod_PlayMission<WithAsyncMethod_PauseMission<WithAsyncMethod_StopMission<WithAsyncMethod_RestartMission<WithAsyncMethod_GetState<WithAsyncMethod_GetInfo<WithAsyncMethod_GetMission<WithAsyncMethod_AnswerQuestion<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_LoadMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LoadMission() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::mission::LoadMissionRequest, ::bosdyn::api::mission::LoadMissionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::mission::LoadMissionRequest* request, ::bosdyn::api::mission::LoadMissionResponse* response) { return this->LoadMission(context, request, response); }));}
    void SetMessageAllocatorFor_LoadMission(
        ::grpc::MessageAllocator< ::bosdyn::api::mission::LoadMissionRequest, ::bosdyn::api::mission::LoadMissionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::mission::LoadMissionRequest, ::bosdyn::api::mission::LoadMissionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LoadMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::LoadMissionRequest* /*request*/, ::bosdyn::api::mission::LoadMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LoadMission(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::mission::LoadMissionRequest* /*request*/, ::bosdyn::api::mission::LoadMissionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LoadMissionAsChunks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LoadMissionAsChunks() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::bosdyn::api::DataChunk, ::bosdyn::api::mission::LoadMissionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, ::bosdyn::api::mission::LoadMissionResponse* response) { return this->LoadMissionAsChunks(context, response); }));
    }
    ~WithCallbackMethod_LoadMissionAsChunks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadMissionAsChunks(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::bosdyn::api::DataChunk>* /*reader*/, ::bosdyn::api::mission::LoadMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::bosdyn::api::DataChunk>* LoadMissionAsChunks(
      ::grpc::CallbackServerContext* /*context*/, ::bosdyn::api::mission::LoadMissionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PlayMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PlayMission() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::mission::PlayMissionRequest, ::bosdyn::api::mission::PlayMissionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::mission::PlayMissionRequest* request, ::bosdyn::api::mission::PlayMissionResponse* response) { return this->PlayMission(context, request, response); }));}
    void SetMessageAllocatorFor_PlayMission(
        ::grpc::MessageAllocator< ::bosdyn::api::mission::PlayMissionRequest, ::bosdyn::api::mission::PlayMissionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::mission::PlayMissionRequest, ::bosdyn::api::mission::PlayMissionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PlayMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::PlayMissionRequest* /*request*/, ::bosdyn::api::mission::PlayMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PlayMission(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::mission::PlayMissionRequest* /*request*/, ::bosdyn::api::mission::PlayMissionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PauseMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PauseMission() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::mission::PauseMissionRequest, ::bosdyn::api::mission::PauseMissionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::mission::PauseMissionRequest* request, ::bosdyn::api::mission::PauseMissionResponse* response) { return this->PauseMission(context, request, response); }));}
    void SetMessageAllocatorFor_PauseMission(
        ::grpc::MessageAllocator< ::bosdyn::api::mission::PauseMissionRequest, ::bosdyn::api::mission::PauseMissionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::mission::PauseMissionRequest, ::bosdyn::api::mission::PauseMissionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PauseMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::PauseMissionRequest* /*request*/, ::bosdyn::api::mission::PauseMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PauseMission(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::mission::PauseMissionRequest* /*request*/, ::bosdyn::api::mission::PauseMissionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StopMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StopMission() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::mission::StopMissionRequest, ::bosdyn::api::mission::StopMissionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::mission::StopMissionRequest* request, ::bosdyn::api::mission::StopMissionResponse* response) { return this->StopMission(context, request, response); }));}
    void SetMessageAllocatorFor_StopMission(
        ::grpc::MessageAllocator< ::bosdyn::api::mission::StopMissionRequest, ::bosdyn::api::mission::StopMissionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::mission::StopMissionRequest, ::bosdyn::api::mission::StopMissionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StopMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::StopMissionRequest* /*request*/, ::bosdyn::api::mission::StopMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StopMission(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::mission::StopMissionRequest* /*request*/, ::bosdyn::api::mission::StopMissionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RestartMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RestartMission() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::mission::RestartMissionRequest, ::bosdyn::api::mission::RestartMissionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::mission::RestartMissionRequest* request, ::bosdyn::api::mission::RestartMissionResponse* response) { return this->RestartMission(context, request, response); }));}
    void SetMessageAllocatorFor_RestartMission(
        ::grpc::MessageAllocator< ::bosdyn::api::mission::RestartMissionRequest, ::bosdyn::api::mission::RestartMissionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::mission::RestartMissionRequest, ::bosdyn::api::mission::RestartMissionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RestartMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::RestartMissionRequest* /*request*/, ::bosdyn::api::mission::RestartMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RestartMission(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::mission::RestartMissionRequest* /*request*/, ::bosdyn::api::mission::RestartMissionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetState() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::mission::GetStateRequest, ::bosdyn::api::mission::GetStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::mission::GetStateRequest* request, ::bosdyn::api::mission::GetStateResponse* response) { return this->GetState(context, request, response); }));}
    void SetMessageAllocatorFor_GetState(
        ::grpc::MessageAllocator< ::bosdyn::api::mission::GetStateRequest, ::bosdyn::api::mission::GetStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::mission::GetStateRequest, ::bosdyn::api::mission::GetStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetState(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::GetStateRequest* /*request*/, ::bosdyn::api::mission::GetStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetState(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::mission::GetStateRequest* /*request*/, ::bosdyn::api::mission::GetStateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetInfo() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::mission::GetInfoRequest, ::bosdyn::api::mission::GetInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::mission::GetInfoRequest* request, ::bosdyn::api::mission::GetInfoResponse* response) { return this->GetInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetInfo(
        ::grpc::MessageAllocator< ::bosdyn::api::mission::GetInfoRequest, ::bosdyn::api::mission::GetInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::mission::GetInfoRequest, ::bosdyn::api::mission::GetInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::GetInfoRequest* /*request*/, ::bosdyn::api::mission::GetInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::mission::GetInfoRequest* /*request*/, ::bosdyn::api::mission::GetInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMission() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::mission::GetMissionRequest, ::bosdyn::api::mission::GetMissionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::mission::GetMissionRequest* request, ::bosdyn::api::mission::GetMissionResponse* response) { return this->GetMission(context, request, response); }));}
    void SetMessageAllocatorFor_GetMission(
        ::grpc::MessageAllocator< ::bosdyn::api::mission::GetMissionRequest, ::bosdyn::api::mission::GetMissionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::mission::GetMissionRequest, ::bosdyn::api::mission::GetMissionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::GetMissionRequest* /*request*/, ::bosdyn::api::mission::GetMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMission(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::mission::GetMissionRequest* /*request*/, ::bosdyn::api::mission::GetMissionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AnswerQuestion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AnswerQuestion() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::mission::AnswerQuestionRequest, ::bosdyn::api::mission::AnswerQuestionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bosdyn::api::mission::AnswerQuestionRequest* request, ::bosdyn::api::mission::AnswerQuestionResponse* response) { return this->AnswerQuestion(context, request, response); }));}
    void SetMessageAllocatorFor_AnswerQuestion(
        ::grpc::MessageAllocator< ::bosdyn::api::mission::AnswerQuestionRequest, ::bosdyn::api::mission::AnswerQuestionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::mission::AnswerQuestionRequest, ::bosdyn::api::mission::AnswerQuestionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AnswerQuestion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AnswerQuestion(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::AnswerQuestionRequest* /*request*/, ::bosdyn::api::mission::AnswerQuestionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AnswerQuestion(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::mission::AnswerQuestionRequest* /*request*/, ::bosdyn::api::mission::AnswerQuestionResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_LoadMission<WithCallbackMethod_LoadMissionAsChunks<WithCallbackMethod_PlayMission<WithCallbackMethod_PauseMission<WithCallbackMethod_StopMission<WithCallbackMethod_RestartMission<WithCallbackMethod_GetState<WithCallbackMethod_GetInfo<WithCallbackMethod_GetMission<WithCallbackMethod_AnswerQuestion<Service > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_LoadMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LoadMission() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_LoadMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::LoadMissionRequest* /*request*/, ::bosdyn::api::mission::LoadMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoadMissionAsChunks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LoadMissionAsChunks() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_LoadMissionAsChunks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadMissionAsChunks(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::bosdyn::api::DataChunk>* /*reader*/, ::bosdyn::api::mission::LoadMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PlayMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PlayMission() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_PlayMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::PlayMissionRequest* /*request*/, ::bosdyn::api::mission::PlayMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PauseMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PauseMission() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_PauseMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::PauseMissionRequest* /*request*/, ::bosdyn::api::mission::PauseMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StopMission() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_StopMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::StopMissionRequest* /*request*/, ::bosdyn::api::mission::StopMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RestartMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RestartMission() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_RestartMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::RestartMissionRequest* /*request*/, ::bosdyn::api::mission::RestartMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetState() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetState(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::GetStateRequest* /*request*/, ::bosdyn::api::mission::GetStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetInfo() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::GetInfoRequest* /*request*/, ::bosdyn::api::mission::GetInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMission() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::GetMissionRequest* /*request*/, ::bosdyn::api::mission::GetMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AnswerQuestion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AnswerQuestion() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_AnswerQuestion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AnswerQuestion(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::AnswerQuestionRequest* /*request*/, ::bosdyn::api::mission::AnswerQuestionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_LoadMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LoadMission() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_LoadMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::LoadMissionRequest* /*request*/, ::bosdyn::api::mission::LoadMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadMission(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LoadMissionAsChunks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LoadMissionAsChunks() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_LoadMissionAsChunks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadMissionAsChunks(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::bosdyn::api::DataChunk>* /*reader*/, ::bosdyn::api::mission::LoadMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadMissionAsChunks(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PlayMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PlayMission() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_PlayMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::PlayMissionRequest* /*request*/, ::bosdyn::api::mission::PlayMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPlayMission(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PauseMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PauseMission() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_PauseMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::PauseMissionRequest* /*request*/, ::bosdyn::api::mission::PauseMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPauseMission(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StopMission() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_StopMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::StopMissionRequest* /*request*/, ::bosdyn::api::mission::StopMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopMission(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RestartMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RestartMission() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_RestartMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::RestartMissionRequest* /*request*/, ::bosdyn::api::mission::RestartMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRestartMission(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetState() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetState(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::GetStateRequest* /*request*/, ::bosdyn::api::mission::GetStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetInfo() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::GetInfoRequest* /*request*/, ::bosdyn::api::mission::GetInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMission() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::GetMissionRequest* /*request*/, ::bosdyn::api::mission::GetMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMission(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AnswerQuestion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AnswerQuestion() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_AnswerQuestion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AnswerQuestion(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::AnswerQuestionRequest* /*request*/, ::bosdyn::api::mission::AnswerQuestionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAnswerQuestion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LoadMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LoadMission() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LoadMission(context, request, response); }));
    }
    ~WithRawCallbackMethod_LoadMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::LoadMissionRequest* /*request*/, ::bosdyn::api::mission::LoadMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LoadMission(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LoadMissionAsChunks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LoadMissionAsChunks() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->LoadMissionAsChunks(context, response); }));
    }
    ~WithRawCallbackMethod_LoadMissionAsChunks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadMissionAsChunks(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::bosdyn::api::DataChunk>* /*reader*/, ::bosdyn::api::mission::LoadMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* LoadMissionAsChunks(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PlayMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PlayMission() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PlayMission(context, request, response); }));
    }
    ~WithRawCallbackMethod_PlayMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::PlayMissionRequest* /*request*/, ::bosdyn::api::mission::PlayMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PlayMission(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PauseMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PauseMission() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PauseMission(context, request, response); }));
    }
    ~WithRawCallbackMethod_PauseMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::PauseMissionRequest* /*request*/, ::bosdyn::api::mission::PauseMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PauseMission(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StopMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StopMission() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StopMission(context, request, response); }));
    }
    ~WithRawCallbackMethod_StopMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::StopMissionRequest* /*request*/, ::bosdyn::api::mission::StopMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StopMission(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RestartMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RestartMission() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RestartMission(context, request, response); }));
    }
    ~WithRawCallbackMethod_RestartMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::RestartMissionRequest* /*request*/, ::bosdyn::api::mission::RestartMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RestartMission(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetState() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetState(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetState(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::GetStateRequest* /*request*/, ::bosdyn::api::mission::GetStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetInfo() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::GetInfoRequest* /*request*/, ::bosdyn::api::mission::GetInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMission() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMission(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::GetMissionRequest* /*request*/, ::bosdyn::api::mission::GetMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMission(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AnswerQuestion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AnswerQuestion() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AnswerQuestion(context, request, response); }));
    }
    ~WithRawCallbackMethod_AnswerQuestion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AnswerQuestion(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::AnswerQuestionRequest* /*request*/, ::bosdyn::api::mission::AnswerQuestionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AnswerQuestion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoadMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LoadMission() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::mission::LoadMissionRequest, ::bosdyn::api::mission::LoadMissionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::mission::LoadMissionRequest, ::bosdyn::api::mission::LoadMissionResponse>* streamer) {
                       return this->StreamedLoadMission(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LoadMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::LoadMissionRequest* /*request*/, ::bosdyn::api::mission::LoadMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoadMission(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::mission::LoadMissionRequest,::bosdyn::api::mission::LoadMissionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PlayMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PlayMission() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::mission::PlayMissionRequest, ::bosdyn::api::mission::PlayMissionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::mission::PlayMissionRequest, ::bosdyn::api::mission::PlayMissionResponse>* streamer) {
                       return this->StreamedPlayMission(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PlayMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PlayMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::PlayMissionRequest* /*request*/, ::bosdyn::api::mission::PlayMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPlayMission(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::mission::PlayMissionRequest,::bosdyn::api::mission::PlayMissionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PauseMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PauseMission() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::mission::PauseMissionRequest, ::bosdyn::api::mission::PauseMissionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::mission::PauseMissionRequest, ::bosdyn::api::mission::PauseMissionResponse>* streamer) {
                       return this->StreamedPauseMission(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PauseMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PauseMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::PauseMissionRequest* /*request*/, ::bosdyn::api::mission::PauseMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPauseMission(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::mission::PauseMissionRequest,::bosdyn::api::mission::PauseMissionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StopMission() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::mission::StopMissionRequest, ::bosdyn::api::mission::StopMissionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::mission::StopMissionRequest, ::bosdyn::api::mission::StopMissionResponse>* streamer) {
                       return this->StreamedStopMission(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StopMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::StopMissionRequest* /*request*/, ::bosdyn::api::mission::StopMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopMission(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::mission::StopMissionRequest,::bosdyn::api::mission::StopMissionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RestartMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RestartMission() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::mission::RestartMissionRequest, ::bosdyn::api::mission::RestartMissionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::mission::RestartMissionRequest, ::bosdyn::api::mission::RestartMissionResponse>* streamer) {
                       return this->StreamedRestartMission(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RestartMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RestartMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::RestartMissionRequest* /*request*/, ::bosdyn::api::mission::RestartMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRestartMission(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::mission::RestartMissionRequest,::bosdyn::api::mission::RestartMissionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetState() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::mission::GetStateRequest, ::bosdyn::api::mission::GetStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::mission::GetStateRequest, ::bosdyn::api::mission::GetStateResponse>* streamer) {
                       return this->StreamedGetState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetState(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::GetStateRequest* /*request*/, ::bosdyn::api::mission::GetStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::mission::GetStateRequest,::bosdyn::api::mission::GetStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetInfo() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::mission::GetInfoRequest, ::bosdyn::api::mission::GetInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::mission::GetInfoRequest, ::bosdyn::api::mission::GetInfoResponse>* streamer) {
                       return this->StreamedGetInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::GetInfoRequest* /*request*/, ::bosdyn::api::mission::GetInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::mission::GetInfoRequest,::bosdyn::api::mission::GetInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMission() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::mission::GetMissionRequest, ::bosdyn::api::mission::GetMissionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::mission::GetMissionRequest, ::bosdyn::api::mission::GetMissionResponse>* streamer) {
                       return this->StreamedGetMission(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMission(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::GetMissionRequest* /*request*/, ::bosdyn::api::mission::GetMissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMission(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::mission::GetMissionRequest,::bosdyn::api::mission::GetMissionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AnswerQuestion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AnswerQuestion() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::mission::AnswerQuestionRequest, ::bosdyn::api::mission::AnswerQuestionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::mission::AnswerQuestionRequest, ::bosdyn::api::mission::AnswerQuestionResponse>* streamer) {
                       return this->StreamedAnswerQuestion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AnswerQuestion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AnswerQuestion(::grpc::ServerContext* /*context*/, const ::bosdyn::api::mission::AnswerQuestionRequest* /*request*/, ::bosdyn::api::mission::AnswerQuestionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAnswerQuestion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::mission::AnswerQuestionRequest,::bosdyn::api::mission::AnswerQuestionResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_LoadMission<WithStreamedUnaryMethod_PlayMission<WithStreamedUnaryMethod_PauseMission<WithStreamedUnaryMethod_StopMission<WithStreamedUnaryMethod_RestartMission<WithStreamedUnaryMethod_GetState<WithStreamedUnaryMethod_GetInfo<WithStreamedUnaryMethod_GetMission<WithStreamedUnaryMethod_AnswerQuestion<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_LoadMission<WithStreamedUnaryMethod_PlayMission<WithStreamedUnaryMethod_PauseMission<WithStreamedUnaryMethod_StopMission<WithStreamedUnaryMethod_RestartMission<WithStreamedUnaryMethod_GetState<WithStreamedUnaryMethod_GetInfo<WithStreamedUnaryMethod_GetMission<WithStreamedUnaryMethod_AnswerQuestion<Service > > > > > > > > > StreamedService;
};

}  // namespace mission
}  // namespace api
}  // namespace bosdyn


#endif  // GRPC_bosdyn_2fapi_2fmission_2fmission_5fservice_2eproto__INCLUDED

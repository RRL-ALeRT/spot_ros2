// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/spot/choreography_params.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/geometry.pb.h"
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
namespace bosdyn {
namespace api {
namespace spot {
class AnimateParams;
struct AnimateParamsDefaultTypeInternal;
extern AnimateParamsDefaultTypeInternal _AnimateParams_default_instance_;
class ArmMoveParams;
struct ArmMoveParamsDefaultTypeInternal;
extern ArmMoveParamsDefaultTypeInternal _ArmMoveParams_default_instance_;
class BodyHoldParams;
struct BodyHoldParamsDefaultTypeInternal;
extern BodyHoldParamsDefaultTypeInternal _BodyHoldParams_default_instance_;
class BourreeParams;
struct BourreeParamsDefaultTypeInternal;
extern BourreeParamsDefaultTypeInternal _BourreeParams_default_instance_;
class ButtCircleParams;
struct ButtCircleParamsDefaultTypeInternal;
extern ButtCircleParamsDefaultTypeInternal _ButtCircleParams_default_instance_;
class ChickenHeadParams;
struct ChickenHeadParamsDefaultTypeInternal;
extern ChickenHeadParamsDefaultTypeInternal _ChickenHeadParams_default_instance_;
class ClapParams;
struct ClapParamsDefaultTypeInternal;
extern ClapParamsDefaultTypeInternal _ClapParams_default_instance_;
class Color;
struct ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class CrawlParams;
struct CrawlParamsDefaultTypeInternal;
extern CrawlParamsDefaultTypeInternal _CrawlParams_default_instance_;
class EulerRateZYXValue;
struct EulerRateZYXValueDefaultTypeInternal;
extern EulerRateZYXValueDefaultTypeInternal _EulerRateZYXValue_default_instance_;
class EulerZYXValue;
struct EulerZYXValueDefaultTypeInternal;
extern EulerZYXValueDefaultTypeInternal _EulerZYXValue_default_instance_;
class FadeColorParams;
struct FadeColorParamsDefaultTypeInternal;
extern FadeColorParamsDefaultTypeInternal _FadeColorParams_default_instance_;
class FidgetStandParams;
struct FidgetStandParamsDefaultTypeInternal;
extern FidgetStandParamsDefaultTypeInternal _FidgetStandParams_default_instance_;
class Figure8Params;
struct Figure8ParamsDefaultTypeInternal;
extern Figure8ParamsDefaultTypeInternal _Figure8Params_default_instance_;
class FrameSnapshotParams;
struct FrameSnapshotParamsDefaultTypeInternal;
extern FrameSnapshotParamsDefaultTypeInternal _FrameSnapshotParams_default_instance_;
class FrontUpParams;
struct FrontUpParamsDefaultTypeInternal;
extern FrontUpParamsDefaultTypeInternal _FrontUpParams_default_instance_;
class GotoParams;
struct GotoParamsDefaultTypeInternal;
extern GotoParamsDefaultTypeInternal _GotoParams_default_instance_;
class GripperParams;
struct GripperParamsDefaultTypeInternal;
extern GripperParamsDefaultTypeInternal _GripperParams_default_instance_;
class HopParams;
struct HopParamsDefaultTypeInternal;
extern HopParamsDefaultTypeInternal _HopParams_default_instance_;
class IndependentColorParams;
struct IndependentColorParamsDefaultTypeInternal;
extern IndependentColorParamsDefaultTypeInternal _IndependentColorParams_default_instance_;
class JumpParams;
struct JumpParamsDefaultTypeInternal;
extern JumpParamsDefaultTypeInternal _JumpParams_default_instance_;
class KneelCircleParams;
struct KneelCircleParamsDefaultTypeInternal;
extern KneelCircleParamsDefaultTypeInternal _KneelCircleParams_default_instance_;
class KneelLegMove2Params;
struct KneelLegMove2ParamsDefaultTypeInternal;
extern KneelLegMove2ParamsDefaultTypeInternal _KneelLegMove2Params_default_instance_;
class KneelLegMoveParams;
struct KneelLegMoveParamsDefaultTypeInternal;
extern KneelLegMoveParamsDefaultTypeInternal _KneelLegMoveParams_default_instance_;
class Pace2StepParams;
struct Pace2StepParamsDefaultTypeInternal;
extern Pace2StepParamsDefaultTypeInternal _Pace2StepParams_default_instance_;
class RandomRotateParams;
struct RandomRotateParamsDefaultTypeInternal;
extern RandomRotateParamsDefaultTypeInternal _RandomRotateParams_default_instance_;
class RippleColorParams;
struct RippleColorParamsDefaultTypeInternal;
extern RippleColorParamsDefaultTypeInternal _RippleColorParams_default_instance_;
class RotateBodyParams;
struct RotateBodyParamsDefaultTypeInternal;
extern RotateBodyParamsDefaultTypeInternal _RotateBodyParams_default_instance_;
class RunningManParams;
struct RunningManParamsDefaultTypeInternal;
extern RunningManParamsDefaultTypeInternal _RunningManParams_default_instance_;
class SetColorParams;
struct SetColorParamsDefaultTypeInternal;
extern SetColorParamsDefaultTypeInternal _SetColorParams_default_instance_;
class SideParams;
struct SideParamsDefaultTypeInternal;
extern SideParamsDefaultTypeInternal _SideParams_default_instance_;
class StepParams;
struct StepParamsDefaultTypeInternal;
extern StepParamsDefaultTypeInternal _StepParams_default_instance_;
class SwayParams;
struct SwayParamsDefaultTypeInternal;
extern SwayParamsDefaultTypeInternal _SwayParams_default_instance_;
class TurnParams;
struct TurnParamsDefaultTypeInternal;
extern TurnParamsDefaultTypeInternal _TurnParams_default_instance_;
class TwerkParams;
struct TwerkParamsDefaultTypeInternal;
extern TwerkParamsDefaultTypeInternal _TwerkParams_default_instance_;
class WorkspaceArmMoveParams;
struct WorkspaceArmMoveParamsDefaultTypeInternal;
extern WorkspaceArmMoveParamsDefaultTypeInternal _WorkspaceArmMoveParams_default_instance_;
}  // namespace spot
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::spot::AnimateParams* Arena::CreateMaybeMessage<::bosdyn::api::spot::AnimateParams>(Arena*);
template<> ::bosdyn::api::spot::ArmMoveParams* Arena::CreateMaybeMessage<::bosdyn::api::spot::ArmMoveParams>(Arena*);
template<> ::bosdyn::api::spot::BodyHoldParams* Arena::CreateMaybeMessage<::bosdyn::api::spot::BodyHoldParams>(Arena*);
template<> ::bosdyn::api::spot::BourreeParams* Arena::CreateMaybeMessage<::bosdyn::api::spot::BourreeParams>(Arena*);
template<> ::bosdyn::api::spot::ButtCircleParams* Arena::CreateMaybeMessage<::bosdyn::api::spot::ButtCircleParams>(Arena*);
template<> ::bosdyn::api::spot::ChickenHeadParams* Arena::CreateMaybeMessage<::bosdyn::api::spot::ChickenHeadParams>(Arena*);
template<> ::bosdyn::api::spot::ClapParams* Arena::CreateMaybeMessage<::bosdyn::api::spot::ClapParams>(Arena*);
template<> ::bosdyn::api::spot::Color* Arena::CreateMaybeMessage<::bosdyn::api::spot::Color>(Arena*);
template<> ::bosdyn::api::spot::CrawlParams* Arena::CreateMaybeMessage<::bosdyn::api::spot::CrawlParams>(Arena*);
template<> ::bosdyn::api::spot::EulerRateZYXValue* Arena::CreateMaybeMessage<::bosdyn::api::spot::EulerRateZYXValue>(Arena*);
template<> ::bosdyn::api::spot::EulerZYXValue* Arena::CreateMaybeMessage<::bosdyn::api::spot::EulerZYXValue>(Arena*);
template<> ::bosdyn::api::spot::FadeColorParams* Arena::CreateMaybeMessage<::bosdyn::api::spot::FadeColorParams>(Arena*);
template<> ::bosdyn::api::spot::FidgetStandParams* Arena::CreateMaybeMessage<::bosdyn::api::spot::FidgetStandParams>(Arena*);
template<> ::bosdyn::api::spot::Figure8Params* Arena::CreateMaybeMessage<::bosdyn::api::spot::Figure8Params>(Arena*);
template<> ::bosdyn::api::spot::FrameSnapshotParams* Arena::CreateMaybeMessage<::bosdyn::api::spot::FrameSnapshotParams>(Arena*);
template<> ::bosdyn::api::spot::FrontUpParams* Arena::CreateMaybeMessage<::bosdyn::api::spot::FrontUpParams>(Arena*);
template<> ::bosdyn::api::spot::GotoParams* Arena::CreateMaybeMessage<::bosdyn::api::spot::GotoParams>(Arena*);
template<> ::bosdyn::api::spot::GripperParams* Arena::CreateMaybeMessage<::bosdyn::api::spot::GripperParams>(Arena*);
template<> ::bosdyn::api::spot::HopParams* Arena::CreateMaybeMessage<::bosdyn::api::spot::HopParams>(Arena*);
template<> ::bosdyn::api::spot::IndependentColorParams* Arena::CreateMaybeMessage<::bosdyn::api::spot::IndependentColorParams>(Arena*);
template<> ::bosdyn::api::spot::JumpParams* Arena::CreateMaybeMessage<::bosdyn::api::spot::JumpParams>(Arena*);
template<> ::bosdyn::api::spot::KneelCircleParams* Arena::CreateMaybeMessage<::bosdyn::api::spot::KneelCircleParams>(Arena*);
template<> ::bosdyn::api::spot::KneelLegMove2Params* Arena::CreateMaybeMessage<::bosdyn::api::spot::KneelLegMove2Params>(Arena*);
template<> ::bosdyn::api::spot::KneelLegMoveParams* Arena::CreateMaybeMessage<::bosdyn::api::spot::KneelLegMoveParams>(Arena*);
template<> ::bosdyn::api::spot::Pace2StepParams* Arena::CreateMaybeMessage<::bosdyn::api::spot::Pace2StepParams>(Arena*);
template<> ::bosdyn::api::spot::RandomRotateParams* Arena::CreateMaybeMessage<::bosdyn::api::spot::RandomRotateParams>(Arena*);
template<> ::bosdyn::api::spot::RippleColorParams* Arena::CreateMaybeMessage<::bosdyn::api::spot::RippleColorParams>(Arena*);
template<> ::bosdyn::api::spot::RotateBodyParams* Arena::CreateMaybeMessage<::bosdyn::api::spot::RotateBodyParams>(Arena*);
template<> ::bosdyn::api::spot::RunningManParams* Arena::CreateMaybeMessage<::bosdyn::api::spot::RunningManParams>(Arena*);
template<> ::bosdyn::api::spot::SetColorParams* Arena::CreateMaybeMessage<::bosdyn::api::spot::SetColorParams>(Arena*);
template<> ::bosdyn::api::spot::SideParams* Arena::CreateMaybeMessage<::bosdyn::api::spot::SideParams>(Arena*);
template<> ::bosdyn::api::spot::StepParams* Arena::CreateMaybeMessage<::bosdyn::api::spot::StepParams>(Arena*);
template<> ::bosdyn::api::spot::SwayParams* Arena::CreateMaybeMessage<::bosdyn::api::spot::SwayParams>(Arena*);
template<> ::bosdyn::api::spot::TurnParams* Arena::CreateMaybeMessage<::bosdyn::api::spot::TurnParams>(Arena*);
template<> ::bosdyn::api::spot::TwerkParams* Arena::CreateMaybeMessage<::bosdyn::api::spot::TwerkParams>(Arena*);
template<> ::bosdyn::api::spot::WorkspaceArmMoveParams* Arena::CreateMaybeMessage<::bosdyn::api::spot::WorkspaceArmMoveParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {
namespace spot {

enum SwayParams_SwayStyle : int {
  SwayParams_SwayStyle_SWAY_STYLE_UNKNOWN = 0,
  SwayParams_SwayStyle_SWAY_STYLE_STANDARD = 1,
  SwayParams_SwayStyle_SWAY_STYLE_FAST_OUT = 2,
  SwayParams_SwayStyle_SWAY_STYLE_FAST_RETURN = 3,
  SwayParams_SwayStyle_SWAY_STYLE_SQUARE = 4,
  SwayParams_SwayStyle_SWAY_STYLE_SPIKE = 5,
  SwayParams_SwayStyle_SWAY_STYLE_PLATEAU = 6,
  SwayParams_SwayStyle_SwayParams_SwayStyle_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SwayParams_SwayStyle_SwayParams_SwayStyle_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SwayParams_SwayStyle_IsValid(int value);
constexpr SwayParams_SwayStyle SwayParams_SwayStyle_SwayStyle_MIN = SwayParams_SwayStyle_SWAY_STYLE_UNKNOWN;
constexpr SwayParams_SwayStyle SwayParams_SwayStyle_SwayStyle_MAX = SwayParams_SwayStyle_SWAY_STYLE_PLATEAU;
constexpr int SwayParams_SwayStyle_SwayStyle_ARRAYSIZE = SwayParams_SwayStyle_SwayStyle_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SwayParams_SwayStyle_descriptor();
template<typename T>
inline const std::string& SwayParams_SwayStyle_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SwayParams_SwayStyle>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SwayParams_SwayStyle_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SwayParams_SwayStyle_descriptor(), enum_t_value);
}
inline bool SwayParams_SwayStyle_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SwayParams_SwayStyle* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SwayParams_SwayStyle>(
    SwayParams_SwayStyle_descriptor(), name, value);
}
enum SideParams_Side : int {
  SideParams_Side_SIDE_UNKNOWN = 0,
  SideParams_Side_SIDE_LEFT = 1,
  SideParams_Side_SIDE_RIGHT = 2,
  SideParams_Side_SideParams_Side_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SideParams_Side_SideParams_Side_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SideParams_Side_IsValid(int value);
constexpr SideParams_Side SideParams_Side_Side_MIN = SideParams_Side_SIDE_UNKNOWN;
constexpr SideParams_Side SideParams_Side_Side_MAX = SideParams_Side_SIDE_RIGHT;
constexpr int SideParams_Side_Side_ARRAYSIZE = SideParams_Side_Side_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SideParams_Side_descriptor();
template<typename T>
inline const std::string& SideParams_Side_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SideParams_Side>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SideParams_Side_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SideParams_Side_descriptor(), enum_t_value);
}
inline bool SideParams_Side_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SideParams_Side* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SideParams_Side>(
    SideParams_Side_descriptor(), name, value);
}
enum JumpParams_Lead : int {
  JumpParams_Lead_LEAD_UNKNOWN = 0,
  JumpParams_Lead_LEAD_AUTO = 1,
  JumpParams_Lead_LEAD_FRONT = 2,
  JumpParams_Lead_LEAD_HIND = 3,
  JumpParams_Lead_LEAD_LEFT = 4,
  JumpParams_Lead_LEAD_RIGHT = 5,
  JumpParams_Lead_JumpParams_Lead_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  JumpParams_Lead_JumpParams_Lead_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool JumpParams_Lead_IsValid(int value);
constexpr JumpParams_Lead JumpParams_Lead_Lead_MIN = JumpParams_Lead_LEAD_UNKNOWN;
constexpr JumpParams_Lead JumpParams_Lead_Lead_MAX = JumpParams_Lead_LEAD_RIGHT;
constexpr int JumpParams_Lead_Lead_ARRAYSIZE = JumpParams_Lead_Lead_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JumpParams_Lead_descriptor();
template<typename T>
inline const std::string& JumpParams_Lead_Name(T enum_t_value) {
  static_assert(::std::is_same<T, JumpParams_Lead>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function JumpParams_Lead_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    JumpParams_Lead_descriptor(), enum_t_value);
}
inline bool JumpParams_Lead_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, JumpParams_Lead* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<JumpParams_Lead>(
    JumpParams_Lead_descriptor(), name, value);
}
enum FidgetStandParams_FidgetPreset : int {
  FidgetStandParams_FidgetPreset_PRESET_UNKNOWN = 0,
  FidgetStandParams_FidgetPreset_PRESET_CUSTOM = 1,
  FidgetStandParams_FidgetPreset_PRESET_INTEREST = 2,
  FidgetStandParams_FidgetPreset_PRESET_PLAYFUL = 3,
  FidgetStandParams_FidgetPreset_PRESET_FEAR = 4,
  FidgetStandParams_FidgetPreset_PRESET_NERVOUS = 5,
  FidgetStandParams_FidgetPreset_PRESET_EXHAUSTED = 6,
  FidgetStandParams_FidgetPreset_FidgetStandParams_FidgetPreset_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FidgetStandParams_FidgetPreset_FidgetStandParams_FidgetPreset_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FidgetStandParams_FidgetPreset_IsValid(int value);
constexpr FidgetStandParams_FidgetPreset FidgetStandParams_FidgetPreset_FidgetPreset_MIN = FidgetStandParams_FidgetPreset_PRESET_UNKNOWN;
constexpr FidgetStandParams_FidgetPreset FidgetStandParams_FidgetPreset_FidgetPreset_MAX = FidgetStandParams_FidgetPreset_PRESET_EXHAUSTED;
constexpr int FidgetStandParams_FidgetPreset_FidgetPreset_ARRAYSIZE = FidgetStandParams_FidgetPreset_FidgetPreset_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FidgetStandParams_FidgetPreset_descriptor();
template<typename T>
inline const std::string& FidgetStandParams_FidgetPreset_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FidgetStandParams_FidgetPreset>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FidgetStandParams_FidgetPreset_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FidgetStandParams_FidgetPreset_descriptor(), enum_t_value);
}
inline bool FidgetStandParams_FidgetPreset_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FidgetStandParams_FidgetPreset* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FidgetStandParams_FidgetPreset>(
    FidgetStandParams_FidgetPreset_descriptor(), name, value);
}
enum FrameSnapshotParams_Inclusion : int {
  FrameSnapshotParams_Inclusion_INCLUSION_UNKNOWN = 0,
  FrameSnapshotParams_Inclusion_INCLUSION_IF_STANCE = 1,
  FrameSnapshotParams_Inclusion_INCLUSION_INCLUDED = 2,
  FrameSnapshotParams_Inclusion_INCLUSION_EXCLUDED = 3,
  FrameSnapshotParams_Inclusion_FrameSnapshotParams_Inclusion_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FrameSnapshotParams_Inclusion_FrameSnapshotParams_Inclusion_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FrameSnapshotParams_Inclusion_IsValid(int value);
constexpr FrameSnapshotParams_Inclusion FrameSnapshotParams_Inclusion_Inclusion_MIN = FrameSnapshotParams_Inclusion_INCLUSION_UNKNOWN;
constexpr FrameSnapshotParams_Inclusion FrameSnapshotParams_Inclusion_Inclusion_MAX = FrameSnapshotParams_Inclusion_INCLUSION_EXCLUDED;
constexpr int FrameSnapshotParams_Inclusion_Inclusion_ARRAYSIZE = FrameSnapshotParams_Inclusion_Inclusion_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FrameSnapshotParams_Inclusion_descriptor();
template<typename T>
inline const std::string& FrameSnapshotParams_Inclusion_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FrameSnapshotParams_Inclusion>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FrameSnapshotParams_Inclusion_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FrameSnapshotParams_Inclusion_descriptor(), enum_t_value);
}
inline bool FrameSnapshotParams_Inclusion_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FrameSnapshotParams_Inclusion* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FrameSnapshotParams_Inclusion>(
    FrameSnapshotParams_Inclusion_descriptor(), name, value);
}
enum RippleColorParams_Pattern : int {
  RippleColorParams_Pattern_PATTERN_UNKNOWN = 0,
  RippleColorParams_Pattern_PATTERN_FLASHING = 1,
  RippleColorParams_Pattern_PATTERN_SNAKE = 2,
  RippleColorParams_Pattern_PATTERN_ALTERNATE_COLORS = 3,
  RippleColorParams_Pattern_PATTERN_FINE_GRAINED_ALTERNATE_COLORS = 4,
  RippleColorParams_Pattern_RippleColorParams_Pattern_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RippleColorParams_Pattern_RippleColorParams_Pattern_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RippleColorParams_Pattern_IsValid(int value);
constexpr RippleColorParams_Pattern RippleColorParams_Pattern_Pattern_MIN = RippleColorParams_Pattern_PATTERN_UNKNOWN;
constexpr RippleColorParams_Pattern RippleColorParams_Pattern_Pattern_MAX = RippleColorParams_Pattern_PATTERN_FINE_GRAINED_ALTERNATE_COLORS;
constexpr int RippleColorParams_Pattern_Pattern_ARRAYSIZE = RippleColorParams_Pattern_Pattern_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RippleColorParams_Pattern_descriptor();
template<typename T>
inline const std::string& RippleColorParams_Pattern_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RippleColorParams_Pattern>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RippleColorParams_Pattern_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RippleColorParams_Pattern_descriptor(), enum_t_value);
}
inline bool RippleColorParams_Pattern_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RippleColorParams_Pattern* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RippleColorParams_Pattern>(
    RippleColorParams_Pattern_descriptor(), name, value);
}
enum RippleColorParams_LightSide : int {
  RippleColorParams_LightSide_LIGHT_SIDE_UNKNOWN = 0,
  RippleColorParams_LightSide_LIGHT_SIDE_LEFT = 1,
  RippleColorParams_LightSide_LIGHT_SIDE_RIGHT = 2,
  RippleColorParams_LightSide_LIGHT_SIDE_BOTH_IN_SEQUENCE = 3,
  RippleColorParams_LightSide_LIGHT_SIDE_BOTH_MATCHING = 4,
  RippleColorParams_LightSide_RippleColorParams_LightSide_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RippleColorParams_LightSide_RippleColorParams_LightSide_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RippleColorParams_LightSide_IsValid(int value);
constexpr RippleColorParams_LightSide RippleColorParams_LightSide_LightSide_MIN = RippleColorParams_LightSide_LIGHT_SIDE_UNKNOWN;
constexpr RippleColorParams_LightSide RippleColorParams_LightSide_LightSide_MAX = RippleColorParams_LightSide_LIGHT_SIDE_BOTH_MATCHING;
constexpr int RippleColorParams_LightSide_LightSide_ARRAYSIZE = RippleColorParams_LightSide_LightSide_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RippleColorParams_LightSide_descriptor();
template<typename T>
inline const std::string& RippleColorParams_LightSide_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RippleColorParams_LightSide>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RippleColorParams_LightSide_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RippleColorParams_LightSide_descriptor(), enum_t_value);
}
inline bool RippleColorParams_LightSide_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RippleColorParams_LightSide* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RippleColorParams_LightSide>(
    RippleColorParams_LightSide_descriptor(), name, value);
}
enum Pivot : int {
  PIVOT_UNKNOWN = 0,
  PIVOT_FRONT = 1,
  PIVOT_HIND = 2,
  PIVOT_CENTER = 3,
  Pivot_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Pivot_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Pivot_IsValid(int value);
constexpr Pivot Pivot_MIN = PIVOT_UNKNOWN;
constexpr Pivot Pivot_MAX = PIVOT_CENTER;
constexpr int Pivot_ARRAYSIZE = Pivot_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Pivot_descriptor();
template<typename T>
inline const std::string& Pivot_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Pivot>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Pivot_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Pivot_descriptor(), enum_t_value);
}
inline bool Pivot_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Pivot* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Pivot>(
    Pivot_descriptor(), name, value);
}
enum Easing : int {
  EASING_UNKNOWN = 0,
  EASING_LINEAR = 1,
  EASING_QUADRATIC_INPUT = 2,
  EASING_QUADRATIC_OUTPUT = 3,
  EASING_QUADRATIC_IN_OUT = 4,
  EASING_CUBIC_INPUT = 5,
  EASING_CUBIC_OUTPUT = 6,
  EASING_CUBIC_IN_OUT = 7,
  EASING_EXPONENTIAL_INPUT = 8,
  EASING_EXPONENTIAL_OUTPUT = 9,
  EASING_EXPONENTIAL_IN_OUT = 10,
  Easing_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Easing_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Easing_IsValid(int value);
constexpr Easing Easing_MIN = EASING_UNKNOWN;
constexpr Easing Easing_MAX = EASING_EXPONENTIAL_IN_OUT;
constexpr int Easing_ARRAYSIZE = Easing_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Easing_descriptor();
template<typename T>
inline const std::string& Easing_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Easing>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Easing_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Easing_descriptor(), enum_t_value);
}
inline bool Easing_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Easing* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Easing>(
    Easing_descriptor(), name, value);
}
enum ArmMoveFrame : int {
  ARM_MOVE_FRAME_UNKNOWN = 0,
  ARM_MOVE_FRAME_CENTER_OF_FOOTPRINT = 1,
  ARM_MOVE_FRAME_HAND = 2,
  ARM_MOVE_FRAME_BODY = 3,
  ARM_MOVE_FRAME_SHOULDER = 4,
  ARM_MOVE_FRAME_SHADOW = 5,
  ARM_MOVE_FRAME_DANCE = 6,
  ArmMoveFrame_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ArmMoveFrame_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ArmMoveFrame_IsValid(int value);
constexpr ArmMoveFrame ArmMoveFrame_MIN = ARM_MOVE_FRAME_UNKNOWN;
constexpr ArmMoveFrame ArmMoveFrame_MAX = ARM_MOVE_FRAME_DANCE;
constexpr int ArmMoveFrame_ARRAYSIZE = ArmMoveFrame_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ArmMoveFrame_descriptor();
template<typename T>
inline const std::string& ArmMoveFrame_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ArmMoveFrame>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ArmMoveFrame_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ArmMoveFrame_descriptor(), enum_t_value);
}
inline bool ArmMoveFrame_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ArmMoveFrame* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ArmMoveFrame>(
    ArmMoveFrame_descriptor(), name, value);
}
enum Leg : int {
  LEG_UNKNOWN = 0,
  LEG_FRONT_LEFT = 1,
  LEG_FRONT_RIGHT = 2,
  LEG_HIND_LEFT = 3,
  LEG_HIND_RIGHT = 4,
  LEG_NO_LEG = -1,
  Leg_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Leg_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Leg_IsValid(int value);
constexpr Leg Leg_MIN = LEG_NO_LEG;
constexpr Leg Leg_MAX = LEG_HIND_RIGHT;
constexpr int Leg_ARRAYSIZE = Leg_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Leg_descriptor();
template<typename T>
inline const std::string& Leg_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Leg>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Leg_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Leg_descriptor(), enum_t_value);
}
inline bool Leg_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Leg* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Leg>(
    Leg_descriptor(), name, value);
}
enum LedLight : int {
  LED_LIGHT_UNKNOWN = 0,
  LED_LIGHT_LEFT1 = 1,
  LED_LIGHT_LEFT2 = 2,
  LED_LIGHT_LEFT3 = 3,
  LED_LIGHT_LEFT4 = 4,
  LED_LIGHT_RIGHT1 = 5,
  LED_LIGHT_RIGHT2 = 6,
  LED_LIGHT_RIGHT3 = 7,
  LED_LIGHT_RIGHT4 = 8,
  LedLight_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LedLight_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LedLight_IsValid(int value);
constexpr LedLight LedLight_MIN = LED_LIGHT_UNKNOWN;
constexpr LedLight LedLight_MAX = LED_LIGHT_RIGHT4;
constexpr int LedLight_ARRAYSIZE = LedLight_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LedLight_descriptor();
template<typename T>
inline const std::string& LedLight_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LedLight>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LedLight_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LedLight_descriptor(), enum_t_value);
}
inline bool LedLight_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LedLight* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LedLight>(
    LedLight_descriptor(), name, value);
}
// ===================================================================

class EulerZYXValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.EulerZYXValue) */ {
 public:
  inline EulerZYXValue() : EulerZYXValue(nullptr) {}
  ~EulerZYXValue() override;
  explicit PROTOBUF_CONSTEXPR EulerZYXValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EulerZYXValue(const EulerZYXValue& from);
  EulerZYXValue(EulerZYXValue&& from) noexcept
    : EulerZYXValue() {
    *this = ::std::move(from);
  }

  inline EulerZYXValue& operator=(const EulerZYXValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline EulerZYXValue& operator=(EulerZYXValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EulerZYXValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const EulerZYXValue* internal_default_instance() {
    return reinterpret_cast<const EulerZYXValue*>(
               &_EulerZYXValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EulerZYXValue& a, EulerZYXValue& b) {
    a.Swap(&b);
  }
  inline void Swap(EulerZYXValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EulerZYXValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EulerZYXValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EulerZYXValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EulerZYXValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EulerZYXValue& from) {
    EulerZYXValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EulerZYXValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.EulerZYXValue";
  }
  protected:
  explicit EulerZYXValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollFieldNumber = 1,
    kPitchFieldNumber = 2,
    kYawFieldNumber = 3,
  };
  // .google.protobuf.DoubleValue roll = 1;
  bool has_roll() const;
  private:
  bool _internal_has_roll() const;
  public:
  void clear_roll();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& roll() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_roll();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_roll();
  void set_allocated_roll(::PROTOBUF_NAMESPACE_ID::DoubleValue* roll);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_roll() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_roll();
  public:
  void unsafe_arena_set_allocated_roll(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* roll);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_roll();

  // .google.protobuf.DoubleValue pitch = 2;
  bool has_pitch() const;
  private:
  bool _internal_has_pitch() const;
  public:
  void clear_pitch();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& pitch() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_pitch();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_pitch();
  void set_allocated_pitch(::PROTOBUF_NAMESPACE_ID::DoubleValue* pitch);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_pitch() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_pitch();
  public:
  void unsafe_arena_set_allocated_pitch(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* pitch);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_pitch();

  // .google.protobuf.DoubleValue yaw = 3;
  bool has_yaw() const;
  private:
  bool _internal_has_yaw() const;
  public:
  void clear_yaw();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& yaw() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_yaw();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_yaw();
  void set_allocated_yaw(::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_yaw() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_yaw();
  public:
  void unsafe_arena_set_allocated_yaw(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_yaw();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.EulerZYXValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* roll_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* pitch_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class EulerRateZYXValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.EulerRateZYXValue) */ {
 public:
  inline EulerRateZYXValue() : EulerRateZYXValue(nullptr) {}
  ~EulerRateZYXValue() override;
  explicit PROTOBUF_CONSTEXPR EulerRateZYXValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EulerRateZYXValue(const EulerRateZYXValue& from);
  EulerRateZYXValue(EulerRateZYXValue&& from) noexcept
    : EulerRateZYXValue() {
    *this = ::std::move(from);
  }

  inline EulerRateZYXValue& operator=(const EulerRateZYXValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline EulerRateZYXValue& operator=(EulerRateZYXValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EulerRateZYXValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const EulerRateZYXValue* internal_default_instance() {
    return reinterpret_cast<const EulerRateZYXValue*>(
               &_EulerRateZYXValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EulerRateZYXValue& a, EulerRateZYXValue& b) {
    a.Swap(&b);
  }
  inline void Swap(EulerRateZYXValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EulerRateZYXValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EulerRateZYXValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EulerRateZYXValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EulerRateZYXValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EulerRateZYXValue& from) {
    EulerRateZYXValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EulerRateZYXValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.EulerRateZYXValue";
  }
  protected:
  explicit EulerRateZYXValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollFieldNumber = 1,
    kPitchFieldNumber = 2,
    kYawFieldNumber = 3,
  };
  // .google.protobuf.DoubleValue roll = 1;
  bool has_roll() const;
  private:
  bool _internal_has_roll() const;
  public:
  void clear_roll();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& roll() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_roll();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_roll();
  void set_allocated_roll(::PROTOBUF_NAMESPACE_ID::DoubleValue* roll);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_roll() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_roll();
  public:
  void unsafe_arena_set_allocated_roll(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* roll);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_roll();

  // .google.protobuf.DoubleValue pitch = 2;
  bool has_pitch() const;
  private:
  bool _internal_has_pitch() const;
  public:
  void clear_pitch();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& pitch() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_pitch();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_pitch();
  void set_allocated_pitch(::PROTOBUF_NAMESPACE_ID::DoubleValue* pitch);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_pitch() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_pitch();
  public:
  void unsafe_arena_set_allocated_pitch(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* pitch);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_pitch();

  // .google.protobuf.DoubleValue yaw = 3;
  bool has_yaw() const;
  private:
  bool _internal_has_yaw() const;
  public:
  void clear_yaw();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& yaw() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_yaw();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_yaw();
  void set_allocated_yaw(::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_yaw() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_yaw();
  public:
  void unsafe_arena_set_allocated_yaw(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_yaw();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.EulerRateZYXValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* roll_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* pitch_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class BodyHoldParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.BodyHoldParams) */ {
 public:
  inline BodyHoldParams() : BodyHoldParams(nullptr) {}
  ~BodyHoldParams() override;
  explicit PROTOBUF_CONSTEXPR BodyHoldParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BodyHoldParams(const BodyHoldParams& from);
  BodyHoldParams(BodyHoldParams&& from) noexcept
    : BodyHoldParams() {
    *this = ::std::move(from);
  }

  inline BodyHoldParams& operator=(const BodyHoldParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline BodyHoldParams& operator=(BodyHoldParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BodyHoldParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const BodyHoldParams* internal_default_instance() {
    return reinterpret_cast<const BodyHoldParams*>(
               &_BodyHoldParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BodyHoldParams& a, BodyHoldParams& b) {
    a.Swap(&b);
  }
  inline void Swap(BodyHoldParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BodyHoldParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BodyHoldParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BodyHoldParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BodyHoldParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BodyHoldParams& from) {
    BodyHoldParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BodyHoldParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.BodyHoldParams";
  }
  protected:
  explicit BodyHoldParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRotationFieldNumber = 1,
    kTranslationFieldNumber = 2,
    kEntrySlicesFieldNumber = 3,
    kExitSlicesFieldNumber = 4,
  };
  // .bosdyn.api.spot.EulerZYXValue rotation = 1;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::bosdyn::api::spot::EulerZYXValue& rotation() const;
  PROTOBUF_NODISCARD ::bosdyn::api::spot::EulerZYXValue* release_rotation();
  ::bosdyn::api::spot::EulerZYXValue* mutable_rotation();
  void set_allocated_rotation(::bosdyn::api::spot::EulerZYXValue* rotation);
  private:
  const ::bosdyn::api::spot::EulerZYXValue& _internal_rotation() const;
  ::bosdyn::api::spot::EulerZYXValue* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::bosdyn::api::spot::EulerZYXValue* rotation);
  ::bosdyn::api::spot::EulerZYXValue* unsafe_arena_release_rotation();

  // .bosdyn.api.Vec3Value translation = 2;
  bool has_translation() const;
  private:
  bool _internal_has_translation() const;
  public:
  void clear_translation();
  const ::bosdyn::api::Vec3Value& translation() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec3Value* release_translation();
  ::bosdyn::api::Vec3Value* mutable_translation();
  void set_allocated_translation(::bosdyn::api::Vec3Value* translation);
  private:
  const ::bosdyn::api::Vec3Value& _internal_translation() const;
  ::bosdyn::api::Vec3Value* _internal_mutable_translation();
  public:
  void unsafe_arena_set_allocated_translation(
      ::bosdyn::api::Vec3Value* translation);
  ::bosdyn::api::Vec3Value* unsafe_arena_release_translation();

  // .google.protobuf.DoubleValue entry_slices = 3;
  bool has_entry_slices() const;
  private:
  bool _internal_has_entry_slices() const;
  public:
  void clear_entry_slices();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& entry_slices() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_entry_slices();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_entry_slices();
  void set_allocated_entry_slices(::PROTOBUF_NAMESPACE_ID::DoubleValue* entry_slices);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_entry_slices() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_entry_slices();
  public:
  void unsafe_arena_set_allocated_entry_slices(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* entry_slices);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_entry_slices();

  // .google.protobuf.DoubleValue exit_slices = 4;
  bool has_exit_slices() const;
  private:
  bool _internal_has_exit_slices() const;
  public:
  void clear_exit_slices();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& exit_slices() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_exit_slices();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_exit_slices();
  void set_allocated_exit_slices(::PROTOBUF_NAMESPACE_ID::DoubleValue* exit_slices);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_exit_slices() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_exit_slices();
  public:
  void unsafe_arena_set_allocated_exit_slices(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* exit_slices);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_exit_slices();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.BodyHoldParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::spot::EulerZYXValue* rotation_;
    ::bosdyn::api::Vec3Value* translation_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* entry_slices_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* exit_slices_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class SwayParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.SwayParams) */ {
 public:
  inline SwayParams() : SwayParams(nullptr) {}
  ~SwayParams() override;
  explicit PROTOBUF_CONSTEXPR SwayParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwayParams(const SwayParams& from);
  SwayParams(SwayParams&& from) noexcept
    : SwayParams() {
    *this = ::std::move(from);
  }

  inline SwayParams& operator=(const SwayParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwayParams& operator=(SwayParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwayParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwayParams* internal_default_instance() {
    return reinterpret_cast<const SwayParams*>(
               &_SwayParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SwayParams& a, SwayParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SwayParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwayParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwayParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwayParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwayParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SwayParams& from) {
    SwayParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwayParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.SwayParams";
  }
  protected:
  explicit SwayParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SwayParams_SwayStyle SwayStyle;
  static constexpr SwayStyle SWAY_STYLE_UNKNOWN =
    SwayParams_SwayStyle_SWAY_STYLE_UNKNOWN;
  static constexpr SwayStyle SWAY_STYLE_STANDARD =
    SwayParams_SwayStyle_SWAY_STYLE_STANDARD;
  static constexpr SwayStyle SWAY_STYLE_FAST_OUT =
    SwayParams_SwayStyle_SWAY_STYLE_FAST_OUT;
  static constexpr SwayStyle SWAY_STYLE_FAST_RETURN =
    SwayParams_SwayStyle_SWAY_STYLE_FAST_RETURN;
  static constexpr SwayStyle SWAY_STYLE_SQUARE =
    SwayParams_SwayStyle_SWAY_STYLE_SQUARE;
  static constexpr SwayStyle SWAY_STYLE_SPIKE =
    SwayParams_SwayStyle_SWAY_STYLE_SPIKE;
  static constexpr SwayStyle SWAY_STYLE_PLATEAU =
    SwayParams_SwayStyle_SWAY_STYLE_PLATEAU;
  static inline bool SwayStyle_IsValid(int value) {
    return SwayParams_SwayStyle_IsValid(value);
  }
  static constexpr SwayStyle SwayStyle_MIN =
    SwayParams_SwayStyle_SwayStyle_MIN;
  static constexpr SwayStyle SwayStyle_MAX =
    SwayParams_SwayStyle_SwayStyle_MAX;
  static constexpr int SwayStyle_ARRAYSIZE =
    SwayParams_SwayStyle_SwayStyle_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SwayStyle_descriptor() {
    return SwayParams_SwayStyle_descriptor();
  }
  template<typename T>
  static inline const std::string& SwayStyle_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SwayStyle>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SwayStyle_Name.");
    return SwayParams_SwayStyle_Name(enum_t_value);
  }
  static inline bool SwayStyle_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SwayStyle* value) {
    return SwayParams_SwayStyle_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVerticalFieldNumber = 1,
    kHorizontalFieldNumber = 2,
    kRollFieldNumber = 3,
    kPronouncedFieldNumber = 6,
    kHoldZeroAxesFieldNumber = 7,
    kPivotFieldNumber = 4,
    kStyleFieldNumber = 5,
  };
  // .google.protobuf.DoubleValue vertical = 1;
  bool has_vertical() const;
  private:
  bool _internal_has_vertical() const;
  public:
  void clear_vertical();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& vertical() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_vertical();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_vertical();
  void set_allocated_vertical(::PROTOBUF_NAMESPACE_ID::DoubleValue* vertical);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_vertical() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_vertical();
  public:
  void unsafe_arena_set_allocated_vertical(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* vertical);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_vertical();

  // .google.protobuf.DoubleValue horizontal = 2;
  bool has_horizontal() const;
  private:
  bool _internal_has_horizontal() const;
  public:
  void clear_horizontal();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& horizontal() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_horizontal();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_horizontal();
  void set_allocated_horizontal(::PROTOBUF_NAMESPACE_ID::DoubleValue* horizontal);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_horizontal() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_horizontal();
  public:
  void unsafe_arena_set_allocated_horizontal(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* horizontal);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_horizontal();

  // .google.protobuf.DoubleValue roll = 3;
  bool has_roll() const;
  private:
  bool _internal_has_roll() const;
  public:
  void clear_roll();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& roll() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_roll();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_roll();
  void set_allocated_roll(::PROTOBUF_NAMESPACE_ID::DoubleValue* roll);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_roll() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_roll();
  public:
  void unsafe_arena_set_allocated_roll(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* roll);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_roll();

  // .google.protobuf.DoubleValue pronounced = 6;
  bool has_pronounced() const;
  private:
  bool _internal_has_pronounced() const;
  public:
  void clear_pronounced();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& pronounced() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_pronounced();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_pronounced();
  void set_allocated_pronounced(::PROTOBUF_NAMESPACE_ID::DoubleValue* pronounced);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_pronounced() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_pronounced();
  public:
  void unsafe_arena_set_allocated_pronounced(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* pronounced);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_pronounced();

  // .google.protobuf.BoolValue hold_zero_axes = 7;
  bool has_hold_zero_axes() const;
  private:
  bool _internal_has_hold_zero_axes() const;
  public:
  void clear_hold_zero_axes();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& hold_zero_axes() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_hold_zero_axes();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_hold_zero_axes();
  void set_allocated_hold_zero_axes(::PROTOBUF_NAMESPACE_ID::BoolValue* hold_zero_axes);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_hold_zero_axes() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_hold_zero_axes();
  public:
  void unsafe_arena_set_allocated_hold_zero_axes(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* hold_zero_axes);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_hold_zero_axes();

  // .bosdyn.api.spot.Pivot pivot = 4;
  void clear_pivot();
  ::bosdyn::api::spot::Pivot pivot() const;
  void set_pivot(::bosdyn::api::spot::Pivot value);
  private:
  ::bosdyn::api::spot::Pivot _internal_pivot() const;
  void _internal_set_pivot(::bosdyn::api::spot::Pivot value);
  public:

  // .bosdyn.api.spot.SwayParams.SwayStyle style = 5;
  void clear_style();
  ::bosdyn::api::spot::SwayParams_SwayStyle style() const;
  void set_style(::bosdyn::api::spot::SwayParams_SwayStyle value);
  private:
  ::bosdyn::api::spot::SwayParams_SwayStyle _internal_style() const;
  void _internal_set_style(::bosdyn::api::spot::SwayParams_SwayStyle value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.SwayParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* vertical_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* horizontal_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* roll_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* pronounced_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* hold_zero_axes_;
    int pivot_;
    int style_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class ArmMoveParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.ArmMoveParams) */ {
 public:
  inline ArmMoveParams() : ArmMoveParams(nullptr) {}
  ~ArmMoveParams() override;
  explicit PROTOBUF_CONSTEXPR ArmMoveParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmMoveParams(const ArmMoveParams& from);
  ArmMoveParams(ArmMoveParams&& from) noexcept
    : ArmMoveParams() {
    *this = ::std::move(from);
  }

  inline ArmMoveParams& operator=(const ArmMoveParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmMoveParams& operator=(ArmMoveParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmMoveParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArmMoveParams* internal_default_instance() {
    return reinterpret_cast<const ArmMoveParams*>(
               &_ArmMoveParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ArmMoveParams& a, ArmMoveParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmMoveParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmMoveParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArmMoveParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArmMoveParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArmMoveParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArmMoveParams& from) {
    ArmMoveParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArmMoveParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.ArmMoveParams";
  }
  protected:
  explicit ArmMoveParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShoulder0FieldNumber = 1,
    kShoulder1FieldNumber = 2,
    kElbow0FieldNumber = 3,
    kElbow1FieldNumber = 4,
    kWrist0FieldNumber = 5,
    kWrist1FieldNumber = 6,
    kGripperFieldNumber = 8,
    kEasingFieldNumber = 7,
  };
  // .google.protobuf.DoubleValue shoulder_0 = 1;
  bool has_shoulder_0() const;
  private:
  bool _internal_has_shoulder_0() const;
  public:
  void clear_shoulder_0();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& shoulder_0() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_shoulder_0();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_shoulder_0();
  void set_allocated_shoulder_0(::PROTOBUF_NAMESPACE_ID::DoubleValue* shoulder_0);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_shoulder_0() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_shoulder_0();
  public:
  void unsafe_arena_set_allocated_shoulder_0(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* shoulder_0);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_shoulder_0();

  // .google.protobuf.DoubleValue shoulder_1 = 2;
  bool has_shoulder_1() const;
  private:
  bool _internal_has_shoulder_1() const;
  public:
  void clear_shoulder_1();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& shoulder_1() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_shoulder_1();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_shoulder_1();
  void set_allocated_shoulder_1(::PROTOBUF_NAMESPACE_ID::DoubleValue* shoulder_1);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_shoulder_1() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_shoulder_1();
  public:
  void unsafe_arena_set_allocated_shoulder_1(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* shoulder_1);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_shoulder_1();

  // .google.protobuf.DoubleValue elbow_0 = 3;
  bool has_elbow_0() const;
  private:
  bool _internal_has_elbow_0() const;
  public:
  void clear_elbow_0();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& elbow_0() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_elbow_0();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_elbow_0();
  void set_allocated_elbow_0(::PROTOBUF_NAMESPACE_ID::DoubleValue* elbow_0);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_elbow_0() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_elbow_0();
  public:
  void unsafe_arena_set_allocated_elbow_0(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* elbow_0);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_elbow_0();

  // .google.protobuf.DoubleValue elbow_1 = 4;
  bool has_elbow_1() const;
  private:
  bool _internal_has_elbow_1() const;
  public:
  void clear_elbow_1();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& elbow_1() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_elbow_1();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_elbow_1();
  void set_allocated_elbow_1(::PROTOBUF_NAMESPACE_ID::DoubleValue* elbow_1);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_elbow_1() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_elbow_1();
  public:
  void unsafe_arena_set_allocated_elbow_1(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* elbow_1);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_elbow_1();

  // .google.protobuf.DoubleValue wrist_0 = 5;
  bool has_wrist_0() const;
  private:
  bool _internal_has_wrist_0() const;
  public:
  void clear_wrist_0();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& wrist_0() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_wrist_0();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_wrist_0();
  void set_allocated_wrist_0(::PROTOBUF_NAMESPACE_ID::DoubleValue* wrist_0);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_wrist_0() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_wrist_0();
  public:
  void unsafe_arena_set_allocated_wrist_0(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* wrist_0);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_wrist_0();

  // .google.protobuf.DoubleValue wrist_1 = 6;
  bool has_wrist_1() const;
  private:
  bool _internal_has_wrist_1() const;
  public:
  void clear_wrist_1();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& wrist_1() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_wrist_1();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_wrist_1();
  void set_allocated_wrist_1(::PROTOBUF_NAMESPACE_ID::DoubleValue* wrist_1);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_wrist_1() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_wrist_1();
  public:
  void unsafe_arena_set_allocated_wrist_1(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* wrist_1);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_wrist_1();

  // .google.protobuf.DoubleValue gripper = 8;
  bool has_gripper() const;
  private:
  bool _internal_has_gripper() const;
  public:
  void clear_gripper();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& gripper() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_gripper();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_gripper();
  void set_allocated_gripper(::PROTOBUF_NAMESPACE_ID::DoubleValue* gripper);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_gripper() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_gripper();
  public:
  void unsafe_arena_set_allocated_gripper(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* gripper);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_gripper();

  // .bosdyn.api.spot.Easing easing = 7;
  void clear_easing();
  ::bosdyn::api::spot::Easing easing() const;
  void set_easing(::bosdyn::api::spot::Easing value);
  private:
  ::bosdyn::api::spot::Easing _internal_easing() const;
  void _internal_set_easing(::bosdyn::api::spot::Easing value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.ArmMoveParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* shoulder_0_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* shoulder_1_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* elbow_0_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* elbow_1_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* wrist_0_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* wrist_1_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* gripper_;
    int easing_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class WorkspaceArmMoveParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.WorkspaceArmMoveParams) */ {
 public:
  inline WorkspaceArmMoveParams() : WorkspaceArmMoveParams(nullptr) {}
  ~WorkspaceArmMoveParams() override;
  explicit PROTOBUF_CONSTEXPR WorkspaceArmMoveParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkspaceArmMoveParams(const WorkspaceArmMoveParams& from);
  WorkspaceArmMoveParams(WorkspaceArmMoveParams&& from) noexcept
    : WorkspaceArmMoveParams() {
    *this = ::std::move(from);
  }

  inline WorkspaceArmMoveParams& operator=(const WorkspaceArmMoveParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkspaceArmMoveParams& operator=(WorkspaceArmMoveParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkspaceArmMoveParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkspaceArmMoveParams* internal_default_instance() {
    return reinterpret_cast<const WorkspaceArmMoveParams*>(
               &_WorkspaceArmMoveParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WorkspaceArmMoveParams& a, WorkspaceArmMoveParams& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkspaceArmMoveParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkspaceArmMoveParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkspaceArmMoveParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkspaceArmMoveParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WorkspaceArmMoveParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WorkspaceArmMoveParams& from) {
    WorkspaceArmMoveParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkspaceArmMoveParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.WorkspaceArmMoveParams";
  }
  protected:
  explicit WorkspaceArmMoveParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRotationFieldNumber = 1,
    kTranslationFieldNumber = 2,
    kAbsoluteFieldNumber = 3,
    kDanceFrameIdFieldNumber = 6,
    kFrameFieldNumber = 4,
    kEasingFieldNumber = 5,
  };
  // .bosdyn.api.spot.EulerZYXValue rotation = 1;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::bosdyn::api::spot::EulerZYXValue& rotation() const;
  PROTOBUF_NODISCARD ::bosdyn::api::spot::EulerZYXValue* release_rotation();
  ::bosdyn::api::spot::EulerZYXValue* mutable_rotation();
  void set_allocated_rotation(::bosdyn::api::spot::EulerZYXValue* rotation);
  private:
  const ::bosdyn::api::spot::EulerZYXValue& _internal_rotation() const;
  ::bosdyn::api::spot::EulerZYXValue* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::bosdyn::api::spot::EulerZYXValue* rotation);
  ::bosdyn::api::spot::EulerZYXValue* unsafe_arena_release_rotation();

  // .bosdyn.api.Vec3Value translation = 2;
  bool has_translation() const;
  private:
  bool _internal_has_translation() const;
  public:
  void clear_translation();
  const ::bosdyn::api::Vec3Value& translation() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec3Value* release_translation();
  ::bosdyn::api::Vec3Value* mutable_translation();
  void set_allocated_translation(::bosdyn::api::Vec3Value* translation);
  private:
  const ::bosdyn::api::Vec3Value& _internal_translation() const;
  ::bosdyn::api::Vec3Value* _internal_mutable_translation();
  public:
  void unsafe_arena_set_allocated_translation(
      ::bosdyn::api::Vec3Value* translation);
  ::bosdyn::api::Vec3Value* unsafe_arena_release_translation();

  // .google.protobuf.BoolValue absolute = 3;
  bool has_absolute() const;
  private:
  bool _internal_has_absolute() const;
  public:
  void clear_absolute();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& absolute() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_absolute();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_absolute();
  void set_allocated_absolute(::PROTOBUF_NAMESPACE_ID::BoolValue* absolute);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_absolute() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_absolute();
  public:
  void unsafe_arena_set_allocated_absolute(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* absolute);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_absolute();

  // .google.protobuf.Int32Value dance_frame_id = 6;
  bool has_dance_frame_id() const;
  private:
  bool _internal_has_dance_frame_id() const;
  public:
  void clear_dance_frame_id();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& dance_frame_id() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_dance_frame_id();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_dance_frame_id();
  void set_allocated_dance_frame_id(::PROTOBUF_NAMESPACE_ID::Int32Value* dance_frame_id);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_dance_frame_id() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_dance_frame_id();
  public:
  void unsafe_arena_set_allocated_dance_frame_id(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* dance_frame_id);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_dance_frame_id();

  // .bosdyn.api.spot.ArmMoveFrame frame = 4;
  void clear_frame();
  ::bosdyn::api::spot::ArmMoveFrame frame() const;
  void set_frame(::bosdyn::api::spot::ArmMoveFrame value);
  private:
  ::bosdyn::api::spot::ArmMoveFrame _internal_frame() const;
  void _internal_set_frame(::bosdyn::api::spot::ArmMoveFrame value);
  public:

  // .bosdyn.api.spot.Easing easing = 5;
  void clear_easing();
  ::bosdyn::api::spot::Easing easing() const;
  void set_easing(::bosdyn::api::spot::Easing value);
  private:
  ::bosdyn::api::spot::Easing _internal_easing() const;
  void _internal_set_easing(::bosdyn::api::spot::Easing value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.WorkspaceArmMoveParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::spot::EulerZYXValue* rotation_;
    ::bosdyn::api::Vec3Value* translation_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* absolute_;
    ::PROTOBUF_NAMESPACE_ID::Int32Value* dance_frame_id_;
    int frame_;
    int easing_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class Figure8Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.Figure8Params) */ {
 public:
  inline Figure8Params() : Figure8Params(nullptr) {}
  ~Figure8Params() override;
  explicit PROTOBUF_CONSTEXPR Figure8Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Figure8Params(const Figure8Params& from);
  Figure8Params(Figure8Params&& from) noexcept
    : Figure8Params() {
    *this = ::std::move(from);
  }

  inline Figure8Params& operator=(const Figure8Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Figure8Params& operator=(Figure8Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Figure8Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const Figure8Params* internal_default_instance() {
    return reinterpret_cast<const Figure8Params*>(
               &_Figure8Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Figure8Params& a, Figure8Params& b) {
    a.Swap(&b);
  }
  inline void Swap(Figure8Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Figure8Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Figure8Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Figure8Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Figure8Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Figure8Params& from) {
    Figure8Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Figure8Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.Figure8Params";
  }
  protected:
  explicit Figure8Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
    kWidthFieldNumber = 2,
    kBeatsPerCycleFieldNumber = 3,
  };
  // .google.protobuf.DoubleValue height = 1;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& height() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_height();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_height();
  void set_allocated_height(::PROTOBUF_NAMESPACE_ID::DoubleValue* height);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_height() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_height();
  public:
  void unsafe_arena_set_allocated_height(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* height);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_height();

  // .google.protobuf.DoubleValue width = 2;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& width() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_width();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_width();
  void set_allocated_width(::PROTOBUF_NAMESPACE_ID::DoubleValue* width);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_width() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_width();
  public:
  void unsafe_arena_set_allocated_width(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* width);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_width();

  // .google.protobuf.DoubleValue beats_per_cycle = 3;
  bool has_beats_per_cycle() const;
  private:
  bool _internal_has_beats_per_cycle() const;
  public:
  void clear_beats_per_cycle();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& beats_per_cycle() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_beats_per_cycle();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_beats_per_cycle();
  void set_allocated_beats_per_cycle(::PROTOBUF_NAMESPACE_ID::DoubleValue* beats_per_cycle);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_beats_per_cycle() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_beats_per_cycle();
  public:
  void unsafe_arena_set_allocated_beats_per_cycle(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* beats_per_cycle);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_beats_per_cycle();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.Figure8Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* height_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* width_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* beats_per_cycle_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class GripperParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.GripperParams) */ {
 public:
  inline GripperParams() : GripperParams(nullptr) {}
  ~GripperParams() override;
  explicit PROTOBUF_CONSTEXPR GripperParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GripperParams(const GripperParams& from);
  GripperParams(GripperParams&& from) noexcept
    : GripperParams() {
    *this = ::std::move(from);
  }

  inline GripperParams& operator=(const GripperParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GripperParams& operator=(GripperParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GripperParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const GripperParams* internal_default_instance() {
    return reinterpret_cast<const GripperParams*>(
               &_GripperParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GripperParams& a, GripperParams& b) {
    a.Swap(&b);
  }
  inline void Swap(GripperParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GripperParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GripperParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GripperParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GripperParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GripperParams& from) {
    GripperParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GripperParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.GripperParams";
  }
  protected:
  explicit GripperParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAngleFieldNumber = 1,
    kSpeedFieldNumber = 2,
  };
  // .google.protobuf.DoubleValue angle = 1;
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& angle() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_angle();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_angle();
  void set_allocated_angle(::PROTOBUF_NAMESPACE_ID::DoubleValue* angle);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_angle() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_angle();
  public:
  void unsafe_arena_set_allocated_angle(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* angle);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_angle();

  // .google.protobuf.DoubleValue speed = 2;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& speed() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_speed();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_speed();
  void set_allocated_speed(::PROTOBUF_NAMESPACE_ID::DoubleValue* speed);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_speed() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_speed();
  public:
  void unsafe_arena_set_allocated_speed(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* speed);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_speed();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.GripperParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* angle_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* speed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class KneelLegMoveParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.KneelLegMoveParams) */ {
 public:
  inline KneelLegMoveParams() : KneelLegMoveParams(nullptr) {}
  ~KneelLegMoveParams() override;
  explicit PROTOBUF_CONSTEXPR KneelLegMoveParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KneelLegMoveParams(const KneelLegMoveParams& from);
  KneelLegMoveParams(KneelLegMoveParams&& from) noexcept
    : KneelLegMoveParams() {
    *this = ::std::move(from);
  }

  inline KneelLegMoveParams& operator=(const KneelLegMoveParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline KneelLegMoveParams& operator=(KneelLegMoveParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KneelLegMoveParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const KneelLegMoveParams* internal_default_instance() {
    return reinterpret_cast<const KneelLegMoveParams*>(
               &_KneelLegMoveParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(KneelLegMoveParams& a, KneelLegMoveParams& b) {
    a.Swap(&b);
  }
  inline void Swap(KneelLegMoveParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KneelLegMoveParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KneelLegMoveParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KneelLegMoveParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KneelLegMoveParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KneelLegMoveParams& from) {
    KneelLegMoveParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KneelLegMoveParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.KneelLegMoveParams";
  }
  protected:
  explicit KneelLegMoveParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHipXFieldNumber = 1,
    kHipYFieldNumber = 2,
    kKneeFieldNumber = 3,
    kMirrorFieldNumber = 4,
    kEasingFieldNumber = 5,
  };
  // .google.protobuf.DoubleValue hip_x = 1;
  bool has_hip_x() const;
  private:
  bool _internal_has_hip_x() const;
  public:
  void clear_hip_x();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& hip_x() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_hip_x();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_hip_x();
  void set_allocated_hip_x(::PROTOBUF_NAMESPACE_ID::DoubleValue* hip_x);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_hip_x() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_hip_x();
  public:
  void unsafe_arena_set_allocated_hip_x(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* hip_x);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_hip_x();

  // .google.protobuf.DoubleValue hip_y = 2;
  bool has_hip_y() const;
  private:
  bool _internal_has_hip_y() const;
  public:
  void clear_hip_y();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& hip_y() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_hip_y();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_hip_y();
  void set_allocated_hip_y(::PROTOBUF_NAMESPACE_ID::DoubleValue* hip_y);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_hip_y() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_hip_y();
  public:
  void unsafe_arena_set_allocated_hip_y(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* hip_y);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_hip_y();

  // .google.protobuf.DoubleValue knee = 3;
  bool has_knee() const;
  private:
  bool _internal_has_knee() const;
  public:
  void clear_knee();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& knee() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_knee();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_knee();
  void set_allocated_knee(::PROTOBUF_NAMESPACE_ID::DoubleValue* knee);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_knee() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_knee();
  public:
  void unsafe_arena_set_allocated_knee(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* knee);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_knee();

  // .google.protobuf.BoolValue mirror = 4;
  bool has_mirror() const;
  private:
  bool _internal_has_mirror() const;
  public:
  void clear_mirror();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& mirror() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_mirror();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_mirror();
  void set_allocated_mirror(::PROTOBUF_NAMESPACE_ID::BoolValue* mirror);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_mirror() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_mirror();
  public:
  void unsafe_arena_set_allocated_mirror(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* mirror);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_mirror();

  // .bosdyn.api.spot.Easing easing = 5;
  void clear_easing();
  ::bosdyn::api::spot::Easing easing() const;
  void set_easing(::bosdyn::api::spot::Easing value);
  private:
  ::bosdyn::api::spot::Easing _internal_easing() const;
  void _internal_set_easing(::bosdyn::api::spot::Easing value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.KneelLegMoveParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* hip_x_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* hip_y_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* knee_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* mirror_;
    int easing_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class KneelLegMove2Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.KneelLegMove2Params) */ {
 public:
  inline KneelLegMove2Params() : KneelLegMove2Params(nullptr) {}
  ~KneelLegMove2Params() override;
  explicit PROTOBUF_CONSTEXPR KneelLegMove2Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KneelLegMove2Params(const KneelLegMove2Params& from);
  KneelLegMove2Params(KneelLegMove2Params&& from) noexcept
    : KneelLegMove2Params() {
    *this = ::std::move(from);
  }

  inline KneelLegMove2Params& operator=(const KneelLegMove2Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline KneelLegMove2Params& operator=(KneelLegMove2Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KneelLegMove2Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const KneelLegMove2Params* internal_default_instance() {
    return reinterpret_cast<const KneelLegMove2Params*>(
               &_KneelLegMove2Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(KneelLegMove2Params& a, KneelLegMove2Params& b) {
    a.Swap(&b);
  }
  inline void Swap(KneelLegMove2Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KneelLegMove2Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KneelLegMove2Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KneelLegMove2Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KneelLegMove2Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KneelLegMove2Params& from) {
    KneelLegMove2Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KneelLegMove2Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.KneelLegMove2Params";
  }
  protected:
  explicit KneelLegMove2Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftHipXFieldNumber = 1,
    kLeftHipYFieldNumber = 2,
    kLeftKneeFieldNumber = 3,
    kRightHipXFieldNumber = 4,
    kRightHipYFieldNumber = 5,
    kRightKneeFieldNumber = 6,
    kLinkToNextFieldNumber = 8,
    kEasingFieldNumber = 7,
  };
  // .google.protobuf.DoubleValue left_hip_x = 1;
  bool has_left_hip_x() const;
  private:
  bool _internal_has_left_hip_x() const;
  public:
  void clear_left_hip_x();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& left_hip_x() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_left_hip_x();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_left_hip_x();
  void set_allocated_left_hip_x(::PROTOBUF_NAMESPACE_ID::DoubleValue* left_hip_x);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_left_hip_x() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_left_hip_x();
  public:
  void unsafe_arena_set_allocated_left_hip_x(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* left_hip_x);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_left_hip_x();

  // .google.protobuf.DoubleValue left_hip_y = 2;
  bool has_left_hip_y() const;
  private:
  bool _internal_has_left_hip_y() const;
  public:
  void clear_left_hip_y();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& left_hip_y() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_left_hip_y();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_left_hip_y();
  void set_allocated_left_hip_y(::PROTOBUF_NAMESPACE_ID::DoubleValue* left_hip_y);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_left_hip_y() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_left_hip_y();
  public:
  void unsafe_arena_set_allocated_left_hip_y(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* left_hip_y);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_left_hip_y();

  // .google.protobuf.DoubleValue left_knee = 3;
  bool has_left_knee() const;
  private:
  bool _internal_has_left_knee() const;
  public:
  void clear_left_knee();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& left_knee() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_left_knee();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_left_knee();
  void set_allocated_left_knee(::PROTOBUF_NAMESPACE_ID::DoubleValue* left_knee);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_left_knee() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_left_knee();
  public:
  void unsafe_arena_set_allocated_left_knee(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* left_knee);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_left_knee();

  // .google.protobuf.DoubleValue right_hip_x = 4;
  bool has_right_hip_x() const;
  private:
  bool _internal_has_right_hip_x() const;
  public:
  void clear_right_hip_x();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& right_hip_x() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_right_hip_x();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_right_hip_x();
  void set_allocated_right_hip_x(::PROTOBUF_NAMESPACE_ID::DoubleValue* right_hip_x);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_right_hip_x() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_right_hip_x();
  public:
  void unsafe_arena_set_allocated_right_hip_x(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* right_hip_x);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_right_hip_x();

  // .google.protobuf.DoubleValue right_hip_y = 5;
  bool has_right_hip_y() const;
  private:
  bool _internal_has_right_hip_y() const;
  public:
  void clear_right_hip_y();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& right_hip_y() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_right_hip_y();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_right_hip_y();
  void set_allocated_right_hip_y(::PROTOBUF_NAMESPACE_ID::DoubleValue* right_hip_y);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_right_hip_y() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_right_hip_y();
  public:
  void unsafe_arena_set_allocated_right_hip_y(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* right_hip_y);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_right_hip_y();

  // .google.protobuf.DoubleValue right_knee = 6;
  bool has_right_knee() const;
  private:
  bool _internal_has_right_knee() const;
  public:
  void clear_right_knee();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& right_knee() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_right_knee();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_right_knee();
  void set_allocated_right_knee(::PROTOBUF_NAMESPACE_ID::DoubleValue* right_knee);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_right_knee() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_right_knee();
  public:
  void unsafe_arena_set_allocated_right_knee(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* right_knee);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_right_knee();

  // .google.protobuf.BoolValue link_to_next = 8;
  bool has_link_to_next() const;
  private:
  bool _internal_has_link_to_next() const;
  public:
  void clear_link_to_next();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& link_to_next() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_link_to_next();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_link_to_next();
  void set_allocated_link_to_next(::PROTOBUF_NAMESPACE_ID::BoolValue* link_to_next);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_link_to_next() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_link_to_next();
  public:
  void unsafe_arena_set_allocated_link_to_next(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* link_to_next);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_link_to_next();

  // .bosdyn.api.spot.Easing easing = 7;
  void clear_easing();
  ::bosdyn::api::spot::Easing easing() const;
  void set_easing(::bosdyn::api::spot::Easing value);
  private:
  ::bosdyn::api::spot::Easing _internal_easing() const;
  void _internal_set_easing(::bosdyn::api::spot::Easing value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.KneelLegMove2Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* left_hip_x_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* left_hip_y_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* left_knee_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* right_hip_x_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* right_hip_y_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* right_knee_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* link_to_next_;
    int easing_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class RunningManParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.RunningManParams) */ {
 public:
  inline RunningManParams() : RunningManParams(nullptr) {}
  ~RunningManParams() override;
  explicit PROTOBUF_CONSTEXPR RunningManParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RunningManParams(const RunningManParams& from);
  RunningManParams(RunningManParams&& from) noexcept
    : RunningManParams() {
    *this = ::std::move(from);
  }

  inline RunningManParams& operator=(const RunningManParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunningManParams& operator=(RunningManParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RunningManParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const RunningManParams* internal_default_instance() {
    return reinterpret_cast<const RunningManParams*>(
               &_RunningManParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RunningManParams& a, RunningManParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RunningManParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RunningManParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RunningManParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RunningManParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RunningManParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RunningManParams& from) {
    RunningManParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunningManParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.RunningManParams";
  }
  protected:
  explicit RunningManParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVelocityFieldNumber = 1,
    kSwingHeightFieldNumber = 2,
    kSpreadFieldNumber = 3,
    kReverseFieldNumber = 4,
    kPreMoveCyclesFieldNumber = 5,
    kSpeedMultiplierFieldNumber = 6,
    kDutyCycleFieldNumber = 7,
    kComHeightFieldNumber = 8,
  };
  // .bosdyn.api.Vec2Value velocity = 1;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::bosdyn::api::Vec2Value& velocity() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec2Value* release_velocity();
  ::bosdyn::api::Vec2Value* mutable_velocity();
  void set_allocated_velocity(::bosdyn::api::Vec2Value* velocity);
  private:
  const ::bosdyn::api::Vec2Value& _internal_velocity() const;
  ::bosdyn::api::Vec2Value* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::bosdyn::api::Vec2Value* velocity);
  ::bosdyn::api::Vec2Value* unsafe_arena_release_velocity();

  // .google.protobuf.DoubleValue swing_height = 2;
  bool has_swing_height() const;
  private:
  bool _internal_has_swing_height() const;
  public:
  void clear_swing_height();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& swing_height() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_swing_height();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_swing_height();
  void set_allocated_swing_height(::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_height);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_swing_height() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_swing_height();
  public:
  void unsafe_arena_set_allocated_swing_height(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_height);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_swing_height();

  // .google.protobuf.DoubleValue spread = 3;
  bool has_spread() const;
  private:
  bool _internal_has_spread() const;
  public:
  void clear_spread();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& spread() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_spread();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_spread();
  void set_allocated_spread(::PROTOBUF_NAMESPACE_ID::DoubleValue* spread);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_spread() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_spread();
  public:
  void unsafe_arena_set_allocated_spread(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* spread);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_spread();

  // .google.protobuf.BoolValue reverse = 4;
  bool has_reverse() const;
  private:
  bool _internal_has_reverse() const;
  public:
  void clear_reverse();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& reverse() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_reverse();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_reverse();
  void set_allocated_reverse(::PROTOBUF_NAMESPACE_ID::BoolValue* reverse);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_reverse() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_reverse();
  public:
  void unsafe_arena_set_allocated_reverse(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* reverse);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_reverse();

  // .google.protobuf.Int32Value pre_move_cycles = 5;
  bool has_pre_move_cycles() const;
  private:
  bool _internal_has_pre_move_cycles() const;
  public:
  void clear_pre_move_cycles();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& pre_move_cycles() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_pre_move_cycles();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_pre_move_cycles();
  void set_allocated_pre_move_cycles(::PROTOBUF_NAMESPACE_ID::Int32Value* pre_move_cycles);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_pre_move_cycles() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_pre_move_cycles();
  public:
  void unsafe_arena_set_allocated_pre_move_cycles(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* pre_move_cycles);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_pre_move_cycles();

  // .google.protobuf.DoubleValue speed_multiplier = 6;
  bool has_speed_multiplier() const;
  private:
  bool _internal_has_speed_multiplier() const;
  public:
  void clear_speed_multiplier();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& speed_multiplier() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_speed_multiplier();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_speed_multiplier();
  void set_allocated_speed_multiplier(::PROTOBUF_NAMESPACE_ID::DoubleValue* speed_multiplier);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_speed_multiplier() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_speed_multiplier();
  public:
  void unsafe_arena_set_allocated_speed_multiplier(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* speed_multiplier);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_speed_multiplier();

  // .google.protobuf.DoubleValue duty_cycle = 7;
  bool has_duty_cycle() const;
  private:
  bool _internal_has_duty_cycle() const;
  public:
  void clear_duty_cycle();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& duty_cycle() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_duty_cycle();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_duty_cycle();
  void set_allocated_duty_cycle(::PROTOBUF_NAMESPACE_ID::DoubleValue* duty_cycle);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_duty_cycle() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_duty_cycle();
  public:
  void unsafe_arena_set_allocated_duty_cycle(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* duty_cycle);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_duty_cycle();

  // .google.protobuf.DoubleValue com_height = 8;
  bool has_com_height() const;
  private:
  bool _internal_has_com_height() const;
  public:
  void clear_com_height();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& com_height() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_com_height();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_com_height();
  void set_allocated_com_height(::PROTOBUF_NAMESPACE_ID::DoubleValue* com_height);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_com_height() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_com_height();
  public:
  void unsafe_arena_set_allocated_com_height(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* com_height);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_com_height();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.RunningManParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::Vec2Value* velocity_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_height_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* spread_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* reverse_;
    ::PROTOBUF_NAMESPACE_ID::Int32Value* pre_move_cycles_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* speed_multiplier_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* duty_cycle_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* com_height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class HopParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.HopParams) */ {
 public:
  inline HopParams() : HopParams(nullptr) {}
  ~HopParams() override;
  explicit PROTOBUF_CONSTEXPR HopParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HopParams(const HopParams& from);
  HopParams(HopParams&& from) noexcept
    : HopParams() {
    *this = ::std::move(from);
  }

  inline HopParams& operator=(const HopParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline HopParams& operator=(HopParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HopParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const HopParams* internal_default_instance() {
    return reinterpret_cast<const HopParams*>(
               &_HopParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(HopParams& a, HopParams& b) {
    a.Swap(&b);
  }
  inline void Swap(HopParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HopParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HopParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HopParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HopParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HopParams& from) {
    HopParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HopParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.HopParams";
  }
  protected:
  explicit HopParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVelocityFieldNumber = 1,
    kYawRateFieldNumber = 2,
    kStandTimeFieldNumber = 3,
  };
  // .bosdyn.api.Vec2Value velocity = 1;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::bosdyn::api::Vec2Value& velocity() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec2Value* release_velocity();
  ::bosdyn::api::Vec2Value* mutable_velocity();
  void set_allocated_velocity(::bosdyn::api::Vec2Value* velocity);
  private:
  const ::bosdyn::api::Vec2Value& _internal_velocity() const;
  ::bosdyn::api::Vec2Value* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::bosdyn::api::Vec2Value* velocity);
  ::bosdyn::api::Vec2Value* unsafe_arena_release_velocity();

  // .google.protobuf.DoubleValue yaw_rate = 2;
  bool has_yaw_rate() const;
  private:
  bool _internal_has_yaw_rate() const;
  public:
  void clear_yaw_rate();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& yaw_rate() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_yaw_rate();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_yaw_rate();
  void set_allocated_yaw_rate(::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw_rate);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_yaw_rate() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_yaw_rate();
  public:
  void unsafe_arena_set_allocated_yaw_rate(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw_rate);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_yaw_rate();

  // .google.protobuf.DoubleValue stand_time = 3;
  bool has_stand_time() const;
  private:
  bool _internal_has_stand_time() const;
  public:
  void clear_stand_time();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& stand_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_stand_time();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_stand_time();
  void set_allocated_stand_time(::PROTOBUF_NAMESPACE_ID::DoubleValue* stand_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_stand_time() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_stand_time();
  public:
  void unsafe_arena_set_allocated_stand_time(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* stand_time);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_stand_time();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.HopParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::Vec2Value* velocity_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw_rate_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* stand_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class RandomRotateParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.RandomRotateParams) */ {
 public:
  inline RandomRotateParams() : RandomRotateParams(nullptr) {}
  ~RandomRotateParams() override;
  explicit PROTOBUF_CONSTEXPR RandomRotateParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RandomRotateParams(const RandomRotateParams& from);
  RandomRotateParams(RandomRotateParams&& from) noexcept
    : RandomRotateParams() {
    *this = ::std::move(from);
  }

  inline RandomRotateParams& operator=(const RandomRotateParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RandomRotateParams& operator=(RandomRotateParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RandomRotateParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const RandomRotateParams* internal_default_instance() {
    return reinterpret_cast<const RandomRotateParams*>(
               &_RandomRotateParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RandomRotateParams& a, RandomRotateParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RandomRotateParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RandomRotateParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RandomRotateParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RandomRotateParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RandomRotateParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RandomRotateParams& from) {
    RandomRotateParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RandomRotateParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.RandomRotateParams";
  }
  protected:
  explicit RandomRotateParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmplitudeFieldNumber = 1,
    kSpeedFieldNumber = 2,
    kSpeedVariationFieldNumber = 3,
    kNumSpeedTiersFieldNumber = 4,
    kTierVariationFieldNumber = 5,
  };
  // .bosdyn.api.spot.EulerZYXValue amplitude = 1;
  bool has_amplitude() const;
  private:
  bool _internal_has_amplitude() const;
  public:
  void clear_amplitude();
  const ::bosdyn::api::spot::EulerZYXValue& amplitude() const;
  PROTOBUF_NODISCARD ::bosdyn::api::spot::EulerZYXValue* release_amplitude();
  ::bosdyn::api::spot::EulerZYXValue* mutable_amplitude();
  void set_allocated_amplitude(::bosdyn::api::spot::EulerZYXValue* amplitude);
  private:
  const ::bosdyn::api::spot::EulerZYXValue& _internal_amplitude() const;
  ::bosdyn::api::spot::EulerZYXValue* _internal_mutable_amplitude();
  public:
  void unsafe_arena_set_allocated_amplitude(
      ::bosdyn::api::spot::EulerZYXValue* amplitude);
  ::bosdyn::api::spot::EulerZYXValue* unsafe_arena_release_amplitude();

  // .bosdyn.api.spot.EulerRateZYXValue speed = 2;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  const ::bosdyn::api::spot::EulerRateZYXValue& speed() const;
  PROTOBUF_NODISCARD ::bosdyn::api::spot::EulerRateZYXValue* release_speed();
  ::bosdyn::api::spot::EulerRateZYXValue* mutable_speed();
  void set_allocated_speed(::bosdyn::api::spot::EulerRateZYXValue* speed);
  private:
  const ::bosdyn::api::spot::EulerRateZYXValue& _internal_speed() const;
  ::bosdyn::api::spot::EulerRateZYXValue* _internal_mutable_speed();
  public:
  void unsafe_arena_set_allocated_speed(
      ::bosdyn::api::spot::EulerRateZYXValue* speed);
  ::bosdyn::api::spot::EulerRateZYXValue* unsafe_arena_release_speed();

  // .google.protobuf.DoubleValue speed_variation = 3;
  bool has_speed_variation() const;
  private:
  bool _internal_has_speed_variation() const;
  public:
  void clear_speed_variation();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& speed_variation() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_speed_variation();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_speed_variation();
  void set_allocated_speed_variation(::PROTOBUF_NAMESPACE_ID::DoubleValue* speed_variation);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_speed_variation() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_speed_variation();
  public:
  void unsafe_arena_set_allocated_speed_variation(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* speed_variation);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_speed_variation();

  // .google.protobuf.Int32Value num_speed_tiers = 4;
  bool has_num_speed_tiers() const;
  private:
  bool _internal_has_num_speed_tiers() const;
  public:
  void clear_num_speed_tiers();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& num_speed_tiers() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_num_speed_tiers();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_num_speed_tiers();
  void set_allocated_num_speed_tiers(::PROTOBUF_NAMESPACE_ID::Int32Value* num_speed_tiers);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_num_speed_tiers() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_num_speed_tiers();
  public:
  void unsafe_arena_set_allocated_num_speed_tiers(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* num_speed_tiers);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_num_speed_tiers();

  // .google.protobuf.DoubleValue tier_variation = 5;
  bool has_tier_variation() const;
  private:
  bool _internal_has_tier_variation() const;
  public:
  void clear_tier_variation();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& tier_variation() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_tier_variation();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_tier_variation();
  void set_allocated_tier_variation(::PROTOBUF_NAMESPACE_ID::DoubleValue* tier_variation);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_tier_variation() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_tier_variation();
  public:
  void unsafe_arena_set_allocated_tier_variation(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* tier_variation);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_tier_variation();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.RandomRotateParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::spot::EulerZYXValue* amplitude_;
    ::bosdyn::api::spot::EulerRateZYXValue* speed_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* speed_variation_;
    ::PROTOBUF_NAMESPACE_ID::Int32Value* num_speed_tiers_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* tier_variation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class CrawlParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.CrawlParams) */ {
 public:
  inline CrawlParams() : CrawlParams(nullptr) {}
  ~CrawlParams() override;
  explicit PROTOBUF_CONSTEXPR CrawlParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CrawlParams(const CrawlParams& from);
  CrawlParams(CrawlParams&& from) noexcept
    : CrawlParams() {
    *this = ::std::move(from);
  }

  inline CrawlParams& operator=(const CrawlParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CrawlParams& operator=(CrawlParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CrawlParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CrawlParams* internal_default_instance() {
    return reinterpret_cast<const CrawlParams*>(
               &_CrawlParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CrawlParams& a, CrawlParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CrawlParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CrawlParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CrawlParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CrawlParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CrawlParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CrawlParams& from) {
    CrawlParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CrawlParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.CrawlParams";
  }
  protected:
  explicit CrawlParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwingSlicesFieldNumber = 1,
    kVelocityFieldNumber = 2,
    kStanceWidthFieldNumber = 3,
    kStanceLengthFieldNumber = 4,
  };
  // .google.protobuf.DoubleValue swing_slices = 1;
  bool has_swing_slices() const;
  private:
  bool _internal_has_swing_slices() const;
  public:
  void clear_swing_slices();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& swing_slices() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_swing_slices();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_swing_slices();
  void set_allocated_swing_slices(::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_slices);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_swing_slices() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_swing_slices();
  public:
  void unsafe_arena_set_allocated_swing_slices(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_slices);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_swing_slices();

  // .bosdyn.api.Vec2Value velocity = 2;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::bosdyn::api::Vec2Value& velocity() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec2Value* release_velocity();
  ::bosdyn::api::Vec2Value* mutable_velocity();
  void set_allocated_velocity(::bosdyn::api::Vec2Value* velocity);
  private:
  const ::bosdyn::api::Vec2Value& _internal_velocity() const;
  ::bosdyn::api::Vec2Value* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::bosdyn::api::Vec2Value* velocity);
  ::bosdyn::api::Vec2Value* unsafe_arena_release_velocity();

  // .google.protobuf.DoubleValue stance_width = 3;
  bool has_stance_width() const;
  private:
  bool _internal_has_stance_width() const;
  public:
  void clear_stance_width();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& stance_width() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_stance_width();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_stance_width();
  void set_allocated_stance_width(::PROTOBUF_NAMESPACE_ID::DoubleValue* stance_width);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_stance_width() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_stance_width();
  public:
  void unsafe_arena_set_allocated_stance_width(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* stance_width);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_stance_width();

  // .google.protobuf.DoubleValue stance_length = 4;
  bool has_stance_length() const;
  private:
  bool _internal_has_stance_length() const;
  public:
  void clear_stance_length();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& stance_length() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_stance_length();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_stance_length();
  void set_allocated_stance_length(::PROTOBUF_NAMESPACE_ID::DoubleValue* stance_length);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_stance_length() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_stance_length();
  public:
  void unsafe_arena_set_allocated_stance_length(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* stance_length);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_stance_length();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.CrawlParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_slices_;
    ::bosdyn::api::Vec2Value* velocity_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* stance_width_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* stance_length_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class GotoParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.GotoParams) */ {
 public:
  inline GotoParams() : GotoParams(nullptr) {}
  ~GotoParams() override;
  explicit PROTOBUF_CONSTEXPR GotoParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GotoParams(const GotoParams& from);
  GotoParams(GotoParams&& from) noexcept
    : GotoParams() {
    *this = ::std::move(from);
  }

  inline GotoParams& operator=(const GotoParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GotoParams& operator=(GotoParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GotoParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const GotoParams* internal_default_instance() {
    return reinterpret_cast<const GotoParams*>(
               &_GotoParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GotoParams& a, GotoParams& b) {
    a.Swap(&b);
  }
  inline void Swap(GotoParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GotoParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GotoParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GotoParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GotoParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GotoParams& from) {
    GotoParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GotoParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.GotoParams";
  }
  protected:
  explicit GotoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAbsolutePositionFieldNumber = 1,
    kAbsoluteYawFieldNumber = 2,
    kStepPositionStiffnessFieldNumber = 3,
    kDutyCycleFieldNumber = 4,
    kLinkToNextFieldNumber = 5,
  };
  // .bosdyn.api.Vec2Value absolute_position = 1;
  bool has_absolute_position() const;
  private:
  bool _internal_has_absolute_position() const;
  public:
  void clear_absolute_position();
  const ::bosdyn::api::Vec2Value& absolute_position() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec2Value* release_absolute_position();
  ::bosdyn::api::Vec2Value* mutable_absolute_position();
  void set_allocated_absolute_position(::bosdyn::api::Vec2Value* absolute_position);
  private:
  const ::bosdyn::api::Vec2Value& _internal_absolute_position() const;
  ::bosdyn::api::Vec2Value* _internal_mutable_absolute_position();
  public:
  void unsafe_arena_set_allocated_absolute_position(
      ::bosdyn::api::Vec2Value* absolute_position);
  ::bosdyn::api::Vec2Value* unsafe_arena_release_absolute_position();

  // .google.protobuf.DoubleValue absolute_yaw = 2;
  bool has_absolute_yaw() const;
  private:
  bool _internal_has_absolute_yaw() const;
  public:
  void clear_absolute_yaw();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& absolute_yaw() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_absolute_yaw();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_absolute_yaw();
  void set_allocated_absolute_yaw(::PROTOBUF_NAMESPACE_ID::DoubleValue* absolute_yaw);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_absolute_yaw() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_absolute_yaw();
  public:
  void unsafe_arena_set_allocated_absolute_yaw(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* absolute_yaw);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_absolute_yaw();

  // .google.protobuf.DoubleValue step_position_stiffness = 3;
  bool has_step_position_stiffness() const;
  private:
  bool _internal_has_step_position_stiffness() const;
  public:
  void clear_step_position_stiffness();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& step_position_stiffness() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_step_position_stiffness();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_step_position_stiffness();
  void set_allocated_step_position_stiffness(::PROTOBUF_NAMESPACE_ID::DoubleValue* step_position_stiffness);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_step_position_stiffness() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_step_position_stiffness();
  public:
  void unsafe_arena_set_allocated_step_position_stiffness(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* step_position_stiffness);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_step_position_stiffness();

  // .google.protobuf.DoubleValue duty_cycle = 4;
  bool has_duty_cycle() const;
  private:
  bool _internal_has_duty_cycle() const;
  public:
  void clear_duty_cycle();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& duty_cycle() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_duty_cycle();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_duty_cycle();
  void set_allocated_duty_cycle(::PROTOBUF_NAMESPACE_ID::DoubleValue* duty_cycle);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_duty_cycle() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_duty_cycle();
  public:
  void unsafe_arena_set_allocated_duty_cycle(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* duty_cycle);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_duty_cycle();

  // .google.protobuf.BoolValue link_to_next = 5;
  bool has_link_to_next() const;
  private:
  bool _internal_has_link_to_next() const;
  public:
  void clear_link_to_next();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& link_to_next() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_link_to_next();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_link_to_next();
  void set_allocated_link_to_next(::PROTOBUF_NAMESPACE_ID::BoolValue* link_to_next);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_link_to_next() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_link_to_next();
  public:
  void unsafe_arena_set_allocated_link_to_next(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* link_to_next);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_link_to_next();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.GotoParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::Vec2Value* absolute_position_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* absolute_yaw_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* step_position_stiffness_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* duty_cycle_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* link_to_next_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class BourreeParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.BourreeParams) */ {
 public:
  inline BourreeParams() : BourreeParams(nullptr) {}
  ~BourreeParams() override;
  explicit PROTOBUF_CONSTEXPR BourreeParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BourreeParams(const BourreeParams& from);
  BourreeParams(BourreeParams&& from) noexcept
    : BourreeParams() {
    *this = ::std::move(from);
  }

  inline BourreeParams& operator=(const BourreeParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline BourreeParams& operator=(BourreeParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BourreeParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const BourreeParams* internal_default_instance() {
    return reinterpret_cast<const BourreeParams*>(
               &_BourreeParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(BourreeParams& a, BourreeParams& b) {
    a.Swap(&b);
  }
  inline void Swap(BourreeParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BourreeParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BourreeParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BourreeParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BourreeParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BourreeParams& from) {
    BourreeParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BourreeParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.BourreeParams";
  }
  protected:
  explicit BourreeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVelocityFieldNumber = 1,
    kYawRateFieldNumber = 2,
    kStanceLengthFieldNumber = 3,
  };
  // .bosdyn.api.Vec2Value velocity = 1;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::bosdyn::api::Vec2Value& velocity() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec2Value* release_velocity();
  ::bosdyn::api::Vec2Value* mutable_velocity();
  void set_allocated_velocity(::bosdyn::api::Vec2Value* velocity);
  private:
  const ::bosdyn::api::Vec2Value& _internal_velocity() const;
  ::bosdyn::api::Vec2Value* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::bosdyn::api::Vec2Value* velocity);
  ::bosdyn::api::Vec2Value* unsafe_arena_release_velocity();

  // .google.protobuf.DoubleValue yaw_rate = 2;
  bool has_yaw_rate() const;
  private:
  bool _internal_has_yaw_rate() const;
  public:
  void clear_yaw_rate();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& yaw_rate() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_yaw_rate();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_yaw_rate();
  void set_allocated_yaw_rate(::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw_rate);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_yaw_rate() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_yaw_rate();
  public:
  void unsafe_arena_set_allocated_yaw_rate(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw_rate);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_yaw_rate();

  // .google.protobuf.DoubleValue stance_length = 3;
  bool has_stance_length() const;
  private:
  bool _internal_has_stance_length() const;
  public:
  void clear_stance_length();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& stance_length() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_stance_length();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_stance_length();
  void set_allocated_stance_length(::PROTOBUF_NAMESPACE_ID::DoubleValue* stance_length);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_stance_length() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_stance_length();
  public:
  void unsafe_arena_set_allocated_stance_length(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* stance_length);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_stance_length();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.BourreeParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::Vec2Value* velocity_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw_rate_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* stance_length_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class SideParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.SideParams) */ {
 public:
  inline SideParams() : SideParams(nullptr) {}
  ~SideParams() override;
  explicit PROTOBUF_CONSTEXPR SideParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SideParams(const SideParams& from);
  SideParams(SideParams&& from) noexcept
    : SideParams() {
    *this = ::std::move(from);
  }

  inline SideParams& operator=(const SideParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SideParams& operator=(SideParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SideParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SideParams* internal_default_instance() {
    return reinterpret_cast<const SideParams*>(
               &_SideParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SideParams& a, SideParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SideParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SideParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SideParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SideParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SideParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SideParams& from) {
    SideParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SideParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.SideParams";
  }
  protected:
  explicit SideParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SideParams_Side Side;
  static constexpr Side SIDE_UNKNOWN =
    SideParams_Side_SIDE_UNKNOWN;
  static constexpr Side SIDE_LEFT =
    SideParams_Side_SIDE_LEFT;
  static constexpr Side SIDE_RIGHT =
    SideParams_Side_SIDE_RIGHT;
  static inline bool Side_IsValid(int value) {
    return SideParams_Side_IsValid(value);
  }
  static constexpr Side Side_MIN =
    SideParams_Side_Side_MIN;
  static constexpr Side Side_MAX =
    SideParams_Side_Side_MAX;
  static constexpr int Side_ARRAYSIZE =
    SideParams_Side_Side_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Side_descriptor() {
    return SideParams_Side_descriptor();
  }
  template<typename T>
  static inline const std::string& Side_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Side>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Side_Name.");
    return SideParams_Side_Name(enum_t_value);
  }
  static inline bool Side_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Side* value) {
    return SideParams_Side_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSideFieldNumber = 1,
  };
  // .bosdyn.api.spot.SideParams.Side side = 1;
  void clear_side();
  ::bosdyn::api::spot::SideParams_Side side() const;
  void set_side(::bosdyn::api::spot::SideParams_Side value);
  private:
  ::bosdyn::api::spot::SideParams_Side _internal_side() const;
  void _internal_set_side(::bosdyn::api::spot::SideParams_Side value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.SideParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int side_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class JumpParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.JumpParams) */ {
 public:
  inline JumpParams() : JumpParams(nullptr) {}
  ~JumpParams() override;
  explicit PROTOBUF_CONSTEXPR JumpParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JumpParams(const JumpParams& from);
  JumpParams(JumpParams&& from) noexcept
    : JumpParams() {
    *this = ::std::move(from);
  }

  inline JumpParams& operator=(const JumpParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline JumpParams& operator=(JumpParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JumpParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const JumpParams* internal_default_instance() {
    return reinterpret_cast<const JumpParams*>(
               &_JumpParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(JumpParams& a, JumpParams& b) {
    a.Swap(&b);
  }
  inline void Swap(JumpParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JumpParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JumpParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JumpParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JumpParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JumpParams& from) {
    JumpParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JumpParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.JumpParams";
  }
  protected:
  explicit JumpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef JumpParams_Lead Lead;
  static constexpr Lead LEAD_UNKNOWN =
    JumpParams_Lead_LEAD_UNKNOWN;
  static constexpr Lead LEAD_AUTO =
    JumpParams_Lead_LEAD_AUTO;
  static constexpr Lead LEAD_FRONT =
    JumpParams_Lead_LEAD_FRONT;
  static constexpr Lead LEAD_HIND =
    JumpParams_Lead_LEAD_HIND;
  static constexpr Lead LEAD_LEFT =
    JumpParams_Lead_LEAD_LEFT;
  static constexpr Lead LEAD_RIGHT =
    JumpParams_Lead_LEAD_RIGHT;
  static inline bool Lead_IsValid(int value) {
    return JumpParams_Lead_IsValid(value);
  }
  static constexpr Lead Lead_MIN =
    JumpParams_Lead_Lead_MIN;
  static constexpr Lead Lead_MAX =
    JumpParams_Lead_Lead_MAX;
  static constexpr int Lead_ARRAYSIZE =
    JumpParams_Lead_Lead_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Lead_descriptor() {
    return JumpParams_Lead_descriptor();
  }
  template<typename T>
  static inline const std::string& Lead_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Lead>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Lead_Name.");
    return JumpParams_Lead_Name(enum_t_value);
  }
  static inline bool Lead_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Lead* value) {
    return JumpParams_Lead_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kYawFieldNumber = 1,
    kFlightSlicesFieldNumber = 2,
    kStanceWidthFieldNumber = 3,
    kStanceLengthFieldNumber = 4,
    kAbsoluteFieldNumber = 5,
    kTranslationFieldNumber = 6,
    kSplitFractionFieldNumber = 7,
    kAbsoluteYawFieldNumber = 9,
    kAbsoluteTranslationFieldNumber = 10,
    kYawIsAbsoluteFieldNumber = 11,
    kTranslationIsAbsoluteFieldNumber = 12,
    kSwingHeightFieldNumber = 13,
    kLeadLegPairFieldNumber = 8,
  };
  // .google.protobuf.DoubleValue yaw = 1;
  bool has_yaw() const;
  private:
  bool _internal_has_yaw() const;
  public:
  void clear_yaw();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& yaw() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_yaw();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_yaw();
  void set_allocated_yaw(::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_yaw() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_yaw();
  public:
  void unsafe_arena_set_allocated_yaw(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_yaw();

  // .google.protobuf.DoubleValue flight_slices = 2;
  bool has_flight_slices() const;
  private:
  bool _internal_has_flight_slices() const;
  public:
  void clear_flight_slices();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& flight_slices() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_flight_slices();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_flight_slices();
  void set_allocated_flight_slices(::PROTOBUF_NAMESPACE_ID::DoubleValue* flight_slices);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_flight_slices() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_flight_slices();
  public:
  void unsafe_arena_set_allocated_flight_slices(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* flight_slices);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_flight_slices();

  // .google.protobuf.DoubleValue stance_width = 3;
  bool has_stance_width() const;
  private:
  bool _internal_has_stance_width() const;
  public:
  void clear_stance_width();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& stance_width() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_stance_width();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_stance_width();
  void set_allocated_stance_width(::PROTOBUF_NAMESPACE_ID::DoubleValue* stance_width);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_stance_width() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_stance_width();
  public:
  void unsafe_arena_set_allocated_stance_width(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* stance_width);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_stance_width();

  // .google.protobuf.DoubleValue stance_length = 4;
  bool has_stance_length() const;
  private:
  bool _internal_has_stance_length() const;
  public:
  void clear_stance_length();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& stance_length() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_stance_length();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_stance_length();
  void set_allocated_stance_length(::PROTOBUF_NAMESPACE_ID::DoubleValue* stance_length);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_stance_length() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_stance_length();
  public:
  void unsafe_arena_set_allocated_stance_length(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* stance_length);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_stance_length();

  // .google.protobuf.BoolValue absolute = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_absolute() const;
  private:
  bool _internal_has_absolute() const;
  public:
  PROTOBUF_DEPRECATED void clear_absolute();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::BoolValue& absolute() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::BoolValue* release_absolute();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_absolute();
  PROTOBUF_DEPRECATED void set_allocated_absolute(::PROTOBUF_NAMESPACE_ID::BoolValue* absolute);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_absolute() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_absolute();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_absolute(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* absolute);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_absolute();

  // .bosdyn.api.Vec2Value translation = 6;
  bool has_translation() const;
  private:
  bool _internal_has_translation() const;
  public:
  void clear_translation();
  const ::bosdyn::api::Vec2Value& translation() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec2Value* release_translation();
  ::bosdyn::api::Vec2Value* mutable_translation();
  void set_allocated_translation(::bosdyn::api::Vec2Value* translation);
  private:
  const ::bosdyn::api::Vec2Value& _internal_translation() const;
  ::bosdyn::api::Vec2Value* _internal_mutable_translation();
  public:
  void unsafe_arena_set_allocated_translation(
      ::bosdyn::api::Vec2Value* translation);
  ::bosdyn::api::Vec2Value* unsafe_arena_release_translation();

  // .google.protobuf.DoubleValue split_fraction = 7;
  bool has_split_fraction() const;
  private:
  bool _internal_has_split_fraction() const;
  public:
  void clear_split_fraction();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& split_fraction() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_split_fraction();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_split_fraction();
  void set_allocated_split_fraction(::PROTOBUF_NAMESPACE_ID::DoubleValue* split_fraction);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_split_fraction() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_split_fraction();
  public:
  void unsafe_arena_set_allocated_split_fraction(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* split_fraction);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_split_fraction();

  // .google.protobuf.DoubleValue absolute_yaw = 9;
  bool has_absolute_yaw() const;
  private:
  bool _internal_has_absolute_yaw() const;
  public:
  void clear_absolute_yaw();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& absolute_yaw() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_absolute_yaw();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_absolute_yaw();
  void set_allocated_absolute_yaw(::PROTOBUF_NAMESPACE_ID::DoubleValue* absolute_yaw);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_absolute_yaw() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_absolute_yaw();
  public:
  void unsafe_arena_set_allocated_absolute_yaw(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* absolute_yaw);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_absolute_yaw();

  // .bosdyn.api.Vec2Value absolute_translation = 10;
  bool has_absolute_translation() const;
  private:
  bool _internal_has_absolute_translation() const;
  public:
  void clear_absolute_translation();
  const ::bosdyn::api::Vec2Value& absolute_translation() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec2Value* release_absolute_translation();
  ::bosdyn::api::Vec2Value* mutable_absolute_translation();
  void set_allocated_absolute_translation(::bosdyn::api::Vec2Value* absolute_translation);
  private:
  const ::bosdyn::api::Vec2Value& _internal_absolute_translation() const;
  ::bosdyn::api::Vec2Value* _internal_mutable_absolute_translation();
  public:
  void unsafe_arena_set_allocated_absolute_translation(
      ::bosdyn::api::Vec2Value* absolute_translation);
  ::bosdyn::api::Vec2Value* unsafe_arena_release_absolute_translation();

  // .google.protobuf.BoolValue yaw_is_absolute = 11;
  bool has_yaw_is_absolute() const;
  private:
  bool _internal_has_yaw_is_absolute() const;
  public:
  void clear_yaw_is_absolute();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& yaw_is_absolute() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_yaw_is_absolute();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_yaw_is_absolute();
  void set_allocated_yaw_is_absolute(::PROTOBUF_NAMESPACE_ID::BoolValue* yaw_is_absolute);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_yaw_is_absolute() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_yaw_is_absolute();
  public:
  void unsafe_arena_set_allocated_yaw_is_absolute(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* yaw_is_absolute);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_yaw_is_absolute();

  // .google.protobuf.BoolValue translation_is_absolute = 12;
  bool has_translation_is_absolute() const;
  private:
  bool _internal_has_translation_is_absolute() const;
  public:
  void clear_translation_is_absolute();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& translation_is_absolute() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_translation_is_absolute();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_translation_is_absolute();
  void set_allocated_translation_is_absolute(::PROTOBUF_NAMESPACE_ID::BoolValue* translation_is_absolute);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_translation_is_absolute() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_translation_is_absolute();
  public:
  void unsafe_arena_set_allocated_translation_is_absolute(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* translation_is_absolute);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_translation_is_absolute();

  // .google.protobuf.DoubleValue swing_height = 13;
  bool has_swing_height() const;
  private:
  bool _internal_has_swing_height() const;
  public:
  void clear_swing_height();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& swing_height() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_swing_height();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_swing_height();
  void set_allocated_swing_height(::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_height);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_swing_height() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_swing_height();
  public:
  void unsafe_arena_set_allocated_swing_height(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_height);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_swing_height();

  // .bosdyn.api.spot.JumpParams.Lead lead_leg_pair = 8;
  void clear_lead_leg_pair();
  ::bosdyn::api::spot::JumpParams_Lead lead_leg_pair() const;
  void set_lead_leg_pair(::bosdyn::api::spot::JumpParams_Lead value);
  private:
  ::bosdyn::api::spot::JumpParams_Lead _internal_lead_leg_pair() const;
  void _internal_set_lead_leg_pair(::bosdyn::api::spot::JumpParams_Lead value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.JumpParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* flight_slices_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* stance_width_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* stance_length_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* absolute_;
    ::bosdyn::api::Vec2Value* translation_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* split_fraction_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* absolute_yaw_;
    ::bosdyn::api::Vec2Value* absolute_translation_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* yaw_is_absolute_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* translation_is_absolute_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_height_;
    int lead_leg_pair_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class StepParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.StepParams) */ {
 public:
  inline StepParams() : StepParams(nullptr) {}
  ~StepParams() override;
  explicit PROTOBUF_CONSTEXPR StepParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StepParams(const StepParams& from);
  StepParams(StepParams&& from) noexcept
    : StepParams() {
    *this = ::std::move(from);
  }

  inline StepParams& operator=(const StepParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline StepParams& operator=(StepParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StepParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const StepParams* internal_default_instance() {
    return reinterpret_cast<const StepParams*>(
               &_StepParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(StepParams& a, StepParams& b) {
    a.Swap(&b);
  }
  inline void Swap(StepParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StepParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StepParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StepParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StepParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StepParams& from) {
    StepParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StepParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.StepParams";
  }
  protected:
  explicit StepParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 2,
    kMirrorFieldNumber = 4,
    kSwingWaypointFieldNumber = 5,
    kSwingHeightFieldNumber = 6,
    kLiftoffVelocityFieldNumber = 7,
    kTouchdownVelocityFieldNumber = 8,
    kMirrorXFieldNumber = 9,
    kMirrorYFieldNumber = 10,
    kWaypointDwellFieldNumber = 11,
    kTouchFieldNumber = 12,
    kTouchOffsetFieldNumber = 13,
    kFootFieldNumber = 1,
    kSecondFootFieldNumber = 3,
  };
  // .bosdyn.api.Vec2Value offset = 2;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  const ::bosdyn::api::Vec2Value& offset() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec2Value* release_offset();
  ::bosdyn::api::Vec2Value* mutable_offset();
  void set_allocated_offset(::bosdyn::api::Vec2Value* offset);
  private:
  const ::bosdyn::api::Vec2Value& _internal_offset() const;
  ::bosdyn::api::Vec2Value* _internal_mutable_offset();
  public:
  void unsafe_arena_set_allocated_offset(
      ::bosdyn::api::Vec2Value* offset);
  ::bosdyn::api::Vec2Value* unsafe_arena_release_offset();

  // .google.protobuf.BoolValue mirror = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_mirror() const;
  private:
  bool _internal_has_mirror() const;
  public:
  PROTOBUF_DEPRECATED void clear_mirror();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::BoolValue& mirror() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::BoolValue* release_mirror();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_mirror();
  PROTOBUF_DEPRECATED void set_allocated_mirror(::PROTOBUF_NAMESPACE_ID::BoolValue* mirror);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_mirror() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_mirror();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_mirror(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* mirror);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_mirror();

  // .bosdyn.api.Vec3Value swing_waypoint = 5;
  bool has_swing_waypoint() const;
  private:
  bool _internal_has_swing_waypoint() const;
  public:
  void clear_swing_waypoint();
  const ::bosdyn::api::Vec3Value& swing_waypoint() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec3Value* release_swing_waypoint();
  ::bosdyn::api::Vec3Value* mutable_swing_waypoint();
  void set_allocated_swing_waypoint(::bosdyn::api::Vec3Value* swing_waypoint);
  private:
  const ::bosdyn::api::Vec3Value& _internal_swing_waypoint() const;
  ::bosdyn::api::Vec3Value* _internal_mutable_swing_waypoint();
  public:
  void unsafe_arena_set_allocated_swing_waypoint(
      ::bosdyn::api::Vec3Value* swing_waypoint);
  ::bosdyn::api::Vec3Value* unsafe_arena_release_swing_waypoint();

  // .google.protobuf.DoubleValue swing_height = 6;
  bool has_swing_height() const;
  private:
  bool _internal_has_swing_height() const;
  public:
  void clear_swing_height();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& swing_height() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_swing_height();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_swing_height();
  void set_allocated_swing_height(::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_height);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_swing_height() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_swing_height();
  public:
  void unsafe_arena_set_allocated_swing_height(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_height);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_swing_height();

  // .google.protobuf.DoubleValue liftoff_velocity = 7;
  bool has_liftoff_velocity() const;
  private:
  bool _internal_has_liftoff_velocity() const;
  public:
  void clear_liftoff_velocity();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& liftoff_velocity() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_liftoff_velocity();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_liftoff_velocity();
  void set_allocated_liftoff_velocity(::PROTOBUF_NAMESPACE_ID::DoubleValue* liftoff_velocity);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_liftoff_velocity() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_liftoff_velocity();
  public:
  void unsafe_arena_set_allocated_liftoff_velocity(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* liftoff_velocity);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_liftoff_velocity();

  // .google.protobuf.DoubleValue touchdown_velocity = 8;
  bool has_touchdown_velocity() const;
  private:
  bool _internal_has_touchdown_velocity() const;
  public:
  void clear_touchdown_velocity();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& touchdown_velocity() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_touchdown_velocity();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_touchdown_velocity();
  void set_allocated_touchdown_velocity(::PROTOBUF_NAMESPACE_ID::DoubleValue* touchdown_velocity);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_touchdown_velocity() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_touchdown_velocity();
  public:
  void unsafe_arena_set_allocated_touchdown_velocity(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* touchdown_velocity);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_touchdown_velocity();

  // .google.protobuf.BoolValue mirror_x = 9;
  bool has_mirror_x() const;
  private:
  bool _internal_has_mirror_x() const;
  public:
  void clear_mirror_x();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& mirror_x() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_mirror_x();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_mirror_x();
  void set_allocated_mirror_x(::PROTOBUF_NAMESPACE_ID::BoolValue* mirror_x);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_mirror_x() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_mirror_x();
  public:
  void unsafe_arena_set_allocated_mirror_x(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* mirror_x);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_mirror_x();

  // .google.protobuf.BoolValue mirror_y = 10;
  bool has_mirror_y() const;
  private:
  bool _internal_has_mirror_y() const;
  public:
  void clear_mirror_y();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& mirror_y() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_mirror_y();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_mirror_y();
  void set_allocated_mirror_y(::PROTOBUF_NAMESPACE_ID::BoolValue* mirror_y);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_mirror_y() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_mirror_y();
  public:
  void unsafe_arena_set_allocated_mirror_y(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* mirror_y);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_mirror_y();

  // .google.protobuf.DoubleValue waypoint_dwell = 11;
  bool has_waypoint_dwell() const;
  private:
  bool _internal_has_waypoint_dwell() const;
  public:
  void clear_waypoint_dwell();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& waypoint_dwell() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_waypoint_dwell();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_waypoint_dwell();
  void set_allocated_waypoint_dwell(::PROTOBUF_NAMESPACE_ID::DoubleValue* waypoint_dwell);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_waypoint_dwell() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_waypoint_dwell();
  public:
  void unsafe_arena_set_allocated_waypoint_dwell(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* waypoint_dwell);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_waypoint_dwell();

  // .google.protobuf.BoolValue touch = 12;
  bool has_touch() const;
  private:
  bool _internal_has_touch() const;
  public:
  void clear_touch();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& touch() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_touch();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_touch();
  void set_allocated_touch(::PROTOBUF_NAMESPACE_ID::BoolValue* touch);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_touch() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_touch();
  public:
  void unsafe_arena_set_allocated_touch(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* touch);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_touch();

  // .bosdyn.api.Vec2Value touch_offset = 13;
  bool has_touch_offset() const;
  private:
  bool _internal_has_touch_offset() const;
  public:
  void clear_touch_offset();
  const ::bosdyn::api::Vec2Value& touch_offset() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec2Value* release_touch_offset();
  ::bosdyn::api::Vec2Value* mutable_touch_offset();
  void set_allocated_touch_offset(::bosdyn::api::Vec2Value* touch_offset);
  private:
  const ::bosdyn::api::Vec2Value& _internal_touch_offset() const;
  ::bosdyn::api::Vec2Value* _internal_mutable_touch_offset();
  public:
  void unsafe_arena_set_allocated_touch_offset(
      ::bosdyn::api::Vec2Value* touch_offset);
  ::bosdyn::api::Vec2Value* unsafe_arena_release_touch_offset();

  // .bosdyn.api.spot.Leg foot = 1;
  void clear_foot();
  ::bosdyn::api::spot::Leg foot() const;
  void set_foot(::bosdyn::api::spot::Leg value);
  private:
  ::bosdyn::api::spot::Leg _internal_foot() const;
  void _internal_set_foot(::bosdyn::api::spot::Leg value);
  public:

  // .bosdyn.api.spot.Leg second_foot = 3;
  void clear_second_foot();
  ::bosdyn::api::spot::Leg second_foot() const;
  void set_second_foot(::bosdyn::api::spot::Leg value);
  private:
  ::bosdyn::api::spot::Leg _internal_second_foot() const;
  void _internal_set_second_foot(::bosdyn::api::spot::Leg value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.StepParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::Vec2Value* offset_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* mirror_;
    ::bosdyn::api::Vec3Value* swing_waypoint_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_height_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* liftoff_velocity_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* touchdown_velocity_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* mirror_x_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* mirror_y_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* waypoint_dwell_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* touch_;
    ::bosdyn::api::Vec2Value* touch_offset_;
    int foot_;
    int second_foot_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class RotateBodyParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.RotateBodyParams) */ {
 public:
  inline RotateBodyParams() : RotateBodyParams(nullptr) {}
  ~RotateBodyParams() override;
  explicit PROTOBUF_CONSTEXPR RotateBodyParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RotateBodyParams(const RotateBodyParams& from);
  RotateBodyParams(RotateBodyParams&& from) noexcept
    : RotateBodyParams() {
    *this = ::std::move(from);
  }

  inline RotateBodyParams& operator=(const RotateBodyParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RotateBodyParams& operator=(RotateBodyParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RotateBodyParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const RotateBodyParams* internal_default_instance() {
    return reinterpret_cast<const RotateBodyParams*>(
               &_RotateBodyParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(RotateBodyParams& a, RotateBodyParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RotateBodyParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RotateBodyParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RotateBodyParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RotateBodyParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RotateBodyParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RotateBodyParams& from) {
    RotateBodyParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RotateBodyParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.RotateBodyParams";
  }
  protected:
  explicit RotateBodyParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRotationFieldNumber = 1,
    kReturnToStartPoseFieldNumber = 2,
  };
  // .bosdyn.api.spot.EulerZYXValue rotation = 1;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::bosdyn::api::spot::EulerZYXValue& rotation() const;
  PROTOBUF_NODISCARD ::bosdyn::api::spot::EulerZYXValue* release_rotation();
  ::bosdyn::api::spot::EulerZYXValue* mutable_rotation();
  void set_allocated_rotation(::bosdyn::api::spot::EulerZYXValue* rotation);
  private:
  const ::bosdyn::api::spot::EulerZYXValue& _internal_rotation() const;
  ::bosdyn::api::spot::EulerZYXValue* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::bosdyn::api::spot::EulerZYXValue* rotation);
  ::bosdyn::api::spot::EulerZYXValue* unsafe_arena_release_rotation();

  // .google.protobuf.BoolValue return_to_start_pose = 2;
  bool has_return_to_start_pose() const;
  private:
  bool _internal_has_return_to_start_pose() const;
  public:
  void clear_return_to_start_pose();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& return_to_start_pose() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_return_to_start_pose();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_return_to_start_pose();
  void set_allocated_return_to_start_pose(::PROTOBUF_NAMESPACE_ID::BoolValue* return_to_start_pose);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_return_to_start_pose() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_return_to_start_pose();
  public:
  void unsafe_arena_set_allocated_return_to_start_pose(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* return_to_start_pose);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_return_to_start_pose();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.RotateBodyParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::spot::EulerZYXValue* rotation_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* return_to_start_pose_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class ButtCircleParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.ButtCircleParams) */ {
 public:
  inline ButtCircleParams() : ButtCircleParams(nullptr) {}
  ~ButtCircleParams() override;
  explicit PROTOBUF_CONSTEXPR ButtCircleParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ButtCircleParams(const ButtCircleParams& from);
  ButtCircleParams(ButtCircleParams&& from) noexcept
    : ButtCircleParams() {
    *this = ::std::move(from);
  }

  inline ButtCircleParams& operator=(const ButtCircleParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ButtCircleParams& operator=(ButtCircleParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ButtCircleParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ButtCircleParams* internal_default_instance() {
    return reinterpret_cast<const ButtCircleParams*>(
               &_ButtCircleParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ButtCircleParams& a, ButtCircleParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ButtCircleParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ButtCircleParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ButtCircleParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ButtCircleParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ButtCircleParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ButtCircleParams& from) {
    ButtCircleParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ButtCircleParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.ButtCircleParams";
  }
  protected:
  explicit ButtCircleParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRadiusFieldNumber = 1,
    kBeatsPerCircleFieldNumber = 2,
    kNumberOfCirclesFieldNumber = 3,
    kClockwiseFieldNumber = 5,
    kStartingAngleFieldNumber = 6,
    kPivotFieldNumber = 4,
  };
  // .google.protobuf.DoubleValue radius = 1;
  bool has_radius() const;
  private:
  bool _internal_has_radius() const;
  public:
  void clear_radius();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& radius() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_radius();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_radius();
  void set_allocated_radius(::PROTOBUF_NAMESPACE_ID::DoubleValue* radius);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_radius() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_radius();
  public:
  void unsafe_arena_set_allocated_radius(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* radius);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_radius();

  // .google.protobuf.DoubleValue beats_per_circle = 2;
  bool has_beats_per_circle() const;
  private:
  bool _internal_has_beats_per_circle() const;
  public:
  void clear_beats_per_circle();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& beats_per_circle() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_beats_per_circle();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_beats_per_circle();
  void set_allocated_beats_per_circle(::PROTOBUF_NAMESPACE_ID::DoubleValue* beats_per_circle);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_beats_per_circle() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_beats_per_circle();
  public:
  void unsafe_arena_set_allocated_beats_per_circle(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* beats_per_circle);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_beats_per_circle();

  // .google.protobuf.DoubleValue number_of_circles = 3;
  bool has_number_of_circles() const;
  private:
  bool _internal_has_number_of_circles() const;
  public:
  void clear_number_of_circles();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& number_of_circles() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_number_of_circles();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_number_of_circles();
  void set_allocated_number_of_circles(::PROTOBUF_NAMESPACE_ID::DoubleValue* number_of_circles);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_number_of_circles() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_number_of_circles();
  public:
  void unsafe_arena_set_allocated_number_of_circles(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* number_of_circles);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_number_of_circles();

  // .google.protobuf.BoolValue clockwise = 5;
  bool has_clockwise() const;
  private:
  bool _internal_has_clockwise() const;
  public:
  void clear_clockwise();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& clockwise() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_clockwise();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_clockwise();
  void set_allocated_clockwise(::PROTOBUF_NAMESPACE_ID::BoolValue* clockwise);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_clockwise() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_clockwise();
  public:
  void unsafe_arena_set_allocated_clockwise(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* clockwise);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_clockwise();

  // .google.protobuf.DoubleValue starting_angle = 6;
  bool has_starting_angle() const;
  private:
  bool _internal_has_starting_angle() const;
  public:
  void clear_starting_angle();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& starting_angle() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_starting_angle();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_starting_angle();
  void set_allocated_starting_angle(::PROTOBUF_NAMESPACE_ID::DoubleValue* starting_angle);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_starting_angle() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_starting_angle();
  public:
  void unsafe_arena_set_allocated_starting_angle(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* starting_angle);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_starting_angle();

  // .bosdyn.api.spot.Pivot pivot = 4;
  void clear_pivot();
  ::bosdyn::api::spot::Pivot pivot() const;
  void set_pivot(::bosdyn::api::spot::Pivot value);
  private:
  ::bosdyn::api::spot::Pivot _internal_pivot() const;
  void _internal_set_pivot(::bosdyn::api::spot::Pivot value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.ButtCircleParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* radius_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* beats_per_circle_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* number_of_circles_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* clockwise_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* starting_angle_;
    int pivot_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class TwerkParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.TwerkParams) */ {
 public:
  inline TwerkParams() : TwerkParams(nullptr) {}
  ~TwerkParams() override;
  explicit PROTOBUF_CONSTEXPR TwerkParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TwerkParams(const TwerkParams& from);
  TwerkParams(TwerkParams&& from) noexcept
    : TwerkParams() {
    *this = ::std::move(from);
  }

  inline TwerkParams& operator=(const TwerkParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline TwerkParams& operator=(TwerkParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TwerkParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const TwerkParams* internal_default_instance() {
    return reinterpret_cast<const TwerkParams*>(
               &_TwerkParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(TwerkParams& a, TwerkParams& b) {
    a.Swap(&b);
  }
  inline void Swap(TwerkParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TwerkParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TwerkParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TwerkParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TwerkParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TwerkParams& from) {
    TwerkParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TwerkParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.TwerkParams";
  }
  protected:
  explicit TwerkParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
  };
  // .google.protobuf.DoubleValue height = 1;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& height() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_height();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_height();
  void set_allocated_height(::PROTOBUF_NAMESPACE_ID::DoubleValue* height);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_height() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_height();
  public:
  void unsafe_arena_set_allocated_height(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* height);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_height();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.TwerkParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class TurnParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.TurnParams) */ {
 public:
  inline TurnParams() : TurnParams(nullptr) {}
  ~TurnParams() override;
  explicit PROTOBUF_CONSTEXPR TurnParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TurnParams(const TurnParams& from);
  TurnParams(TurnParams&& from) noexcept
    : TurnParams() {
    *this = ::std::move(from);
  }

  inline TurnParams& operator=(const TurnParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline TurnParams& operator=(TurnParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TurnParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const TurnParams* internal_default_instance() {
    return reinterpret_cast<const TurnParams*>(
               &_TurnParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(TurnParams& a, TurnParams& b) {
    a.Swap(&b);
  }
  inline void Swap(TurnParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TurnParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TurnParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TurnParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TurnParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TurnParams& from) {
    TurnParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TurnParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.TurnParams";
  }
  protected:
  explicit TurnParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYawFieldNumber = 1,
    kAbsoluteFieldNumber = 2,
    kSwingHeightFieldNumber = 3,
    kSwingVelocityFieldNumber = 4,
    kAbsoluteYawFieldNumber = 5,
    kYawIsAbsoluteFieldNumber = 6,
    kMotionFieldNumber = 7,
    kAbsoluteMotionFieldNumber = 8,
    kMotionIsAbsoluteFieldNumber = 9,
  };
  // .google.protobuf.DoubleValue yaw = 1;
  bool has_yaw() const;
  private:
  bool _internal_has_yaw() const;
  public:
  void clear_yaw();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& yaw() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_yaw();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_yaw();
  void set_allocated_yaw(::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_yaw() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_yaw();
  public:
  void unsafe_arena_set_allocated_yaw(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_yaw();

  // .google.protobuf.BoolValue absolute = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_absolute() const;
  private:
  bool _internal_has_absolute() const;
  public:
  PROTOBUF_DEPRECATED void clear_absolute();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::BoolValue& absolute() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::BoolValue* release_absolute();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_absolute();
  PROTOBUF_DEPRECATED void set_allocated_absolute(::PROTOBUF_NAMESPACE_ID::BoolValue* absolute);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_absolute() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_absolute();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_absolute(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* absolute);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_absolute();

  // .google.protobuf.DoubleValue swing_height = 3;
  bool has_swing_height() const;
  private:
  bool _internal_has_swing_height() const;
  public:
  void clear_swing_height();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& swing_height() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_swing_height();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_swing_height();
  void set_allocated_swing_height(::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_height);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_swing_height() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_swing_height();
  public:
  void unsafe_arena_set_allocated_swing_height(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_height);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_swing_height();

  // .google.protobuf.DoubleValue swing_velocity = 4;
  bool has_swing_velocity() const;
  private:
  bool _internal_has_swing_velocity() const;
  public:
  void clear_swing_velocity();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& swing_velocity() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_swing_velocity();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_swing_velocity();
  void set_allocated_swing_velocity(::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_velocity);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_swing_velocity() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_swing_velocity();
  public:
  void unsafe_arena_set_allocated_swing_velocity(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_velocity);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_swing_velocity();

  // .google.protobuf.DoubleValue absolute_yaw = 5;
  bool has_absolute_yaw() const;
  private:
  bool _internal_has_absolute_yaw() const;
  public:
  void clear_absolute_yaw();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& absolute_yaw() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_absolute_yaw();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_absolute_yaw();
  void set_allocated_absolute_yaw(::PROTOBUF_NAMESPACE_ID::DoubleValue* absolute_yaw);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_absolute_yaw() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_absolute_yaw();
  public:
  void unsafe_arena_set_allocated_absolute_yaw(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* absolute_yaw);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_absolute_yaw();

  // .google.protobuf.BoolValue yaw_is_absolute = 6;
  bool has_yaw_is_absolute() const;
  private:
  bool _internal_has_yaw_is_absolute() const;
  public:
  void clear_yaw_is_absolute();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& yaw_is_absolute() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_yaw_is_absolute();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_yaw_is_absolute();
  void set_allocated_yaw_is_absolute(::PROTOBUF_NAMESPACE_ID::BoolValue* yaw_is_absolute);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_yaw_is_absolute() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_yaw_is_absolute();
  public:
  void unsafe_arena_set_allocated_yaw_is_absolute(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* yaw_is_absolute);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_yaw_is_absolute();

  // .bosdyn.api.Vec2Value motion = 7;
  bool has_motion() const;
  private:
  bool _internal_has_motion() const;
  public:
  void clear_motion();
  const ::bosdyn::api::Vec2Value& motion() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec2Value* release_motion();
  ::bosdyn::api::Vec2Value* mutable_motion();
  void set_allocated_motion(::bosdyn::api::Vec2Value* motion);
  private:
  const ::bosdyn::api::Vec2Value& _internal_motion() const;
  ::bosdyn::api::Vec2Value* _internal_mutable_motion();
  public:
  void unsafe_arena_set_allocated_motion(
      ::bosdyn::api::Vec2Value* motion);
  ::bosdyn::api::Vec2Value* unsafe_arena_release_motion();

  // .bosdyn.api.Vec2Value absolute_motion = 8;
  bool has_absolute_motion() const;
  private:
  bool _internal_has_absolute_motion() const;
  public:
  void clear_absolute_motion();
  const ::bosdyn::api::Vec2Value& absolute_motion() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec2Value* release_absolute_motion();
  ::bosdyn::api::Vec2Value* mutable_absolute_motion();
  void set_allocated_absolute_motion(::bosdyn::api::Vec2Value* absolute_motion);
  private:
  const ::bosdyn::api::Vec2Value& _internal_absolute_motion() const;
  ::bosdyn::api::Vec2Value* _internal_mutable_absolute_motion();
  public:
  void unsafe_arena_set_allocated_absolute_motion(
      ::bosdyn::api::Vec2Value* absolute_motion);
  ::bosdyn::api::Vec2Value* unsafe_arena_release_absolute_motion();

  // .google.protobuf.BoolValue motion_is_absolute = 9;
  bool has_motion_is_absolute() const;
  private:
  bool _internal_has_motion_is_absolute() const;
  public:
  void clear_motion_is_absolute();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& motion_is_absolute() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_motion_is_absolute();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_motion_is_absolute();
  void set_allocated_motion_is_absolute(::PROTOBUF_NAMESPACE_ID::BoolValue* motion_is_absolute);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_motion_is_absolute() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_motion_is_absolute();
  public:
  void unsafe_arena_set_allocated_motion_is_absolute(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* motion_is_absolute);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_motion_is_absolute();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.TurnParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* absolute_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_height_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_velocity_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* absolute_yaw_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* yaw_is_absolute_;
    ::bosdyn::api::Vec2Value* motion_;
    ::bosdyn::api::Vec2Value* absolute_motion_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* motion_is_absolute_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class Pace2StepParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.Pace2StepParams) */ {
 public:
  inline Pace2StepParams() : Pace2StepParams(nullptr) {}
  ~Pace2StepParams() override;
  explicit PROTOBUF_CONSTEXPR Pace2StepParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pace2StepParams(const Pace2StepParams& from);
  Pace2StepParams(Pace2StepParams&& from) noexcept
    : Pace2StepParams() {
    *this = ::std::move(from);
  }

  inline Pace2StepParams& operator=(const Pace2StepParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pace2StepParams& operator=(Pace2StepParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pace2StepParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pace2StepParams* internal_default_instance() {
    return reinterpret_cast<const Pace2StepParams*>(
               &_Pace2StepParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Pace2StepParams& a, Pace2StepParams& b) {
    a.Swap(&b);
  }
  inline void Swap(Pace2StepParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pace2StepParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pace2StepParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pace2StepParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pace2StepParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Pace2StepParams& from) {
    Pace2StepParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pace2StepParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.Pace2StepParams";
  }
  protected:
  explicit Pace2StepParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMotionFieldNumber = 1,
    kSwingHeightFieldNumber = 3,
    kSwingVelocityFieldNumber = 4,
    kAbsoluteFieldNumber = 5,
    kAbsoluteMotionFieldNumber = 6,
    kMotionIsAbsoluteFieldNumber = 7,
    kYawFieldNumber = 8,
    kAbsoluteYawFieldNumber = 9,
    kYawIsAbsoluteFieldNumber = 10,
  };
  // .bosdyn.api.Vec2Value motion = 1;
  bool has_motion() const;
  private:
  bool _internal_has_motion() const;
  public:
  void clear_motion();
  const ::bosdyn::api::Vec2Value& motion() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec2Value* release_motion();
  ::bosdyn::api::Vec2Value* mutable_motion();
  void set_allocated_motion(::bosdyn::api::Vec2Value* motion);
  private:
  const ::bosdyn::api::Vec2Value& _internal_motion() const;
  ::bosdyn::api::Vec2Value* _internal_mutable_motion();
  public:
  void unsafe_arena_set_allocated_motion(
      ::bosdyn::api::Vec2Value* motion);
  ::bosdyn::api::Vec2Value* unsafe_arena_release_motion();

  // .google.protobuf.DoubleValue swing_height = 3;
  bool has_swing_height() const;
  private:
  bool _internal_has_swing_height() const;
  public:
  void clear_swing_height();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& swing_height() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_swing_height();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_swing_height();
  void set_allocated_swing_height(::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_height);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_swing_height() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_swing_height();
  public:
  void unsafe_arena_set_allocated_swing_height(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_height);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_swing_height();

  // .google.protobuf.DoubleValue swing_velocity = 4;
  bool has_swing_velocity() const;
  private:
  bool _internal_has_swing_velocity() const;
  public:
  void clear_swing_velocity();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& swing_velocity() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_swing_velocity();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_swing_velocity();
  void set_allocated_swing_velocity(::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_velocity);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_swing_velocity() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_swing_velocity();
  public:
  void unsafe_arena_set_allocated_swing_velocity(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_velocity);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_swing_velocity();

  // .google.protobuf.BoolValue absolute = 5;
  bool has_absolute() const;
  private:
  bool _internal_has_absolute() const;
  public:
  void clear_absolute();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& absolute() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_absolute();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_absolute();
  void set_allocated_absolute(::PROTOBUF_NAMESPACE_ID::BoolValue* absolute);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_absolute() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_absolute();
  public:
  void unsafe_arena_set_allocated_absolute(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* absolute);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_absolute();

  // .bosdyn.api.Vec2Value absolute_motion = 6;
  bool has_absolute_motion() const;
  private:
  bool _internal_has_absolute_motion() const;
  public:
  void clear_absolute_motion();
  const ::bosdyn::api::Vec2Value& absolute_motion() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec2Value* release_absolute_motion();
  ::bosdyn::api::Vec2Value* mutable_absolute_motion();
  void set_allocated_absolute_motion(::bosdyn::api::Vec2Value* absolute_motion);
  private:
  const ::bosdyn::api::Vec2Value& _internal_absolute_motion() const;
  ::bosdyn::api::Vec2Value* _internal_mutable_absolute_motion();
  public:
  void unsafe_arena_set_allocated_absolute_motion(
      ::bosdyn::api::Vec2Value* absolute_motion);
  ::bosdyn::api::Vec2Value* unsafe_arena_release_absolute_motion();

  // .google.protobuf.BoolValue motion_is_absolute = 7;
  bool has_motion_is_absolute() const;
  private:
  bool _internal_has_motion_is_absolute() const;
  public:
  void clear_motion_is_absolute();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& motion_is_absolute() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_motion_is_absolute();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_motion_is_absolute();
  void set_allocated_motion_is_absolute(::PROTOBUF_NAMESPACE_ID::BoolValue* motion_is_absolute);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_motion_is_absolute() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_motion_is_absolute();
  public:
  void unsafe_arena_set_allocated_motion_is_absolute(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* motion_is_absolute);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_motion_is_absolute();

  // .google.protobuf.DoubleValue yaw = 8;
  bool has_yaw() const;
  private:
  bool _internal_has_yaw() const;
  public:
  void clear_yaw();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& yaw() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_yaw();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_yaw();
  void set_allocated_yaw(::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_yaw() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_yaw();
  public:
  void unsafe_arena_set_allocated_yaw(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_yaw();

  // .google.protobuf.DoubleValue absolute_yaw = 9;
  bool has_absolute_yaw() const;
  private:
  bool _internal_has_absolute_yaw() const;
  public:
  void clear_absolute_yaw();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& absolute_yaw() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_absolute_yaw();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_absolute_yaw();
  void set_allocated_absolute_yaw(::PROTOBUF_NAMESPACE_ID::DoubleValue* absolute_yaw);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_absolute_yaw() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_absolute_yaw();
  public:
  void unsafe_arena_set_allocated_absolute_yaw(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* absolute_yaw);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_absolute_yaw();

  // .google.protobuf.BoolValue yaw_is_absolute = 10;
  bool has_yaw_is_absolute() const;
  private:
  bool _internal_has_yaw_is_absolute() const;
  public:
  void clear_yaw_is_absolute();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& yaw_is_absolute() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_yaw_is_absolute();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_yaw_is_absolute();
  void set_allocated_yaw_is_absolute(::PROTOBUF_NAMESPACE_ID::BoolValue* yaw_is_absolute);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_yaw_is_absolute() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_yaw_is_absolute();
  public:
  void unsafe_arena_set_allocated_yaw_is_absolute(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* yaw_is_absolute);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_yaw_is_absolute();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.Pace2StepParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::Vec2Value* motion_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_height_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_velocity_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* absolute_;
    ::bosdyn::api::Vec2Value* absolute_motion_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* motion_is_absolute_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* absolute_yaw_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* yaw_is_absolute_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class ChickenHeadParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.ChickenHeadParams) */ {
 public:
  inline ChickenHeadParams() : ChickenHeadParams(nullptr) {}
  ~ChickenHeadParams() override;
  explicit PROTOBUF_CONSTEXPR ChickenHeadParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChickenHeadParams(const ChickenHeadParams& from);
  ChickenHeadParams(ChickenHeadParams&& from) noexcept
    : ChickenHeadParams() {
    *this = ::std::move(from);
  }

  inline ChickenHeadParams& operator=(const ChickenHeadParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChickenHeadParams& operator=(ChickenHeadParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChickenHeadParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChickenHeadParams* internal_default_instance() {
    return reinterpret_cast<const ChickenHeadParams*>(
               &_ChickenHeadParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ChickenHeadParams& a, ChickenHeadParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ChickenHeadParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChickenHeadParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChickenHeadParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChickenHeadParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChickenHeadParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChickenHeadParams& from) {
    ChickenHeadParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChickenHeadParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.ChickenHeadParams";
  }
  protected:
  explicit ChickenHeadParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBobMagnitudeFieldNumber = 1,
    kBeatsPerCycleFieldNumber = 2,
    kFollowFieldNumber = 3,
  };
  // .bosdyn.api.Vec3Value bob_magnitude = 1;
  bool has_bob_magnitude() const;
  private:
  bool _internal_has_bob_magnitude() const;
  public:
  void clear_bob_magnitude();
  const ::bosdyn::api::Vec3Value& bob_magnitude() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec3Value* release_bob_magnitude();
  ::bosdyn::api::Vec3Value* mutable_bob_magnitude();
  void set_allocated_bob_magnitude(::bosdyn::api::Vec3Value* bob_magnitude);
  private:
  const ::bosdyn::api::Vec3Value& _internal_bob_magnitude() const;
  ::bosdyn::api::Vec3Value* _internal_mutable_bob_magnitude();
  public:
  void unsafe_arena_set_allocated_bob_magnitude(
      ::bosdyn::api::Vec3Value* bob_magnitude);
  ::bosdyn::api::Vec3Value* unsafe_arena_release_bob_magnitude();

  // .google.protobuf.Int32Value beats_per_cycle = 2;
  bool has_beats_per_cycle() const;
  private:
  bool _internal_has_beats_per_cycle() const;
  public:
  void clear_beats_per_cycle();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& beats_per_cycle() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_beats_per_cycle();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_beats_per_cycle();
  void set_allocated_beats_per_cycle(::PROTOBUF_NAMESPACE_ID::Int32Value* beats_per_cycle);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_beats_per_cycle() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_beats_per_cycle();
  public:
  void unsafe_arena_set_allocated_beats_per_cycle(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* beats_per_cycle);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_beats_per_cycle();

  // .google.protobuf.BoolValue follow = 3;
  bool has_follow() const;
  private:
  bool _internal_has_follow() const;
  public:
  void clear_follow();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& follow() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_follow();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_follow();
  void set_allocated_follow(::PROTOBUF_NAMESPACE_ID::BoolValue* follow);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_follow() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_follow();
  public:
  void unsafe_arena_set_allocated_follow(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* follow);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_follow();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.ChickenHeadParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::Vec3Value* bob_magnitude_;
    ::PROTOBUF_NAMESPACE_ID::Int32Value* beats_per_cycle_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* follow_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class ClapParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.ClapParams) */ {
 public:
  inline ClapParams() : ClapParams(nullptr) {}
  ~ClapParams() override;
  explicit PROTOBUF_CONSTEXPR ClapParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClapParams(const ClapParams& from);
  ClapParams(ClapParams&& from) noexcept
    : ClapParams() {
    *this = ::std::move(from);
  }

  inline ClapParams& operator=(const ClapParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClapParams& operator=(ClapParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClapParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClapParams* internal_default_instance() {
    return reinterpret_cast<const ClapParams*>(
               &_ClapParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ClapParams& a, ClapParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ClapParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClapParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClapParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClapParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClapParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClapParams& from) {
    ClapParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClapParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.ClapParams";
  }
  protected:
  explicit ClapParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirectionFieldNumber = 1,
    kLocationFieldNumber = 2,
    kSpeedFieldNumber = 3,
    kClapDistanceFieldNumber = 4,
  };
  // .bosdyn.api.Vec3Value direction = 1;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  const ::bosdyn::api::Vec3Value& direction() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec3Value* release_direction();
  ::bosdyn::api::Vec3Value* mutable_direction();
  void set_allocated_direction(::bosdyn::api::Vec3Value* direction);
  private:
  const ::bosdyn::api::Vec3Value& _internal_direction() const;
  ::bosdyn::api::Vec3Value* _internal_mutable_direction();
  public:
  void unsafe_arena_set_allocated_direction(
      ::bosdyn::api::Vec3Value* direction);
  ::bosdyn::api::Vec3Value* unsafe_arena_release_direction();

  // .bosdyn.api.Vec3Value location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::bosdyn::api::Vec3Value& location() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec3Value* release_location();
  ::bosdyn::api::Vec3Value* mutable_location();
  void set_allocated_location(::bosdyn::api::Vec3Value* location);
  private:
  const ::bosdyn::api::Vec3Value& _internal_location() const;
  ::bosdyn::api::Vec3Value* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::bosdyn::api::Vec3Value* location);
  ::bosdyn::api::Vec3Value* unsafe_arena_release_location();

  // .google.protobuf.DoubleValue speed = 3;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& speed() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_speed();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_speed();
  void set_allocated_speed(::PROTOBUF_NAMESPACE_ID::DoubleValue* speed);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_speed() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_speed();
  public:
  void unsafe_arena_set_allocated_speed(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* speed);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_speed();

  // .google.protobuf.DoubleValue clap_distance = 4;
  bool has_clap_distance() const;
  private:
  bool _internal_has_clap_distance() const;
  public:
  void clear_clap_distance();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& clap_distance() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_clap_distance();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_clap_distance();
  void set_allocated_clap_distance(::PROTOBUF_NAMESPACE_ID::DoubleValue* clap_distance);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_clap_distance() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_clap_distance();
  public:
  void unsafe_arena_set_allocated_clap_distance(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* clap_distance);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_clap_distance();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.ClapParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::Vec3Value* direction_;
    ::bosdyn::api::Vec3Value* location_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* speed_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* clap_distance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class KneelCircleParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.KneelCircleParams) */ {
 public:
  inline KneelCircleParams() : KneelCircleParams(nullptr) {}
  ~KneelCircleParams() override;
  explicit PROTOBUF_CONSTEXPR KneelCircleParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KneelCircleParams(const KneelCircleParams& from);
  KneelCircleParams(KneelCircleParams&& from) noexcept
    : KneelCircleParams() {
    *this = ::std::move(from);
  }

  inline KneelCircleParams& operator=(const KneelCircleParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline KneelCircleParams& operator=(KneelCircleParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KneelCircleParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const KneelCircleParams* internal_default_instance() {
    return reinterpret_cast<const KneelCircleParams*>(
               &_KneelCircleParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(KneelCircleParams& a, KneelCircleParams& b) {
    a.Swap(&b);
  }
  inline void Swap(KneelCircleParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KneelCircleParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KneelCircleParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KneelCircleParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KneelCircleParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KneelCircleParams& from) {
    KneelCircleParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KneelCircleParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.KneelCircleParams";
  }
  protected:
  explicit KneelCircleParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 1,
    kBeatsPerCircleFieldNumber = 2,
    kNumberOfCirclesFieldNumber = 3,
    kOffsetFieldNumber = 4,
    kRadiusFieldNumber = 5,
    kReverseFieldNumber = 6,
  };
  // .bosdyn.api.Vec3Value location = 1;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::bosdyn::api::Vec3Value& location() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec3Value* release_location();
  ::bosdyn::api::Vec3Value* mutable_location();
  void set_allocated_location(::bosdyn::api::Vec3Value* location);
  private:
  const ::bosdyn::api::Vec3Value& _internal_location() const;
  ::bosdyn::api::Vec3Value* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::bosdyn::api::Vec3Value* location);
  ::bosdyn::api::Vec3Value* unsafe_arena_release_location();

  // .google.protobuf.Int32Value beats_per_circle = 2;
  bool has_beats_per_circle() const;
  private:
  bool _internal_has_beats_per_circle() const;
  public:
  void clear_beats_per_circle();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& beats_per_circle() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_beats_per_circle();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_beats_per_circle();
  void set_allocated_beats_per_circle(::PROTOBUF_NAMESPACE_ID::Int32Value* beats_per_circle);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_beats_per_circle() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_beats_per_circle();
  public:
  void unsafe_arena_set_allocated_beats_per_circle(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* beats_per_circle);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_beats_per_circle();

  // .google.protobuf.DoubleValue number_of_circles = 3;
  bool has_number_of_circles() const;
  private:
  bool _internal_has_number_of_circles() const;
  public:
  void clear_number_of_circles();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& number_of_circles() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_number_of_circles();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_number_of_circles();
  void set_allocated_number_of_circles(::PROTOBUF_NAMESPACE_ID::DoubleValue* number_of_circles);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_number_of_circles() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_number_of_circles();
  public:
  void unsafe_arena_set_allocated_number_of_circles(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* number_of_circles);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_number_of_circles();

  // .google.protobuf.DoubleValue offset = 4;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& offset() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_offset();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_offset();
  void set_allocated_offset(::PROTOBUF_NAMESPACE_ID::DoubleValue* offset);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_offset() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_offset();
  public:
  void unsafe_arena_set_allocated_offset(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* offset);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_offset();

  // .google.protobuf.DoubleValue radius = 5;
  bool has_radius() const;
  private:
  bool _internal_has_radius() const;
  public:
  void clear_radius();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& radius() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_radius();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_radius();
  void set_allocated_radius(::PROTOBUF_NAMESPACE_ID::DoubleValue* radius);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_radius() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_radius();
  public:
  void unsafe_arena_set_allocated_radius(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* radius);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_radius();

  // .google.protobuf.BoolValue reverse = 6;
  bool has_reverse() const;
  private:
  bool _internal_has_reverse() const;
  public:
  void clear_reverse();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& reverse() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_reverse();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_reverse();
  void set_allocated_reverse(::PROTOBUF_NAMESPACE_ID::BoolValue* reverse);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_reverse() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_reverse();
  public:
  void unsafe_arena_set_allocated_reverse(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* reverse);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_reverse();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.KneelCircleParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::Vec3Value* location_;
    ::PROTOBUF_NAMESPACE_ID::Int32Value* beats_per_circle_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* number_of_circles_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* offset_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* radius_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* reverse_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class FrontUpParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.FrontUpParams) */ {
 public:
  inline FrontUpParams() : FrontUpParams(nullptr) {}
  ~FrontUpParams() override;
  explicit PROTOBUF_CONSTEXPR FrontUpParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrontUpParams(const FrontUpParams& from);
  FrontUpParams(FrontUpParams&& from) noexcept
    : FrontUpParams() {
    *this = ::std::move(from);
  }

  inline FrontUpParams& operator=(const FrontUpParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrontUpParams& operator=(FrontUpParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrontUpParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrontUpParams* internal_default_instance() {
    return reinterpret_cast<const FrontUpParams*>(
               &_FrontUpParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(FrontUpParams& a, FrontUpParams& b) {
    a.Swap(&b);
  }
  inline void Swap(FrontUpParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrontUpParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrontUpParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrontUpParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrontUpParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FrontUpParams& from) {
    FrontUpParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrontUpParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.FrontUpParams";
  }
  protected:
  explicit FrontUpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMirrorFieldNumber = 1,
  };
  // .google.protobuf.BoolValue mirror = 1;
  bool has_mirror() const;
  private:
  bool _internal_has_mirror() const;
  public:
  void clear_mirror();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& mirror() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_mirror();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_mirror();
  void set_allocated_mirror(::PROTOBUF_NAMESPACE_ID::BoolValue* mirror);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_mirror() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_mirror();
  public:
  void unsafe_arena_set_allocated_mirror(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* mirror);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_mirror();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.FrontUpParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::BoolValue* mirror_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class FidgetStandParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.FidgetStandParams) */ {
 public:
  inline FidgetStandParams() : FidgetStandParams(nullptr) {}
  ~FidgetStandParams() override;
  explicit PROTOBUF_CONSTEXPR FidgetStandParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FidgetStandParams(const FidgetStandParams& from);
  FidgetStandParams(FidgetStandParams&& from) noexcept
    : FidgetStandParams() {
    *this = ::std::move(from);
  }

  inline FidgetStandParams& operator=(const FidgetStandParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline FidgetStandParams& operator=(FidgetStandParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FidgetStandParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const FidgetStandParams* internal_default_instance() {
    return reinterpret_cast<const FidgetStandParams*>(
               &_FidgetStandParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(FidgetStandParams& a, FidgetStandParams& b) {
    a.Swap(&b);
  }
  inline void Swap(FidgetStandParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FidgetStandParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FidgetStandParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FidgetStandParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FidgetStandParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FidgetStandParams& from) {
    FidgetStandParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FidgetStandParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.FidgetStandParams";
  }
  protected:
  explicit FidgetStandParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FidgetStandParams_FidgetPreset FidgetPreset;
  static constexpr FidgetPreset PRESET_UNKNOWN =
    FidgetStandParams_FidgetPreset_PRESET_UNKNOWN;
  static constexpr FidgetPreset PRESET_CUSTOM =
    FidgetStandParams_FidgetPreset_PRESET_CUSTOM;
  static constexpr FidgetPreset PRESET_INTEREST =
    FidgetStandParams_FidgetPreset_PRESET_INTEREST;
  static constexpr FidgetPreset PRESET_PLAYFUL =
    FidgetStandParams_FidgetPreset_PRESET_PLAYFUL;
  static constexpr FidgetPreset PRESET_FEAR =
    FidgetStandParams_FidgetPreset_PRESET_FEAR;
  static constexpr FidgetPreset PRESET_NERVOUS =
    FidgetStandParams_FidgetPreset_PRESET_NERVOUS;
  static constexpr FidgetPreset PRESET_EXHAUSTED =
    FidgetStandParams_FidgetPreset_PRESET_EXHAUSTED;
  static inline bool FidgetPreset_IsValid(int value) {
    return FidgetStandParams_FidgetPreset_IsValid(value);
  }
  static constexpr FidgetPreset FidgetPreset_MIN =
    FidgetStandParams_FidgetPreset_FidgetPreset_MIN;
  static constexpr FidgetPreset FidgetPreset_MAX =
    FidgetStandParams_FidgetPreset_FidgetPreset_MAX;
  static constexpr int FidgetPreset_ARRAYSIZE =
    FidgetStandParams_FidgetPreset_FidgetPreset_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FidgetPreset_descriptor() {
    return FidgetStandParams_FidgetPreset_descriptor();
  }
  template<typename T>
  static inline const std::string& FidgetPreset_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FidgetPreset>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FidgetPreset_Name.");
    return FidgetStandParams_FidgetPreset_Name(enum_t_value);
  }
  static inline bool FidgetPreset_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FidgetPreset* value) {
    return FidgetStandParams_FidgetPreset_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMinGazePitchFieldNumber = 2,
    kMaxGazePitchFieldNumber = 3,
    kGazeMeanPeriodFieldNumber = 4,
    kGazeCenterCfpFieldNumber = 5,
    kShiftMeanPeriodFieldNumber = 6,
    kShiftMaxTransitionTimeFieldNumber = 7,
    kBreathMinZFieldNumber = 8,
    kBreathMaxZFieldNumber = 9,
    kBreathMaxPeriodFieldNumber = 10,
    kLegGestureMeanPeriodFieldNumber = 11,
    kGazeSlewRateFieldNumber = 12,
    kGazePositionGenerationGainFieldNumber = 13,
    kGazeRollGenerationGainFieldNumber = 14,
    kPresetFieldNumber = 1,
  };
  // .google.protobuf.DoubleValue min_gaze_pitch = 2;
  bool has_min_gaze_pitch() const;
  private:
  bool _internal_has_min_gaze_pitch() const;
  public:
  void clear_min_gaze_pitch();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& min_gaze_pitch() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_min_gaze_pitch();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_min_gaze_pitch();
  void set_allocated_min_gaze_pitch(::PROTOBUF_NAMESPACE_ID::DoubleValue* min_gaze_pitch);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_min_gaze_pitch() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_min_gaze_pitch();
  public:
  void unsafe_arena_set_allocated_min_gaze_pitch(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* min_gaze_pitch);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_min_gaze_pitch();

  // .google.protobuf.DoubleValue max_gaze_pitch = 3;
  bool has_max_gaze_pitch() const;
  private:
  bool _internal_has_max_gaze_pitch() const;
  public:
  void clear_max_gaze_pitch();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_gaze_pitch() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_gaze_pitch();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_gaze_pitch();
  void set_allocated_max_gaze_pitch(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_gaze_pitch);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_gaze_pitch() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_gaze_pitch();
  public:
  void unsafe_arena_set_allocated_max_gaze_pitch(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_gaze_pitch);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_gaze_pitch();

  // .google.protobuf.DoubleValue gaze_mean_period = 4;
  bool has_gaze_mean_period() const;
  private:
  bool _internal_has_gaze_mean_period() const;
  public:
  void clear_gaze_mean_period();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& gaze_mean_period() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_gaze_mean_period();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_gaze_mean_period();
  void set_allocated_gaze_mean_period(::PROTOBUF_NAMESPACE_ID::DoubleValue* gaze_mean_period);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_gaze_mean_period() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_gaze_mean_period();
  public:
  void unsafe_arena_set_allocated_gaze_mean_period(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* gaze_mean_period);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_gaze_mean_period();

  // .bosdyn.api.Vec3Value gaze_center_cfp = 5;
  bool has_gaze_center_cfp() const;
  private:
  bool _internal_has_gaze_center_cfp() const;
  public:
  void clear_gaze_center_cfp();
  const ::bosdyn::api::Vec3Value& gaze_center_cfp() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec3Value* release_gaze_center_cfp();
  ::bosdyn::api::Vec3Value* mutable_gaze_center_cfp();
  void set_allocated_gaze_center_cfp(::bosdyn::api::Vec3Value* gaze_center_cfp);
  private:
  const ::bosdyn::api::Vec3Value& _internal_gaze_center_cfp() const;
  ::bosdyn::api::Vec3Value* _internal_mutable_gaze_center_cfp();
  public:
  void unsafe_arena_set_allocated_gaze_center_cfp(
      ::bosdyn::api::Vec3Value* gaze_center_cfp);
  ::bosdyn::api::Vec3Value* unsafe_arena_release_gaze_center_cfp();

  // .google.protobuf.DoubleValue shift_mean_period = 6;
  bool has_shift_mean_period() const;
  private:
  bool _internal_has_shift_mean_period() const;
  public:
  void clear_shift_mean_period();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& shift_mean_period() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_shift_mean_period();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_shift_mean_period();
  void set_allocated_shift_mean_period(::PROTOBUF_NAMESPACE_ID::DoubleValue* shift_mean_period);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_shift_mean_period() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_shift_mean_period();
  public:
  void unsafe_arena_set_allocated_shift_mean_period(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* shift_mean_period);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_shift_mean_period();

  // .google.protobuf.DoubleValue shift_max_transition_time = 7;
  bool has_shift_max_transition_time() const;
  private:
  bool _internal_has_shift_max_transition_time() const;
  public:
  void clear_shift_max_transition_time();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& shift_max_transition_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_shift_max_transition_time();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_shift_max_transition_time();
  void set_allocated_shift_max_transition_time(::PROTOBUF_NAMESPACE_ID::DoubleValue* shift_max_transition_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_shift_max_transition_time() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_shift_max_transition_time();
  public:
  void unsafe_arena_set_allocated_shift_max_transition_time(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* shift_max_transition_time);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_shift_max_transition_time();

  // .google.protobuf.DoubleValue breath_min_z = 8;
  bool has_breath_min_z() const;
  private:
  bool _internal_has_breath_min_z() const;
  public:
  void clear_breath_min_z();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& breath_min_z() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_breath_min_z();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_breath_min_z();
  void set_allocated_breath_min_z(::PROTOBUF_NAMESPACE_ID::DoubleValue* breath_min_z);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_breath_min_z() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_breath_min_z();
  public:
  void unsafe_arena_set_allocated_breath_min_z(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* breath_min_z);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_breath_min_z();

  // .google.protobuf.DoubleValue breath_max_z = 9;
  bool has_breath_max_z() const;
  private:
  bool _internal_has_breath_max_z() const;
  public:
  void clear_breath_max_z();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& breath_max_z() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_breath_max_z();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_breath_max_z();
  void set_allocated_breath_max_z(::PROTOBUF_NAMESPACE_ID::DoubleValue* breath_max_z);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_breath_max_z() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_breath_max_z();
  public:
  void unsafe_arena_set_allocated_breath_max_z(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* breath_max_z);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_breath_max_z();

  // .google.protobuf.DoubleValue breath_max_period = 10;
  bool has_breath_max_period() const;
  private:
  bool _internal_has_breath_max_period() const;
  public:
  void clear_breath_max_period();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& breath_max_period() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_breath_max_period();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_breath_max_period();
  void set_allocated_breath_max_period(::PROTOBUF_NAMESPACE_ID::DoubleValue* breath_max_period);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_breath_max_period() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_breath_max_period();
  public:
  void unsafe_arena_set_allocated_breath_max_period(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* breath_max_period);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_breath_max_period();

  // .google.protobuf.DoubleValue leg_gesture_mean_period = 11;
  bool has_leg_gesture_mean_period() const;
  private:
  bool _internal_has_leg_gesture_mean_period() const;
  public:
  void clear_leg_gesture_mean_period();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& leg_gesture_mean_period() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_leg_gesture_mean_period();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_leg_gesture_mean_period();
  void set_allocated_leg_gesture_mean_period(::PROTOBUF_NAMESPACE_ID::DoubleValue* leg_gesture_mean_period);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_leg_gesture_mean_period() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_leg_gesture_mean_period();
  public:
  void unsafe_arena_set_allocated_leg_gesture_mean_period(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* leg_gesture_mean_period);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_leg_gesture_mean_period();

  // .google.protobuf.DoubleValue gaze_slew_rate = 12;
  bool has_gaze_slew_rate() const;
  private:
  bool _internal_has_gaze_slew_rate() const;
  public:
  void clear_gaze_slew_rate();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& gaze_slew_rate() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_gaze_slew_rate();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_gaze_slew_rate();
  void set_allocated_gaze_slew_rate(::PROTOBUF_NAMESPACE_ID::DoubleValue* gaze_slew_rate);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_gaze_slew_rate() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_gaze_slew_rate();
  public:
  void unsafe_arena_set_allocated_gaze_slew_rate(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* gaze_slew_rate);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_gaze_slew_rate();

  // .bosdyn.api.Vec3Value gaze_position_generation_gain = 13;
  bool has_gaze_position_generation_gain() const;
  private:
  bool _internal_has_gaze_position_generation_gain() const;
  public:
  void clear_gaze_position_generation_gain();
  const ::bosdyn::api::Vec3Value& gaze_position_generation_gain() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec3Value* release_gaze_position_generation_gain();
  ::bosdyn::api::Vec3Value* mutable_gaze_position_generation_gain();
  void set_allocated_gaze_position_generation_gain(::bosdyn::api::Vec3Value* gaze_position_generation_gain);
  private:
  const ::bosdyn::api::Vec3Value& _internal_gaze_position_generation_gain() const;
  ::bosdyn::api::Vec3Value* _internal_mutable_gaze_position_generation_gain();
  public:
  void unsafe_arena_set_allocated_gaze_position_generation_gain(
      ::bosdyn::api::Vec3Value* gaze_position_generation_gain);
  ::bosdyn::api::Vec3Value* unsafe_arena_release_gaze_position_generation_gain();

  // .google.protobuf.DoubleValue gaze_roll_generation_gain = 14;
  bool has_gaze_roll_generation_gain() const;
  private:
  bool _internal_has_gaze_roll_generation_gain() const;
  public:
  void clear_gaze_roll_generation_gain();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& gaze_roll_generation_gain() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_gaze_roll_generation_gain();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_gaze_roll_generation_gain();
  void set_allocated_gaze_roll_generation_gain(::PROTOBUF_NAMESPACE_ID::DoubleValue* gaze_roll_generation_gain);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_gaze_roll_generation_gain() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_gaze_roll_generation_gain();
  public:
  void unsafe_arena_set_allocated_gaze_roll_generation_gain(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* gaze_roll_generation_gain);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_gaze_roll_generation_gain();

  // .bosdyn.api.spot.FidgetStandParams.FidgetPreset preset = 1;
  void clear_preset();
  ::bosdyn::api::spot::FidgetStandParams_FidgetPreset preset() const;
  void set_preset(::bosdyn::api::spot::FidgetStandParams_FidgetPreset value);
  private:
  ::bosdyn::api::spot::FidgetStandParams_FidgetPreset _internal_preset() const;
  void _internal_set_preset(::bosdyn::api::spot::FidgetStandParams_FidgetPreset value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.FidgetStandParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* min_gaze_pitch_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_gaze_pitch_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* gaze_mean_period_;
    ::bosdyn::api::Vec3Value* gaze_center_cfp_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* shift_mean_period_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* shift_max_transition_time_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* breath_min_z_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* breath_max_z_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* breath_max_period_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* leg_gesture_mean_period_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* gaze_slew_rate_;
    ::bosdyn::api::Vec3Value* gaze_position_generation_gain_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* gaze_roll_generation_gain_;
    int preset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class FrameSnapshotParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.FrameSnapshotParams) */ {
 public:
  inline FrameSnapshotParams() : FrameSnapshotParams(nullptr) {}
  ~FrameSnapshotParams() override;
  explicit PROTOBUF_CONSTEXPR FrameSnapshotParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameSnapshotParams(const FrameSnapshotParams& from);
  FrameSnapshotParams(FrameSnapshotParams&& from) noexcept
    : FrameSnapshotParams() {
    *this = ::std::move(from);
  }

  inline FrameSnapshotParams& operator=(const FrameSnapshotParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameSnapshotParams& operator=(FrameSnapshotParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameSnapshotParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameSnapshotParams* internal_default_instance() {
    return reinterpret_cast<const FrameSnapshotParams*>(
               &_FrameSnapshotParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(FrameSnapshotParams& a, FrameSnapshotParams& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameSnapshotParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameSnapshotParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameSnapshotParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameSnapshotParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrameSnapshotParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FrameSnapshotParams& from) {
    FrameSnapshotParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameSnapshotParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.FrameSnapshotParams";
  }
  protected:
  explicit FrameSnapshotParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FrameSnapshotParams_Inclusion Inclusion;
  static constexpr Inclusion INCLUSION_UNKNOWN =
    FrameSnapshotParams_Inclusion_INCLUSION_UNKNOWN;
  static constexpr Inclusion INCLUSION_IF_STANCE =
    FrameSnapshotParams_Inclusion_INCLUSION_IF_STANCE;
  static constexpr Inclusion INCLUSION_INCLUDED =
    FrameSnapshotParams_Inclusion_INCLUSION_INCLUDED;
  static constexpr Inclusion INCLUSION_EXCLUDED =
    FrameSnapshotParams_Inclusion_INCLUSION_EXCLUDED;
  static inline bool Inclusion_IsValid(int value) {
    return FrameSnapshotParams_Inclusion_IsValid(value);
  }
  static constexpr Inclusion Inclusion_MIN =
    FrameSnapshotParams_Inclusion_Inclusion_MIN;
  static constexpr Inclusion Inclusion_MAX =
    FrameSnapshotParams_Inclusion_Inclusion_MAX;
  static constexpr int Inclusion_ARRAYSIZE =
    FrameSnapshotParams_Inclusion_Inclusion_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Inclusion_descriptor() {
    return FrameSnapshotParams_Inclusion_descriptor();
  }
  template<typename T>
  static inline const std::string& Inclusion_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Inclusion>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Inclusion_Name.");
    return FrameSnapshotParams_Inclusion_Name(enum_t_value);
  }
  static inline bool Inclusion_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Inclusion* value) {
    return FrameSnapshotParams_Inclusion_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFrameIdFieldNumber = 1,
    kFiducialNumberFieldNumber = 2,
    kCompensatedFieldNumber = 7,
    kIncludeFrontLeftLegFieldNumber = 3,
    kIncludeFrontRightLegFieldNumber = 4,
    kIncludeHindLeftLegFieldNumber = 5,
    kIncludeHindRightLegFieldNumber = 6,
  };
  // .google.protobuf.Int32Value frame_id = 1;
  bool has_frame_id() const;
  private:
  bool _internal_has_frame_id() const;
  public:
  void clear_frame_id();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& frame_id() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_frame_id();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_frame_id();
  void set_allocated_frame_id(::PROTOBUF_NAMESPACE_ID::Int32Value* frame_id);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_frame_id() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_frame_id();
  public:
  void unsafe_arena_set_allocated_frame_id(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* frame_id);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_frame_id();

  // .google.protobuf.Int32Value fiducial_number = 2;
  bool has_fiducial_number() const;
  private:
  bool _internal_has_fiducial_number() const;
  public:
  void clear_fiducial_number();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& fiducial_number() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_fiducial_number();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_fiducial_number();
  void set_allocated_fiducial_number(::PROTOBUF_NAMESPACE_ID::Int32Value* fiducial_number);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_fiducial_number() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_fiducial_number();
  public:
  void unsafe_arena_set_allocated_fiducial_number(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* fiducial_number);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_fiducial_number();

  // .google.protobuf.BoolValue compensated = 7;
  bool has_compensated() const;
  private:
  bool _internal_has_compensated() const;
  public:
  void clear_compensated();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& compensated() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_compensated();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_compensated();
  void set_allocated_compensated(::PROTOBUF_NAMESPACE_ID::BoolValue* compensated);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_compensated() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_compensated();
  public:
  void unsafe_arena_set_allocated_compensated(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* compensated);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_compensated();

  // .bosdyn.api.spot.FrameSnapshotParams.Inclusion include_front_left_leg = 3;
  void clear_include_front_left_leg();
  ::bosdyn::api::spot::FrameSnapshotParams_Inclusion include_front_left_leg() const;
  void set_include_front_left_leg(::bosdyn::api::spot::FrameSnapshotParams_Inclusion value);
  private:
  ::bosdyn::api::spot::FrameSnapshotParams_Inclusion _internal_include_front_left_leg() const;
  void _internal_set_include_front_left_leg(::bosdyn::api::spot::FrameSnapshotParams_Inclusion value);
  public:

  // .bosdyn.api.spot.FrameSnapshotParams.Inclusion include_front_right_leg = 4;
  void clear_include_front_right_leg();
  ::bosdyn::api::spot::FrameSnapshotParams_Inclusion include_front_right_leg() const;
  void set_include_front_right_leg(::bosdyn::api::spot::FrameSnapshotParams_Inclusion value);
  private:
  ::bosdyn::api::spot::FrameSnapshotParams_Inclusion _internal_include_front_right_leg() const;
  void _internal_set_include_front_right_leg(::bosdyn::api::spot::FrameSnapshotParams_Inclusion value);
  public:

  // .bosdyn.api.spot.FrameSnapshotParams.Inclusion include_hind_left_leg = 5;
  void clear_include_hind_left_leg();
  ::bosdyn::api::spot::FrameSnapshotParams_Inclusion include_hind_left_leg() const;
  void set_include_hind_left_leg(::bosdyn::api::spot::FrameSnapshotParams_Inclusion value);
  private:
  ::bosdyn::api::spot::FrameSnapshotParams_Inclusion _internal_include_hind_left_leg() const;
  void _internal_set_include_hind_left_leg(::bosdyn::api::spot::FrameSnapshotParams_Inclusion value);
  public:

  // .bosdyn.api.spot.FrameSnapshotParams.Inclusion include_hind_right_leg = 6;
  void clear_include_hind_right_leg();
  ::bosdyn::api::spot::FrameSnapshotParams_Inclusion include_hind_right_leg() const;
  void set_include_hind_right_leg(::bosdyn::api::spot::FrameSnapshotParams_Inclusion value);
  private:
  ::bosdyn::api::spot::FrameSnapshotParams_Inclusion _internal_include_hind_right_leg() const;
  void _internal_set_include_hind_right_leg(::bosdyn::api::spot::FrameSnapshotParams_Inclusion value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.FrameSnapshotParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Int32Value* frame_id_;
    ::PROTOBUF_NAMESPACE_ID::Int32Value* fiducial_number_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* compensated_;
    int include_front_left_leg_;
    int include_front_right_leg_;
    int include_hind_left_leg_;
    int include_hind_right_leg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class SetColorParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.SetColorParams) */ {
 public:
  inline SetColorParams() : SetColorParams(nullptr) {}
  ~SetColorParams() override;
  explicit PROTOBUF_CONSTEXPR SetColorParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetColorParams(const SetColorParams& from);
  SetColorParams(SetColorParams&& from) noexcept
    : SetColorParams() {
    *this = ::std::move(from);
  }

  inline SetColorParams& operator=(const SetColorParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetColorParams& operator=(SetColorParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetColorParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetColorParams* internal_default_instance() {
    return reinterpret_cast<const SetColorParams*>(
               &_SetColorParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(SetColorParams& a, SetColorParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetColorParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetColorParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetColorParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetColorParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetColorParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetColorParams& from) {
    SetColorParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetColorParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.SetColorParams";
  }
  protected:
  explicit SetColorParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftColorFieldNumber = 1,
    kRightSameAsLeftFieldNumber = 2,
    kRightColorFieldNumber = 3,
    kFadeInSlicesFieldNumber = 4,
    kFadeOutSlicesFieldNumber = 5,
  };
  // .bosdyn.api.spot.Color left_color = 1;
  bool has_left_color() const;
  private:
  bool _internal_has_left_color() const;
  public:
  void clear_left_color();
  const ::bosdyn::api::spot::Color& left_color() const;
  PROTOBUF_NODISCARD ::bosdyn::api::spot::Color* release_left_color();
  ::bosdyn::api::spot::Color* mutable_left_color();
  void set_allocated_left_color(::bosdyn::api::spot::Color* left_color);
  private:
  const ::bosdyn::api::spot::Color& _internal_left_color() const;
  ::bosdyn::api::spot::Color* _internal_mutable_left_color();
  public:
  void unsafe_arena_set_allocated_left_color(
      ::bosdyn::api::spot::Color* left_color);
  ::bosdyn::api::spot::Color* unsafe_arena_release_left_color();

  // .google.protobuf.BoolValue right_same_as_left = 2;
  bool has_right_same_as_left() const;
  private:
  bool _internal_has_right_same_as_left() const;
  public:
  void clear_right_same_as_left();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& right_same_as_left() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_right_same_as_left();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_right_same_as_left();
  void set_allocated_right_same_as_left(::PROTOBUF_NAMESPACE_ID::BoolValue* right_same_as_left);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_right_same_as_left() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_right_same_as_left();
  public:
  void unsafe_arena_set_allocated_right_same_as_left(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* right_same_as_left);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_right_same_as_left();

  // .bosdyn.api.spot.Color right_color = 3;
  bool has_right_color() const;
  private:
  bool _internal_has_right_color() const;
  public:
  void clear_right_color();
  const ::bosdyn::api::spot::Color& right_color() const;
  PROTOBUF_NODISCARD ::bosdyn::api::spot::Color* release_right_color();
  ::bosdyn::api::spot::Color* mutable_right_color();
  void set_allocated_right_color(::bosdyn::api::spot::Color* right_color);
  private:
  const ::bosdyn::api::spot::Color& _internal_right_color() const;
  ::bosdyn::api::spot::Color* _internal_mutable_right_color();
  public:
  void unsafe_arena_set_allocated_right_color(
      ::bosdyn::api::spot::Color* right_color);
  ::bosdyn::api::spot::Color* unsafe_arena_release_right_color();

  // .google.protobuf.DoubleValue fade_in_slices = 4;
  bool has_fade_in_slices() const;
  private:
  bool _internal_has_fade_in_slices() const;
  public:
  void clear_fade_in_slices();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& fade_in_slices() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_fade_in_slices();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_fade_in_slices();
  void set_allocated_fade_in_slices(::PROTOBUF_NAMESPACE_ID::DoubleValue* fade_in_slices);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_fade_in_slices() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_fade_in_slices();
  public:
  void unsafe_arena_set_allocated_fade_in_slices(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* fade_in_slices);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_fade_in_slices();

  // .google.protobuf.DoubleValue fade_out_slices = 5;
  bool has_fade_out_slices() const;
  private:
  bool _internal_has_fade_out_slices() const;
  public:
  void clear_fade_out_slices();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& fade_out_slices() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_fade_out_slices();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_fade_out_slices();
  void set_allocated_fade_out_slices(::PROTOBUF_NAMESPACE_ID::DoubleValue* fade_out_slices);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_fade_out_slices() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_fade_out_slices();
  public:
  void unsafe_arena_set_allocated_fade_out_slices(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* fade_out_slices);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_fade_out_slices();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.SetColorParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::spot::Color* left_color_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* right_same_as_left_;
    ::bosdyn::api::spot::Color* right_color_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* fade_in_slices_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* fade_out_slices_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class FadeColorParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.FadeColorParams) */ {
 public:
  inline FadeColorParams() : FadeColorParams(nullptr) {}
  ~FadeColorParams() override;
  explicit PROTOBUF_CONSTEXPR FadeColorParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FadeColorParams(const FadeColorParams& from);
  FadeColorParams(FadeColorParams&& from) noexcept
    : FadeColorParams() {
    *this = ::std::move(from);
  }

  inline FadeColorParams& operator=(const FadeColorParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline FadeColorParams& operator=(FadeColorParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FadeColorParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const FadeColorParams* internal_default_instance() {
    return reinterpret_cast<const FadeColorParams*>(
               &_FadeColorParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(FadeColorParams& a, FadeColorParams& b) {
    a.Swap(&b);
  }
  inline void Swap(FadeColorParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FadeColorParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FadeColorParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FadeColorParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FadeColorParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FadeColorParams& from) {
    FadeColorParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FadeColorParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.FadeColorParams";
  }
  protected:
  explicit FadeColorParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopColorFieldNumber = 1,
    kBottomColorFieldNumber = 2,
    kFadeInSlicesFieldNumber = 3,
    kFadeOutSlicesFieldNumber = 4,
  };
  // .bosdyn.api.spot.Color top_color = 1;
  bool has_top_color() const;
  private:
  bool _internal_has_top_color() const;
  public:
  void clear_top_color();
  const ::bosdyn::api::spot::Color& top_color() const;
  PROTOBUF_NODISCARD ::bosdyn::api::spot::Color* release_top_color();
  ::bosdyn::api::spot::Color* mutable_top_color();
  void set_allocated_top_color(::bosdyn::api::spot::Color* top_color);
  private:
  const ::bosdyn::api::spot::Color& _internal_top_color() const;
  ::bosdyn::api::spot::Color* _internal_mutable_top_color();
  public:
  void unsafe_arena_set_allocated_top_color(
      ::bosdyn::api::spot::Color* top_color);
  ::bosdyn::api::spot::Color* unsafe_arena_release_top_color();

  // .bosdyn.api.spot.Color bottom_color = 2;
  bool has_bottom_color() const;
  private:
  bool _internal_has_bottom_color() const;
  public:
  void clear_bottom_color();
  const ::bosdyn::api::spot::Color& bottom_color() const;
  PROTOBUF_NODISCARD ::bosdyn::api::spot::Color* release_bottom_color();
  ::bosdyn::api::spot::Color* mutable_bottom_color();
  void set_allocated_bottom_color(::bosdyn::api::spot::Color* bottom_color);
  private:
  const ::bosdyn::api::spot::Color& _internal_bottom_color() const;
  ::bosdyn::api::spot::Color* _internal_mutable_bottom_color();
  public:
  void unsafe_arena_set_allocated_bottom_color(
      ::bosdyn::api::spot::Color* bottom_color);
  ::bosdyn::api::spot::Color* unsafe_arena_release_bottom_color();

  // .google.protobuf.DoubleValue fade_in_slices = 3;
  bool has_fade_in_slices() const;
  private:
  bool _internal_has_fade_in_slices() const;
  public:
  void clear_fade_in_slices();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& fade_in_slices() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_fade_in_slices();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_fade_in_slices();
  void set_allocated_fade_in_slices(::PROTOBUF_NAMESPACE_ID::DoubleValue* fade_in_slices);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_fade_in_slices() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_fade_in_slices();
  public:
  void unsafe_arena_set_allocated_fade_in_slices(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* fade_in_slices);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_fade_in_slices();

  // .google.protobuf.DoubleValue fade_out_slices = 4;
  bool has_fade_out_slices() const;
  private:
  bool _internal_has_fade_out_slices() const;
  public:
  void clear_fade_out_slices();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& fade_out_slices() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_fade_out_slices();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_fade_out_slices();
  void set_allocated_fade_out_slices(::PROTOBUF_NAMESPACE_ID::DoubleValue* fade_out_slices);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_fade_out_slices() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_fade_out_slices();
  public:
  void unsafe_arena_set_allocated_fade_out_slices(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* fade_out_slices);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_fade_out_slices();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.FadeColorParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::spot::Color* top_color_;
    ::bosdyn::api::spot::Color* bottom_color_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* fade_in_slices_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* fade_out_slices_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class IndependentColorParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.IndependentColorParams) */ {
 public:
  inline IndependentColorParams() : IndependentColorParams(nullptr) {}
  ~IndependentColorParams() override;
  explicit PROTOBUF_CONSTEXPR IndependentColorParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndependentColorParams(const IndependentColorParams& from);
  IndependentColorParams(IndependentColorParams&& from) noexcept
    : IndependentColorParams() {
    *this = ::std::move(from);
  }

  inline IndependentColorParams& operator=(const IndependentColorParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndependentColorParams& operator=(IndependentColorParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndependentColorParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndependentColorParams* internal_default_instance() {
    return reinterpret_cast<const IndependentColorParams*>(
               &_IndependentColorParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(IndependentColorParams& a, IndependentColorParams& b) {
    a.Swap(&b);
  }
  inline void Swap(IndependentColorParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndependentColorParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndependentColorParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndependentColorParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IndependentColorParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IndependentColorParams& from) {
    IndependentColorParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndependentColorParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.IndependentColorParams";
  }
  protected:
  explicit IndependentColorParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopLeftFieldNumber = 1,
    kUpperMidLeftFieldNumber = 2,
    kLowerMidLeftFieldNumber = 3,
    kBottomLeftFieldNumber = 4,
    kTopRightFieldNumber = 5,
    kUpperMidRightFieldNumber = 6,
    kLowerMidRightFieldNumber = 7,
    kBottomRightFieldNumber = 8,
    kFadeInSlicesFieldNumber = 9,
    kFadeOutSlicesFieldNumber = 10,
  };
  // .bosdyn.api.spot.Color top_left = 1;
  bool has_top_left() const;
  private:
  bool _internal_has_top_left() const;
  public:
  void clear_top_left();
  const ::bosdyn::api::spot::Color& top_left() const;
  PROTOBUF_NODISCARD ::bosdyn::api::spot::Color* release_top_left();
  ::bosdyn::api::spot::Color* mutable_top_left();
  void set_allocated_top_left(::bosdyn::api::spot::Color* top_left);
  private:
  const ::bosdyn::api::spot::Color& _internal_top_left() const;
  ::bosdyn::api::spot::Color* _internal_mutable_top_left();
  public:
  void unsafe_arena_set_allocated_top_left(
      ::bosdyn::api::spot::Color* top_left);
  ::bosdyn::api::spot::Color* unsafe_arena_release_top_left();

  // .bosdyn.api.spot.Color upper_mid_left = 2;
  bool has_upper_mid_left() const;
  private:
  bool _internal_has_upper_mid_left() const;
  public:
  void clear_upper_mid_left();
  const ::bosdyn::api::spot::Color& upper_mid_left() const;
  PROTOBUF_NODISCARD ::bosdyn::api::spot::Color* release_upper_mid_left();
  ::bosdyn::api::spot::Color* mutable_upper_mid_left();
  void set_allocated_upper_mid_left(::bosdyn::api::spot::Color* upper_mid_left);
  private:
  const ::bosdyn::api::spot::Color& _internal_upper_mid_left() const;
  ::bosdyn::api::spot::Color* _internal_mutable_upper_mid_left();
  public:
  void unsafe_arena_set_allocated_upper_mid_left(
      ::bosdyn::api::spot::Color* upper_mid_left);
  ::bosdyn::api::spot::Color* unsafe_arena_release_upper_mid_left();

  // .bosdyn.api.spot.Color lower_mid_left = 3;
  bool has_lower_mid_left() const;
  private:
  bool _internal_has_lower_mid_left() const;
  public:
  void clear_lower_mid_left();
  const ::bosdyn::api::spot::Color& lower_mid_left() const;
  PROTOBUF_NODISCARD ::bosdyn::api::spot::Color* release_lower_mid_left();
  ::bosdyn::api::spot::Color* mutable_lower_mid_left();
  void set_allocated_lower_mid_left(::bosdyn::api::spot::Color* lower_mid_left);
  private:
  const ::bosdyn::api::spot::Color& _internal_lower_mid_left() const;
  ::bosdyn::api::spot::Color* _internal_mutable_lower_mid_left();
  public:
  void unsafe_arena_set_allocated_lower_mid_left(
      ::bosdyn::api::spot::Color* lower_mid_left);
  ::bosdyn::api::spot::Color* unsafe_arena_release_lower_mid_left();

  // .bosdyn.api.spot.Color bottom_left = 4;
  bool has_bottom_left() const;
  private:
  bool _internal_has_bottom_left() const;
  public:
  void clear_bottom_left();
  const ::bosdyn::api::spot::Color& bottom_left() const;
  PROTOBUF_NODISCARD ::bosdyn::api::spot::Color* release_bottom_left();
  ::bosdyn::api::spot::Color* mutable_bottom_left();
  void set_allocated_bottom_left(::bosdyn::api::spot::Color* bottom_left);
  private:
  const ::bosdyn::api::spot::Color& _internal_bottom_left() const;
  ::bosdyn::api::spot::Color* _internal_mutable_bottom_left();
  public:
  void unsafe_arena_set_allocated_bottom_left(
      ::bosdyn::api::spot::Color* bottom_left);
  ::bosdyn::api::spot::Color* unsafe_arena_release_bottom_left();

  // .bosdyn.api.spot.Color top_right = 5;
  bool has_top_right() const;
  private:
  bool _internal_has_top_right() const;
  public:
  void clear_top_right();
  const ::bosdyn::api::spot::Color& top_right() const;
  PROTOBUF_NODISCARD ::bosdyn::api::spot::Color* release_top_right();
  ::bosdyn::api::spot::Color* mutable_top_right();
  void set_allocated_top_right(::bosdyn::api::spot::Color* top_right);
  private:
  const ::bosdyn::api::spot::Color& _internal_top_right() const;
  ::bosdyn::api::spot::Color* _internal_mutable_top_right();
  public:
  void unsafe_arena_set_allocated_top_right(
      ::bosdyn::api::spot::Color* top_right);
  ::bosdyn::api::spot::Color* unsafe_arena_release_top_right();

  // .bosdyn.api.spot.Color upper_mid_right = 6;
  bool has_upper_mid_right() const;
  private:
  bool _internal_has_upper_mid_right() const;
  public:
  void clear_upper_mid_right();
  const ::bosdyn::api::spot::Color& upper_mid_right() const;
  PROTOBUF_NODISCARD ::bosdyn::api::spot::Color* release_upper_mid_right();
  ::bosdyn::api::spot::Color* mutable_upper_mid_right();
  void set_allocated_upper_mid_right(::bosdyn::api::spot::Color* upper_mid_right);
  private:
  const ::bosdyn::api::spot::Color& _internal_upper_mid_right() const;
  ::bosdyn::api::spot::Color* _internal_mutable_upper_mid_right();
  public:
  void unsafe_arena_set_allocated_upper_mid_right(
      ::bosdyn::api::spot::Color* upper_mid_right);
  ::bosdyn::api::spot::Color* unsafe_arena_release_upper_mid_right();

  // .bosdyn.api.spot.Color lower_mid_right = 7;
  bool has_lower_mid_right() const;
  private:
  bool _internal_has_lower_mid_right() const;
  public:
  void clear_lower_mid_right();
  const ::bosdyn::api::spot::Color& lower_mid_right() const;
  PROTOBUF_NODISCARD ::bosdyn::api::spot::Color* release_lower_mid_right();
  ::bosdyn::api::spot::Color* mutable_lower_mid_right();
  void set_allocated_lower_mid_right(::bosdyn::api::spot::Color* lower_mid_right);
  private:
  const ::bosdyn::api::spot::Color& _internal_lower_mid_right() const;
  ::bosdyn::api::spot::Color* _internal_mutable_lower_mid_right();
  public:
  void unsafe_arena_set_allocated_lower_mid_right(
      ::bosdyn::api::spot::Color* lower_mid_right);
  ::bosdyn::api::spot::Color* unsafe_arena_release_lower_mid_right();

  // .bosdyn.api.spot.Color bottom_right = 8;
  bool has_bottom_right() const;
  private:
  bool _internal_has_bottom_right() const;
  public:
  void clear_bottom_right();
  const ::bosdyn::api::spot::Color& bottom_right() const;
  PROTOBUF_NODISCARD ::bosdyn::api::spot::Color* release_bottom_right();
  ::bosdyn::api::spot::Color* mutable_bottom_right();
  void set_allocated_bottom_right(::bosdyn::api::spot::Color* bottom_right);
  private:
  const ::bosdyn::api::spot::Color& _internal_bottom_right() const;
  ::bosdyn::api::spot::Color* _internal_mutable_bottom_right();
  public:
  void unsafe_arena_set_allocated_bottom_right(
      ::bosdyn::api::spot::Color* bottom_right);
  ::bosdyn::api::spot::Color* unsafe_arena_release_bottom_right();

  // .google.protobuf.DoubleValue fade_in_slices = 9;
  bool has_fade_in_slices() const;
  private:
  bool _internal_has_fade_in_slices() const;
  public:
  void clear_fade_in_slices();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& fade_in_slices() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_fade_in_slices();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_fade_in_slices();
  void set_allocated_fade_in_slices(::PROTOBUF_NAMESPACE_ID::DoubleValue* fade_in_slices);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_fade_in_slices() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_fade_in_slices();
  public:
  void unsafe_arena_set_allocated_fade_in_slices(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* fade_in_slices);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_fade_in_slices();

  // .google.protobuf.DoubleValue fade_out_slices = 10;
  bool has_fade_out_slices() const;
  private:
  bool _internal_has_fade_out_slices() const;
  public:
  void clear_fade_out_slices();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& fade_out_slices() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_fade_out_slices();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_fade_out_slices();
  void set_allocated_fade_out_slices(::PROTOBUF_NAMESPACE_ID::DoubleValue* fade_out_slices);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_fade_out_slices() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_fade_out_slices();
  public:
  void unsafe_arena_set_allocated_fade_out_slices(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* fade_out_slices);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_fade_out_slices();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.IndependentColorParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::spot::Color* top_left_;
    ::bosdyn::api::spot::Color* upper_mid_left_;
    ::bosdyn::api::spot::Color* lower_mid_left_;
    ::bosdyn::api::spot::Color* bottom_left_;
    ::bosdyn::api::spot::Color* top_right_;
    ::bosdyn::api::spot::Color* upper_mid_right_;
    ::bosdyn::api::spot::Color* lower_mid_right_;
    ::bosdyn::api::spot::Color* bottom_right_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* fade_in_slices_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* fade_out_slices_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class Color final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.Color) */ {
 public:
  inline Color() : Color(nullptr) {}
  ~Color() override;
  explicit PROTOBUF_CONSTEXPR Color(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Color(const Color& from);
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color& operator=(Color&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Color& default_instance() {
    return *internal_default_instance();
  }
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }
  inline void Swap(Color* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Color* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Color& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Color& from) {
    Color::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.Color";
  }
  protected:
  explicit Color(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedFieldNumber = 1,
    kGreenFieldNumber = 2,
    kBlueFieldNumber = 3,
  };
  // .google.protobuf.DoubleValue red = 1;
  bool has_red() const;
  private:
  bool _internal_has_red() const;
  public:
  void clear_red();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& red() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_red();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_red();
  void set_allocated_red(::PROTOBUF_NAMESPACE_ID::DoubleValue* red);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_red() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_red();
  public:
  void unsafe_arena_set_allocated_red(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* red);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_red();

  // .google.protobuf.DoubleValue green = 2;
  bool has_green() const;
  private:
  bool _internal_has_green() const;
  public:
  void clear_green();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& green() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_green();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_green();
  void set_allocated_green(::PROTOBUF_NAMESPACE_ID::DoubleValue* green);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_green() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_green();
  public:
  void unsafe_arena_set_allocated_green(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* green);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_green();

  // .google.protobuf.DoubleValue blue = 3;
  bool has_blue() const;
  private:
  bool _internal_has_blue() const;
  public:
  void clear_blue();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& blue() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_blue();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_blue();
  void set_allocated_blue(::PROTOBUF_NAMESPACE_ID::DoubleValue* blue);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_blue() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_blue();
  public:
  void unsafe_arena_set_allocated_blue(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* blue);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_blue();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.Color)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* red_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* green_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* blue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class RippleColorParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.RippleColorParams) */ {
 public:
  inline RippleColorParams() : RippleColorParams(nullptr) {}
  ~RippleColorParams() override;
  explicit PROTOBUF_CONSTEXPR RippleColorParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RippleColorParams(const RippleColorParams& from);
  RippleColorParams(RippleColorParams&& from) noexcept
    : RippleColorParams() {
    *this = ::std::move(from);
  }

  inline RippleColorParams& operator=(const RippleColorParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RippleColorParams& operator=(RippleColorParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RippleColorParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const RippleColorParams* internal_default_instance() {
    return reinterpret_cast<const RippleColorParams*>(
               &_RippleColorParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(RippleColorParams& a, RippleColorParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RippleColorParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RippleColorParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RippleColorParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RippleColorParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RippleColorParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RippleColorParams& from) {
    RippleColorParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RippleColorParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.RippleColorParams";
  }
  protected:
  explicit RippleColorParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RippleColorParams_Pattern Pattern;
  static constexpr Pattern PATTERN_UNKNOWN =
    RippleColorParams_Pattern_PATTERN_UNKNOWN;
  static constexpr Pattern PATTERN_FLASHING =
    RippleColorParams_Pattern_PATTERN_FLASHING;
  static constexpr Pattern PATTERN_SNAKE =
    RippleColorParams_Pattern_PATTERN_SNAKE;
  static constexpr Pattern PATTERN_ALTERNATE_COLORS =
    RippleColorParams_Pattern_PATTERN_ALTERNATE_COLORS;
  static constexpr Pattern PATTERN_FINE_GRAINED_ALTERNATE_COLORS =
    RippleColorParams_Pattern_PATTERN_FINE_GRAINED_ALTERNATE_COLORS;
  static inline bool Pattern_IsValid(int value) {
    return RippleColorParams_Pattern_IsValid(value);
  }
  static constexpr Pattern Pattern_MIN =
    RippleColorParams_Pattern_Pattern_MIN;
  static constexpr Pattern Pattern_MAX =
    RippleColorParams_Pattern_Pattern_MAX;
  static constexpr int Pattern_ARRAYSIZE =
    RippleColorParams_Pattern_Pattern_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Pattern_descriptor() {
    return RippleColorParams_Pattern_descriptor();
  }
  template<typename T>
  static inline const std::string& Pattern_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Pattern>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Pattern_Name.");
    return RippleColorParams_Pattern_Name(enum_t_value);
  }
  static inline bool Pattern_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Pattern* value) {
    return RippleColorParams_Pattern_Parse(name, value);
  }

  typedef RippleColorParams_LightSide LightSide;
  static constexpr LightSide LIGHT_SIDE_UNKNOWN =
    RippleColorParams_LightSide_LIGHT_SIDE_UNKNOWN;
  static constexpr LightSide LIGHT_SIDE_LEFT =
    RippleColorParams_LightSide_LIGHT_SIDE_LEFT;
  static constexpr LightSide LIGHT_SIDE_RIGHT =
    RippleColorParams_LightSide_LIGHT_SIDE_RIGHT;
  static constexpr LightSide LIGHT_SIDE_BOTH_IN_SEQUENCE =
    RippleColorParams_LightSide_LIGHT_SIDE_BOTH_IN_SEQUENCE;
  static constexpr LightSide LIGHT_SIDE_BOTH_MATCHING =
    RippleColorParams_LightSide_LIGHT_SIDE_BOTH_MATCHING;
  static inline bool LightSide_IsValid(int value) {
    return RippleColorParams_LightSide_IsValid(value);
  }
  static constexpr LightSide LightSide_MIN =
    RippleColorParams_LightSide_LightSide_MIN;
  static constexpr LightSide LightSide_MAX =
    RippleColorParams_LightSide_LightSide_MAX;
  static constexpr int LightSide_ARRAYSIZE =
    RippleColorParams_LightSide_LightSide_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LightSide_descriptor() {
    return RippleColorParams_LightSide_descriptor();
  }
  template<typename T>
  static inline const std::string& LightSide_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LightSide>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LightSide_Name.");
    return RippleColorParams_LightSide_Name(enum_t_value);
  }
  static inline bool LightSide_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LightSide* value) {
    return RippleColorParams_LightSide_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMainFieldNumber = 1,
    kSecondaryFieldNumber = 2,
    kIncrementSlicesFieldNumber = 5,
    kPatternFieldNumber = 3,
    kLightSideFieldNumber = 4,
  };
  // .bosdyn.api.spot.Color main = 1;
  bool has_main() const;
  private:
  bool _internal_has_main() const;
  public:
  void clear_main();
  const ::bosdyn::api::spot::Color& main() const;
  PROTOBUF_NODISCARD ::bosdyn::api::spot::Color* release_main();
  ::bosdyn::api::spot::Color* mutable_main();
  void set_allocated_main(::bosdyn::api::spot::Color* main);
  private:
  const ::bosdyn::api::spot::Color& _internal_main() const;
  ::bosdyn::api::spot::Color* _internal_mutable_main();
  public:
  void unsafe_arena_set_allocated_main(
      ::bosdyn::api::spot::Color* main);
  ::bosdyn::api::spot::Color* unsafe_arena_release_main();

  // .bosdyn.api.spot.Color secondary = 2;
  bool has_secondary() const;
  private:
  bool _internal_has_secondary() const;
  public:
  void clear_secondary();
  const ::bosdyn::api::spot::Color& secondary() const;
  PROTOBUF_NODISCARD ::bosdyn::api::spot::Color* release_secondary();
  ::bosdyn::api::spot::Color* mutable_secondary();
  void set_allocated_secondary(::bosdyn::api::spot::Color* secondary);
  private:
  const ::bosdyn::api::spot::Color& _internal_secondary() const;
  ::bosdyn::api::spot::Color* _internal_mutable_secondary();
  public:
  void unsafe_arena_set_allocated_secondary(
      ::bosdyn::api::spot::Color* secondary);
  ::bosdyn::api::spot::Color* unsafe_arena_release_secondary();

  // .google.protobuf.DoubleValue increment_slices = 5;
  bool has_increment_slices() const;
  private:
  bool _internal_has_increment_slices() const;
  public:
  void clear_increment_slices();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& increment_slices() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_increment_slices();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_increment_slices();
  void set_allocated_increment_slices(::PROTOBUF_NAMESPACE_ID::DoubleValue* increment_slices);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_increment_slices() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_increment_slices();
  public:
  void unsafe_arena_set_allocated_increment_slices(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* increment_slices);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_increment_slices();

  // .bosdyn.api.spot.RippleColorParams.Pattern pattern = 3;
  void clear_pattern();
  ::bosdyn::api::spot::RippleColorParams_Pattern pattern() const;
  void set_pattern(::bosdyn::api::spot::RippleColorParams_Pattern value);
  private:
  ::bosdyn::api::spot::RippleColorParams_Pattern _internal_pattern() const;
  void _internal_set_pattern(::bosdyn::api::spot::RippleColorParams_Pattern value);
  public:

  // .bosdyn.api.spot.RippleColorParams.LightSide light_side = 4;
  void clear_light_side();
  ::bosdyn::api::spot::RippleColorParams_LightSide light_side() const;
  void set_light_side(::bosdyn::api::spot::RippleColorParams_LightSide value);
  private:
  ::bosdyn::api::spot::RippleColorParams_LightSide _internal_light_side() const;
  void _internal_set_light_side(::bosdyn::api::spot::RippleColorParams_LightSide value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.RippleColorParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bosdyn::api::spot::Color* main_;
    ::bosdyn::api::spot::Color* secondary_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* increment_slices_;
    int pattern_;
    int light_side_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// -------------------------------------------------------------------

class AnimateParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot.AnimateParams) */ {
 public:
  inline AnimateParams() : AnimateParams(nullptr) {}
  ~AnimateParams() override;
  explicit PROTOBUF_CONSTEXPR AnimateParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnimateParams(const AnimateParams& from);
  AnimateParams(AnimateParams&& from) noexcept
    : AnimateParams() {
    *this = ::std::move(from);
  }

  inline AnimateParams& operator=(const AnimateParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnimateParams& operator=(AnimateParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnimateParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnimateParams* internal_default_instance() {
    return reinterpret_cast<const AnimateParams*>(
               &_AnimateParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(AnimateParams& a, AnimateParams& b) {
    a.Swap(&b);
  }
  inline void Swap(AnimateParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnimateParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnimateParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnimateParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnimateParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AnimateParams& from) {
    AnimateParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnimateParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot.AnimateParams";
  }
  protected:
  explicit AnimateParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnimationNameFieldNumber = 1,
    kBodyEntrySlicesFieldNumber = 2,
    kBodyExitSlicesFieldNumber = 3,
    kTranslationMultiplierFieldNumber = 4,
    kRotationMultiplierFieldNumber = 5,
    kArmEntrySlicesFieldNumber = 6,
    kShoulder0OffsetFieldNumber = 7,
    kShoulder1OffsetFieldNumber = 8,
    kElbow0OffsetFieldNumber = 9,
    kElbow1OffsetFieldNumber = 10,
    kWrist0OffsetFieldNumber = 11,
    kWrist1OffsetFieldNumber = 12,
    kGripperOffsetFieldNumber = 13,
    kSpeedFieldNumber = 14,
    kOffsetSlicesFieldNumber = 15,
    kGripperMultiplierFieldNumber = 16,
    kGripperStrengthFractionFieldNumber = 17,
    kArmDanceFrameIdFieldNumber = 18,
    kBodyTrackingStiffnessFieldNumber = 19,
  };
  // string animation_name = 1;
  void clear_animation_name();
  const std::string& animation_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_animation_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_animation_name();
  PROTOBUF_NODISCARD std::string* release_animation_name();
  void set_allocated_animation_name(std::string* animation_name);
  private:
  const std::string& _internal_animation_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_animation_name(const std::string& value);
  std::string* _internal_mutable_animation_name();
  public:

  // .google.protobuf.DoubleValue body_entry_slices = 2;
  bool has_body_entry_slices() const;
  private:
  bool _internal_has_body_entry_slices() const;
  public:
  void clear_body_entry_slices();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& body_entry_slices() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_body_entry_slices();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_body_entry_slices();
  void set_allocated_body_entry_slices(::PROTOBUF_NAMESPACE_ID::DoubleValue* body_entry_slices);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_body_entry_slices() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_body_entry_slices();
  public:
  void unsafe_arena_set_allocated_body_entry_slices(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* body_entry_slices);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_body_entry_slices();

  // .google.protobuf.DoubleValue body_exit_slices = 3;
  bool has_body_exit_slices() const;
  private:
  bool _internal_has_body_exit_slices() const;
  public:
  void clear_body_exit_slices();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& body_exit_slices() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_body_exit_slices();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_body_exit_slices();
  void set_allocated_body_exit_slices(::PROTOBUF_NAMESPACE_ID::DoubleValue* body_exit_slices);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_body_exit_slices() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_body_exit_slices();
  public:
  void unsafe_arena_set_allocated_body_exit_slices(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* body_exit_slices);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_body_exit_slices();

  // .bosdyn.api.Vec3Value translation_multiplier = 4;
  bool has_translation_multiplier() const;
  private:
  bool _internal_has_translation_multiplier() const;
  public:
  void clear_translation_multiplier();
  const ::bosdyn::api::Vec3Value& translation_multiplier() const;
  PROTOBUF_NODISCARD ::bosdyn::api::Vec3Value* release_translation_multiplier();
  ::bosdyn::api::Vec3Value* mutable_translation_multiplier();
  void set_allocated_translation_multiplier(::bosdyn::api::Vec3Value* translation_multiplier);
  private:
  const ::bosdyn::api::Vec3Value& _internal_translation_multiplier() const;
  ::bosdyn::api::Vec3Value* _internal_mutable_translation_multiplier();
  public:
  void unsafe_arena_set_allocated_translation_multiplier(
      ::bosdyn::api::Vec3Value* translation_multiplier);
  ::bosdyn::api::Vec3Value* unsafe_arena_release_translation_multiplier();

  // .bosdyn.api.spot.EulerZYXValue rotation_multiplier = 5;
  bool has_rotation_multiplier() const;
  private:
  bool _internal_has_rotation_multiplier() const;
  public:
  void clear_rotation_multiplier();
  const ::bosdyn::api::spot::EulerZYXValue& rotation_multiplier() const;
  PROTOBUF_NODISCARD ::bosdyn::api::spot::EulerZYXValue* release_rotation_multiplier();
  ::bosdyn::api::spot::EulerZYXValue* mutable_rotation_multiplier();
  void set_allocated_rotation_multiplier(::bosdyn::api::spot::EulerZYXValue* rotation_multiplier);
  private:
  const ::bosdyn::api::spot::EulerZYXValue& _internal_rotation_multiplier() const;
  ::bosdyn::api::spot::EulerZYXValue* _internal_mutable_rotation_multiplier();
  public:
  void unsafe_arena_set_allocated_rotation_multiplier(
      ::bosdyn::api::spot::EulerZYXValue* rotation_multiplier);
  ::bosdyn::api::spot::EulerZYXValue* unsafe_arena_release_rotation_multiplier();

  // .google.protobuf.DoubleValue arm_entry_slices = 6;
  bool has_arm_entry_slices() const;
  private:
  bool _internal_has_arm_entry_slices() const;
  public:
  void clear_arm_entry_slices();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& arm_entry_slices() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_arm_entry_slices();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_arm_entry_slices();
  void set_allocated_arm_entry_slices(::PROTOBUF_NAMESPACE_ID::DoubleValue* arm_entry_slices);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_arm_entry_slices() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_arm_entry_slices();
  public:
  void unsafe_arena_set_allocated_arm_entry_slices(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* arm_entry_slices);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_arm_entry_slices();

  // .google.protobuf.DoubleValue shoulder_0_offset = 7;
  bool has_shoulder_0_offset() const;
  private:
  bool _internal_has_shoulder_0_offset() const;
  public:
  void clear_shoulder_0_offset();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& shoulder_0_offset() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_shoulder_0_offset();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_shoulder_0_offset();
  void set_allocated_shoulder_0_offset(::PROTOBUF_NAMESPACE_ID::DoubleValue* shoulder_0_offset);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_shoulder_0_offset() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_shoulder_0_offset();
  public:
  void unsafe_arena_set_allocated_shoulder_0_offset(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* shoulder_0_offset);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_shoulder_0_offset();

  // .google.protobuf.DoubleValue shoulder_1_offset = 8;
  bool has_shoulder_1_offset() const;
  private:
  bool _internal_has_shoulder_1_offset() const;
  public:
  void clear_shoulder_1_offset();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& shoulder_1_offset() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_shoulder_1_offset();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_shoulder_1_offset();
  void set_allocated_shoulder_1_offset(::PROTOBUF_NAMESPACE_ID::DoubleValue* shoulder_1_offset);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_shoulder_1_offset() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_shoulder_1_offset();
  public:
  void unsafe_arena_set_allocated_shoulder_1_offset(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* shoulder_1_offset);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_shoulder_1_offset();

  // .google.protobuf.DoubleValue elbow_0_offset = 9;
  bool has_elbow_0_offset() const;
  private:
  bool _internal_has_elbow_0_offset() const;
  public:
  void clear_elbow_0_offset();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& elbow_0_offset() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_elbow_0_offset();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_elbow_0_offset();
  void set_allocated_elbow_0_offset(::PROTOBUF_NAMESPACE_ID::DoubleValue* elbow_0_offset);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_elbow_0_offset() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_elbow_0_offset();
  public:
  void unsafe_arena_set_allocated_elbow_0_offset(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* elbow_0_offset);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_elbow_0_offset();

  // .google.protobuf.DoubleValue elbow_1_offset = 10;
  bool has_elbow_1_offset() const;
  private:
  bool _internal_has_elbow_1_offset() const;
  public:
  void clear_elbow_1_offset();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& elbow_1_offset() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_elbow_1_offset();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_elbow_1_offset();
  void set_allocated_elbow_1_offset(::PROTOBUF_NAMESPACE_ID::DoubleValue* elbow_1_offset);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_elbow_1_offset() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_elbow_1_offset();
  public:
  void unsafe_arena_set_allocated_elbow_1_offset(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* elbow_1_offset);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_elbow_1_offset();

  // .google.protobuf.DoubleValue wrist_0_offset = 11;
  bool has_wrist_0_offset() const;
  private:
  bool _internal_has_wrist_0_offset() const;
  public:
  void clear_wrist_0_offset();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& wrist_0_offset() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_wrist_0_offset();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_wrist_0_offset();
  void set_allocated_wrist_0_offset(::PROTOBUF_NAMESPACE_ID::DoubleValue* wrist_0_offset);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_wrist_0_offset() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_wrist_0_offset();
  public:
  void unsafe_arena_set_allocated_wrist_0_offset(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* wrist_0_offset);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_wrist_0_offset();

  // .google.protobuf.DoubleValue wrist_1_offset = 12;
  bool has_wrist_1_offset() const;
  private:
  bool _internal_has_wrist_1_offset() const;
  public:
  void clear_wrist_1_offset();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& wrist_1_offset() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_wrist_1_offset();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_wrist_1_offset();
  void set_allocated_wrist_1_offset(::PROTOBUF_NAMESPACE_ID::DoubleValue* wrist_1_offset);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_wrist_1_offset() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_wrist_1_offset();
  public:
  void unsafe_arena_set_allocated_wrist_1_offset(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* wrist_1_offset);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_wrist_1_offset();

  // .google.protobuf.DoubleValue gripper_offset = 13;
  bool has_gripper_offset() const;
  private:
  bool _internal_has_gripper_offset() const;
  public:
  void clear_gripper_offset();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& gripper_offset() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_gripper_offset();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_gripper_offset();
  void set_allocated_gripper_offset(::PROTOBUF_NAMESPACE_ID::DoubleValue* gripper_offset);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_gripper_offset() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_gripper_offset();
  public:
  void unsafe_arena_set_allocated_gripper_offset(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* gripper_offset);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_gripper_offset();

  // .google.protobuf.DoubleValue speed = 14;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& speed() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_speed();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_speed();
  void set_allocated_speed(::PROTOBUF_NAMESPACE_ID::DoubleValue* speed);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_speed() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_speed();
  public:
  void unsafe_arena_set_allocated_speed(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* speed);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_speed();

  // .google.protobuf.DoubleValue offset_slices = 15;
  bool has_offset_slices() const;
  private:
  bool _internal_has_offset_slices() const;
  public:
  void clear_offset_slices();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& offset_slices() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_offset_slices();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_offset_slices();
  void set_allocated_offset_slices(::PROTOBUF_NAMESPACE_ID::DoubleValue* offset_slices);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_offset_slices() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_offset_slices();
  public:
  void unsafe_arena_set_allocated_offset_slices(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* offset_slices);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_offset_slices();

  // .google.protobuf.DoubleValue gripper_multiplier = 16;
  bool has_gripper_multiplier() const;
  private:
  bool _internal_has_gripper_multiplier() const;
  public:
  void clear_gripper_multiplier();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& gripper_multiplier() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_gripper_multiplier();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_gripper_multiplier();
  void set_allocated_gripper_multiplier(::PROTOBUF_NAMESPACE_ID::DoubleValue* gripper_multiplier);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_gripper_multiplier() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_gripper_multiplier();
  public:
  void unsafe_arena_set_allocated_gripper_multiplier(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* gripper_multiplier);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_gripper_multiplier();

  // .google.protobuf.DoubleValue gripper_strength_fraction = 17;
  bool has_gripper_strength_fraction() const;
  private:
  bool _internal_has_gripper_strength_fraction() const;
  public:
  void clear_gripper_strength_fraction();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& gripper_strength_fraction() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_gripper_strength_fraction();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_gripper_strength_fraction();
  void set_allocated_gripper_strength_fraction(::PROTOBUF_NAMESPACE_ID::DoubleValue* gripper_strength_fraction);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_gripper_strength_fraction() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_gripper_strength_fraction();
  public:
  void unsafe_arena_set_allocated_gripper_strength_fraction(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* gripper_strength_fraction);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_gripper_strength_fraction();

  // .google.protobuf.Int32Value arm_dance_frame_id = 18;
  bool has_arm_dance_frame_id() const;
  private:
  bool _internal_has_arm_dance_frame_id() const;
  public:
  void clear_arm_dance_frame_id();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& arm_dance_frame_id() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_arm_dance_frame_id();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_arm_dance_frame_id();
  void set_allocated_arm_dance_frame_id(::PROTOBUF_NAMESPACE_ID::Int32Value* arm_dance_frame_id);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_arm_dance_frame_id() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_arm_dance_frame_id();
  public:
  void unsafe_arena_set_allocated_arm_dance_frame_id(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* arm_dance_frame_id);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_arm_dance_frame_id();

  // .google.protobuf.DoubleValue body_tracking_stiffness = 19;
  bool has_body_tracking_stiffness() const;
  private:
  bool _internal_has_body_tracking_stiffness() const;
  public:
  void clear_body_tracking_stiffness();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& body_tracking_stiffness() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_body_tracking_stiffness();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_body_tracking_stiffness();
  void set_allocated_body_tracking_stiffness(::PROTOBUF_NAMESPACE_ID::DoubleValue* body_tracking_stiffness);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_body_tracking_stiffness() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_body_tracking_stiffness();
  public:
  void unsafe_arena_set_allocated_body_tracking_stiffness(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* body_tracking_stiffness);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_body_tracking_stiffness();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot.AnimateParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr animation_name_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* body_entry_slices_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* body_exit_slices_;
    ::bosdyn::api::Vec3Value* translation_multiplier_;
    ::bosdyn::api::spot::EulerZYXValue* rotation_multiplier_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* arm_entry_slices_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* shoulder_0_offset_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* shoulder_1_offset_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* elbow_0_offset_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* elbow_1_offset_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* wrist_0_offset_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* wrist_1_offset_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* gripper_offset_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* speed_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* offset_slices_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* gripper_multiplier_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* gripper_strength_fraction_;
    ::PROTOBUF_NAMESPACE_ID::Int32Value* arm_dance_frame_id_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* body_tracking_stiffness_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EulerZYXValue

// .google.protobuf.DoubleValue roll = 1;
inline bool EulerZYXValue::_internal_has_roll() const {
  return this != internal_default_instance() && _impl_.roll_ != nullptr;
}
inline bool EulerZYXValue::has_roll() const {
  return _internal_has_roll();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& EulerZYXValue::_internal_roll() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.roll_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& EulerZYXValue::roll() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.EulerZYXValue.roll)
  return _internal_roll();
}
inline void EulerZYXValue::unsafe_arena_set_allocated_roll(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* roll) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.roll_);
  }
  _impl_.roll_ = roll;
  if (roll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.EulerZYXValue.roll)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* EulerZYXValue::release_roll() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.roll_;
  _impl_.roll_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* EulerZYXValue::unsafe_arena_release_roll() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.EulerZYXValue.roll)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.roll_;
  _impl_.roll_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* EulerZYXValue::_internal_mutable_roll() {
  
  if (_impl_.roll_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.roll_ = p;
  }
  return _impl_.roll_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* EulerZYXValue::mutable_roll() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_roll();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.EulerZYXValue.roll)
  return _msg;
}
inline void EulerZYXValue::set_allocated_roll(::PROTOBUF_NAMESPACE_ID::DoubleValue* roll) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.roll_);
  }
  if (roll) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roll));
    if (message_arena != submessage_arena) {
      roll = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roll, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.roll_ = roll;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.EulerZYXValue.roll)
}

// .google.protobuf.DoubleValue pitch = 2;
inline bool EulerZYXValue::_internal_has_pitch() const {
  return this != internal_default_instance() && _impl_.pitch_ != nullptr;
}
inline bool EulerZYXValue::has_pitch() const {
  return _internal_has_pitch();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& EulerZYXValue::_internal_pitch() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.pitch_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& EulerZYXValue::pitch() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.EulerZYXValue.pitch)
  return _internal_pitch();
}
inline void EulerZYXValue::unsafe_arena_set_allocated_pitch(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* pitch) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pitch_);
  }
  _impl_.pitch_ = pitch;
  if (pitch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.EulerZYXValue.pitch)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* EulerZYXValue::release_pitch() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.pitch_;
  _impl_.pitch_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* EulerZYXValue::unsafe_arena_release_pitch() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.EulerZYXValue.pitch)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.pitch_;
  _impl_.pitch_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* EulerZYXValue::_internal_mutable_pitch() {
  
  if (_impl_.pitch_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.pitch_ = p;
  }
  return _impl_.pitch_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* EulerZYXValue::mutable_pitch() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_pitch();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.EulerZYXValue.pitch)
  return _msg;
}
inline void EulerZYXValue::set_allocated_pitch(::PROTOBUF_NAMESPACE_ID::DoubleValue* pitch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pitch_);
  }
  if (pitch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pitch));
    if (message_arena != submessage_arena) {
      pitch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pitch, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pitch_ = pitch;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.EulerZYXValue.pitch)
}

// .google.protobuf.DoubleValue yaw = 3;
inline bool EulerZYXValue::_internal_has_yaw() const {
  return this != internal_default_instance() && _impl_.yaw_ != nullptr;
}
inline bool EulerZYXValue::has_yaw() const {
  return _internal_has_yaw();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& EulerZYXValue::_internal_yaw() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.yaw_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& EulerZYXValue::yaw() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.EulerZYXValue.yaw)
  return _internal_yaw();
}
inline void EulerZYXValue::unsafe_arena_set_allocated_yaw(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yaw_);
  }
  _impl_.yaw_ = yaw;
  if (yaw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.EulerZYXValue.yaw)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* EulerZYXValue::release_yaw() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.yaw_;
  _impl_.yaw_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* EulerZYXValue::unsafe_arena_release_yaw() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.EulerZYXValue.yaw)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.yaw_;
  _impl_.yaw_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* EulerZYXValue::_internal_mutable_yaw() {
  
  if (_impl_.yaw_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.yaw_ = p;
  }
  return _impl_.yaw_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* EulerZYXValue::mutable_yaw() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_yaw();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.EulerZYXValue.yaw)
  return _msg;
}
inline void EulerZYXValue::set_allocated_yaw(::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yaw_);
  }
  if (yaw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(yaw));
    if (message_arena != submessage_arena) {
      yaw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yaw, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.yaw_ = yaw;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.EulerZYXValue.yaw)
}

// -------------------------------------------------------------------

// EulerRateZYXValue

// .google.protobuf.DoubleValue roll = 1;
inline bool EulerRateZYXValue::_internal_has_roll() const {
  return this != internal_default_instance() && _impl_.roll_ != nullptr;
}
inline bool EulerRateZYXValue::has_roll() const {
  return _internal_has_roll();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& EulerRateZYXValue::_internal_roll() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.roll_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& EulerRateZYXValue::roll() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.EulerRateZYXValue.roll)
  return _internal_roll();
}
inline void EulerRateZYXValue::unsafe_arena_set_allocated_roll(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* roll) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.roll_);
  }
  _impl_.roll_ = roll;
  if (roll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.EulerRateZYXValue.roll)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* EulerRateZYXValue::release_roll() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.roll_;
  _impl_.roll_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* EulerRateZYXValue::unsafe_arena_release_roll() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.EulerRateZYXValue.roll)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.roll_;
  _impl_.roll_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* EulerRateZYXValue::_internal_mutable_roll() {
  
  if (_impl_.roll_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.roll_ = p;
  }
  return _impl_.roll_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* EulerRateZYXValue::mutable_roll() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_roll();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.EulerRateZYXValue.roll)
  return _msg;
}
inline void EulerRateZYXValue::set_allocated_roll(::PROTOBUF_NAMESPACE_ID::DoubleValue* roll) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.roll_);
  }
  if (roll) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roll));
    if (message_arena != submessage_arena) {
      roll = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roll, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.roll_ = roll;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.EulerRateZYXValue.roll)
}

// .google.protobuf.DoubleValue pitch = 2;
inline bool EulerRateZYXValue::_internal_has_pitch() const {
  return this != internal_default_instance() && _impl_.pitch_ != nullptr;
}
inline bool EulerRateZYXValue::has_pitch() const {
  return _internal_has_pitch();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& EulerRateZYXValue::_internal_pitch() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.pitch_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& EulerRateZYXValue::pitch() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.EulerRateZYXValue.pitch)
  return _internal_pitch();
}
inline void EulerRateZYXValue::unsafe_arena_set_allocated_pitch(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* pitch) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pitch_);
  }
  _impl_.pitch_ = pitch;
  if (pitch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.EulerRateZYXValue.pitch)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* EulerRateZYXValue::release_pitch() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.pitch_;
  _impl_.pitch_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* EulerRateZYXValue::unsafe_arena_release_pitch() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.EulerRateZYXValue.pitch)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.pitch_;
  _impl_.pitch_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* EulerRateZYXValue::_internal_mutable_pitch() {
  
  if (_impl_.pitch_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.pitch_ = p;
  }
  return _impl_.pitch_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* EulerRateZYXValue::mutable_pitch() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_pitch();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.EulerRateZYXValue.pitch)
  return _msg;
}
inline void EulerRateZYXValue::set_allocated_pitch(::PROTOBUF_NAMESPACE_ID::DoubleValue* pitch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pitch_);
  }
  if (pitch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pitch));
    if (message_arena != submessage_arena) {
      pitch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pitch, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pitch_ = pitch;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.EulerRateZYXValue.pitch)
}

// .google.protobuf.DoubleValue yaw = 3;
inline bool EulerRateZYXValue::_internal_has_yaw() const {
  return this != internal_default_instance() && _impl_.yaw_ != nullptr;
}
inline bool EulerRateZYXValue::has_yaw() const {
  return _internal_has_yaw();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& EulerRateZYXValue::_internal_yaw() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.yaw_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& EulerRateZYXValue::yaw() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.EulerRateZYXValue.yaw)
  return _internal_yaw();
}
inline void EulerRateZYXValue::unsafe_arena_set_allocated_yaw(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yaw_);
  }
  _impl_.yaw_ = yaw;
  if (yaw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.EulerRateZYXValue.yaw)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* EulerRateZYXValue::release_yaw() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.yaw_;
  _impl_.yaw_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* EulerRateZYXValue::unsafe_arena_release_yaw() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.EulerRateZYXValue.yaw)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.yaw_;
  _impl_.yaw_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* EulerRateZYXValue::_internal_mutable_yaw() {
  
  if (_impl_.yaw_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.yaw_ = p;
  }
  return _impl_.yaw_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* EulerRateZYXValue::mutable_yaw() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_yaw();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.EulerRateZYXValue.yaw)
  return _msg;
}
inline void EulerRateZYXValue::set_allocated_yaw(::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yaw_);
  }
  if (yaw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(yaw));
    if (message_arena != submessage_arena) {
      yaw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yaw, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.yaw_ = yaw;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.EulerRateZYXValue.yaw)
}

// -------------------------------------------------------------------

// BodyHoldParams

// .bosdyn.api.spot.EulerZYXValue rotation = 1;
inline bool BodyHoldParams::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool BodyHoldParams::has_rotation() const {
  return _internal_has_rotation();
}
inline void BodyHoldParams::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::bosdyn::api::spot::EulerZYXValue& BodyHoldParams::_internal_rotation() const {
  const ::bosdyn::api::spot::EulerZYXValue* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::spot::EulerZYXValue&>(
      ::bosdyn::api::spot::_EulerZYXValue_default_instance_);
}
inline const ::bosdyn::api::spot::EulerZYXValue& BodyHoldParams::rotation() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.BodyHoldParams.rotation)
  return _internal_rotation();
}
inline void BodyHoldParams::unsafe_arena_set_allocated_rotation(
    ::bosdyn::api::spot::EulerZYXValue* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.BodyHoldParams.rotation)
}
inline ::bosdyn::api::spot::EulerZYXValue* BodyHoldParams::release_rotation() {
  
  ::bosdyn::api::spot::EulerZYXValue* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::spot::EulerZYXValue* BodyHoldParams::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.BodyHoldParams.rotation)
  
  ::bosdyn::api::spot::EulerZYXValue* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot::EulerZYXValue* BodyHoldParams::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot::EulerZYXValue>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::bosdyn::api::spot::EulerZYXValue* BodyHoldParams::mutable_rotation() {
  ::bosdyn::api::spot::EulerZYXValue* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.BodyHoldParams.rotation)
  return _msg;
}
inline void BodyHoldParams::set_allocated_rotation(::bosdyn::api::spot::EulerZYXValue* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.BodyHoldParams.rotation)
}

// .bosdyn.api.Vec3Value translation = 2;
inline bool BodyHoldParams::_internal_has_translation() const {
  return this != internal_default_instance() && _impl_.translation_ != nullptr;
}
inline bool BodyHoldParams::has_translation() const {
  return _internal_has_translation();
}
inline const ::bosdyn::api::Vec3Value& BodyHoldParams::_internal_translation() const {
  const ::bosdyn::api::Vec3Value* p = _impl_.translation_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec3Value&>(
      ::bosdyn::api::_Vec3Value_default_instance_);
}
inline const ::bosdyn::api::Vec3Value& BodyHoldParams::translation() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.BodyHoldParams.translation)
  return _internal_translation();
}
inline void BodyHoldParams::unsafe_arena_set_allocated_translation(
    ::bosdyn::api::Vec3Value* translation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.translation_);
  }
  _impl_.translation_ = translation;
  if (translation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.BodyHoldParams.translation)
}
inline ::bosdyn::api::Vec3Value* BodyHoldParams::release_translation() {
  
  ::bosdyn::api::Vec3Value* temp = _impl_.translation_;
  _impl_.translation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec3Value* BodyHoldParams::unsafe_arena_release_translation() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.BodyHoldParams.translation)
  
  ::bosdyn::api::Vec3Value* temp = _impl_.translation_;
  _impl_.translation_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec3Value* BodyHoldParams::_internal_mutable_translation() {
  
  if (_impl_.translation_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec3Value>(GetArenaForAllocation());
    _impl_.translation_ = p;
  }
  return _impl_.translation_;
}
inline ::bosdyn::api::Vec3Value* BodyHoldParams::mutable_translation() {
  ::bosdyn::api::Vec3Value* _msg = _internal_mutable_translation();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.BodyHoldParams.translation)
  return _msg;
}
inline void BodyHoldParams::set_allocated_translation(::bosdyn::api::Vec3Value* translation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.translation_);
  }
  if (translation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translation));
    if (message_arena != submessage_arena) {
      translation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.translation_ = translation;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.BodyHoldParams.translation)
}

// .google.protobuf.DoubleValue entry_slices = 3;
inline bool BodyHoldParams::_internal_has_entry_slices() const {
  return this != internal_default_instance() && _impl_.entry_slices_ != nullptr;
}
inline bool BodyHoldParams::has_entry_slices() const {
  return _internal_has_entry_slices();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& BodyHoldParams::_internal_entry_slices() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.entry_slices_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& BodyHoldParams::entry_slices() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.BodyHoldParams.entry_slices)
  return _internal_entry_slices();
}
inline void BodyHoldParams::unsafe_arena_set_allocated_entry_slices(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* entry_slices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.entry_slices_);
  }
  _impl_.entry_slices_ = entry_slices;
  if (entry_slices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.BodyHoldParams.entry_slices)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* BodyHoldParams::release_entry_slices() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.entry_slices_;
  _impl_.entry_slices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* BodyHoldParams::unsafe_arena_release_entry_slices() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.BodyHoldParams.entry_slices)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.entry_slices_;
  _impl_.entry_slices_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* BodyHoldParams::_internal_mutable_entry_slices() {
  
  if (_impl_.entry_slices_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.entry_slices_ = p;
  }
  return _impl_.entry_slices_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* BodyHoldParams::mutable_entry_slices() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_entry_slices();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.BodyHoldParams.entry_slices)
  return _msg;
}
inline void BodyHoldParams::set_allocated_entry_slices(::PROTOBUF_NAMESPACE_ID::DoubleValue* entry_slices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.entry_slices_);
  }
  if (entry_slices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entry_slices));
    if (message_arena != submessage_arena) {
      entry_slices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entry_slices, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.entry_slices_ = entry_slices;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.BodyHoldParams.entry_slices)
}

// .google.protobuf.DoubleValue exit_slices = 4;
inline bool BodyHoldParams::_internal_has_exit_slices() const {
  return this != internal_default_instance() && _impl_.exit_slices_ != nullptr;
}
inline bool BodyHoldParams::has_exit_slices() const {
  return _internal_has_exit_slices();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& BodyHoldParams::_internal_exit_slices() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.exit_slices_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& BodyHoldParams::exit_slices() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.BodyHoldParams.exit_slices)
  return _internal_exit_slices();
}
inline void BodyHoldParams::unsafe_arena_set_allocated_exit_slices(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* exit_slices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exit_slices_);
  }
  _impl_.exit_slices_ = exit_slices;
  if (exit_slices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.BodyHoldParams.exit_slices)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* BodyHoldParams::release_exit_slices() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.exit_slices_;
  _impl_.exit_slices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* BodyHoldParams::unsafe_arena_release_exit_slices() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.BodyHoldParams.exit_slices)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.exit_slices_;
  _impl_.exit_slices_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* BodyHoldParams::_internal_mutable_exit_slices() {
  
  if (_impl_.exit_slices_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.exit_slices_ = p;
  }
  return _impl_.exit_slices_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* BodyHoldParams::mutable_exit_slices() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_exit_slices();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.BodyHoldParams.exit_slices)
  return _msg;
}
inline void BodyHoldParams::set_allocated_exit_slices(::PROTOBUF_NAMESPACE_ID::DoubleValue* exit_slices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exit_slices_);
  }
  if (exit_slices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exit_slices));
    if (message_arena != submessage_arena) {
      exit_slices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exit_slices, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.exit_slices_ = exit_slices;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.BodyHoldParams.exit_slices)
}

// -------------------------------------------------------------------

// SwayParams

// .google.protobuf.DoubleValue vertical = 1;
inline bool SwayParams::_internal_has_vertical() const {
  return this != internal_default_instance() && _impl_.vertical_ != nullptr;
}
inline bool SwayParams::has_vertical() const {
  return _internal_has_vertical();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& SwayParams::_internal_vertical() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.vertical_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& SwayParams::vertical() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.SwayParams.vertical)
  return _internal_vertical();
}
inline void SwayParams::unsafe_arena_set_allocated_vertical(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* vertical) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vertical_);
  }
  _impl_.vertical_ = vertical;
  if (vertical) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.SwayParams.vertical)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* SwayParams::release_vertical() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.vertical_;
  _impl_.vertical_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* SwayParams::unsafe_arena_release_vertical() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.SwayParams.vertical)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.vertical_;
  _impl_.vertical_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* SwayParams::_internal_mutable_vertical() {
  
  if (_impl_.vertical_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.vertical_ = p;
  }
  return _impl_.vertical_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* SwayParams::mutable_vertical() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_vertical();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.SwayParams.vertical)
  return _msg;
}
inline void SwayParams::set_allocated_vertical(::PROTOBUF_NAMESPACE_ID::DoubleValue* vertical) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vertical_);
  }
  if (vertical) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vertical));
    if (message_arena != submessage_arena) {
      vertical = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vertical, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vertical_ = vertical;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.SwayParams.vertical)
}

// .google.protobuf.DoubleValue horizontal = 2;
inline bool SwayParams::_internal_has_horizontal() const {
  return this != internal_default_instance() && _impl_.horizontal_ != nullptr;
}
inline bool SwayParams::has_horizontal() const {
  return _internal_has_horizontal();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& SwayParams::_internal_horizontal() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.horizontal_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& SwayParams::horizontal() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.SwayParams.horizontal)
  return _internal_horizontal();
}
inline void SwayParams::unsafe_arena_set_allocated_horizontal(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* horizontal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.horizontal_);
  }
  _impl_.horizontal_ = horizontal;
  if (horizontal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.SwayParams.horizontal)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* SwayParams::release_horizontal() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.horizontal_;
  _impl_.horizontal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* SwayParams::unsafe_arena_release_horizontal() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.SwayParams.horizontal)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.horizontal_;
  _impl_.horizontal_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* SwayParams::_internal_mutable_horizontal() {
  
  if (_impl_.horizontal_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.horizontal_ = p;
  }
  return _impl_.horizontal_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* SwayParams::mutable_horizontal() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_horizontal();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.SwayParams.horizontal)
  return _msg;
}
inline void SwayParams::set_allocated_horizontal(::PROTOBUF_NAMESPACE_ID::DoubleValue* horizontal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.horizontal_);
  }
  if (horizontal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(horizontal));
    if (message_arena != submessage_arena) {
      horizontal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, horizontal, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.horizontal_ = horizontal;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.SwayParams.horizontal)
}

// .google.protobuf.DoubleValue roll = 3;
inline bool SwayParams::_internal_has_roll() const {
  return this != internal_default_instance() && _impl_.roll_ != nullptr;
}
inline bool SwayParams::has_roll() const {
  return _internal_has_roll();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& SwayParams::_internal_roll() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.roll_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& SwayParams::roll() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.SwayParams.roll)
  return _internal_roll();
}
inline void SwayParams::unsafe_arena_set_allocated_roll(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* roll) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.roll_);
  }
  _impl_.roll_ = roll;
  if (roll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.SwayParams.roll)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* SwayParams::release_roll() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.roll_;
  _impl_.roll_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* SwayParams::unsafe_arena_release_roll() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.SwayParams.roll)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.roll_;
  _impl_.roll_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* SwayParams::_internal_mutable_roll() {
  
  if (_impl_.roll_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.roll_ = p;
  }
  return _impl_.roll_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* SwayParams::mutable_roll() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_roll();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.SwayParams.roll)
  return _msg;
}
inline void SwayParams::set_allocated_roll(::PROTOBUF_NAMESPACE_ID::DoubleValue* roll) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.roll_);
  }
  if (roll) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roll));
    if (message_arena != submessage_arena) {
      roll = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roll, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.roll_ = roll;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.SwayParams.roll)
}

// .bosdyn.api.spot.Pivot pivot = 4;
inline void SwayParams::clear_pivot() {
  _impl_.pivot_ = 0;
}
inline ::bosdyn::api::spot::Pivot SwayParams::_internal_pivot() const {
  return static_cast< ::bosdyn::api::spot::Pivot >(_impl_.pivot_);
}
inline ::bosdyn::api::spot::Pivot SwayParams::pivot() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.SwayParams.pivot)
  return _internal_pivot();
}
inline void SwayParams::_internal_set_pivot(::bosdyn::api::spot::Pivot value) {
  
  _impl_.pivot_ = value;
}
inline void SwayParams::set_pivot(::bosdyn::api::spot::Pivot value) {
  _internal_set_pivot(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot.SwayParams.pivot)
}

// .bosdyn.api.spot.SwayParams.SwayStyle style = 5;
inline void SwayParams::clear_style() {
  _impl_.style_ = 0;
}
inline ::bosdyn::api::spot::SwayParams_SwayStyle SwayParams::_internal_style() const {
  return static_cast< ::bosdyn::api::spot::SwayParams_SwayStyle >(_impl_.style_);
}
inline ::bosdyn::api::spot::SwayParams_SwayStyle SwayParams::style() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.SwayParams.style)
  return _internal_style();
}
inline void SwayParams::_internal_set_style(::bosdyn::api::spot::SwayParams_SwayStyle value) {
  
  _impl_.style_ = value;
}
inline void SwayParams::set_style(::bosdyn::api::spot::SwayParams_SwayStyle value) {
  _internal_set_style(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot.SwayParams.style)
}

// .google.protobuf.DoubleValue pronounced = 6;
inline bool SwayParams::_internal_has_pronounced() const {
  return this != internal_default_instance() && _impl_.pronounced_ != nullptr;
}
inline bool SwayParams::has_pronounced() const {
  return _internal_has_pronounced();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& SwayParams::_internal_pronounced() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.pronounced_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& SwayParams::pronounced() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.SwayParams.pronounced)
  return _internal_pronounced();
}
inline void SwayParams::unsafe_arena_set_allocated_pronounced(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* pronounced) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pronounced_);
  }
  _impl_.pronounced_ = pronounced;
  if (pronounced) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.SwayParams.pronounced)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* SwayParams::release_pronounced() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.pronounced_;
  _impl_.pronounced_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* SwayParams::unsafe_arena_release_pronounced() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.SwayParams.pronounced)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.pronounced_;
  _impl_.pronounced_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* SwayParams::_internal_mutable_pronounced() {
  
  if (_impl_.pronounced_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.pronounced_ = p;
  }
  return _impl_.pronounced_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* SwayParams::mutable_pronounced() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_pronounced();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.SwayParams.pronounced)
  return _msg;
}
inline void SwayParams::set_allocated_pronounced(::PROTOBUF_NAMESPACE_ID::DoubleValue* pronounced) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pronounced_);
  }
  if (pronounced) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pronounced));
    if (message_arena != submessage_arena) {
      pronounced = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pronounced, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pronounced_ = pronounced;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.SwayParams.pronounced)
}

// .google.protobuf.BoolValue hold_zero_axes = 7;
inline bool SwayParams::_internal_has_hold_zero_axes() const {
  return this != internal_default_instance() && _impl_.hold_zero_axes_ != nullptr;
}
inline bool SwayParams::has_hold_zero_axes() const {
  return _internal_has_hold_zero_axes();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& SwayParams::_internal_hold_zero_axes() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.hold_zero_axes_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& SwayParams::hold_zero_axes() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.SwayParams.hold_zero_axes)
  return _internal_hold_zero_axes();
}
inline void SwayParams::unsafe_arena_set_allocated_hold_zero_axes(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* hold_zero_axes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hold_zero_axes_);
  }
  _impl_.hold_zero_axes_ = hold_zero_axes;
  if (hold_zero_axes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.SwayParams.hold_zero_axes)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* SwayParams::release_hold_zero_axes() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.hold_zero_axes_;
  _impl_.hold_zero_axes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* SwayParams::unsafe_arena_release_hold_zero_axes() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.SwayParams.hold_zero_axes)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.hold_zero_axes_;
  _impl_.hold_zero_axes_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* SwayParams::_internal_mutable_hold_zero_axes() {
  
  if (_impl_.hold_zero_axes_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.hold_zero_axes_ = p;
  }
  return _impl_.hold_zero_axes_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* SwayParams::mutable_hold_zero_axes() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_hold_zero_axes();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.SwayParams.hold_zero_axes)
  return _msg;
}
inline void SwayParams::set_allocated_hold_zero_axes(::PROTOBUF_NAMESPACE_ID::BoolValue* hold_zero_axes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hold_zero_axes_);
  }
  if (hold_zero_axes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hold_zero_axes));
    if (message_arena != submessage_arena) {
      hold_zero_axes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hold_zero_axes, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.hold_zero_axes_ = hold_zero_axes;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.SwayParams.hold_zero_axes)
}

// -------------------------------------------------------------------

// ArmMoveParams

// .google.protobuf.DoubleValue shoulder_0 = 1;
inline bool ArmMoveParams::_internal_has_shoulder_0() const {
  return this != internal_default_instance() && _impl_.shoulder_0_ != nullptr;
}
inline bool ArmMoveParams::has_shoulder_0() const {
  return _internal_has_shoulder_0();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmMoveParams::_internal_shoulder_0() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.shoulder_0_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmMoveParams::shoulder_0() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.ArmMoveParams.shoulder_0)
  return _internal_shoulder_0();
}
inline void ArmMoveParams::unsafe_arena_set_allocated_shoulder_0(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* shoulder_0) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shoulder_0_);
  }
  _impl_.shoulder_0_ = shoulder_0;
  if (shoulder_0) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.ArmMoveParams.shoulder_0)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmMoveParams::release_shoulder_0() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.shoulder_0_;
  _impl_.shoulder_0_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmMoveParams::unsafe_arena_release_shoulder_0() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.ArmMoveParams.shoulder_0)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.shoulder_0_;
  _impl_.shoulder_0_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmMoveParams::_internal_mutable_shoulder_0() {
  
  if (_impl_.shoulder_0_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.shoulder_0_ = p;
  }
  return _impl_.shoulder_0_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmMoveParams::mutable_shoulder_0() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_shoulder_0();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.ArmMoveParams.shoulder_0)
  return _msg;
}
inline void ArmMoveParams::set_allocated_shoulder_0(::PROTOBUF_NAMESPACE_ID::DoubleValue* shoulder_0) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shoulder_0_);
  }
  if (shoulder_0) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shoulder_0));
    if (message_arena != submessage_arena) {
      shoulder_0 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shoulder_0, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.shoulder_0_ = shoulder_0;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.ArmMoveParams.shoulder_0)
}

// .google.protobuf.DoubleValue shoulder_1 = 2;
inline bool ArmMoveParams::_internal_has_shoulder_1() const {
  return this != internal_default_instance() && _impl_.shoulder_1_ != nullptr;
}
inline bool ArmMoveParams::has_shoulder_1() const {
  return _internal_has_shoulder_1();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmMoveParams::_internal_shoulder_1() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.shoulder_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmMoveParams::shoulder_1() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.ArmMoveParams.shoulder_1)
  return _internal_shoulder_1();
}
inline void ArmMoveParams::unsafe_arena_set_allocated_shoulder_1(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* shoulder_1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shoulder_1_);
  }
  _impl_.shoulder_1_ = shoulder_1;
  if (shoulder_1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.ArmMoveParams.shoulder_1)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmMoveParams::release_shoulder_1() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.shoulder_1_;
  _impl_.shoulder_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmMoveParams::unsafe_arena_release_shoulder_1() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.ArmMoveParams.shoulder_1)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.shoulder_1_;
  _impl_.shoulder_1_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmMoveParams::_internal_mutable_shoulder_1() {
  
  if (_impl_.shoulder_1_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.shoulder_1_ = p;
  }
  return _impl_.shoulder_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmMoveParams::mutable_shoulder_1() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_shoulder_1();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.ArmMoveParams.shoulder_1)
  return _msg;
}
inline void ArmMoveParams::set_allocated_shoulder_1(::PROTOBUF_NAMESPACE_ID::DoubleValue* shoulder_1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shoulder_1_);
  }
  if (shoulder_1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shoulder_1));
    if (message_arena != submessage_arena) {
      shoulder_1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shoulder_1, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.shoulder_1_ = shoulder_1;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.ArmMoveParams.shoulder_1)
}

// .google.protobuf.DoubleValue elbow_0 = 3;
inline bool ArmMoveParams::_internal_has_elbow_0() const {
  return this != internal_default_instance() && _impl_.elbow_0_ != nullptr;
}
inline bool ArmMoveParams::has_elbow_0() const {
  return _internal_has_elbow_0();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmMoveParams::_internal_elbow_0() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.elbow_0_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmMoveParams::elbow_0() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.ArmMoveParams.elbow_0)
  return _internal_elbow_0();
}
inline void ArmMoveParams::unsafe_arena_set_allocated_elbow_0(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* elbow_0) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.elbow_0_);
  }
  _impl_.elbow_0_ = elbow_0;
  if (elbow_0) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.ArmMoveParams.elbow_0)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmMoveParams::release_elbow_0() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.elbow_0_;
  _impl_.elbow_0_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmMoveParams::unsafe_arena_release_elbow_0() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.ArmMoveParams.elbow_0)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.elbow_0_;
  _impl_.elbow_0_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmMoveParams::_internal_mutable_elbow_0() {
  
  if (_impl_.elbow_0_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.elbow_0_ = p;
  }
  return _impl_.elbow_0_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmMoveParams::mutable_elbow_0() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_elbow_0();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.ArmMoveParams.elbow_0)
  return _msg;
}
inline void ArmMoveParams::set_allocated_elbow_0(::PROTOBUF_NAMESPACE_ID::DoubleValue* elbow_0) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.elbow_0_);
  }
  if (elbow_0) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(elbow_0));
    if (message_arena != submessage_arena) {
      elbow_0 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, elbow_0, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.elbow_0_ = elbow_0;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.ArmMoveParams.elbow_0)
}

// .google.protobuf.DoubleValue elbow_1 = 4;
inline bool ArmMoveParams::_internal_has_elbow_1() const {
  return this != internal_default_instance() && _impl_.elbow_1_ != nullptr;
}
inline bool ArmMoveParams::has_elbow_1() const {
  return _internal_has_elbow_1();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmMoveParams::_internal_elbow_1() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.elbow_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmMoveParams::elbow_1() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.ArmMoveParams.elbow_1)
  return _internal_elbow_1();
}
inline void ArmMoveParams::unsafe_arena_set_allocated_elbow_1(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* elbow_1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.elbow_1_);
  }
  _impl_.elbow_1_ = elbow_1;
  if (elbow_1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.ArmMoveParams.elbow_1)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmMoveParams::release_elbow_1() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.elbow_1_;
  _impl_.elbow_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmMoveParams::unsafe_arena_release_elbow_1() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.ArmMoveParams.elbow_1)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.elbow_1_;
  _impl_.elbow_1_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmMoveParams::_internal_mutable_elbow_1() {
  
  if (_impl_.elbow_1_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.elbow_1_ = p;
  }
  return _impl_.elbow_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmMoveParams::mutable_elbow_1() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_elbow_1();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.ArmMoveParams.elbow_1)
  return _msg;
}
inline void ArmMoveParams::set_allocated_elbow_1(::PROTOBUF_NAMESPACE_ID::DoubleValue* elbow_1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.elbow_1_);
  }
  if (elbow_1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(elbow_1));
    if (message_arena != submessage_arena) {
      elbow_1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, elbow_1, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.elbow_1_ = elbow_1;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.ArmMoveParams.elbow_1)
}

// .google.protobuf.DoubleValue wrist_0 = 5;
inline bool ArmMoveParams::_internal_has_wrist_0() const {
  return this != internal_default_instance() && _impl_.wrist_0_ != nullptr;
}
inline bool ArmMoveParams::has_wrist_0() const {
  return _internal_has_wrist_0();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmMoveParams::_internal_wrist_0() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.wrist_0_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmMoveParams::wrist_0() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.ArmMoveParams.wrist_0)
  return _internal_wrist_0();
}
inline void ArmMoveParams::unsafe_arena_set_allocated_wrist_0(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* wrist_0) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wrist_0_);
  }
  _impl_.wrist_0_ = wrist_0;
  if (wrist_0) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.ArmMoveParams.wrist_0)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmMoveParams::release_wrist_0() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.wrist_0_;
  _impl_.wrist_0_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmMoveParams::unsafe_arena_release_wrist_0() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.ArmMoveParams.wrist_0)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.wrist_0_;
  _impl_.wrist_0_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmMoveParams::_internal_mutable_wrist_0() {
  
  if (_impl_.wrist_0_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.wrist_0_ = p;
  }
  return _impl_.wrist_0_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmMoveParams::mutable_wrist_0() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_wrist_0();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.ArmMoveParams.wrist_0)
  return _msg;
}
inline void ArmMoveParams::set_allocated_wrist_0(::PROTOBUF_NAMESPACE_ID::DoubleValue* wrist_0) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wrist_0_);
  }
  if (wrist_0) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wrist_0));
    if (message_arena != submessage_arena) {
      wrist_0 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wrist_0, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.wrist_0_ = wrist_0;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.ArmMoveParams.wrist_0)
}

// .google.protobuf.DoubleValue wrist_1 = 6;
inline bool ArmMoveParams::_internal_has_wrist_1() const {
  return this != internal_default_instance() && _impl_.wrist_1_ != nullptr;
}
inline bool ArmMoveParams::has_wrist_1() const {
  return _internal_has_wrist_1();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmMoveParams::_internal_wrist_1() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.wrist_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmMoveParams::wrist_1() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.ArmMoveParams.wrist_1)
  return _internal_wrist_1();
}
inline void ArmMoveParams::unsafe_arena_set_allocated_wrist_1(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* wrist_1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wrist_1_);
  }
  _impl_.wrist_1_ = wrist_1;
  if (wrist_1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.ArmMoveParams.wrist_1)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmMoveParams::release_wrist_1() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.wrist_1_;
  _impl_.wrist_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmMoveParams::unsafe_arena_release_wrist_1() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.ArmMoveParams.wrist_1)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.wrist_1_;
  _impl_.wrist_1_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmMoveParams::_internal_mutable_wrist_1() {
  
  if (_impl_.wrist_1_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.wrist_1_ = p;
  }
  return _impl_.wrist_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmMoveParams::mutable_wrist_1() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_wrist_1();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.ArmMoveParams.wrist_1)
  return _msg;
}
inline void ArmMoveParams::set_allocated_wrist_1(::PROTOBUF_NAMESPACE_ID::DoubleValue* wrist_1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wrist_1_);
  }
  if (wrist_1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wrist_1));
    if (message_arena != submessage_arena) {
      wrist_1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wrist_1, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.wrist_1_ = wrist_1;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.ArmMoveParams.wrist_1)
}

// .bosdyn.api.spot.Easing easing = 7;
inline void ArmMoveParams::clear_easing() {
  _impl_.easing_ = 0;
}
inline ::bosdyn::api::spot::Easing ArmMoveParams::_internal_easing() const {
  return static_cast< ::bosdyn::api::spot::Easing >(_impl_.easing_);
}
inline ::bosdyn::api::spot::Easing ArmMoveParams::easing() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.ArmMoveParams.easing)
  return _internal_easing();
}
inline void ArmMoveParams::_internal_set_easing(::bosdyn::api::spot::Easing value) {
  
  _impl_.easing_ = value;
}
inline void ArmMoveParams::set_easing(::bosdyn::api::spot::Easing value) {
  _internal_set_easing(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot.ArmMoveParams.easing)
}

// .google.protobuf.DoubleValue gripper = 8;
inline bool ArmMoveParams::_internal_has_gripper() const {
  return this != internal_default_instance() && _impl_.gripper_ != nullptr;
}
inline bool ArmMoveParams::has_gripper() const {
  return _internal_has_gripper();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmMoveParams::_internal_gripper() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.gripper_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ArmMoveParams::gripper() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.ArmMoveParams.gripper)
  return _internal_gripper();
}
inline void ArmMoveParams::unsafe_arena_set_allocated_gripper(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* gripper) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gripper_);
  }
  _impl_.gripper_ = gripper;
  if (gripper) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.ArmMoveParams.gripper)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmMoveParams::release_gripper() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.gripper_;
  _impl_.gripper_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmMoveParams::unsafe_arena_release_gripper() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.ArmMoveParams.gripper)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.gripper_;
  _impl_.gripper_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmMoveParams::_internal_mutable_gripper() {
  
  if (_impl_.gripper_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.gripper_ = p;
  }
  return _impl_.gripper_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ArmMoveParams::mutable_gripper() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_gripper();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.ArmMoveParams.gripper)
  return _msg;
}
inline void ArmMoveParams::set_allocated_gripper(::PROTOBUF_NAMESPACE_ID::DoubleValue* gripper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gripper_);
  }
  if (gripper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gripper));
    if (message_arena != submessage_arena) {
      gripper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gripper, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gripper_ = gripper;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.ArmMoveParams.gripper)
}

// -------------------------------------------------------------------

// WorkspaceArmMoveParams

// .bosdyn.api.spot.EulerZYXValue rotation = 1;
inline bool WorkspaceArmMoveParams::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool WorkspaceArmMoveParams::has_rotation() const {
  return _internal_has_rotation();
}
inline void WorkspaceArmMoveParams::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::bosdyn::api::spot::EulerZYXValue& WorkspaceArmMoveParams::_internal_rotation() const {
  const ::bosdyn::api::spot::EulerZYXValue* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::spot::EulerZYXValue&>(
      ::bosdyn::api::spot::_EulerZYXValue_default_instance_);
}
inline const ::bosdyn::api::spot::EulerZYXValue& WorkspaceArmMoveParams::rotation() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.WorkspaceArmMoveParams.rotation)
  return _internal_rotation();
}
inline void WorkspaceArmMoveParams::unsafe_arena_set_allocated_rotation(
    ::bosdyn::api::spot::EulerZYXValue* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.WorkspaceArmMoveParams.rotation)
}
inline ::bosdyn::api::spot::EulerZYXValue* WorkspaceArmMoveParams::release_rotation() {
  
  ::bosdyn::api::spot::EulerZYXValue* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::spot::EulerZYXValue* WorkspaceArmMoveParams::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.WorkspaceArmMoveParams.rotation)
  
  ::bosdyn::api::spot::EulerZYXValue* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot::EulerZYXValue* WorkspaceArmMoveParams::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot::EulerZYXValue>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::bosdyn::api::spot::EulerZYXValue* WorkspaceArmMoveParams::mutable_rotation() {
  ::bosdyn::api::spot::EulerZYXValue* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.WorkspaceArmMoveParams.rotation)
  return _msg;
}
inline void WorkspaceArmMoveParams::set_allocated_rotation(::bosdyn::api::spot::EulerZYXValue* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.WorkspaceArmMoveParams.rotation)
}

// .bosdyn.api.Vec3Value translation = 2;
inline bool WorkspaceArmMoveParams::_internal_has_translation() const {
  return this != internal_default_instance() && _impl_.translation_ != nullptr;
}
inline bool WorkspaceArmMoveParams::has_translation() const {
  return _internal_has_translation();
}
inline const ::bosdyn::api::Vec3Value& WorkspaceArmMoveParams::_internal_translation() const {
  const ::bosdyn::api::Vec3Value* p = _impl_.translation_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec3Value&>(
      ::bosdyn::api::_Vec3Value_default_instance_);
}
inline const ::bosdyn::api::Vec3Value& WorkspaceArmMoveParams::translation() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.WorkspaceArmMoveParams.translation)
  return _internal_translation();
}
inline void WorkspaceArmMoveParams::unsafe_arena_set_allocated_translation(
    ::bosdyn::api::Vec3Value* translation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.translation_);
  }
  _impl_.translation_ = translation;
  if (translation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.WorkspaceArmMoveParams.translation)
}
inline ::bosdyn::api::Vec3Value* WorkspaceArmMoveParams::release_translation() {
  
  ::bosdyn::api::Vec3Value* temp = _impl_.translation_;
  _impl_.translation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec3Value* WorkspaceArmMoveParams::unsafe_arena_release_translation() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.WorkspaceArmMoveParams.translation)
  
  ::bosdyn::api::Vec3Value* temp = _impl_.translation_;
  _impl_.translation_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec3Value* WorkspaceArmMoveParams::_internal_mutable_translation() {
  
  if (_impl_.translation_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec3Value>(GetArenaForAllocation());
    _impl_.translation_ = p;
  }
  return _impl_.translation_;
}
inline ::bosdyn::api::Vec3Value* WorkspaceArmMoveParams::mutable_translation() {
  ::bosdyn::api::Vec3Value* _msg = _internal_mutable_translation();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.WorkspaceArmMoveParams.translation)
  return _msg;
}
inline void WorkspaceArmMoveParams::set_allocated_translation(::bosdyn::api::Vec3Value* translation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.translation_);
  }
  if (translation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translation));
    if (message_arena != submessage_arena) {
      translation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.translation_ = translation;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.WorkspaceArmMoveParams.translation)
}

// .google.protobuf.BoolValue absolute = 3;
inline bool WorkspaceArmMoveParams::_internal_has_absolute() const {
  return this != internal_default_instance() && _impl_.absolute_ != nullptr;
}
inline bool WorkspaceArmMoveParams::has_absolute() const {
  return _internal_has_absolute();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& WorkspaceArmMoveParams::_internal_absolute() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.absolute_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& WorkspaceArmMoveParams::absolute() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.WorkspaceArmMoveParams.absolute)
  return _internal_absolute();
}
inline void WorkspaceArmMoveParams::unsafe_arena_set_allocated_absolute(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* absolute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.absolute_);
  }
  _impl_.absolute_ = absolute;
  if (absolute) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.WorkspaceArmMoveParams.absolute)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* WorkspaceArmMoveParams::release_absolute() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.absolute_;
  _impl_.absolute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* WorkspaceArmMoveParams::unsafe_arena_release_absolute() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.WorkspaceArmMoveParams.absolute)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.absolute_;
  _impl_.absolute_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* WorkspaceArmMoveParams::_internal_mutable_absolute() {
  
  if (_impl_.absolute_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.absolute_ = p;
  }
  return _impl_.absolute_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* WorkspaceArmMoveParams::mutable_absolute() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_absolute();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.WorkspaceArmMoveParams.absolute)
  return _msg;
}
inline void WorkspaceArmMoveParams::set_allocated_absolute(::PROTOBUF_NAMESPACE_ID::BoolValue* absolute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.absolute_);
  }
  if (absolute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(absolute));
    if (message_arena != submessage_arena) {
      absolute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, absolute, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.absolute_ = absolute;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.WorkspaceArmMoveParams.absolute)
}

// .bosdyn.api.spot.ArmMoveFrame frame = 4;
inline void WorkspaceArmMoveParams::clear_frame() {
  _impl_.frame_ = 0;
}
inline ::bosdyn::api::spot::ArmMoveFrame WorkspaceArmMoveParams::_internal_frame() const {
  return static_cast< ::bosdyn::api::spot::ArmMoveFrame >(_impl_.frame_);
}
inline ::bosdyn::api::spot::ArmMoveFrame WorkspaceArmMoveParams::frame() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.WorkspaceArmMoveParams.frame)
  return _internal_frame();
}
inline void WorkspaceArmMoveParams::_internal_set_frame(::bosdyn::api::spot::ArmMoveFrame value) {
  
  _impl_.frame_ = value;
}
inline void WorkspaceArmMoveParams::set_frame(::bosdyn::api::spot::ArmMoveFrame value) {
  _internal_set_frame(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot.WorkspaceArmMoveParams.frame)
}

// .bosdyn.api.spot.Easing easing = 5;
inline void WorkspaceArmMoveParams::clear_easing() {
  _impl_.easing_ = 0;
}
inline ::bosdyn::api::spot::Easing WorkspaceArmMoveParams::_internal_easing() const {
  return static_cast< ::bosdyn::api::spot::Easing >(_impl_.easing_);
}
inline ::bosdyn::api::spot::Easing WorkspaceArmMoveParams::easing() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.WorkspaceArmMoveParams.easing)
  return _internal_easing();
}
inline void WorkspaceArmMoveParams::_internal_set_easing(::bosdyn::api::spot::Easing value) {
  
  _impl_.easing_ = value;
}
inline void WorkspaceArmMoveParams::set_easing(::bosdyn::api::spot::Easing value) {
  _internal_set_easing(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot.WorkspaceArmMoveParams.easing)
}

// .google.protobuf.Int32Value dance_frame_id = 6;
inline bool WorkspaceArmMoveParams::_internal_has_dance_frame_id() const {
  return this != internal_default_instance() && _impl_.dance_frame_id_ != nullptr;
}
inline bool WorkspaceArmMoveParams::has_dance_frame_id() const {
  return _internal_has_dance_frame_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& WorkspaceArmMoveParams::_internal_dance_frame_id() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.dance_frame_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& WorkspaceArmMoveParams::dance_frame_id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.WorkspaceArmMoveParams.dance_frame_id)
  return _internal_dance_frame_id();
}
inline void WorkspaceArmMoveParams::unsafe_arena_set_allocated_dance_frame_id(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* dance_frame_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dance_frame_id_);
  }
  _impl_.dance_frame_id_ = dance_frame_id;
  if (dance_frame_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.WorkspaceArmMoveParams.dance_frame_id)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* WorkspaceArmMoveParams::release_dance_frame_id() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.dance_frame_id_;
  _impl_.dance_frame_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* WorkspaceArmMoveParams::unsafe_arena_release_dance_frame_id() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.WorkspaceArmMoveParams.dance_frame_id)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.dance_frame_id_;
  _impl_.dance_frame_id_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* WorkspaceArmMoveParams::_internal_mutable_dance_frame_id() {
  
  if (_impl_.dance_frame_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.dance_frame_id_ = p;
  }
  return _impl_.dance_frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* WorkspaceArmMoveParams::mutable_dance_frame_id() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_dance_frame_id();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.WorkspaceArmMoveParams.dance_frame_id)
  return _msg;
}
inline void WorkspaceArmMoveParams::set_allocated_dance_frame_id(::PROTOBUF_NAMESPACE_ID::Int32Value* dance_frame_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dance_frame_id_);
  }
  if (dance_frame_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dance_frame_id));
    if (message_arena != submessage_arena) {
      dance_frame_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dance_frame_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dance_frame_id_ = dance_frame_id;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.WorkspaceArmMoveParams.dance_frame_id)
}

// -------------------------------------------------------------------

// Figure8Params

// .google.protobuf.DoubleValue height = 1;
inline bool Figure8Params::_internal_has_height() const {
  return this != internal_default_instance() && _impl_.height_ != nullptr;
}
inline bool Figure8Params::has_height() const {
  return _internal_has_height();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Figure8Params::_internal_height() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.height_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Figure8Params::height() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.Figure8Params.height)
  return _internal_height();
}
inline void Figure8Params::unsafe_arena_set_allocated_height(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.height_);
  }
  _impl_.height_ = height;
  if (height) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.Figure8Params.height)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Figure8Params::release_height() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.height_;
  _impl_.height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Figure8Params::unsafe_arena_release_height() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.Figure8Params.height)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.height_;
  _impl_.height_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Figure8Params::_internal_mutable_height() {
  
  if (_impl_.height_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.height_ = p;
  }
  return _impl_.height_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Figure8Params::mutable_height() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_height();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.Figure8Params.height)
  return _msg;
}
inline void Figure8Params::set_allocated_height(::PROTOBUF_NAMESPACE_ID::DoubleValue* height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.height_);
  }
  if (height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(height));
    if (message_arena != submessage_arena) {
      height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, height, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.height_ = height;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.Figure8Params.height)
}

// .google.protobuf.DoubleValue width = 2;
inline bool Figure8Params::_internal_has_width() const {
  return this != internal_default_instance() && _impl_.width_ != nullptr;
}
inline bool Figure8Params::has_width() const {
  return _internal_has_width();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Figure8Params::_internal_width() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.width_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Figure8Params::width() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.Figure8Params.width)
  return _internal_width();
}
inline void Figure8Params::unsafe_arena_set_allocated_width(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* width) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.width_);
  }
  _impl_.width_ = width;
  if (width) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.Figure8Params.width)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Figure8Params::release_width() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.width_;
  _impl_.width_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Figure8Params::unsafe_arena_release_width() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.Figure8Params.width)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.width_;
  _impl_.width_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Figure8Params::_internal_mutable_width() {
  
  if (_impl_.width_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.width_ = p;
  }
  return _impl_.width_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Figure8Params::mutable_width() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_width();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.Figure8Params.width)
  return _msg;
}
inline void Figure8Params::set_allocated_width(::PROTOBUF_NAMESPACE_ID::DoubleValue* width) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.width_);
  }
  if (width) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(width));
    if (message_arena != submessage_arena) {
      width = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, width, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.width_ = width;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.Figure8Params.width)
}

// .google.protobuf.DoubleValue beats_per_cycle = 3;
inline bool Figure8Params::_internal_has_beats_per_cycle() const {
  return this != internal_default_instance() && _impl_.beats_per_cycle_ != nullptr;
}
inline bool Figure8Params::has_beats_per_cycle() const {
  return _internal_has_beats_per_cycle();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Figure8Params::_internal_beats_per_cycle() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.beats_per_cycle_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Figure8Params::beats_per_cycle() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.Figure8Params.beats_per_cycle)
  return _internal_beats_per_cycle();
}
inline void Figure8Params::unsafe_arena_set_allocated_beats_per_cycle(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* beats_per_cycle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.beats_per_cycle_);
  }
  _impl_.beats_per_cycle_ = beats_per_cycle;
  if (beats_per_cycle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.Figure8Params.beats_per_cycle)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Figure8Params::release_beats_per_cycle() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.beats_per_cycle_;
  _impl_.beats_per_cycle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Figure8Params::unsafe_arena_release_beats_per_cycle() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.Figure8Params.beats_per_cycle)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.beats_per_cycle_;
  _impl_.beats_per_cycle_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Figure8Params::_internal_mutable_beats_per_cycle() {
  
  if (_impl_.beats_per_cycle_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.beats_per_cycle_ = p;
  }
  return _impl_.beats_per_cycle_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Figure8Params::mutable_beats_per_cycle() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_beats_per_cycle();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.Figure8Params.beats_per_cycle)
  return _msg;
}
inline void Figure8Params::set_allocated_beats_per_cycle(::PROTOBUF_NAMESPACE_ID::DoubleValue* beats_per_cycle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.beats_per_cycle_);
  }
  if (beats_per_cycle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(beats_per_cycle));
    if (message_arena != submessage_arena) {
      beats_per_cycle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, beats_per_cycle, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.beats_per_cycle_ = beats_per_cycle;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.Figure8Params.beats_per_cycle)
}

// -------------------------------------------------------------------

// GripperParams

// .google.protobuf.DoubleValue angle = 1;
inline bool GripperParams::_internal_has_angle() const {
  return this != internal_default_instance() && _impl_.angle_ != nullptr;
}
inline bool GripperParams::has_angle() const {
  return _internal_has_angle();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& GripperParams::_internal_angle() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.angle_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& GripperParams::angle() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.GripperParams.angle)
  return _internal_angle();
}
inline void GripperParams::unsafe_arena_set_allocated_angle(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* angle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angle_);
  }
  _impl_.angle_ = angle;
  if (angle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.GripperParams.angle)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GripperParams::release_angle() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.angle_;
  _impl_.angle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GripperParams::unsafe_arena_release_angle() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.GripperParams.angle)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.angle_;
  _impl_.angle_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GripperParams::_internal_mutable_angle() {
  
  if (_impl_.angle_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.angle_ = p;
  }
  return _impl_.angle_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GripperParams::mutable_angle() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_angle();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.GripperParams.angle)
  return _msg;
}
inline void GripperParams::set_allocated_angle(::PROTOBUF_NAMESPACE_ID::DoubleValue* angle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angle_);
  }
  if (angle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angle));
    if (message_arena != submessage_arena) {
      angle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angle, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.angle_ = angle;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.GripperParams.angle)
}

// .google.protobuf.DoubleValue speed = 2;
inline bool GripperParams::_internal_has_speed() const {
  return this != internal_default_instance() && _impl_.speed_ != nullptr;
}
inline bool GripperParams::has_speed() const {
  return _internal_has_speed();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& GripperParams::_internal_speed() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.speed_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& GripperParams::speed() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.GripperParams.speed)
  return _internal_speed();
}
inline void GripperParams::unsafe_arena_set_allocated_speed(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* speed) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.speed_);
  }
  _impl_.speed_ = speed;
  if (speed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.GripperParams.speed)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GripperParams::release_speed() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.speed_;
  _impl_.speed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GripperParams::unsafe_arena_release_speed() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.GripperParams.speed)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.speed_;
  _impl_.speed_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GripperParams::_internal_mutable_speed() {
  
  if (_impl_.speed_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.speed_ = p;
  }
  return _impl_.speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GripperParams::mutable_speed() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_speed();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.GripperParams.speed)
  return _msg;
}
inline void GripperParams::set_allocated_speed(::PROTOBUF_NAMESPACE_ID::DoubleValue* speed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.speed_);
  }
  if (speed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed));
    if (message_arena != submessage_arena) {
      speed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.speed_ = speed;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.GripperParams.speed)
}

// -------------------------------------------------------------------

// KneelLegMoveParams

// .google.protobuf.DoubleValue hip_x = 1;
inline bool KneelLegMoveParams::_internal_has_hip_x() const {
  return this != internal_default_instance() && _impl_.hip_x_ != nullptr;
}
inline bool KneelLegMoveParams::has_hip_x() const {
  return _internal_has_hip_x();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& KneelLegMoveParams::_internal_hip_x() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.hip_x_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& KneelLegMoveParams::hip_x() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.KneelLegMoveParams.hip_x)
  return _internal_hip_x();
}
inline void KneelLegMoveParams::unsafe_arena_set_allocated_hip_x(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* hip_x) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hip_x_);
  }
  _impl_.hip_x_ = hip_x;
  if (hip_x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.KneelLegMoveParams.hip_x)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMoveParams::release_hip_x() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.hip_x_;
  _impl_.hip_x_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMoveParams::unsafe_arena_release_hip_x() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.KneelLegMoveParams.hip_x)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.hip_x_;
  _impl_.hip_x_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMoveParams::_internal_mutable_hip_x() {
  
  if (_impl_.hip_x_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.hip_x_ = p;
  }
  return _impl_.hip_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMoveParams::mutable_hip_x() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_hip_x();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.KneelLegMoveParams.hip_x)
  return _msg;
}
inline void KneelLegMoveParams::set_allocated_hip_x(::PROTOBUF_NAMESPACE_ID::DoubleValue* hip_x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hip_x_);
  }
  if (hip_x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hip_x));
    if (message_arena != submessage_arena) {
      hip_x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hip_x, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.hip_x_ = hip_x;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.KneelLegMoveParams.hip_x)
}

// .google.protobuf.DoubleValue hip_y = 2;
inline bool KneelLegMoveParams::_internal_has_hip_y() const {
  return this != internal_default_instance() && _impl_.hip_y_ != nullptr;
}
inline bool KneelLegMoveParams::has_hip_y() const {
  return _internal_has_hip_y();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& KneelLegMoveParams::_internal_hip_y() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.hip_y_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& KneelLegMoveParams::hip_y() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.KneelLegMoveParams.hip_y)
  return _internal_hip_y();
}
inline void KneelLegMoveParams::unsafe_arena_set_allocated_hip_y(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* hip_y) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hip_y_);
  }
  _impl_.hip_y_ = hip_y;
  if (hip_y) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.KneelLegMoveParams.hip_y)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMoveParams::release_hip_y() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.hip_y_;
  _impl_.hip_y_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMoveParams::unsafe_arena_release_hip_y() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.KneelLegMoveParams.hip_y)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.hip_y_;
  _impl_.hip_y_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMoveParams::_internal_mutable_hip_y() {
  
  if (_impl_.hip_y_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.hip_y_ = p;
  }
  return _impl_.hip_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMoveParams::mutable_hip_y() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_hip_y();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.KneelLegMoveParams.hip_y)
  return _msg;
}
inline void KneelLegMoveParams::set_allocated_hip_y(::PROTOBUF_NAMESPACE_ID::DoubleValue* hip_y) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hip_y_);
  }
  if (hip_y) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hip_y));
    if (message_arena != submessage_arena) {
      hip_y = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hip_y, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.hip_y_ = hip_y;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.KneelLegMoveParams.hip_y)
}

// .google.protobuf.DoubleValue knee = 3;
inline bool KneelLegMoveParams::_internal_has_knee() const {
  return this != internal_default_instance() && _impl_.knee_ != nullptr;
}
inline bool KneelLegMoveParams::has_knee() const {
  return _internal_has_knee();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& KneelLegMoveParams::_internal_knee() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.knee_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& KneelLegMoveParams::knee() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.KneelLegMoveParams.knee)
  return _internal_knee();
}
inline void KneelLegMoveParams::unsafe_arena_set_allocated_knee(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* knee) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.knee_);
  }
  _impl_.knee_ = knee;
  if (knee) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.KneelLegMoveParams.knee)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMoveParams::release_knee() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.knee_;
  _impl_.knee_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMoveParams::unsafe_arena_release_knee() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.KneelLegMoveParams.knee)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.knee_;
  _impl_.knee_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMoveParams::_internal_mutable_knee() {
  
  if (_impl_.knee_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.knee_ = p;
  }
  return _impl_.knee_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMoveParams::mutable_knee() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_knee();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.KneelLegMoveParams.knee)
  return _msg;
}
inline void KneelLegMoveParams::set_allocated_knee(::PROTOBUF_NAMESPACE_ID::DoubleValue* knee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.knee_);
  }
  if (knee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(knee));
    if (message_arena != submessage_arena) {
      knee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, knee, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.knee_ = knee;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.KneelLegMoveParams.knee)
}

// .google.protobuf.BoolValue mirror = 4;
inline bool KneelLegMoveParams::_internal_has_mirror() const {
  return this != internal_default_instance() && _impl_.mirror_ != nullptr;
}
inline bool KneelLegMoveParams::has_mirror() const {
  return _internal_has_mirror();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& KneelLegMoveParams::_internal_mirror() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.mirror_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& KneelLegMoveParams::mirror() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.KneelLegMoveParams.mirror)
  return _internal_mirror();
}
inline void KneelLegMoveParams::unsafe_arena_set_allocated_mirror(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* mirror) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mirror_);
  }
  _impl_.mirror_ = mirror;
  if (mirror) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.KneelLegMoveParams.mirror)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* KneelLegMoveParams::release_mirror() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.mirror_;
  _impl_.mirror_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* KneelLegMoveParams::unsafe_arena_release_mirror() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.KneelLegMoveParams.mirror)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.mirror_;
  _impl_.mirror_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* KneelLegMoveParams::_internal_mutable_mirror() {
  
  if (_impl_.mirror_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.mirror_ = p;
  }
  return _impl_.mirror_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* KneelLegMoveParams::mutable_mirror() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_mirror();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.KneelLegMoveParams.mirror)
  return _msg;
}
inline void KneelLegMoveParams::set_allocated_mirror(::PROTOBUF_NAMESPACE_ID::BoolValue* mirror) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mirror_);
  }
  if (mirror) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mirror));
    if (message_arena != submessage_arena) {
      mirror = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mirror, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mirror_ = mirror;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.KneelLegMoveParams.mirror)
}

// .bosdyn.api.spot.Easing easing = 5;
inline void KneelLegMoveParams::clear_easing() {
  _impl_.easing_ = 0;
}
inline ::bosdyn::api::spot::Easing KneelLegMoveParams::_internal_easing() const {
  return static_cast< ::bosdyn::api::spot::Easing >(_impl_.easing_);
}
inline ::bosdyn::api::spot::Easing KneelLegMoveParams::easing() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.KneelLegMoveParams.easing)
  return _internal_easing();
}
inline void KneelLegMoveParams::_internal_set_easing(::bosdyn::api::spot::Easing value) {
  
  _impl_.easing_ = value;
}
inline void KneelLegMoveParams::set_easing(::bosdyn::api::spot::Easing value) {
  _internal_set_easing(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot.KneelLegMoveParams.easing)
}

// -------------------------------------------------------------------

// KneelLegMove2Params

// .google.protobuf.DoubleValue left_hip_x = 1;
inline bool KneelLegMove2Params::_internal_has_left_hip_x() const {
  return this != internal_default_instance() && _impl_.left_hip_x_ != nullptr;
}
inline bool KneelLegMove2Params::has_left_hip_x() const {
  return _internal_has_left_hip_x();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& KneelLegMove2Params::_internal_left_hip_x() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.left_hip_x_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& KneelLegMove2Params::left_hip_x() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.KneelLegMove2Params.left_hip_x)
  return _internal_left_hip_x();
}
inline void KneelLegMove2Params::unsafe_arena_set_allocated_left_hip_x(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* left_hip_x) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.left_hip_x_);
  }
  _impl_.left_hip_x_ = left_hip_x;
  if (left_hip_x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.KneelLegMove2Params.left_hip_x)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMove2Params::release_left_hip_x() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.left_hip_x_;
  _impl_.left_hip_x_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMove2Params::unsafe_arena_release_left_hip_x() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.KneelLegMove2Params.left_hip_x)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.left_hip_x_;
  _impl_.left_hip_x_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMove2Params::_internal_mutable_left_hip_x() {
  
  if (_impl_.left_hip_x_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.left_hip_x_ = p;
  }
  return _impl_.left_hip_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMove2Params::mutable_left_hip_x() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_left_hip_x();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.KneelLegMove2Params.left_hip_x)
  return _msg;
}
inline void KneelLegMove2Params::set_allocated_left_hip_x(::PROTOBUF_NAMESPACE_ID::DoubleValue* left_hip_x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.left_hip_x_);
  }
  if (left_hip_x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_hip_x));
    if (message_arena != submessage_arena) {
      left_hip_x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left_hip_x, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.left_hip_x_ = left_hip_x;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.KneelLegMove2Params.left_hip_x)
}

// .google.protobuf.DoubleValue left_hip_y = 2;
inline bool KneelLegMove2Params::_internal_has_left_hip_y() const {
  return this != internal_default_instance() && _impl_.left_hip_y_ != nullptr;
}
inline bool KneelLegMove2Params::has_left_hip_y() const {
  return _internal_has_left_hip_y();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& KneelLegMove2Params::_internal_left_hip_y() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.left_hip_y_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& KneelLegMove2Params::left_hip_y() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.KneelLegMove2Params.left_hip_y)
  return _internal_left_hip_y();
}
inline void KneelLegMove2Params::unsafe_arena_set_allocated_left_hip_y(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* left_hip_y) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.left_hip_y_);
  }
  _impl_.left_hip_y_ = left_hip_y;
  if (left_hip_y) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.KneelLegMove2Params.left_hip_y)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMove2Params::release_left_hip_y() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.left_hip_y_;
  _impl_.left_hip_y_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMove2Params::unsafe_arena_release_left_hip_y() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.KneelLegMove2Params.left_hip_y)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.left_hip_y_;
  _impl_.left_hip_y_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMove2Params::_internal_mutable_left_hip_y() {
  
  if (_impl_.left_hip_y_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.left_hip_y_ = p;
  }
  return _impl_.left_hip_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMove2Params::mutable_left_hip_y() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_left_hip_y();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.KneelLegMove2Params.left_hip_y)
  return _msg;
}
inline void KneelLegMove2Params::set_allocated_left_hip_y(::PROTOBUF_NAMESPACE_ID::DoubleValue* left_hip_y) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.left_hip_y_);
  }
  if (left_hip_y) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_hip_y));
    if (message_arena != submessage_arena) {
      left_hip_y = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left_hip_y, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.left_hip_y_ = left_hip_y;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.KneelLegMove2Params.left_hip_y)
}

// .google.protobuf.DoubleValue left_knee = 3;
inline bool KneelLegMove2Params::_internal_has_left_knee() const {
  return this != internal_default_instance() && _impl_.left_knee_ != nullptr;
}
inline bool KneelLegMove2Params::has_left_knee() const {
  return _internal_has_left_knee();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& KneelLegMove2Params::_internal_left_knee() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.left_knee_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& KneelLegMove2Params::left_knee() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.KneelLegMove2Params.left_knee)
  return _internal_left_knee();
}
inline void KneelLegMove2Params::unsafe_arena_set_allocated_left_knee(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* left_knee) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.left_knee_);
  }
  _impl_.left_knee_ = left_knee;
  if (left_knee) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.KneelLegMove2Params.left_knee)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMove2Params::release_left_knee() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.left_knee_;
  _impl_.left_knee_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMove2Params::unsafe_arena_release_left_knee() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.KneelLegMove2Params.left_knee)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.left_knee_;
  _impl_.left_knee_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMove2Params::_internal_mutable_left_knee() {
  
  if (_impl_.left_knee_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.left_knee_ = p;
  }
  return _impl_.left_knee_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMove2Params::mutable_left_knee() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_left_knee();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.KneelLegMove2Params.left_knee)
  return _msg;
}
inline void KneelLegMove2Params::set_allocated_left_knee(::PROTOBUF_NAMESPACE_ID::DoubleValue* left_knee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.left_knee_);
  }
  if (left_knee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_knee));
    if (message_arena != submessage_arena) {
      left_knee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left_knee, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.left_knee_ = left_knee;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.KneelLegMove2Params.left_knee)
}

// .google.protobuf.DoubleValue right_hip_x = 4;
inline bool KneelLegMove2Params::_internal_has_right_hip_x() const {
  return this != internal_default_instance() && _impl_.right_hip_x_ != nullptr;
}
inline bool KneelLegMove2Params::has_right_hip_x() const {
  return _internal_has_right_hip_x();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& KneelLegMove2Params::_internal_right_hip_x() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.right_hip_x_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& KneelLegMove2Params::right_hip_x() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.KneelLegMove2Params.right_hip_x)
  return _internal_right_hip_x();
}
inline void KneelLegMove2Params::unsafe_arena_set_allocated_right_hip_x(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* right_hip_x) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.right_hip_x_);
  }
  _impl_.right_hip_x_ = right_hip_x;
  if (right_hip_x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.KneelLegMove2Params.right_hip_x)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMove2Params::release_right_hip_x() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.right_hip_x_;
  _impl_.right_hip_x_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMove2Params::unsafe_arena_release_right_hip_x() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.KneelLegMove2Params.right_hip_x)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.right_hip_x_;
  _impl_.right_hip_x_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMove2Params::_internal_mutable_right_hip_x() {
  
  if (_impl_.right_hip_x_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.right_hip_x_ = p;
  }
  return _impl_.right_hip_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMove2Params::mutable_right_hip_x() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_right_hip_x();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.KneelLegMove2Params.right_hip_x)
  return _msg;
}
inline void KneelLegMove2Params::set_allocated_right_hip_x(::PROTOBUF_NAMESPACE_ID::DoubleValue* right_hip_x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.right_hip_x_);
  }
  if (right_hip_x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_hip_x));
    if (message_arena != submessage_arena) {
      right_hip_x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right_hip_x, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.right_hip_x_ = right_hip_x;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.KneelLegMove2Params.right_hip_x)
}

// .google.protobuf.DoubleValue right_hip_y = 5;
inline bool KneelLegMove2Params::_internal_has_right_hip_y() const {
  return this != internal_default_instance() && _impl_.right_hip_y_ != nullptr;
}
inline bool KneelLegMove2Params::has_right_hip_y() const {
  return _internal_has_right_hip_y();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& KneelLegMove2Params::_internal_right_hip_y() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.right_hip_y_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& KneelLegMove2Params::right_hip_y() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.KneelLegMove2Params.right_hip_y)
  return _internal_right_hip_y();
}
inline void KneelLegMove2Params::unsafe_arena_set_allocated_right_hip_y(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* right_hip_y) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.right_hip_y_);
  }
  _impl_.right_hip_y_ = right_hip_y;
  if (right_hip_y) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.KneelLegMove2Params.right_hip_y)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMove2Params::release_right_hip_y() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.right_hip_y_;
  _impl_.right_hip_y_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMove2Params::unsafe_arena_release_right_hip_y() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.KneelLegMove2Params.right_hip_y)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.right_hip_y_;
  _impl_.right_hip_y_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMove2Params::_internal_mutable_right_hip_y() {
  
  if (_impl_.right_hip_y_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.right_hip_y_ = p;
  }
  return _impl_.right_hip_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMove2Params::mutable_right_hip_y() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_right_hip_y();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.KneelLegMove2Params.right_hip_y)
  return _msg;
}
inline void KneelLegMove2Params::set_allocated_right_hip_y(::PROTOBUF_NAMESPACE_ID::DoubleValue* right_hip_y) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.right_hip_y_);
  }
  if (right_hip_y) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_hip_y));
    if (message_arena != submessage_arena) {
      right_hip_y = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right_hip_y, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.right_hip_y_ = right_hip_y;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.KneelLegMove2Params.right_hip_y)
}

// .google.protobuf.DoubleValue right_knee = 6;
inline bool KneelLegMove2Params::_internal_has_right_knee() const {
  return this != internal_default_instance() && _impl_.right_knee_ != nullptr;
}
inline bool KneelLegMove2Params::has_right_knee() const {
  return _internal_has_right_knee();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& KneelLegMove2Params::_internal_right_knee() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.right_knee_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& KneelLegMove2Params::right_knee() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.KneelLegMove2Params.right_knee)
  return _internal_right_knee();
}
inline void KneelLegMove2Params::unsafe_arena_set_allocated_right_knee(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* right_knee) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.right_knee_);
  }
  _impl_.right_knee_ = right_knee;
  if (right_knee) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.KneelLegMove2Params.right_knee)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMove2Params::release_right_knee() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.right_knee_;
  _impl_.right_knee_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMove2Params::unsafe_arena_release_right_knee() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.KneelLegMove2Params.right_knee)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.right_knee_;
  _impl_.right_knee_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMove2Params::_internal_mutable_right_knee() {
  
  if (_impl_.right_knee_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.right_knee_ = p;
  }
  return _impl_.right_knee_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelLegMove2Params::mutable_right_knee() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_right_knee();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.KneelLegMove2Params.right_knee)
  return _msg;
}
inline void KneelLegMove2Params::set_allocated_right_knee(::PROTOBUF_NAMESPACE_ID::DoubleValue* right_knee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.right_knee_);
  }
  if (right_knee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_knee));
    if (message_arena != submessage_arena) {
      right_knee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right_knee, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.right_knee_ = right_knee;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.KneelLegMove2Params.right_knee)
}

// .bosdyn.api.spot.Easing easing = 7;
inline void KneelLegMove2Params::clear_easing() {
  _impl_.easing_ = 0;
}
inline ::bosdyn::api::spot::Easing KneelLegMove2Params::_internal_easing() const {
  return static_cast< ::bosdyn::api::spot::Easing >(_impl_.easing_);
}
inline ::bosdyn::api::spot::Easing KneelLegMove2Params::easing() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.KneelLegMove2Params.easing)
  return _internal_easing();
}
inline void KneelLegMove2Params::_internal_set_easing(::bosdyn::api::spot::Easing value) {
  
  _impl_.easing_ = value;
}
inline void KneelLegMove2Params::set_easing(::bosdyn::api::spot::Easing value) {
  _internal_set_easing(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot.KneelLegMove2Params.easing)
}

// .google.protobuf.BoolValue link_to_next = 8;
inline bool KneelLegMove2Params::_internal_has_link_to_next() const {
  return this != internal_default_instance() && _impl_.link_to_next_ != nullptr;
}
inline bool KneelLegMove2Params::has_link_to_next() const {
  return _internal_has_link_to_next();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& KneelLegMove2Params::_internal_link_to_next() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.link_to_next_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& KneelLegMove2Params::link_to_next() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.KneelLegMove2Params.link_to_next)
  return _internal_link_to_next();
}
inline void KneelLegMove2Params::unsafe_arena_set_allocated_link_to_next(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* link_to_next) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.link_to_next_);
  }
  _impl_.link_to_next_ = link_to_next;
  if (link_to_next) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.KneelLegMove2Params.link_to_next)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* KneelLegMove2Params::release_link_to_next() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.link_to_next_;
  _impl_.link_to_next_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* KneelLegMove2Params::unsafe_arena_release_link_to_next() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.KneelLegMove2Params.link_to_next)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.link_to_next_;
  _impl_.link_to_next_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* KneelLegMove2Params::_internal_mutable_link_to_next() {
  
  if (_impl_.link_to_next_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.link_to_next_ = p;
  }
  return _impl_.link_to_next_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* KneelLegMove2Params::mutable_link_to_next() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_link_to_next();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.KneelLegMove2Params.link_to_next)
  return _msg;
}
inline void KneelLegMove2Params::set_allocated_link_to_next(::PROTOBUF_NAMESPACE_ID::BoolValue* link_to_next) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.link_to_next_);
  }
  if (link_to_next) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(link_to_next));
    if (message_arena != submessage_arena) {
      link_to_next = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link_to_next, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.link_to_next_ = link_to_next;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.KneelLegMove2Params.link_to_next)
}

// -------------------------------------------------------------------

// RunningManParams

// .bosdyn.api.Vec2Value velocity = 1;
inline bool RunningManParams::_internal_has_velocity() const {
  return this != internal_default_instance() && _impl_.velocity_ != nullptr;
}
inline bool RunningManParams::has_velocity() const {
  return _internal_has_velocity();
}
inline const ::bosdyn::api::Vec2Value& RunningManParams::_internal_velocity() const {
  const ::bosdyn::api::Vec2Value* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec2Value&>(
      ::bosdyn::api::_Vec2Value_default_instance_);
}
inline const ::bosdyn::api::Vec2Value& RunningManParams::velocity() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.RunningManParams.velocity)
  return _internal_velocity();
}
inline void RunningManParams::unsafe_arena_set_allocated_velocity(
    ::bosdyn::api::Vec2Value* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.RunningManParams.velocity)
}
inline ::bosdyn::api::Vec2Value* RunningManParams::release_velocity() {
  
  ::bosdyn::api::Vec2Value* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec2Value* RunningManParams::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.RunningManParams.velocity)
  
  ::bosdyn::api::Vec2Value* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec2Value* RunningManParams::_internal_mutable_velocity() {
  
  if (_impl_.velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec2Value>(GetArenaForAllocation());
    _impl_.velocity_ = p;
  }
  return _impl_.velocity_;
}
inline ::bosdyn::api::Vec2Value* RunningManParams::mutable_velocity() {
  ::bosdyn::api::Vec2Value* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.RunningManParams.velocity)
  return _msg;
}
inline void RunningManParams::set_allocated_velocity(::bosdyn::api::Vec2Value* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity));
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.RunningManParams.velocity)
}

// .google.protobuf.DoubleValue swing_height = 2;
inline bool RunningManParams::_internal_has_swing_height() const {
  return this != internal_default_instance() && _impl_.swing_height_ != nullptr;
}
inline bool RunningManParams::has_swing_height() const {
  return _internal_has_swing_height();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& RunningManParams::_internal_swing_height() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.swing_height_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& RunningManParams::swing_height() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.RunningManParams.swing_height)
  return _internal_swing_height();
}
inline void RunningManParams::unsafe_arena_set_allocated_swing_height(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swing_height_);
  }
  _impl_.swing_height_ = swing_height;
  if (swing_height) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.RunningManParams.swing_height)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* RunningManParams::release_swing_height() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.swing_height_;
  _impl_.swing_height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* RunningManParams::unsafe_arena_release_swing_height() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.RunningManParams.swing_height)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.swing_height_;
  _impl_.swing_height_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* RunningManParams::_internal_mutable_swing_height() {
  
  if (_impl_.swing_height_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.swing_height_ = p;
  }
  return _impl_.swing_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* RunningManParams::mutable_swing_height() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_swing_height();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.RunningManParams.swing_height)
  return _msg;
}
inline void RunningManParams::set_allocated_swing_height(::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swing_height_);
  }
  if (swing_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swing_height));
    if (message_arena != submessage_arena) {
      swing_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swing_height, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swing_height_ = swing_height;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.RunningManParams.swing_height)
}

// .google.protobuf.DoubleValue spread = 3;
inline bool RunningManParams::_internal_has_spread() const {
  return this != internal_default_instance() && _impl_.spread_ != nullptr;
}
inline bool RunningManParams::has_spread() const {
  return _internal_has_spread();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& RunningManParams::_internal_spread() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.spread_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& RunningManParams::spread() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.RunningManParams.spread)
  return _internal_spread();
}
inline void RunningManParams::unsafe_arena_set_allocated_spread(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* spread) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spread_);
  }
  _impl_.spread_ = spread;
  if (spread) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.RunningManParams.spread)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* RunningManParams::release_spread() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.spread_;
  _impl_.spread_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* RunningManParams::unsafe_arena_release_spread() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.RunningManParams.spread)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.spread_;
  _impl_.spread_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* RunningManParams::_internal_mutable_spread() {
  
  if (_impl_.spread_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.spread_ = p;
  }
  return _impl_.spread_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* RunningManParams::mutable_spread() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_spread();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.RunningManParams.spread)
  return _msg;
}
inline void RunningManParams::set_allocated_spread(::PROTOBUF_NAMESPACE_ID::DoubleValue* spread) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spread_);
  }
  if (spread) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spread));
    if (message_arena != submessage_arena) {
      spread = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spread, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.spread_ = spread;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.RunningManParams.spread)
}

// .google.protobuf.BoolValue reverse = 4;
inline bool RunningManParams::_internal_has_reverse() const {
  return this != internal_default_instance() && _impl_.reverse_ != nullptr;
}
inline bool RunningManParams::has_reverse() const {
  return _internal_has_reverse();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& RunningManParams::_internal_reverse() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.reverse_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& RunningManParams::reverse() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.RunningManParams.reverse)
  return _internal_reverse();
}
inline void RunningManParams::unsafe_arena_set_allocated_reverse(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* reverse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reverse_);
  }
  _impl_.reverse_ = reverse;
  if (reverse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.RunningManParams.reverse)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* RunningManParams::release_reverse() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.reverse_;
  _impl_.reverse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* RunningManParams::unsafe_arena_release_reverse() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.RunningManParams.reverse)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.reverse_;
  _impl_.reverse_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* RunningManParams::_internal_mutable_reverse() {
  
  if (_impl_.reverse_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.reverse_ = p;
  }
  return _impl_.reverse_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* RunningManParams::mutable_reverse() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_reverse();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.RunningManParams.reverse)
  return _msg;
}
inline void RunningManParams::set_allocated_reverse(::PROTOBUF_NAMESPACE_ID::BoolValue* reverse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reverse_);
  }
  if (reverse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reverse));
    if (message_arena != submessage_arena) {
      reverse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reverse, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reverse_ = reverse;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.RunningManParams.reverse)
}

// .google.protobuf.Int32Value pre_move_cycles = 5;
inline bool RunningManParams::_internal_has_pre_move_cycles() const {
  return this != internal_default_instance() && _impl_.pre_move_cycles_ != nullptr;
}
inline bool RunningManParams::has_pre_move_cycles() const {
  return _internal_has_pre_move_cycles();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& RunningManParams::_internal_pre_move_cycles() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.pre_move_cycles_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& RunningManParams::pre_move_cycles() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.RunningManParams.pre_move_cycles)
  return _internal_pre_move_cycles();
}
inline void RunningManParams::unsafe_arena_set_allocated_pre_move_cycles(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* pre_move_cycles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pre_move_cycles_);
  }
  _impl_.pre_move_cycles_ = pre_move_cycles;
  if (pre_move_cycles) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.RunningManParams.pre_move_cycles)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* RunningManParams::release_pre_move_cycles() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.pre_move_cycles_;
  _impl_.pre_move_cycles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* RunningManParams::unsafe_arena_release_pre_move_cycles() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.RunningManParams.pre_move_cycles)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.pre_move_cycles_;
  _impl_.pre_move_cycles_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* RunningManParams::_internal_mutable_pre_move_cycles() {
  
  if (_impl_.pre_move_cycles_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.pre_move_cycles_ = p;
  }
  return _impl_.pre_move_cycles_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* RunningManParams::mutable_pre_move_cycles() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_pre_move_cycles();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.RunningManParams.pre_move_cycles)
  return _msg;
}
inline void RunningManParams::set_allocated_pre_move_cycles(::PROTOBUF_NAMESPACE_ID::Int32Value* pre_move_cycles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pre_move_cycles_);
  }
  if (pre_move_cycles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pre_move_cycles));
    if (message_arena != submessage_arena) {
      pre_move_cycles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pre_move_cycles, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pre_move_cycles_ = pre_move_cycles;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.RunningManParams.pre_move_cycles)
}

// .google.protobuf.DoubleValue speed_multiplier = 6;
inline bool RunningManParams::_internal_has_speed_multiplier() const {
  return this != internal_default_instance() && _impl_.speed_multiplier_ != nullptr;
}
inline bool RunningManParams::has_speed_multiplier() const {
  return _internal_has_speed_multiplier();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& RunningManParams::_internal_speed_multiplier() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.speed_multiplier_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& RunningManParams::speed_multiplier() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.RunningManParams.speed_multiplier)
  return _internal_speed_multiplier();
}
inline void RunningManParams::unsafe_arena_set_allocated_speed_multiplier(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* speed_multiplier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.speed_multiplier_);
  }
  _impl_.speed_multiplier_ = speed_multiplier;
  if (speed_multiplier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.RunningManParams.speed_multiplier)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* RunningManParams::release_speed_multiplier() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.speed_multiplier_;
  _impl_.speed_multiplier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* RunningManParams::unsafe_arena_release_speed_multiplier() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.RunningManParams.speed_multiplier)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.speed_multiplier_;
  _impl_.speed_multiplier_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* RunningManParams::_internal_mutable_speed_multiplier() {
  
  if (_impl_.speed_multiplier_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.speed_multiplier_ = p;
  }
  return _impl_.speed_multiplier_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* RunningManParams::mutable_speed_multiplier() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_speed_multiplier();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.RunningManParams.speed_multiplier)
  return _msg;
}
inline void RunningManParams::set_allocated_speed_multiplier(::PROTOBUF_NAMESPACE_ID::DoubleValue* speed_multiplier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.speed_multiplier_);
  }
  if (speed_multiplier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_multiplier));
    if (message_arena != submessage_arena) {
      speed_multiplier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed_multiplier, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.speed_multiplier_ = speed_multiplier;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.RunningManParams.speed_multiplier)
}

// .google.protobuf.DoubleValue duty_cycle = 7;
inline bool RunningManParams::_internal_has_duty_cycle() const {
  return this != internal_default_instance() && _impl_.duty_cycle_ != nullptr;
}
inline bool RunningManParams::has_duty_cycle() const {
  return _internal_has_duty_cycle();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& RunningManParams::_internal_duty_cycle() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.duty_cycle_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& RunningManParams::duty_cycle() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.RunningManParams.duty_cycle)
  return _internal_duty_cycle();
}
inline void RunningManParams::unsafe_arena_set_allocated_duty_cycle(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* duty_cycle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.duty_cycle_);
  }
  _impl_.duty_cycle_ = duty_cycle;
  if (duty_cycle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.RunningManParams.duty_cycle)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* RunningManParams::release_duty_cycle() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.duty_cycle_;
  _impl_.duty_cycle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* RunningManParams::unsafe_arena_release_duty_cycle() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.RunningManParams.duty_cycle)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.duty_cycle_;
  _impl_.duty_cycle_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* RunningManParams::_internal_mutable_duty_cycle() {
  
  if (_impl_.duty_cycle_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.duty_cycle_ = p;
  }
  return _impl_.duty_cycle_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* RunningManParams::mutable_duty_cycle() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_duty_cycle();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.RunningManParams.duty_cycle)
  return _msg;
}
inline void RunningManParams::set_allocated_duty_cycle(::PROTOBUF_NAMESPACE_ID::DoubleValue* duty_cycle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.duty_cycle_);
  }
  if (duty_cycle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duty_cycle));
    if (message_arena != submessage_arena) {
      duty_cycle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duty_cycle, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.duty_cycle_ = duty_cycle;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.RunningManParams.duty_cycle)
}

// .google.protobuf.DoubleValue com_height = 8;
inline bool RunningManParams::_internal_has_com_height() const {
  return this != internal_default_instance() && _impl_.com_height_ != nullptr;
}
inline bool RunningManParams::has_com_height() const {
  return _internal_has_com_height();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& RunningManParams::_internal_com_height() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.com_height_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& RunningManParams::com_height() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.RunningManParams.com_height)
  return _internal_com_height();
}
inline void RunningManParams::unsafe_arena_set_allocated_com_height(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* com_height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.com_height_);
  }
  _impl_.com_height_ = com_height;
  if (com_height) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.RunningManParams.com_height)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* RunningManParams::release_com_height() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.com_height_;
  _impl_.com_height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* RunningManParams::unsafe_arena_release_com_height() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.RunningManParams.com_height)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.com_height_;
  _impl_.com_height_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* RunningManParams::_internal_mutable_com_height() {
  
  if (_impl_.com_height_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.com_height_ = p;
  }
  return _impl_.com_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* RunningManParams::mutable_com_height() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_com_height();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.RunningManParams.com_height)
  return _msg;
}
inline void RunningManParams::set_allocated_com_height(::PROTOBUF_NAMESPACE_ID::DoubleValue* com_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.com_height_);
  }
  if (com_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(com_height));
    if (message_arena != submessage_arena) {
      com_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, com_height, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.com_height_ = com_height;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.RunningManParams.com_height)
}

// -------------------------------------------------------------------

// HopParams

// .bosdyn.api.Vec2Value velocity = 1;
inline bool HopParams::_internal_has_velocity() const {
  return this != internal_default_instance() && _impl_.velocity_ != nullptr;
}
inline bool HopParams::has_velocity() const {
  return _internal_has_velocity();
}
inline const ::bosdyn::api::Vec2Value& HopParams::_internal_velocity() const {
  const ::bosdyn::api::Vec2Value* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec2Value&>(
      ::bosdyn::api::_Vec2Value_default_instance_);
}
inline const ::bosdyn::api::Vec2Value& HopParams::velocity() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.HopParams.velocity)
  return _internal_velocity();
}
inline void HopParams::unsafe_arena_set_allocated_velocity(
    ::bosdyn::api::Vec2Value* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.HopParams.velocity)
}
inline ::bosdyn::api::Vec2Value* HopParams::release_velocity() {
  
  ::bosdyn::api::Vec2Value* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec2Value* HopParams::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.HopParams.velocity)
  
  ::bosdyn::api::Vec2Value* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec2Value* HopParams::_internal_mutable_velocity() {
  
  if (_impl_.velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec2Value>(GetArenaForAllocation());
    _impl_.velocity_ = p;
  }
  return _impl_.velocity_;
}
inline ::bosdyn::api::Vec2Value* HopParams::mutable_velocity() {
  ::bosdyn::api::Vec2Value* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.HopParams.velocity)
  return _msg;
}
inline void HopParams::set_allocated_velocity(::bosdyn::api::Vec2Value* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity));
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.HopParams.velocity)
}

// .google.protobuf.DoubleValue yaw_rate = 2;
inline bool HopParams::_internal_has_yaw_rate() const {
  return this != internal_default_instance() && _impl_.yaw_rate_ != nullptr;
}
inline bool HopParams::has_yaw_rate() const {
  return _internal_has_yaw_rate();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& HopParams::_internal_yaw_rate() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.yaw_rate_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& HopParams::yaw_rate() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.HopParams.yaw_rate)
  return _internal_yaw_rate();
}
inline void HopParams::unsafe_arena_set_allocated_yaw_rate(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw_rate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yaw_rate_);
  }
  _impl_.yaw_rate_ = yaw_rate;
  if (yaw_rate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.HopParams.yaw_rate)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* HopParams::release_yaw_rate() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.yaw_rate_;
  _impl_.yaw_rate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* HopParams::unsafe_arena_release_yaw_rate() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.HopParams.yaw_rate)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.yaw_rate_;
  _impl_.yaw_rate_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* HopParams::_internal_mutable_yaw_rate() {
  
  if (_impl_.yaw_rate_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.yaw_rate_ = p;
  }
  return _impl_.yaw_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* HopParams::mutable_yaw_rate() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_yaw_rate();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.HopParams.yaw_rate)
  return _msg;
}
inline void HopParams::set_allocated_yaw_rate(::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yaw_rate_);
  }
  if (yaw_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(yaw_rate));
    if (message_arena != submessage_arena) {
      yaw_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yaw_rate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.yaw_rate_ = yaw_rate;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.HopParams.yaw_rate)
}

// .google.protobuf.DoubleValue stand_time = 3;
inline bool HopParams::_internal_has_stand_time() const {
  return this != internal_default_instance() && _impl_.stand_time_ != nullptr;
}
inline bool HopParams::has_stand_time() const {
  return _internal_has_stand_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& HopParams::_internal_stand_time() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.stand_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& HopParams::stand_time() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.HopParams.stand_time)
  return _internal_stand_time();
}
inline void HopParams::unsafe_arena_set_allocated_stand_time(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* stand_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stand_time_);
  }
  _impl_.stand_time_ = stand_time;
  if (stand_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.HopParams.stand_time)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* HopParams::release_stand_time() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.stand_time_;
  _impl_.stand_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* HopParams::unsafe_arena_release_stand_time() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.HopParams.stand_time)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.stand_time_;
  _impl_.stand_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* HopParams::_internal_mutable_stand_time() {
  
  if (_impl_.stand_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.stand_time_ = p;
  }
  return _impl_.stand_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* HopParams::mutable_stand_time() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_stand_time();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.HopParams.stand_time)
  return _msg;
}
inline void HopParams::set_allocated_stand_time(::PROTOBUF_NAMESPACE_ID::DoubleValue* stand_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stand_time_);
  }
  if (stand_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stand_time));
    if (message_arena != submessage_arena) {
      stand_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stand_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stand_time_ = stand_time;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.HopParams.stand_time)
}

// -------------------------------------------------------------------

// RandomRotateParams

// .bosdyn.api.spot.EulerZYXValue amplitude = 1;
inline bool RandomRotateParams::_internal_has_amplitude() const {
  return this != internal_default_instance() && _impl_.amplitude_ != nullptr;
}
inline bool RandomRotateParams::has_amplitude() const {
  return _internal_has_amplitude();
}
inline void RandomRotateParams::clear_amplitude() {
  if (GetArenaForAllocation() == nullptr && _impl_.amplitude_ != nullptr) {
    delete _impl_.amplitude_;
  }
  _impl_.amplitude_ = nullptr;
}
inline const ::bosdyn::api::spot::EulerZYXValue& RandomRotateParams::_internal_amplitude() const {
  const ::bosdyn::api::spot::EulerZYXValue* p = _impl_.amplitude_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::spot::EulerZYXValue&>(
      ::bosdyn::api::spot::_EulerZYXValue_default_instance_);
}
inline const ::bosdyn::api::spot::EulerZYXValue& RandomRotateParams::amplitude() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.RandomRotateParams.amplitude)
  return _internal_amplitude();
}
inline void RandomRotateParams::unsafe_arena_set_allocated_amplitude(
    ::bosdyn::api::spot::EulerZYXValue* amplitude) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.amplitude_);
  }
  _impl_.amplitude_ = amplitude;
  if (amplitude) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.RandomRotateParams.amplitude)
}
inline ::bosdyn::api::spot::EulerZYXValue* RandomRotateParams::release_amplitude() {
  
  ::bosdyn::api::spot::EulerZYXValue* temp = _impl_.amplitude_;
  _impl_.amplitude_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::spot::EulerZYXValue* RandomRotateParams::unsafe_arena_release_amplitude() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.RandomRotateParams.amplitude)
  
  ::bosdyn::api::spot::EulerZYXValue* temp = _impl_.amplitude_;
  _impl_.amplitude_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot::EulerZYXValue* RandomRotateParams::_internal_mutable_amplitude() {
  
  if (_impl_.amplitude_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot::EulerZYXValue>(GetArenaForAllocation());
    _impl_.amplitude_ = p;
  }
  return _impl_.amplitude_;
}
inline ::bosdyn::api::spot::EulerZYXValue* RandomRotateParams::mutable_amplitude() {
  ::bosdyn::api::spot::EulerZYXValue* _msg = _internal_mutable_amplitude();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.RandomRotateParams.amplitude)
  return _msg;
}
inline void RandomRotateParams::set_allocated_amplitude(::bosdyn::api::spot::EulerZYXValue* amplitude) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.amplitude_;
  }
  if (amplitude) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(amplitude);
    if (message_arena != submessage_arena) {
      amplitude = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amplitude, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.amplitude_ = amplitude;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.RandomRotateParams.amplitude)
}

// .bosdyn.api.spot.EulerRateZYXValue speed = 2;
inline bool RandomRotateParams::_internal_has_speed() const {
  return this != internal_default_instance() && _impl_.speed_ != nullptr;
}
inline bool RandomRotateParams::has_speed() const {
  return _internal_has_speed();
}
inline void RandomRotateParams::clear_speed() {
  if (GetArenaForAllocation() == nullptr && _impl_.speed_ != nullptr) {
    delete _impl_.speed_;
  }
  _impl_.speed_ = nullptr;
}
inline const ::bosdyn::api::spot::EulerRateZYXValue& RandomRotateParams::_internal_speed() const {
  const ::bosdyn::api::spot::EulerRateZYXValue* p = _impl_.speed_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::spot::EulerRateZYXValue&>(
      ::bosdyn::api::spot::_EulerRateZYXValue_default_instance_);
}
inline const ::bosdyn::api::spot::EulerRateZYXValue& RandomRotateParams::speed() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.RandomRotateParams.speed)
  return _internal_speed();
}
inline void RandomRotateParams::unsafe_arena_set_allocated_speed(
    ::bosdyn::api::spot::EulerRateZYXValue* speed) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.speed_);
  }
  _impl_.speed_ = speed;
  if (speed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.RandomRotateParams.speed)
}
inline ::bosdyn::api::spot::EulerRateZYXValue* RandomRotateParams::release_speed() {
  
  ::bosdyn::api::spot::EulerRateZYXValue* temp = _impl_.speed_;
  _impl_.speed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::spot::EulerRateZYXValue* RandomRotateParams::unsafe_arena_release_speed() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.RandomRotateParams.speed)
  
  ::bosdyn::api::spot::EulerRateZYXValue* temp = _impl_.speed_;
  _impl_.speed_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot::EulerRateZYXValue* RandomRotateParams::_internal_mutable_speed() {
  
  if (_impl_.speed_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot::EulerRateZYXValue>(GetArenaForAllocation());
    _impl_.speed_ = p;
  }
  return _impl_.speed_;
}
inline ::bosdyn::api::spot::EulerRateZYXValue* RandomRotateParams::mutable_speed() {
  ::bosdyn::api::spot::EulerRateZYXValue* _msg = _internal_mutable_speed();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.RandomRotateParams.speed)
  return _msg;
}
inline void RandomRotateParams::set_allocated_speed(::bosdyn::api::spot::EulerRateZYXValue* speed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.speed_;
  }
  if (speed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(speed);
    if (message_arena != submessage_arena) {
      speed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.speed_ = speed;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.RandomRotateParams.speed)
}

// .google.protobuf.DoubleValue speed_variation = 3;
inline bool RandomRotateParams::_internal_has_speed_variation() const {
  return this != internal_default_instance() && _impl_.speed_variation_ != nullptr;
}
inline bool RandomRotateParams::has_speed_variation() const {
  return _internal_has_speed_variation();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& RandomRotateParams::_internal_speed_variation() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.speed_variation_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& RandomRotateParams::speed_variation() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.RandomRotateParams.speed_variation)
  return _internal_speed_variation();
}
inline void RandomRotateParams::unsafe_arena_set_allocated_speed_variation(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* speed_variation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.speed_variation_);
  }
  _impl_.speed_variation_ = speed_variation;
  if (speed_variation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.RandomRotateParams.speed_variation)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* RandomRotateParams::release_speed_variation() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.speed_variation_;
  _impl_.speed_variation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* RandomRotateParams::unsafe_arena_release_speed_variation() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.RandomRotateParams.speed_variation)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.speed_variation_;
  _impl_.speed_variation_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* RandomRotateParams::_internal_mutable_speed_variation() {
  
  if (_impl_.speed_variation_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.speed_variation_ = p;
  }
  return _impl_.speed_variation_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* RandomRotateParams::mutable_speed_variation() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_speed_variation();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.RandomRotateParams.speed_variation)
  return _msg;
}
inline void RandomRotateParams::set_allocated_speed_variation(::PROTOBUF_NAMESPACE_ID::DoubleValue* speed_variation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.speed_variation_);
  }
  if (speed_variation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_variation));
    if (message_arena != submessage_arena) {
      speed_variation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed_variation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.speed_variation_ = speed_variation;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.RandomRotateParams.speed_variation)
}

// .google.protobuf.Int32Value num_speed_tiers = 4;
inline bool RandomRotateParams::_internal_has_num_speed_tiers() const {
  return this != internal_default_instance() && _impl_.num_speed_tiers_ != nullptr;
}
inline bool RandomRotateParams::has_num_speed_tiers() const {
  return _internal_has_num_speed_tiers();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& RandomRotateParams::_internal_num_speed_tiers() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.num_speed_tiers_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& RandomRotateParams::num_speed_tiers() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.RandomRotateParams.num_speed_tiers)
  return _internal_num_speed_tiers();
}
inline void RandomRotateParams::unsafe_arena_set_allocated_num_speed_tiers(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* num_speed_tiers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.num_speed_tiers_);
  }
  _impl_.num_speed_tiers_ = num_speed_tiers;
  if (num_speed_tiers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.RandomRotateParams.num_speed_tiers)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* RandomRotateParams::release_num_speed_tiers() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.num_speed_tiers_;
  _impl_.num_speed_tiers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* RandomRotateParams::unsafe_arena_release_num_speed_tiers() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.RandomRotateParams.num_speed_tiers)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.num_speed_tiers_;
  _impl_.num_speed_tiers_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* RandomRotateParams::_internal_mutable_num_speed_tiers() {
  
  if (_impl_.num_speed_tiers_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.num_speed_tiers_ = p;
  }
  return _impl_.num_speed_tiers_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* RandomRotateParams::mutable_num_speed_tiers() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_num_speed_tiers();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.RandomRotateParams.num_speed_tiers)
  return _msg;
}
inline void RandomRotateParams::set_allocated_num_speed_tiers(::PROTOBUF_NAMESPACE_ID::Int32Value* num_speed_tiers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.num_speed_tiers_);
  }
  if (num_speed_tiers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(num_speed_tiers));
    if (message_arena != submessage_arena) {
      num_speed_tiers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, num_speed_tiers, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.num_speed_tiers_ = num_speed_tiers;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.RandomRotateParams.num_speed_tiers)
}

// .google.protobuf.DoubleValue tier_variation = 5;
inline bool RandomRotateParams::_internal_has_tier_variation() const {
  return this != internal_default_instance() && _impl_.tier_variation_ != nullptr;
}
inline bool RandomRotateParams::has_tier_variation() const {
  return _internal_has_tier_variation();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& RandomRotateParams::_internal_tier_variation() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.tier_variation_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& RandomRotateParams::tier_variation() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.RandomRotateParams.tier_variation)
  return _internal_tier_variation();
}
inline void RandomRotateParams::unsafe_arena_set_allocated_tier_variation(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* tier_variation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tier_variation_);
  }
  _impl_.tier_variation_ = tier_variation;
  if (tier_variation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.RandomRotateParams.tier_variation)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* RandomRotateParams::release_tier_variation() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.tier_variation_;
  _impl_.tier_variation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* RandomRotateParams::unsafe_arena_release_tier_variation() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.RandomRotateParams.tier_variation)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.tier_variation_;
  _impl_.tier_variation_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* RandomRotateParams::_internal_mutable_tier_variation() {
  
  if (_impl_.tier_variation_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.tier_variation_ = p;
  }
  return _impl_.tier_variation_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* RandomRotateParams::mutable_tier_variation() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_tier_variation();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.RandomRotateParams.tier_variation)
  return _msg;
}
inline void RandomRotateParams::set_allocated_tier_variation(::PROTOBUF_NAMESPACE_ID::DoubleValue* tier_variation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tier_variation_);
  }
  if (tier_variation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tier_variation));
    if (message_arena != submessage_arena) {
      tier_variation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tier_variation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tier_variation_ = tier_variation;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.RandomRotateParams.tier_variation)
}

// -------------------------------------------------------------------

// CrawlParams

// .google.protobuf.DoubleValue swing_slices = 1;
inline bool CrawlParams::_internal_has_swing_slices() const {
  return this != internal_default_instance() && _impl_.swing_slices_ != nullptr;
}
inline bool CrawlParams::has_swing_slices() const {
  return _internal_has_swing_slices();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& CrawlParams::_internal_swing_slices() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.swing_slices_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& CrawlParams::swing_slices() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.CrawlParams.swing_slices)
  return _internal_swing_slices();
}
inline void CrawlParams::unsafe_arena_set_allocated_swing_slices(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_slices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swing_slices_);
  }
  _impl_.swing_slices_ = swing_slices;
  if (swing_slices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.CrawlParams.swing_slices)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* CrawlParams::release_swing_slices() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.swing_slices_;
  _impl_.swing_slices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* CrawlParams::unsafe_arena_release_swing_slices() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.CrawlParams.swing_slices)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.swing_slices_;
  _impl_.swing_slices_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* CrawlParams::_internal_mutable_swing_slices() {
  
  if (_impl_.swing_slices_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.swing_slices_ = p;
  }
  return _impl_.swing_slices_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* CrawlParams::mutable_swing_slices() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_swing_slices();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.CrawlParams.swing_slices)
  return _msg;
}
inline void CrawlParams::set_allocated_swing_slices(::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_slices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swing_slices_);
  }
  if (swing_slices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swing_slices));
    if (message_arena != submessage_arena) {
      swing_slices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swing_slices, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swing_slices_ = swing_slices;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.CrawlParams.swing_slices)
}

// .bosdyn.api.Vec2Value velocity = 2;
inline bool CrawlParams::_internal_has_velocity() const {
  return this != internal_default_instance() && _impl_.velocity_ != nullptr;
}
inline bool CrawlParams::has_velocity() const {
  return _internal_has_velocity();
}
inline const ::bosdyn::api::Vec2Value& CrawlParams::_internal_velocity() const {
  const ::bosdyn::api::Vec2Value* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec2Value&>(
      ::bosdyn::api::_Vec2Value_default_instance_);
}
inline const ::bosdyn::api::Vec2Value& CrawlParams::velocity() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.CrawlParams.velocity)
  return _internal_velocity();
}
inline void CrawlParams::unsafe_arena_set_allocated_velocity(
    ::bosdyn::api::Vec2Value* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.CrawlParams.velocity)
}
inline ::bosdyn::api::Vec2Value* CrawlParams::release_velocity() {
  
  ::bosdyn::api::Vec2Value* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec2Value* CrawlParams::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.CrawlParams.velocity)
  
  ::bosdyn::api::Vec2Value* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec2Value* CrawlParams::_internal_mutable_velocity() {
  
  if (_impl_.velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec2Value>(GetArenaForAllocation());
    _impl_.velocity_ = p;
  }
  return _impl_.velocity_;
}
inline ::bosdyn::api::Vec2Value* CrawlParams::mutable_velocity() {
  ::bosdyn::api::Vec2Value* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.CrawlParams.velocity)
  return _msg;
}
inline void CrawlParams::set_allocated_velocity(::bosdyn::api::Vec2Value* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity));
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.CrawlParams.velocity)
}

// .google.protobuf.DoubleValue stance_width = 3;
inline bool CrawlParams::_internal_has_stance_width() const {
  return this != internal_default_instance() && _impl_.stance_width_ != nullptr;
}
inline bool CrawlParams::has_stance_width() const {
  return _internal_has_stance_width();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& CrawlParams::_internal_stance_width() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.stance_width_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& CrawlParams::stance_width() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.CrawlParams.stance_width)
  return _internal_stance_width();
}
inline void CrawlParams::unsafe_arena_set_allocated_stance_width(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* stance_width) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stance_width_);
  }
  _impl_.stance_width_ = stance_width;
  if (stance_width) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.CrawlParams.stance_width)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* CrawlParams::release_stance_width() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.stance_width_;
  _impl_.stance_width_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* CrawlParams::unsafe_arena_release_stance_width() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.CrawlParams.stance_width)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.stance_width_;
  _impl_.stance_width_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* CrawlParams::_internal_mutable_stance_width() {
  
  if (_impl_.stance_width_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.stance_width_ = p;
  }
  return _impl_.stance_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* CrawlParams::mutable_stance_width() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_stance_width();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.CrawlParams.stance_width)
  return _msg;
}
inline void CrawlParams::set_allocated_stance_width(::PROTOBUF_NAMESPACE_ID::DoubleValue* stance_width) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stance_width_);
  }
  if (stance_width) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stance_width));
    if (message_arena != submessage_arena) {
      stance_width = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stance_width, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stance_width_ = stance_width;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.CrawlParams.stance_width)
}

// .google.protobuf.DoubleValue stance_length = 4;
inline bool CrawlParams::_internal_has_stance_length() const {
  return this != internal_default_instance() && _impl_.stance_length_ != nullptr;
}
inline bool CrawlParams::has_stance_length() const {
  return _internal_has_stance_length();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& CrawlParams::_internal_stance_length() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.stance_length_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& CrawlParams::stance_length() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.CrawlParams.stance_length)
  return _internal_stance_length();
}
inline void CrawlParams::unsafe_arena_set_allocated_stance_length(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* stance_length) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stance_length_);
  }
  _impl_.stance_length_ = stance_length;
  if (stance_length) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.CrawlParams.stance_length)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* CrawlParams::release_stance_length() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.stance_length_;
  _impl_.stance_length_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* CrawlParams::unsafe_arena_release_stance_length() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.CrawlParams.stance_length)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.stance_length_;
  _impl_.stance_length_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* CrawlParams::_internal_mutable_stance_length() {
  
  if (_impl_.stance_length_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.stance_length_ = p;
  }
  return _impl_.stance_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* CrawlParams::mutable_stance_length() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_stance_length();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.CrawlParams.stance_length)
  return _msg;
}
inline void CrawlParams::set_allocated_stance_length(::PROTOBUF_NAMESPACE_ID::DoubleValue* stance_length) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stance_length_);
  }
  if (stance_length) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stance_length));
    if (message_arena != submessage_arena) {
      stance_length = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stance_length, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stance_length_ = stance_length;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.CrawlParams.stance_length)
}

// -------------------------------------------------------------------

// GotoParams

// .bosdyn.api.Vec2Value absolute_position = 1;
inline bool GotoParams::_internal_has_absolute_position() const {
  return this != internal_default_instance() && _impl_.absolute_position_ != nullptr;
}
inline bool GotoParams::has_absolute_position() const {
  return _internal_has_absolute_position();
}
inline const ::bosdyn::api::Vec2Value& GotoParams::_internal_absolute_position() const {
  const ::bosdyn::api::Vec2Value* p = _impl_.absolute_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec2Value&>(
      ::bosdyn::api::_Vec2Value_default_instance_);
}
inline const ::bosdyn::api::Vec2Value& GotoParams::absolute_position() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.GotoParams.absolute_position)
  return _internal_absolute_position();
}
inline void GotoParams::unsafe_arena_set_allocated_absolute_position(
    ::bosdyn::api::Vec2Value* absolute_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.absolute_position_);
  }
  _impl_.absolute_position_ = absolute_position;
  if (absolute_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.GotoParams.absolute_position)
}
inline ::bosdyn::api::Vec2Value* GotoParams::release_absolute_position() {
  
  ::bosdyn::api::Vec2Value* temp = _impl_.absolute_position_;
  _impl_.absolute_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec2Value* GotoParams::unsafe_arena_release_absolute_position() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.GotoParams.absolute_position)
  
  ::bosdyn::api::Vec2Value* temp = _impl_.absolute_position_;
  _impl_.absolute_position_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec2Value* GotoParams::_internal_mutable_absolute_position() {
  
  if (_impl_.absolute_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec2Value>(GetArenaForAllocation());
    _impl_.absolute_position_ = p;
  }
  return _impl_.absolute_position_;
}
inline ::bosdyn::api::Vec2Value* GotoParams::mutable_absolute_position() {
  ::bosdyn::api::Vec2Value* _msg = _internal_mutable_absolute_position();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.GotoParams.absolute_position)
  return _msg;
}
inline void GotoParams::set_allocated_absolute_position(::bosdyn::api::Vec2Value* absolute_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.absolute_position_);
  }
  if (absolute_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(absolute_position));
    if (message_arena != submessage_arena) {
      absolute_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, absolute_position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.absolute_position_ = absolute_position;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.GotoParams.absolute_position)
}

// .google.protobuf.DoubleValue absolute_yaw = 2;
inline bool GotoParams::_internal_has_absolute_yaw() const {
  return this != internal_default_instance() && _impl_.absolute_yaw_ != nullptr;
}
inline bool GotoParams::has_absolute_yaw() const {
  return _internal_has_absolute_yaw();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& GotoParams::_internal_absolute_yaw() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.absolute_yaw_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& GotoParams::absolute_yaw() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.GotoParams.absolute_yaw)
  return _internal_absolute_yaw();
}
inline void GotoParams::unsafe_arena_set_allocated_absolute_yaw(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* absolute_yaw) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.absolute_yaw_);
  }
  _impl_.absolute_yaw_ = absolute_yaw;
  if (absolute_yaw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.GotoParams.absolute_yaw)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GotoParams::release_absolute_yaw() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.absolute_yaw_;
  _impl_.absolute_yaw_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GotoParams::unsafe_arena_release_absolute_yaw() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.GotoParams.absolute_yaw)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.absolute_yaw_;
  _impl_.absolute_yaw_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GotoParams::_internal_mutable_absolute_yaw() {
  
  if (_impl_.absolute_yaw_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.absolute_yaw_ = p;
  }
  return _impl_.absolute_yaw_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GotoParams::mutable_absolute_yaw() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_absolute_yaw();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.GotoParams.absolute_yaw)
  return _msg;
}
inline void GotoParams::set_allocated_absolute_yaw(::PROTOBUF_NAMESPACE_ID::DoubleValue* absolute_yaw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.absolute_yaw_);
  }
  if (absolute_yaw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(absolute_yaw));
    if (message_arena != submessage_arena) {
      absolute_yaw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, absolute_yaw, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.absolute_yaw_ = absolute_yaw;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.GotoParams.absolute_yaw)
}

// .google.protobuf.DoubleValue step_position_stiffness = 3;
inline bool GotoParams::_internal_has_step_position_stiffness() const {
  return this != internal_default_instance() && _impl_.step_position_stiffness_ != nullptr;
}
inline bool GotoParams::has_step_position_stiffness() const {
  return _internal_has_step_position_stiffness();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& GotoParams::_internal_step_position_stiffness() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.step_position_stiffness_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& GotoParams::step_position_stiffness() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.GotoParams.step_position_stiffness)
  return _internal_step_position_stiffness();
}
inline void GotoParams::unsafe_arena_set_allocated_step_position_stiffness(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* step_position_stiffness) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.step_position_stiffness_);
  }
  _impl_.step_position_stiffness_ = step_position_stiffness;
  if (step_position_stiffness) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.GotoParams.step_position_stiffness)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GotoParams::release_step_position_stiffness() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.step_position_stiffness_;
  _impl_.step_position_stiffness_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GotoParams::unsafe_arena_release_step_position_stiffness() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.GotoParams.step_position_stiffness)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.step_position_stiffness_;
  _impl_.step_position_stiffness_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GotoParams::_internal_mutable_step_position_stiffness() {
  
  if (_impl_.step_position_stiffness_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.step_position_stiffness_ = p;
  }
  return _impl_.step_position_stiffness_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GotoParams::mutable_step_position_stiffness() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_step_position_stiffness();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.GotoParams.step_position_stiffness)
  return _msg;
}
inline void GotoParams::set_allocated_step_position_stiffness(::PROTOBUF_NAMESPACE_ID::DoubleValue* step_position_stiffness) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.step_position_stiffness_);
  }
  if (step_position_stiffness) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(step_position_stiffness));
    if (message_arena != submessage_arena) {
      step_position_stiffness = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, step_position_stiffness, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.step_position_stiffness_ = step_position_stiffness;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.GotoParams.step_position_stiffness)
}

// .google.protobuf.DoubleValue duty_cycle = 4;
inline bool GotoParams::_internal_has_duty_cycle() const {
  return this != internal_default_instance() && _impl_.duty_cycle_ != nullptr;
}
inline bool GotoParams::has_duty_cycle() const {
  return _internal_has_duty_cycle();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& GotoParams::_internal_duty_cycle() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.duty_cycle_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& GotoParams::duty_cycle() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.GotoParams.duty_cycle)
  return _internal_duty_cycle();
}
inline void GotoParams::unsafe_arena_set_allocated_duty_cycle(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* duty_cycle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.duty_cycle_);
  }
  _impl_.duty_cycle_ = duty_cycle;
  if (duty_cycle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.GotoParams.duty_cycle)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GotoParams::release_duty_cycle() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.duty_cycle_;
  _impl_.duty_cycle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GotoParams::unsafe_arena_release_duty_cycle() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.GotoParams.duty_cycle)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.duty_cycle_;
  _impl_.duty_cycle_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GotoParams::_internal_mutable_duty_cycle() {
  
  if (_impl_.duty_cycle_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.duty_cycle_ = p;
  }
  return _impl_.duty_cycle_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* GotoParams::mutable_duty_cycle() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_duty_cycle();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.GotoParams.duty_cycle)
  return _msg;
}
inline void GotoParams::set_allocated_duty_cycle(::PROTOBUF_NAMESPACE_ID::DoubleValue* duty_cycle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.duty_cycle_);
  }
  if (duty_cycle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duty_cycle));
    if (message_arena != submessage_arena) {
      duty_cycle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duty_cycle, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.duty_cycle_ = duty_cycle;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.GotoParams.duty_cycle)
}

// .google.protobuf.BoolValue link_to_next = 5;
inline bool GotoParams::_internal_has_link_to_next() const {
  return this != internal_default_instance() && _impl_.link_to_next_ != nullptr;
}
inline bool GotoParams::has_link_to_next() const {
  return _internal_has_link_to_next();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& GotoParams::_internal_link_to_next() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.link_to_next_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& GotoParams::link_to_next() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.GotoParams.link_to_next)
  return _internal_link_to_next();
}
inline void GotoParams::unsafe_arena_set_allocated_link_to_next(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* link_to_next) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.link_to_next_);
  }
  _impl_.link_to_next_ = link_to_next;
  if (link_to_next) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.GotoParams.link_to_next)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* GotoParams::release_link_to_next() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.link_to_next_;
  _impl_.link_to_next_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* GotoParams::unsafe_arena_release_link_to_next() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.GotoParams.link_to_next)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.link_to_next_;
  _impl_.link_to_next_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* GotoParams::_internal_mutable_link_to_next() {
  
  if (_impl_.link_to_next_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.link_to_next_ = p;
  }
  return _impl_.link_to_next_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* GotoParams::mutable_link_to_next() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_link_to_next();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.GotoParams.link_to_next)
  return _msg;
}
inline void GotoParams::set_allocated_link_to_next(::PROTOBUF_NAMESPACE_ID::BoolValue* link_to_next) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.link_to_next_);
  }
  if (link_to_next) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(link_to_next));
    if (message_arena != submessage_arena) {
      link_to_next = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link_to_next, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.link_to_next_ = link_to_next;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.GotoParams.link_to_next)
}

// -------------------------------------------------------------------

// BourreeParams

// .bosdyn.api.Vec2Value velocity = 1;
inline bool BourreeParams::_internal_has_velocity() const {
  return this != internal_default_instance() && _impl_.velocity_ != nullptr;
}
inline bool BourreeParams::has_velocity() const {
  return _internal_has_velocity();
}
inline const ::bosdyn::api::Vec2Value& BourreeParams::_internal_velocity() const {
  const ::bosdyn::api::Vec2Value* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec2Value&>(
      ::bosdyn::api::_Vec2Value_default_instance_);
}
inline const ::bosdyn::api::Vec2Value& BourreeParams::velocity() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.BourreeParams.velocity)
  return _internal_velocity();
}
inline void BourreeParams::unsafe_arena_set_allocated_velocity(
    ::bosdyn::api::Vec2Value* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.BourreeParams.velocity)
}
inline ::bosdyn::api::Vec2Value* BourreeParams::release_velocity() {
  
  ::bosdyn::api::Vec2Value* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec2Value* BourreeParams::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.BourreeParams.velocity)
  
  ::bosdyn::api::Vec2Value* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec2Value* BourreeParams::_internal_mutable_velocity() {
  
  if (_impl_.velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec2Value>(GetArenaForAllocation());
    _impl_.velocity_ = p;
  }
  return _impl_.velocity_;
}
inline ::bosdyn::api::Vec2Value* BourreeParams::mutable_velocity() {
  ::bosdyn::api::Vec2Value* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.BourreeParams.velocity)
  return _msg;
}
inline void BourreeParams::set_allocated_velocity(::bosdyn::api::Vec2Value* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity));
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.BourreeParams.velocity)
}

// .google.protobuf.DoubleValue yaw_rate = 2;
inline bool BourreeParams::_internal_has_yaw_rate() const {
  return this != internal_default_instance() && _impl_.yaw_rate_ != nullptr;
}
inline bool BourreeParams::has_yaw_rate() const {
  return _internal_has_yaw_rate();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& BourreeParams::_internal_yaw_rate() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.yaw_rate_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& BourreeParams::yaw_rate() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.BourreeParams.yaw_rate)
  return _internal_yaw_rate();
}
inline void BourreeParams::unsafe_arena_set_allocated_yaw_rate(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw_rate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yaw_rate_);
  }
  _impl_.yaw_rate_ = yaw_rate;
  if (yaw_rate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.BourreeParams.yaw_rate)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* BourreeParams::release_yaw_rate() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.yaw_rate_;
  _impl_.yaw_rate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* BourreeParams::unsafe_arena_release_yaw_rate() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.BourreeParams.yaw_rate)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.yaw_rate_;
  _impl_.yaw_rate_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* BourreeParams::_internal_mutable_yaw_rate() {
  
  if (_impl_.yaw_rate_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.yaw_rate_ = p;
  }
  return _impl_.yaw_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* BourreeParams::mutable_yaw_rate() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_yaw_rate();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.BourreeParams.yaw_rate)
  return _msg;
}
inline void BourreeParams::set_allocated_yaw_rate(::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yaw_rate_);
  }
  if (yaw_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(yaw_rate));
    if (message_arena != submessage_arena) {
      yaw_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yaw_rate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.yaw_rate_ = yaw_rate;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.BourreeParams.yaw_rate)
}

// .google.protobuf.DoubleValue stance_length = 3;
inline bool BourreeParams::_internal_has_stance_length() const {
  return this != internal_default_instance() && _impl_.stance_length_ != nullptr;
}
inline bool BourreeParams::has_stance_length() const {
  return _internal_has_stance_length();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& BourreeParams::_internal_stance_length() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.stance_length_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& BourreeParams::stance_length() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.BourreeParams.stance_length)
  return _internal_stance_length();
}
inline void BourreeParams::unsafe_arena_set_allocated_stance_length(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* stance_length) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stance_length_);
  }
  _impl_.stance_length_ = stance_length;
  if (stance_length) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.BourreeParams.stance_length)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* BourreeParams::release_stance_length() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.stance_length_;
  _impl_.stance_length_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* BourreeParams::unsafe_arena_release_stance_length() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.BourreeParams.stance_length)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.stance_length_;
  _impl_.stance_length_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* BourreeParams::_internal_mutable_stance_length() {
  
  if (_impl_.stance_length_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.stance_length_ = p;
  }
  return _impl_.stance_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* BourreeParams::mutable_stance_length() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_stance_length();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.BourreeParams.stance_length)
  return _msg;
}
inline void BourreeParams::set_allocated_stance_length(::PROTOBUF_NAMESPACE_ID::DoubleValue* stance_length) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stance_length_);
  }
  if (stance_length) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stance_length));
    if (message_arena != submessage_arena) {
      stance_length = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stance_length, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stance_length_ = stance_length;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.BourreeParams.stance_length)
}

// -------------------------------------------------------------------

// SideParams

// .bosdyn.api.spot.SideParams.Side side = 1;
inline void SideParams::clear_side() {
  _impl_.side_ = 0;
}
inline ::bosdyn::api::spot::SideParams_Side SideParams::_internal_side() const {
  return static_cast< ::bosdyn::api::spot::SideParams_Side >(_impl_.side_);
}
inline ::bosdyn::api::spot::SideParams_Side SideParams::side() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.SideParams.side)
  return _internal_side();
}
inline void SideParams::_internal_set_side(::bosdyn::api::spot::SideParams_Side value) {
  
  _impl_.side_ = value;
}
inline void SideParams::set_side(::bosdyn::api::spot::SideParams_Side value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot.SideParams.side)
}

// -------------------------------------------------------------------

// JumpParams

// .google.protobuf.DoubleValue yaw = 1;
inline bool JumpParams::_internal_has_yaw() const {
  return this != internal_default_instance() && _impl_.yaw_ != nullptr;
}
inline bool JumpParams::has_yaw() const {
  return _internal_has_yaw();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& JumpParams::_internal_yaw() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.yaw_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& JumpParams::yaw() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.JumpParams.yaw)
  return _internal_yaw();
}
inline void JumpParams::unsafe_arena_set_allocated_yaw(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yaw_);
  }
  _impl_.yaw_ = yaw;
  if (yaw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.JumpParams.yaw)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* JumpParams::release_yaw() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.yaw_;
  _impl_.yaw_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* JumpParams::unsafe_arena_release_yaw() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.JumpParams.yaw)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.yaw_;
  _impl_.yaw_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* JumpParams::_internal_mutable_yaw() {
  
  if (_impl_.yaw_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.yaw_ = p;
  }
  return _impl_.yaw_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* JumpParams::mutable_yaw() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_yaw();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.JumpParams.yaw)
  return _msg;
}
inline void JumpParams::set_allocated_yaw(::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yaw_);
  }
  if (yaw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(yaw));
    if (message_arena != submessage_arena) {
      yaw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yaw, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.yaw_ = yaw;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.JumpParams.yaw)
}

// .google.protobuf.DoubleValue flight_slices = 2;
inline bool JumpParams::_internal_has_flight_slices() const {
  return this != internal_default_instance() && _impl_.flight_slices_ != nullptr;
}
inline bool JumpParams::has_flight_slices() const {
  return _internal_has_flight_slices();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& JumpParams::_internal_flight_slices() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.flight_slices_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& JumpParams::flight_slices() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.JumpParams.flight_slices)
  return _internal_flight_slices();
}
inline void JumpParams::unsafe_arena_set_allocated_flight_slices(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* flight_slices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.flight_slices_);
  }
  _impl_.flight_slices_ = flight_slices;
  if (flight_slices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.JumpParams.flight_slices)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* JumpParams::release_flight_slices() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.flight_slices_;
  _impl_.flight_slices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* JumpParams::unsafe_arena_release_flight_slices() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.JumpParams.flight_slices)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.flight_slices_;
  _impl_.flight_slices_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* JumpParams::_internal_mutable_flight_slices() {
  
  if (_impl_.flight_slices_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.flight_slices_ = p;
  }
  return _impl_.flight_slices_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* JumpParams::mutable_flight_slices() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_flight_slices();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.JumpParams.flight_slices)
  return _msg;
}
inline void JumpParams::set_allocated_flight_slices(::PROTOBUF_NAMESPACE_ID::DoubleValue* flight_slices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.flight_slices_);
  }
  if (flight_slices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flight_slices));
    if (message_arena != submessage_arena) {
      flight_slices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flight_slices, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.flight_slices_ = flight_slices;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.JumpParams.flight_slices)
}

// .google.protobuf.DoubleValue stance_width = 3;
inline bool JumpParams::_internal_has_stance_width() const {
  return this != internal_default_instance() && _impl_.stance_width_ != nullptr;
}
inline bool JumpParams::has_stance_width() const {
  return _internal_has_stance_width();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& JumpParams::_internal_stance_width() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.stance_width_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& JumpParams::stance_width() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.JumpParams.stance_width)
  return _internal_stance_width();
}
inline void JumpParams::unsafe_arena_set_allocated_stance_width(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* stance_width) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stance_width_);
  }
  _impl_.stance_width_ = stance_width;
  if (stance_width) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.JumpParams.stance_width)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* JumpParams::release_stance_width() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.stance_width_;
  _impl_.stance_width_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* JumpParams::unsafe_arena_release_stance_width() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.JumpParams.stance_width)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.stance_width_;
  _impl_.stance_width_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* JumpParams::_internal_mutable_stance_width() {
  
  if (_impl_.stance_width_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.stance_width_ = p;
  }
  return _impl_.stance_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* JumpParams::mutable_stance_width() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_stance_width();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.JumpParams.stance_width)
  return _msg;
}
inline void JumpParams::set_allocated_stance_width(::PROTOBUF_NAMESPACE_ID::DoubleValue* stance_width) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stance_width_);
  }
  if (stance_width) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stance_width));
    if (message_arena != submessage_arena) {
      stance_width = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stance_width, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stance_width_ = stance_width;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.JumpParams.stance_width)
}

// .google.protobuf.DoubleValue stance_length = 4;
inline bool JumpParams::_internal_has_stance_length() const {
  return this != internal_default_instance() && _impl_.stance_length_ != nullptr;
}
inline bool JumpParams::has_stance_length() const {
  return _internal_has_stance_length();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& JumpParams::_internal_stance_length() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.stance_length_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& JumpParams::stance_length() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.JumpParams.stance_length)
  return _internal_stance_length();
}
inline void JumpParams::unsafe_arena_set_allocated_stance_length(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* stance_length) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stance_length_);
  }
  _impl_.stance_length_ = stance_length;
  if (stance_length) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.JumpParams.stance_length)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* JumpParams::release_stance_length() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.stance_length_;
  _impl_.stance_length_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* JumpParams::unsafe_arena_release_stance_length() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.JumpParams.stance_length)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.stance_length_;
  _impl_.stance_length_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* JumpParams::_internal_mutable_stance_length() {
  
  if (_impl_.stance_length_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.stance_length_ = p;
  }
  return _impl_.stance_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* JumpParams::mutable_stance_length() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_stance_length();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.JumpParams.stance_length)
  return _msg;
}
inline void JumpParams::set_allocated_stance_length(::PROTOBUF_NAMESPACE_ID::DoubleValue* stance_length) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stance_length_);
  }
  if (stance_length) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stance_length));
    if (message_arena != submessage_arena) {
      stance_length = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stance_length, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stance_length_ = stance_length;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.JumpParams.stance_length)
}

// .bosdyn.api.Vec2Value translation = 6;
inline bool JumpParams::_internal_has_translation() const {
  return this != internal_default_instance() && _impl_.translation_ != nullptr;
}
inline bool JumpParams::has_translation() const {
  return _internal_has_translation();
}
inline const ::bosdyn::api::Vec2Value& JumpParams::_internal_translation() const {
  const ::bosdyn::api::Vec2Value* p = _impl_.translation_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec2Value&>(
      ::bosdyn::api::_Vec2Value_default_instance_);
}
inline const ::bosdyn::api::Vec2Value& JumpParams::translation() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.JumpParams.translation)
  return _internal_translation();
}
inline void JumpParams::unsafe_arena_set_allocated_translation(
    ::bosdyn::api::Vec2Value* translation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.translation_);
  }
  _impl_.translation_ = translation;
  if (translation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.JumpParams.translation)
}
inline ::bosdyn::api::Vec2Value* JumpParams::release_translation() {
  
  ::bosdyn::api::Vec2Value* temp = _impl_.translation_;
  _impl_.translation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec2Value* JumpParams::unsafe_arena_release_translation() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.JumpParams.translation)
  
  ::bosdyn::api::Vec2Value* temp = _impl_.translation_;
  _impl_.translation_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec2Value* JumpParams::_internal_mutable_translation() {
  
  if (_impl_.translation_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec2Value>(GetArenaForAllocation());
    _impl_.translation_ = p;
  }
  return _impl_.translation_;
}
inline ::bosdyn::api::Vec2Value* JumpParams::mutable_translation() {
  ::bosdyn::api::Vec2Value* _msg = _internal_mutable_translation();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.JumpParams.translation)
  return _msg;
}
inline void JumpParams::set_allocated_translation(::bosdyn::api::Vec2Value* translation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.translation_);
  }
  if (translation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translation));
    if (message_arena != submessage_arena) {
      translation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.translation_ = translation;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.JumpParams.translation)
}

// .google.protobuf.DoubleValue split_fraction = 7;
inline bool JumpParams::_internal_has_split_fraction() const {
  return this != internal_default_instance() && _impl_.split_fraction_ != nullptr;
}
inline bool JumpParams::has_split_fraction() const {
  return _internal_has_split_fraction();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& JumpParams::_internal_split_fraction() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.split_fraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& JumpParams::split_fraction() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.JumpParams.split_fraction)
  return _internal_split_fraction();
}
inline void JumpParams::unsafe_arena_set_allocated_split_fraction(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* split_fraction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.split_fraction_);
  }
  _impl_.split_fraction_ = split_fraction;
  if (split_fraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.JumpParams.split_fraction)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* JumpParams::release_split_fraction() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.split_fraction_;
  _impl_.split_fraction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* JumpParams::unsafe_arena_release_split_fraction() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.JumpParams.split_fraction)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.split_fraction_;
  _impl_.split_fraction_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* JumpParams::_internal_mutable_split_fraction() {
  
  if (_impl_.split_fraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.split_fraction_ = p;
  }
  return _impl_.split_fraction_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* JumpParams::mutable_split_fraction() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_split_fraction();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.JumpParams.split_fraction)
  return _msg;
}
inline void JumpParams::set_allocated_split_fraction(::PROTOBUF_NAMESPACE_ID::DoubleValue* split_fraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.split_fraction_);
  }
  if (split_fraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(split_fraction));
    if (message_arena != submessage_arena) {
      split_fraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, split_fraction, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.split_fraction_ = split_fraction;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.JumpParams.split_fraction)
}

// .bosdyn.api.spot.JumpParams.Lead lead_leg_pair = 8;
inline void JumpParams::clear_lead_leg_pair() {
  _impl_.lead_leg_pair_ = 0;
}
inline ::bosdyn::api::spot::JumpParams_Lead JumpParams::_internal_lead_leg_pair() const {
  return static_cast< ::bosdyn::api::spot::JumpParams_Lead >(_impl_.lead_leg_pair_);
}
inline ::bosdyn::api::spot::JumpParams_Lead JumpParams::lead_leg_pair() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.JumpParams.lead_leg_pair)
  return _internal_lead_leg_pair();
}
inline void JumpParams::_internal_set_lead_leg_pair(::bosdyn::api::spot::JumpParams_Lead value) {
  
  _impl_.lead_leg_pair_ = value;
}
inline void JumpParams::set_lead_leg_pair(::bosdyn::api::spot::JumpParams_Lead value) {
  _internal_set_lead_leg_pair(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot.JumpParams.lead_leg_pair)
}

// .google.protobuf.BoolValue yaw_is_absolute = 11;
inline bool JumpParams::_internal_has_yaw_is_absolute() const {
  return this != internal_default_instance() && _impl_.yaw_is_absolute_ != nullptr;
}
inline bool JumpParams::has_yaw_is_absolute() const {
  return _internal_has_yaw_is_absolute();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& JumpParams::_internal_yaw_is_absolute() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.yaw_is_absolute_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& JumpParams::yaw_is_absolute() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.JumpParams.yaw_is_absolute)
  return _internal_yaw_is_absolute();
}
inline void JumpParams::unsafe_arena_set_allocated_yaw_is_absolute(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* yaw_is_absolute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yaw_is_absolute_);
  }
  _impl_.yaw_is_absolute_ = yaw_is_absolute;
  if (yaw_is_absolute) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.JumpParams.yaw_is_absolute)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* JumpParams::release_yaw_is_absolute() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.yaw_is_absolute_;
  _impl_.yaw_is_absolute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* JumpParams::unsafe_arena_release_yaw_is_absolute() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.JumpParams.yaw_is_absolute)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.yaw_is_absolute_;
  _impl_.yaw_is_absolute_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* JumpParams::_internal_mutable_yaw_is_absolute() {
  
  if (_impl_.yaw_is_absolute_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.yaw_is_absolute_ = p;
  }
  return _impl_.yaw_is_absolute_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* JumpParams::mutable_yaw_is_absolute() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_yaw_is_absolute();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.JumpParams.yaw_is_absolute)
  return _msg;
}
inline void JumpParams::set_allocated_yaw_is_absolute(::PROTOBUF_NAMESPACE_ID::BoolValue* yaw_is_absolute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yaw_is_absolute_);
  }
  if (yaw_is_absolute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(yaw_is_absolute));
    if (message_arena != submessage_arena) {
      yaw_is_absolute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yaw_is_absolute, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.yaw_is_absolute_ = yaw_is_absolute;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.JumpParams.yaw_is_absolute)
}

// .google.protobuf.BoolValue translation_is_absolute = 12;
inline bool JumpParams::_internal_has_translation_is_absolute() const {
  return this != internal_default_instance() && _impl_.translation_is_absolute_ != nullptr;
}
inline bool JumpParams::has_translation_is_absolute() const {
  return _internal_has_translation_is_absolute();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& JumpParams::_internal_translation_is_absolute() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.translation_is_absolute_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& JumpParams::translation_is_absolute() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.JumpParams.translation_is_absolute)
  return _internal_translation_is_absolute();
}
inline void JumpParams::unsafe_arena_set_allocated_translation_is_absolute(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* translation_is_absolute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.translation_is_absolute_);
  }
  _impl_.translation_is_absolute_ = translation_is_absolute;
  if (translation_is_absolute) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.JumpParams.translation_is_absolute)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* JumpParams::release_translation_is_absolute() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.translation_is_absolute_;
  _impl_.translation_is_absolute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* JumpParams::unsafe_arena_release_translation_is_absolute() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.JumpParams.translation_is_absolute)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.translation_is_absolute_;
  _impl_.translation_is_absolute_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* JumpParams::_internal_mutable_translation_is_absolute() {
  
  if (_impl_.translation_is_absolute_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.translation_is_absolute_ = p;
  }
  return _impl_.translation_is_absolute_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* JumpParams::mutable_translation_is_absolute() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_translation_is_absolute();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.JumpParams.translation_is_absolute)
  return _msg;
}
inline void JumpParams::set_allocated_translation_is_absolute(::PROTOBUF_NAMESPACE_ID::BoolValue* translation_is_absolute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.translation_is_absolute_);
  }
  if (translation_is_absolute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translation_is_absolute));
    if (message_arena != submessage_arena) {
      translation_is_absolute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translation_is_absolute, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.translation_is_absolute_ = translation_is_absolute;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.JumpParams.translation_is_absolute)
}

// .google.protobuf.DoubleValue absolute_yaw = 9;
inline bool JumpParams::_internal_has_absolute_yaw() const {
  return this != internal_default_instance() && _impl_.absolute_yaw_ != nullptr;
}
inline bool JumpParams::has_absolute_yaw() const {
  return _internal_has_absolute_yaw();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& JumpParams::_internal_absolute_yaw() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.absolute_yaw_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& JumpParams::absolute_yaw() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.JumpParams.absolute_yaw)
  return _internal_absolute_yaw();
}
inline void JumpParams::unsafe_arena_set_allocated_absolute_yaw(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* absolute_yaw) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.absolute_yaw_);
  }
  _impl_.absolute_yaw_ = absolute_yaw;
  if (absolute_yaw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.JumpParams.absolute_yaw)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* JumpParams::release_absolute_yaw() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.absolute_yaw_;
  _impl_.absolute_yaw_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* JumpParams::unsafe_arena_release_absolute_yaw() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.JumpParams.absolute_yaw)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.absolute_yaw_;
  _impl_.absolute_yaw_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* JumpParams::_internal_mutable_absolute_yaw() {
  
  if (_impl_.absolute_yaw_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.absolute_yaw_ = p;
  }
  return _impl_.absolute_yaw_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* JumpParams::mutable_absolute_yaw() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_absolute_yaw();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.JumpParams.absolute_yaw)
  return _msg;
}
inline void JumpParams::set_allocated_absolute_yaw(::PROTOBUF_NAMESPACE_ID::DoubleValue* absolute_yaw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.absolute_yaw_);
  }
  if (absolute_yaw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(absolute_yaw));
    if (message_arena != submessage_arena) {
      absolute_yaw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, absolute_yaw, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.absolute_yaw_ = absolute_yaw;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.JumpParams.absolute_yaw)
}

// .bosdyn.api.Vec2Value absolute_translation = 10;
inline bool JumpParams::_internal_has_absolute_translation() const {
  return this != internal_default_instance() && _impl_.absolute_translation_ != nullptr;
}
inline bool JumpParams::has_absolute_translation() const {
  return _internal_has_absolute_translation();
}
inline const ::bosdyn::api::Vec2Value& JumpParams::_internal_absolute_translation() const {
  const ::bosdyn::api::Vec2Value* p = _impl_.absolute_translation_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec2Value&>(
      ::bosdyn::api::_Vec2Value_default_instance_);
}
inline const ::bosdyn::api::Vec2Value& JumpParams::absolute_translation() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.JumpParams.absolute_translation)
  return _internal_absolute_translation();
}
inline void JumpParams::unsafe_arena_set_allocated_absolute_translation(
    ::bosdyn::api::Vec2Value* absolute_translation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.absolute_translation_);
  }
  _impl_.absolute_translation_ = absolute_translation;
  if (absolute_translation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.JumpParams.absolute_translation)
}
inline ::bosdyn::api::Vec2Value* JumpParams::release_absolute_translation() {
  
  ::bosdyn::api::Vec2Value* temp = _impl_.absolute_translation_;
  _impl_.absolute_translation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec2Value* JumpParams::unsafe_arena_release_absolute_translation() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.JumpParams.absolute_translation)
  
  ::bosdyn::api::Vec2Value* temp = _impl_.absolute_translation_;
  _impl_.absolute_translation_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec2Value* JumpParams::_internal_mutable_absolute_translation() {
  
  if (_impl_.absolute_translation_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec2Value>(GetArenaForAllocation());
    _impl_.absolute_translation_ = p;
  }
  return _impl_.absolute_translation_;
}
inline ::bosdyn::api::Vec2Value* JumpParams::mutable_absolute_translation() {
  ::bosdyn::api::Vec2Value* _msg = _internal_mutable_absolute_translation();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.JumpParams.absolute_translation)
  return _msg;
}
inline void JumpParams::set_allocated_absolute_translation(::bosdyn::api::Vec2Value* absolute_translation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.absolute_translation_);
  }
  if (absolute_translation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(absolute_translation));
    if (message_arena != submessage_arena) {
      absolute_translation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, absolute_translation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.absolute_translation_ = absolute_translation;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.JumpParams.absolute_translation)
}

// .google.protobuf.DoubleValue swing_height = 13;
inline bool JumpParams::_internal_has_swing_height() const {
  return this != internal_default_instance() && _impl_.swing_height_ != nullptr;
}
inline bool JumpParams::has_swing_height() const {
  return _internal_has_swing_height();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& JumpParams::_internal_swing_height() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.swing_height_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& JumpParams::swing_height() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.JumpParams.swing_height)
  return _internal_swing_height();
}
inline void JumpParams::unsafe_arena_set_allocated_swing_height(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swing_height_);
  }
  _impl_.swing_height_ = swing_height;
  if (swing_height) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.JumpParams.swing_height)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* JumpParams::release_swing_height() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.swing_height_;
  _impl_.swing_height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* JumpParams::unsafe_arena_release_swing_height() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.JumpParams.swing_height)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.swing_height_;
  _impl_.swing_height_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* JumpParams::_internal_mutable_swing_height() {
  
  if (_impl_.swing_height_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.swing_height_ = p;
  }
  return _impl_.swing_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* JumpParams::mutable_swing_height() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_swing_height();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.JumpParams.swing_height)
  return _msg;
}
inline void JumpParams::set_allocated_swing_height(::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swing_height_);
  }
  if (swing_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swing_height));
    if (message_arena != submessage_arena) {
      swing_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swing_height, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swing_height_ = swing_height;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.JumpParams.swing_height)
}

// .google.protobuf.BoolValue absolute = 5 [deprecated = true];
inline bool JumpParams::_internal_has_absolute() const {
  return this != internal_default_instance() && _impl_.absolute_ != nullptr;
}
inline bool JumpParams::has_absolute() const {
  return _internal_has_absolute();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& JumpParams::_internal_absolute() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.absolute_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& JumpParams::absolute() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.JumpParams.absolute)
  return _internal_absolute();
}
inline void JumpParams::unsafe_arena_set_allocated_absolute(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* absolute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.absolute_);
  }
  _impl_.absolute_ = absolute;
  if (absolute) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.JumpParams.absolute)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* JumpParams::release_absolute() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.absolute_;
  _impl_.absolute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* JumpParams::unsafe_arena_release_absolute() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.JumpParams.absolute)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.absolute_;
  _impl_.absolute_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* JumpParams::_internal_mutable_absolute() {
  
  if (_impl_.absolute_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.absolute_ = p;
  }
  return _impl_.absolute_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* JumpParams::mutable_absolute() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_absolute();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.JumpParams.absolute)
  return _msg;
}
inline void JumpParams::set_allocated_absolute(::PROTOBUF_NAMESPACE_ID::BoolValue* absolute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.absolute_);
  }
  if (absolute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(absolute));
    if (message_arena != submessage_arena) {
      absolute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, absolute, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.absolute_ = absolute;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.JumpParams.absolute)
}

// -------------------------------------------------------------------

// StepParams

// .bosdyn.api.spot.Leg foot = 1;
inline void StepParams::clear_foot() {
  _impl_.foot_ = 0;
}
inline ::bosdyn::api::spot::Leg StepParams::_internal_foot() const {
  return static_cast< ::bosdyn::api::spot::Leg >(_impl_.foot_);
}
inline ::bosdyn::api::spot::Leg StepParams::foot() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.StepParams.foot)
  return _internal_foot();
}
inline void StepParams::_internal_set_foot(::bosdyn::api::spot::Leg value) {
  
  _impl_.foot_ = value;
}
inline void StepParams::set_foot(::bosdyn::api::spot::Leg value) {
  _internal_set_foot(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot.StepParams.foot)
}

// .bosdyn.api.Vec2Value offset = 2;
inline bool StepParams::_internal_has_offset() const {
  return this != internal_default_instance() && _impl_.offset_ != nullptr;
}
inline bool StepParams::has_offset() const {
  return _internal_has_offset();
}
inline const ::bosdyn::api::Vec2Value& StepParams::_internal_offset() const {
  const ::bosdyn::api::Vec2Value* p = _impl_.offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec2Value&>(
      ::bosdyn::api::_Vec2Value_default_instance_);
}
inline const ::bosdyn::api::Vec2Value& StepParams::offset() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.StepParams.offset)
  return _internal_offset();
}
inline void StepParams::unsafe_arena_set_allocated_offset(
    ::bosdyn::api::Vec2Value* offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offset_);
  }
  _impl_.offset_ = offset;
  if (offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.StepParams.offset)
}
inline ::bosdyn::api::Vec2Value* StepParams::release_offset() {
  
  ::bosdyn::api::Vec2Value* temp = _impl_.offset_;
  _impl_.offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec2Value* StepParams::unsafe_arena_release_offset() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.StepParams.offset)
  
  ::bosdyn::api::Vec2Value* temp = _impl_.offset_;
  _impl_.offset_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec2Value* StepParams::_internal_mutable_offset() {
  
  if (_impl_.offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec2Value>(GetArenaForAllocation());
    _impl_.offset_ = p;
  }
  return _impl_.offset_;
}
inline ::bosdyn::api::Vec2Value* StepParams::mutable_offset() {
  ::bosdyn::api::Vec2Value* _msg = _internal_mutable_offset();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.StepParams.offset)
  return _msg;
}
inline void StepParams::set_allocated_offset(::bosdyn::api::Vec2Value* offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offset_);
  }
  if (offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offset));
    if (message_arena != submessage_arena) {
      offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.offset_ = offset;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.StepParams.offset)
}

// .bosdyn.api.spot.Leg second_foot = 3;
inline void StepParams::clear_second_foot() {
  _impl_.second_foot_ = 0;
}
inline ::bosdyn::api::spot::Leg StepParams::_internal_second_foot() const {
  return static_cast< ::bosdyn::api::spot::Leg >(_impl_.second_foot_);
}
inline ::bosdyn::api::spot::Leg StepParams::second_foot() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.StepParams.second_foot)
  return _internal_second_foot();
}
inline void StepParams::_internal_set_second_foot(::bosdyn::api::spot::Leg value) {
  
  _impl_.second_foot_ = value;
}
inline void StepParams::set_second_foot(::bosdyn::api::spot::Leg value) {
  _internal_set_second_foot(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot.StepParams.second_foot)
}

// .bosdyn.api.Vec3Value swing_waypoint = 5;
inline bool StepParams::_internal_has_swing_waypoint() const {
  return this != internal_default_instance() && _impl_.swing_waypoint_ != nullptr;
}
inline bool StepParams::has_swing_waypoint() const {
  return _internal_has_swing_waypoint();
}
inline const ::bosdyn::api::Vec3Value& StepParams::_internal_swing_waypoint() const {
  const ::bosdyn::api::Vec3Value* p = _impl_.swing_waypoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec3Value&>(
      ::bosdyn::api::_Vec3Value_default_instance_);
}
inline const ::bosdyn::api::Vec3Value& StepParams::swing_waypoint() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.StepParams.swing_waypoint)
  return _internal_swing_waypoint();
}
inline void StepParams::unsafe_arena_set_allocated_swing_waypoint(
    ::bosdyn::api::Vec3Value* swing_waypoint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swing_waypoint_);
  }
  _impl_.swing_waypoint_ = swing_waypoint;
  if (swing_waypoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.StepParams.swing_waypoint)
}
inline ::bosdyn::api::Vec3Value* StepParams::release_swing_waypoint() {
  
  ::bosdyn::api::Vec3Value* temp = _impl_.swing_waypoint_;
  _impl_.swing_waypoint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec3Value* StepParams::unsafe_arena_release_swing_waypoint() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.StepParams.swing_waypoint)
  
  ::bosdyn::api::Vec3Value* temp = _impl_.swing_waypoint_;
  _impl_.swing_waypoint_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec3Value* StepParams::_internal_mutable_swing_waypoint() {
  
  if (_impl_.swing_waypoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec3Value>(GetArenaForAllocation());
    _impl_.swing_waypoint_ = p;
  }
  return _impl_.swing_waypoint_;
}
inline ::bosdyn::api::Vec3Value* StepParams::mutable_swing_waypoint() {
  ::bosdyn::api::Vec3Value* _msg = _internal_mutable_swing_waypoint();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.StepParams.swing_waypoint)
  return _msg;
}
inline void StepParams::set_allocated_swing_waypoint(::bosdyn::api::Vec3Value* swing_waypoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swing_waypoint_);
  }
  if (swing_waypoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swing_waypoint));
    if (message_arena != submessage_arena) {
      swing_waypoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swing_waypoint, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swing_waypoint_ = swing_waypoint;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.StepParams.swing_waypoint)
}

// .google.protobuf.DoubleValue swing_height = 6;
inline bool StepParams::_internal_has_swing_height() const {
  return this != internal_default_instance() && _impl_.swing_height_ != nullptr;
}
inline bool StepParams::has_swing_height() const {
  return _internal_has_swing_height();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& StepParams::_internal_swing_height() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.swing_height_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& StepParams::swing_height() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.StepParams.swing_height)
  return _internal_swing_height();
}
inline void StepParams::unsafe_arena_set_allocated_swing_height(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swing_height_);
  }
  _impl_.swing_height_ = swing_height;
  if (swing_height) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.StepParams.swing_height)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* StepParams::release_swing_height() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.swing_height_;
  _impl_.swing_height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* StepParams::unsafe_arena_release_swing_height() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.StepParams.swing_height)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.swing_height_;
  _impl_.swing_height_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* StepParams::_internal_mutable_swing_height() {
  
  if (_impl_.swing_height_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.swing_height_ = p;
  }
  return _impl_.swing_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* StepParams::mutable_swing_height() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_swing_height();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.StepParams.swing_height)
  return _msg;
}
inline void StepParams::set_allocated_swing_height(::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swing_height_);
  }
  if (swing_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swing_height));
    if (message_arena != submessage_arena) {
      swing_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swing_height, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swing_height_ = swing_height;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.StepParams.swing_height)
}

// .google.protobuf.DoubleValue liftoff_velocity = 7;
inline bool StepParams::_internal_has_liftoff_velocity() const {
  return this != internal_default_instance() && _impl_.liftoff_velocity_ != nullptr;
}
inline bool StepParams::has_liftoff_velocity() const {
  return _internal_has_liftoff_velocity();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& StepParams::_internal_liftoff_velocity() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.liftoff_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& StepParams::liftoff_velocity() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.StepParams.liftoff_velocity)
  return _internal_liftoff_velocity();
}
inline void StepParams::unsafe_arena_set_allocated_liftoff_velocity(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* liftoff_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.liftoff_velocity_);
  }
  _impl_.liftoff_velocity_ = liftoff_velocity;
  if (liftoff_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.StepParams.liftoff_velocity)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* StepParams::release_liftoff_velocity() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.liftoff_velocity_;
  _impl_.liftoff_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* StepParams::unsafe_arena_release_liftoff_velocity() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.StepParams.liftoff_velocity)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.liftoff_velocity_;
  _impl_.liftoff_velocity_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* StepParams::_internal_mutable_liftoff_velocity() {
  
  if (_impl_.liftoff_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.liftoff_velocity_ = p;
  }
  return _impl_.liftoff_velocity_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* StepParams::mutable_liftoff_velocity() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_liftoff_velocity();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.StepParams.liftoff_velocity)
  return _msg;
}
inline void StepParams::set_allocated_liftoff_velocity(::PROTOBUF_NAMESPACE_ID::DoubleValue* liftoff_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.liftoff_velocity_);
  }
  if (liftoff_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(liftoff_velocity));
    if (message_arena != submessage_arena) {
      liftoff_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, liftoff_velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.liftoff_velocity_ = liftoff_velocity;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.StepParams.liftoff_velocity)
}

// .google.protobuf.DoubleValue touchdown_velocity = 8;
inline bool StepParams::_internal_has_touchdown_velocity() const {
  return this != internal_default_instance() && _impl_.touchdown_velocity_ != nullptr;
}
inline bool StepParams::has_touchdown_velocity() const {
  return _internal_has_touchdown_velocity();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& StepParams::_internal_touchdown_velocity() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.touchdown_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& StepParams::touchdown_velocity() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.StepParams.touchdown_velocity)
  return _internal_touchdown_velocity();
}
inline void StepParams::unsafe_arena_set_allocated_touchdown_velocity(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* touchdown_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.touchdown_velocity_);
  }
  _impl_.touchdown_velocity_ = touchdown_velocity;
  if (touchdown_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.StepParams.touchdown_velocity)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* StepParams::release_touchdown_velocity() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.touchdown_velocity_;
  _impl_.touchdown_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* StepParams::unsafe_arena_release_touchdown_velocity() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.StepParams.touchdown_velocity)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.touchdown_velocity_;
  _impl_.touchdown_velocity_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* StepParams::_internal_mutable_touchdown_velocity() {
  
  if (_impl_.touchdown_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.touchdown_velocity_ = p;
  }
  return _impl_.touchdown_velocity_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* StepParams::mutable_touchdown_velocity() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_touchdown_velocity();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.StepParams.touchdown_velocity)
  return _msg;
}
inline void StepParams::set_allocated_touchdown_velocity(::PROTOBUF_NAMESPACE_ID::DoubleValue* touchdown_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.touchdown_velocity_);
  }
  if (touchdown_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(touchdown_velocity));
    if (message_arena != submessage_arena) {
      touchdown_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, touchdown_velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.touchdown_velocity_ = touchdown_velocity;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.StepParams.touchdown_velocity)
}

// .google.protobuf.BoolValue mirror_x = 9;
inline bool StepParams::_internal_has_mirror_x() const {
  return this != internal_default_instance() && _impl_.mirror_x_ != nullptr;
}
inline bool StepParams::has_mirror_x() const {
  return _internal_has_mirror_x();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& StepParams::_internal_mirror_x() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.mirror_x_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& StepParams::mirror_x() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.StepParams.mirror_x)
  return _internal_mirror_x();
}
inline void StepParams::unsafe_arena_set_allocated_mirror_x(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* mirror_x) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mirror_x_);
  }
  _impl_.mirror_x_ = mirror_x;
  if (mirror_x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.StepParams.mirror_x)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* StepParams::release_mirror_x() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.mirror_x_;
  _impl_.mirror_x_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* StepParams::unsafe_arena_release_mirror_x() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.StepParams.mirror_x)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.mirror_x_;
  _impl_.mirror_x_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* StepParams::_internal_mutable_mirror_x() {
  
  if (_impl_.mirror_x_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.mirror_x_ = p;
  }
  return _impl_.mirror_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* StepParams::mutable_mirror_x() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_mirror_x();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.StepParams.mirror_x)
  return _msg;
}
inline void StepParams::set_allocated_mirror_x(::PROTOBUF_NAMESPACE_ID::BoolValue* mirror_x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mirror_x_);
  }
  if (mirror_x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mirror_x));
    if (message_arena != submessage_arena) {
      mirror_x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mirror_x, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mirror_x_ = mirror_x;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.StepParams.mirror_x)
}

// .google.protobuf.BoolValue mirror_y = 10;
inline bool StepParams::_internal_has_mirror_y() const {
  return this != internal_default_instance() && _impl_.mirror_y_ != nullptr;
}
inline bool StepParams::has_mirror_y() const {
  return _internal_has_mirror_y();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& StepParams::_internal_mirror_y() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.mirror_y_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& StepParams::mirror_y() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.StepParams.mirror_y)
  return _internal_mirror_y();
}
inline void StepParams::unsafe_arena_set_allocated_mirror_y(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* mirror_y) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mirror_y_);
  }
  _impl_.mirror_y_ = mirror_y;
  if (mirror_y) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.StepParams.mirror_y)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* StepParams::release_mirror_y() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.mirror_y_;
  _impl_.mirror_y_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* StepParams::unsafe_arena_release_mirror_y() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.StepParams.mirror_y)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.mirror_y_;
  _impl_.mirror_y_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* StepParams::_internal_mutable_mirror_y() {
  
  if (_impl_.mirror_y_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.mirror_y_ = p;
  }
  return _impl_.mirror_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* StepParams::mutable_mirror_y() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_mirror_y();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.StepParams.mirror_y)
  return _msg;
}
inline void StepParams::set_allocated_mirror_y(::PROTOBUF_NAMESPACE_ID::BoolValue* mirror_y) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mirror_y_);
  }
  if (mirror_y) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mirror_y));
    if (message_arena != submessage_arena) {
      mirror_y = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mirror_y, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mirror_y_ = mirror_y;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.StepParams.mirror_y)
}

// .google.protobuf.BoolValue mirror = 4 [deprecated = true];
inline bool StepParams::_internal_has_mirror() const {
  return this != internal_default_instance() && _impl_.mirror_ != nullptr;
}
inline bool StepParams::has_mirror() const {
  return _internal_has_mirror();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& StepParams::_internal_mirror() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.mirror_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& StepParams::mirror() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.StepParams.mirror)
  return _internal_mirror();
}
inline void StepParams::unsafe_arena_set_allocated_mirror(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* mirror) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mirror_);
  }
  _impl_.mirror_ = mirror;
  if (mirror) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.StepParams.mirror)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* StepParams::release_mirror() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.mirror_;
  _impl_.mirror_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* StepParams::unsafe_arena_release_mirror() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.StepParams.mirror)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.mirror_;
  _impl_.mirror_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* StepParams::_internal_mutable_mirror() {
  
  if (_impl_.mirror_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.mirror_ = p;
  }
  return _impl_.mirror_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* StepParams::mutable_mirror() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_mirror();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.StepParams.mirror)
  return _msg;
}
inline void StepParams::set_allocated_mirror(::PROTOBUF_NAMESPACE_ID::BoolValue* mirror) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mirror_);
  }
  if (mirror) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mirror));
    if (message_arena != submessage_arena) {
      mirror = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mirror, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mirror_ = mirror;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.StepParams.mirror)
}

// .google.protobuf.DoubleValue waypoint_dwell = 11;
inline bool StepParams::_internal_has_waypoint_dwell() const {
  return this != internal_default_instance() && _impl_.waypoint_dwell_ != nullptr;
}
inline bool StepParams::has_waypoint_dwell() const {
  return _internal_has_waypoint_dwell();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& StepParams::_internal_waypoint_dwell() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.waypoint_dwell_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& StepParams::waypoint_dwell() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.StepParams.waypoint_dwell)
  return _internal_waypoint_dwell();
}
inline void StepParams::unsafe_arena_set_allocated_waypoint_dwell(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* waypoint_dwell) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.waypoint_dwell_);
  }
  _impl_.waypoint_dwell_ = waypoint_dwell;
  if (waypoint_dwell) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.StepParams.waypoint_dwell)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* StepParams::release_waypoint_dwell() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.waypoint_dwell_;
  _impl_.waypoint_dwell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* StepParams::unsafe_arena_release_waypoint_dwell() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.StepParams.waypoint_dwell)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.waypoint_dwell_;
  _impl_.waypoint_dwell_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* StepParams::_internal_mutable_waypoint_dwell() {
  
  if (_impl_.waypoint_dwell_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.waypoint_dwell_ = p;
  }
  return _impl_.waypoint_dwell_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* StepParams::mutable_waypoint_dwell() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_waypoint_dwell();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.StepParams.waypoint_dwell)
  return _msg;
}
inline void StepParams::set_allocated_waypoint_dwell(::PROTOBUF_NAMESPACE_ID::DoubleValue* waypoint_dwell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.waypoint_dwell_);
  }
  if (waypoint_dwell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(waypoint_dwell));
    if (message_arena != submessage_arena) {
      waypoint_dwell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, waypoint_dwell, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.waypoint_dwell_ = waypoint_dwell;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.StepParams.waypoint_dwell)
}

// .google.protobuf.BoolValue touch = 12;
inline bool StepParams::_internal_has_touch() const {
  return this != internal_default_instance() && _impl_.touch_ != nullptr;
}
inline bool StepParams::has_touch() const {
  return _internal_has_touch();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& StepParams::_internal_touch() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.touch_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& StepParams::touch() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.StepParams.touch)
  return _internal_touch();
}
inline void StepParams::unsafe_arena_set_allocated_touch(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* touch) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.touch_);
  }
  _impl_.touch_ = touch;
  if (touch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.StepParams.touch)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* StepParams::release_touch() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.touch_;
  _impl_.touch_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* StepParams::unsafe_arena_release_touch() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.StepParams.touch)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.touch_;
  _impl_.touch_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* StepParams::_internal_mutable_touch() {
  
  if (_impl_.touch_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.touch_ = p;
  }
  return _impl_.touch_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* StepParams::mutable_touch() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_touch();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.StepParams.touch)
  return _msg;
}
inline void StepParams::set_allocated_touch(::PROTOBUF_NAMESPACE_ID::BoolValue* touch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.touch_);
  }
  if (touch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(touch));
    if (message_arena != submessage_arena) {
      touch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, touch, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.touch_ = touch;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.StepParams.touch)
}

// .bosdyn.api.Vec2Value touch_offset = 13;
inline bool StepParams::_internal_has_touch_offset() const {
  return this != internal_default_instance() && _impl_.touch_offset_ != nullptr;
}
inline bool StepParams::has_touch_offset() const {
  return _internal_has_touch_offset();
}
inline const ::bosdyn::api::Vec2Value& StepParams::_internal_touch_offset() const {
  const ::bosdyn::api::Vec2Value* p = _impl_.touch_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec2Value&>(
      ::bosdyn::api::_Vec2Value_default_instance_);
}
inline const ::bosdyn::api::Vec2Value& StepParams::touch_offset() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.StepParams.touch_offset)
  return _internal_touch_offset();
}
inline void StepParams::unsafe_arena_set_allocated_touch_offset(
    ::bosdyn::api::Vec2Value* touch_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.touch_offset_);
  }
  _impl_.touch_offset_ = touch_offset;
  if (touch_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.StepParams.touch_offset)
}
inline ::bosdyn::api::Vec2Value* StepParams::release_touch_offset() {
  
  ::bosdyn::api::Vec2Value* temp = _impl_.touch_offset_;
  _impl_.touch_offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec2Value* StepParams::unsafe_arena_release_touch_offset() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.StepParams.touch_offset)
  
  ::bosdyn::api::Vec2Value* temp = _impl_.touch_offset_;
  _impl_.touch_offset_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec2Value* StepParams::_internal_mutable_touch_offset() {
  
  if (_impl_.touch_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec2Value>(GetArenaForAllocation());
    _impl_.touch_offset_ = p;
  }
  return _impl_.touch_offset_;
}
inline ::bosdyn::api::Vec2Value* StepParams::mutable_touch_offset() {
  ::bosdyn::api::Vec2Value* _msg = _internal_mutable_touch_offset();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.StepParams.touch_offset)
  return _msg;
}
inline void StepParams::set_allocated_touch_offset(::bosdyn::api::Vec2Value* touch_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.touch_offset_);
  }
  if (touch_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(touch_offset));
    if (message_arena != submessage_arena) {
      touch_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, touch_offset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.touch_offset_ = touch_offset;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.StepParams.touch_offset)
}

// -------------------------------------------------------------------

// RotateBodyParams

// .bosdyn.api.spot.EulerZYXValue rotation = 1;
inline bool RotateBodyParams::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool RotateBodyParams::has_rotation() const {
  return _internal_has_rotation();
}
inline void RotateBodyParams::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::bosdyn::api::spot::EulerZYXValue& RotateBodyParams::_internal_rotation() const {
  const ::bosdyn::api::spot::EulerZYXValue* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::spot::EulerZYXValue&>(
      ::bosdyn::api::spot::_EulerZYXValue_default_instance_);
}
inline const ::bosdyn::api::spot::EulerZYXValue& RotateBodyParams::rotation() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.RotateBodyParams.rotation)
  return _internal_rotation();
}
inline void RotateBodyParams::unsafe_arena_set_allocated_rotation(
    ::bosdyn::api::spot::EulerZYXValue* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.RotateBodyParams.rotation)
}
inline ::bosdyn::api::spot::EulerZYXValue* RotateBodyParams::release_rotation() {
  
  ::bosdyn::api::spot::EulerZYXValue* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::spot::EulerZYXValue* RotateBodyParams::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.RotateBodyParams.rotation)
  
  ::bosdyn::api::spot::EulerZYXValue* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot::EulerZYXValue* RotateBodyParams::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot::EulerZYXValue>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::bosdyn::api::spot::EulerZYXValue* RotateBodyParams::mutable_rotation() {
  ::bosdyn::api::spot::EulerZYXValue* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.RotateBodyParams.rotation)
  return _msg;
}
inline void RotateBodyParams::set_allocated_rotation(::bosdyn::api::spot::EulerZYXValue* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.RotateBodyParams.rotation)
}

// .google.protobuf.BoolValue return_to_start_pose = 2;
inline bool RotateBodyParams::_internal_has_return_to_start_pose() const {
  return this != internal_default_instance() && _impl_.return_to_start_pose_ != nullptr;
}
inline bool RotateBodyParams::has_return_to_start_pose() const {
  return _internal_has_return_to_start_pose();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& RotateBodyParams::_internal_return_to_start_pose() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.return_to_start_pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& RotateBodyParams::return_to_start_pose() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.RotateBodyParams.return_to_start_pose)
  return _internal_return_to_start_pose();
}
inline void RotateBodyParams::unsafe_arena_set_allocated_return_to_start_pose(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* return_to_start_pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.return_to_start_pose_);
  }
  _impl_.return_to_start_pose_ = return_to_start_pose;
  if (return_to_start_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.RotateBodyParams.return_to_start_pose)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* RotateBodyParams::release_return_to_start_pose() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.return_to_start_pose_;
  _impl_.return_to_start_pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* RotateBodyParams::unsafe_arena_release_return_to_start_pose() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.RotateBodyParams.return_to_start_pose)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.return_to_start_pose_;
  _impl_.return_to_start_pose_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* RotateBodyParams::_internal_mutable_return_to_start_pose() {
  
  if (_impl_.return_to_start_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.return_to_start_pose_ = p;
  }
  return _impl_.return_to_start_pose_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* RotateBodyParams::mutable_return_to_start_pose() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_return_to_start_pose();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.RotateBodyParams.return_to_start_pose)
  return _msg;
}
inline void RotateBodyParams::set_allocated_return_to_start_pose(::PROTOBUF_NAMESPACE_ID::BoolValue* return_to_start_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.return_to_start_pose_);
  }
  if (return_to_start_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(return_to_start_pose));
    if (message_arena != submessage_arena) {
      return_to_start_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, return_to_start_pose, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.return_to_start_pose_ = return_to_start_pose;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.RotateBodyParams.return_to_start_pose)
}

// -------------------------------------------------------------------

// ButtCircleParams

// .google.protobuf.DoubleValue radius = 1;
inline bool ButtCircleParams::_internal_has_radius() const {
  return this != internal_default_instance() && _impl_.radius_ != nullptr;
}
inline bool ButtCircleParams::has_radius() const {
  return _internal_has_radius();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ButtCircleParams::_internal_radius() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.radius_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ButtCircleParams::radius() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.ButtCircleParams.radius)
  return _internal_radius();
}
inline void ButtCircleParams::unsafe_arena_set_allocated_radius(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* radius) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.radius_);
  }
  _impl_.radius_ = radius;
  if (radius) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.ButtCircleParams.radius)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ButtCircleParams::release_radius() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.radius_;
  _impl_.radius_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ButtCircleParams::unsafe_arena_release_radius() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.ButtCircleParams.radius)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.radius_;
  _impl_.radius_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ButtCircleParams::_internal_mutable_radius() {
  
  if (_impl_.radius_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.radius_ = p;
  }
  return _impl_.radius_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ButtCircleParams::mutable_radius() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_radius();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.ButtCircleParams.radius)
  return _msg;
}
inline void ButtCircleParams::set_allocated_radius(::PROTOBUF_NAMESPACE_ID::DoubleValue* radius) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.radius_);
  }
  if (radius) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(radius));
    if (message_arena != submessage_arena) {
      radius = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, radius, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.radius_ = radius;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.ButtCircleParams.radius)
}

// .google.protobuf.DoubleValue beats_per_circle = 2;
inline bool ButtCircleParams::_internal_has_beats_per_circle() const {
  return this != internal_default_instance() && _impl_.beats_per_circle_ != nullptr;
}
inline bool ButtCircleParams::has_beats_per_circle() const {
  return _internal_has_beats_per_circle();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ButtCircleParams::_internal_beats_per_circle() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.beats_per_circle_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ButtCircleParams::beats_per_circle() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.ButtCircleParams.beats_per_circle)
  return _internal_beats_per_circle();
}
inline void ButtCircleParams::unsafe_arena_set_allocated_beats_per_circle(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* beats_per_circle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.beats_per_circle_);
  }
  _impl_.beats_per_circle_ = beats_per_circle;
  if (beats_per_circle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.ButtCircleParams.beats_per_circle)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ButtCircleParams::release_beats_per_circle() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.beats_per_circle_;
  _impl_.beats_per_circle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ButtCircleParams::unsafe_arena_release_beats_per_circle() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.ButtCircleParams.beats_per_circle)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.beats_per_circle_;
  _impl_.beats_per_circle_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ButtCircleParams::_internal_mutable_beats_per_circle() {
  
  if (_impl_.beats_per_circle_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.beats_per_circle_ = p;
  }
  return _impl_.beats_per_circle_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ButtCircleParams::mutable_beats_per_circle() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_beats_per_circle();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.ButtCircleParams.beats_per_circle)
  return _msg;
}
inline void ButtCircleParams::set_allocated_beats_per_circle(::PROTOBUF_NAMESPACE_ID::DoubleValue* beats_per_circle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.beats_per_circle_);
  }
  if (beats_per_circle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(beats_per_circle));
    if (message_arena != submessage_arena) {
      beats_per_circle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, beats_per_circle, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.beats_per_circle_ = beats_per_circle;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.ButtCircleParams.beats_per_circle)
}

// .google.protobuf.DoubleValue number_of_circles = 3;
inline bool ButtCircleParams::_internal_has_number_of_circles() const {
  return this != internal_default_instance() && _impl_.number_of_circles_ != nullptr;
}
inline bool ButtCircleParams::has_number_of_circles() const {
  return _internal_has_number_of_circles();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ButtCircleParams::_internal_number_of_circles() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.number_of_circles_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ButtCircleParams::number_of_circles() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.ButtCircleParams.number_of_circles)
  return _internal_number_of_circles();
}
inline void ButtCircleParams::unsafe_arena_set_allocated_number_of_circles(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* number_of_circles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.number_of_circles_);
  }
  _impl_.number_of_circles_ = number_of_circles;
  if (number_of_circles) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.ButtCircleParams.number_of_circles)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ButtCircleParams::release_number_of_circles() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.number_of_circles_;
  _impl_.number_of_circles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ButtCircleParams::unsafe_arena_release_number_of_circles() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.ButtCircleParams.number_of_circles)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.number_of_circles_;
  _impl_.number_of_circles_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ButtCircleParams::_internal_mutable_number_of_circles() {
  
  if (_impl_.number_of_circles_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.number_of_circles_ = p;
  }
  return _impl_.number_of_circles_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ButtCircleParams::mutable_number_of_circles() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_number_of_circles();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.ButtCircleParams.number_of_circles)
  return _msg;
}
inline void ButtCircleParams::set_allocated_number_of_circles(::PROTOBUF_NAMESPACE_ID::DoubleValue* number_of_circles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.number_of_circles_);
  }
  if (number_of_circles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(number_of_circles));
    if (message_arena != submessage_arena) {
      number_of_circles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, number_of_circles, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.number_of_circles_ = number_of_circles;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.ButtCircleParams.number_of_circles)
}

// .bosdyn.api.spot.Pivot pivot = 4;
inline void ButtCircleParams::clear_pivot() {
  _impl_.pivot_ = 0;
}
inline ::bosdyn::api::spot::Pivot ButtCircleParams::_internal_pivot() const {
  return static_cast< ::bosdyn::api::spot::Pivot >(_impl_.pivot_);
}
inline ::bosdyn::api::spot::Pivot ButtCircleParams::pivot() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.ButtCircleParams.pivot)
  return _internal_pivot();
}
inline void ButtCircleParams::_internal_set_pivot(::bosdyn::api::spot::Pivot value) {
  
  _impl_.pivot_ = value;
}
inline void ButtCircleParams::set_pivot(::bosdyn::api::spot::Pivot value) {
  _internal_set_pivot(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot.ButtCircleParams.pivot)
}

// .google.protobuf.BoolValue clockwise = 5;
inline bool ButtCircleParams::_internal_has_clockwise() const {
  return this != internal_default_instance() && _impl_.clockwise_ != nullptr;
}
inline bool ButtCircleParams::has_clockwise() const {
  return _internal_has_clockwise();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& ButtCircleParams::_internal_clockwise() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.clockwise_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& ButtCircleParams::clockwise() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.ButtCircleParams.clockwise)
  return _internal_clockwise();
}
inline void ButtCircleParams::unsafe_arena_set_allocated_clockwise(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* clockwise) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.clockwise_);
  }
  _impl_.clockwise_ = clockwise;
  if (clockwise) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.ButtCircleParams.clockwise)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ButtCircleParams::release_clockwise() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.clockwise_;
  _impl_.clockwise_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ButtCircleParams::unsafe_arena_release_clockwise() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.ButtCircleParams.clockwise)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.clockwise_;
  _impl_.clockwise_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ButtCircleParams::_internal_mutable_clockwise() {
  
  if (_impl_.clockwise_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.clockwise_ = p;
  }
  return _impl_.clockwise_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ButtCircleParams::mutable_clockwise() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_clockwise();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.ButtCircleParams.clockwise)
  return _msg;
}
inline void ButtCircleParams::set_allocated_clockwise(::PROTOBUF_NAMESPACE_ID::BoolValue* clockwise) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.clockwise_);
  }
  if (clockwise) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clockwise));
    if (message_arena != submessage_arena) {
      clockwise = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clockwise, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.clockwise_ = clockwise;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.ButtCircleParams.clockwise)
}

// .google.protobuf.DoubleValue starting_angle = 6;
inline bool ButtCircleParams::_internal_has_starting_angle() const {
  return this != internal_default_instance() && _impl_.starting_angle_ != nullptr;
}
inline bool ButtCircleParams::has_starting_angle() const {
  return _internal_has_starting_angle();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ButtCircleParams::_internal_starting_angle() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.starting_angle_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ButtCircleParams::starting_angle() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.ButtCircleParams.starting_angle)
  return _internal_starting_angle();
}
inline void ButtCircleParams::unsafe_arena_set_allocated_starting_angle(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* starting_angle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.starting_angle_);
  }
  _impl_.starting_angle_ = starting_angle;
  if (starting_angle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.ButtCircleParams.starting_angle)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ButtCircleParams::release_starting_angle() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.starting_angle_;
  _impl_.starting_angle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ButtCircleParams::unsafe_arena_release_starting_angle() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.ButtCircleParams.starting_angle)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.starting_angle_;
  _impl_.starting_angle_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ButtCircleParams::_internal_mutable_starting_angle() {
  
  if (_impl_.starting_angle_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.starting_angle_ = p;
  }
  return _impl_.starting_angle_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ButtCircleParams::mutable_starting_angle() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_starting_angle();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.ButtCircleParams.starting_angle)
  return _msg;
}
inline void ButtCircleParams::set_allocated_starting_angle(::PROTOBUF_NAMESPACE_ID::DoubleValue* starting_angle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.starting_angle_);
  }
  if (starting_angle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(starting_angle));
    if (message_arena != submessage_arena) {
      starting_angle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, starting_angle, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.starting_angle_ = starting_angle;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.ButtCircleParams.starting_angle)
}

// -------------------------------------------------------------------

// TwerkParams

// .google.protobuf.DoubleValue height = 1;
inline bool TwerkParams::_internal_has_height() const {
  return this != internal_default_instance() && _impl_.height_ != nullptr;
}
inline bool TwerkParams::has_height() const {
  return _internal_has_height();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& TwerkParams::_internal_height() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.height_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& TwerkParams::height() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.TwerkParams.height)
  return _internal_height();
}
inline void TwerkParams::unsafe_arena_set_allocated_height(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.height_);
  }
  _impl_.height_ = height;
  if (height) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.TwerkParams.height)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* TwerkParams::release_height() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.height_;
  _impl_.height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* TwerkParams::unsafe_arena_release_height() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.TwerkParams.height)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.height_;
  _impl_.height_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* TwerkParams::_internal_mutable_height() {
  
  if (_impl_.height_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.height_ = p;
  }
  return _impl_.height_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* TwerkParams::mutable_height() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_height();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.TwerkParams.height)
  return _msg;
}
inline void TwerkParams::set_allocated_height(::PROTOBUF_NAMESPACE_ID::DoubleValue* height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.height_);
  }
  if (height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(height));
    if (message_arena != submessage_arena) {
      height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, height, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.height_ = height;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.TwerkParams.height)
}

// -------------------------------------------------------------------

// TurnParams

// .google.protobuf.DoubleValue yaw = 1;
inline bool TurnParams::_internal_has_yaw() const {
  return this != internal_default_instance() && _impl_.yaw_ != nullptr;
}
inline bool TurnParams::has_yaw() const {
  return _internal_has_yaw();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& TurnParams::_internal_yaw() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.yaw_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& TurnParams::yaw() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.TurnParams.yaw)
  return _internal_yaw();
}
inline void TurnParams::unsafe_arena_set_allocated_yaw(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yaw_);
  }
  _impl_.yaw_ = yaw;
  if (yaw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.TurnParams.yaw)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* TurnParams::release_yaw() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.yaw_;
  _impl_.yaw_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* TurnParams::unsafe_arena_release_yaw() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.TurnParams.yaw)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.yaw_;
  _impl_.yaw_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* TurnParams::_internal_mutable_yaw() {
  
  if (_impl_.yaw_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.yaw_ = p;
  }
  return _impl_.yaw_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* TurnParams::mutable_yaw() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_yaw();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.TurnParams.yaw)
  return _msg;
}
inline void TurnParams::set_allocated_yaw(::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yaw_);
  }
  if (yaw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(yaw));
    if (message_arena != submessage_arena) {
      yaw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yaw, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.yaw_ = yaw;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.TurnParams.yaw)
}

// .google.protobuf.DoubleValue absolute_yaw = 5;
inline bool TurnParams::_internal_has_absolute_yaw() const {
  return this != internal_default_instance() && _impl_.absolute_yaw_ != nullptr;
}
inline bool TurnParams::has_absolute_yaw() const {
  return _internal_has_absolute_yaw();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& TurnParams::_internal_absolute_yaw() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.absolute_yaw_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& TurnParams::absolute_yaw() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.TurnParams.absolute_yaw)
  return _internal_absolute_yaw();
}
inline void TurnParams::unsafe_arena_set_allocated_absolute_yaw(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* absolute_yaw) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.absolute_yaw_);
  }
  _impl_.absolute_yaw_ = absolute_yaw;
  if (absolute_yaw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.TurnParams.absolute_yaw)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* TurnParams::release_absolute_yaw() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.absolute_yaw_;
  _impl_.absolute_yaw_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* TurnParams::unsafe_arena_release_absolute_yaw() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.TurnParams.absolute_yaw)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.absolute_yaw_;
  _impl_.absolute_yaw_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* TurnParams::_internal_mutable_absolute_yaw() {
  
  if (_impl_.absolute_yaw_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.absolute_yaw_ = p;
  }
  return _impl_.absolute_yaw_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* TurnParams::mutable_absolute_yaw() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_absolute_yaw();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.TurnParams.absolute_yaw)
  return _msg;
}
inline void TurnParams::set_allocated_absolute_yaw(::PROTOBUF_NAMESPACE_ID::DoubleValue* absolute_yaw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.absolute_yaw_);
  }
  if (absolute_yaw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(absolute_yaw));
    if (message_arena != submessage_arena) {
      absolute_yaw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, absolute_yaw, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.absolute_yaw_ = absolute_yaw;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.TurnParams.absolute_yaw)
}

// .google.protobuf.BoolValue yaw_is_absolute = 6;
inline bool TurnParams::_internal_has_yaw_is_absolute() const {
  return this != internal_default_instance() && _impl_.yaw_is_absolute_ != nullptr;
}
inline bool TurnParams::has_yaw_is_absolute() const {
  return _internal_has_yaw_is_absolute();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& TurnParams::_internal_yaw_is_absolute() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.yaw_is_absolute_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& TurnParams::yaw_is_absolute() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.TurnParams.yaw_is_absolute)
  return _internal_yaw_is_absolute();
}
inline void TurnParams::unsafe_arena_set_allocated_yaw_is_absolute(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* yaw_is_absolute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yaw_is_absolute_);
  }
  _impl_.yaw_is_absolute_ = yaw_is_absolute;
  if (yaw_is_absolute) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.TurnParams.yaw_is_absolute)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* TurnParams::release_yaw_is_absolute() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.yaw_is_absolute_;
  _impl_.yaw_is_absolute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* TurnParams::unsafe_arena_release_yaw_is_absolute() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.TurnParams.yaw_is_absolute)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.yaw_is_absolute_;
  _impl_.yaw_is_absolute_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* TurnParams::_internal_mutable_yaw_is_absolute() {
  
  if (_impl_.yaw_is_absolute_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.yaw_is_absolute_ = p;
  }
  return _impl_.yaw_is_absolute_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* TurnParams::mutable_yaw_is_absolute() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_yaw_is_absolute();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.TurnParams.yaw_is_absolute)
  return _msg;
}
inline void TurnParams::set_allocated_yaw_is_absolute(::PROTOBUF_NAMESPACE_ID::BoolValue* yaw_is_absolute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yaw_is_absolute_);
  }
  if (yaw_is_absolute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(yaw_is_absolute));
    if (message_arena != submessage_arena) {
      yaw_is_absolute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yaw_is_absolute, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.yaw_is_absolute_ = yaw_is_absolute;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.TurnParams.yaw_is_absolute)
}

// .google.protobuf.DoubleValue swing_height = 3;
inline bool TurnParams::_internal_has_swing_height() const {
  return this != internal_default_instance() && _impl_.swing_height_ != nullptr;
}
inline bool TurnParams::has_swing_height() const {
  return _internal_has_swing_height();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& TurnParams::_internal_swing_height() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.swing_height_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& TurnParams::swing_height() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.TurnParams.swing_height)
  return _internal_swing_height();
}
inline void TurnParams::unsafe_arena_set_allocated_swing_height(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swing_height_);
  }
  _impl_.swing_height_ = swing_height;
  if (swing_height) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.TurnParams.swing_height)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* TurnParams::release_swing_height() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.swing_height_;
  _impl_.swing_height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* TurnParams::unsafe_arena_release_swing_height() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.TurnParams.swing_height)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.swing_height_;
  _impl_.swing_height_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* TurnParams::_internal_mutable_swing_height() {
  
  if (_impl_.swing_height_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.swing_height_ = p;
  }
  return _impl_.swing_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* TurnParams::mutable_swing_height() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_swing_height();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.TurnParams.swing_height)
  return _msg;
}
inline void TurnParams::set_allocated_swing_height(::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swing_height_);
  }
  if (swing_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swing_height));
    if (message_arena != submessage_arena) {
      swing_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swing_height, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swing_height_ = swing_height;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.TurnParams.swing_height)
}

// .google.protobuf.DoubleValue swing_velocity = 4;
inline bool TurnParams::_internal_has_swing_velocity() const {
  return this != internal_default_instance() && _impl_.swing_velocity_ != nullptr;
}
inline bool TurnParams::has_swing_velocity() const {
  return _internal_has_swing_velocity();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& TurnParams::_internal_swing_velocity() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.swing_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& TurnParams::swing_velocity() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.TurnParams.swing_velocity)
  return _internal_swing_velocity();
}
inline void TurnParams::unsafe_arena_set_allocated_swing_velocity(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swing_velocity_);
  }
  _impl_.swing_velocity_ = swing_velocity;
  if (swing_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.TurnParams.swing_velocity)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* TurnParams::release_swing_velocity() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.swing_velocity_;
  _impl_.swing_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* TurnParams::unsafe_arena_release_swing_velocity() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.TurnParams.swing_velocity)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.swing_velocity_;
  _impl_.swing_velocity_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* TurnParams::_internal_mutable_swing_velocity() {
  
  if (_impl_.swing_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.swing_velocity_ = p;
  }
  return _impl_.swing_velocity_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* TurnParams::mutable_swing_velocity() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_swing_velocity();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.TurnParams.swing_velocity)
  return _msg;
}
inline void TurnParams::set_allocated_swing_velocity(::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swing_velocity_);
  }
  if (swing_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swing_velocity));
    if (message_arena != submessage_arena) {
      swing_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swing_velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swing_velocity_ = swing_velocity;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.TurnParams.swing_velocity)
}

// .bosdyn.api.Vec2Value motion = 7;
inline bool TurnParams::_internal_has_motion() const {
  return this != internal_default_instance() && _impl_.motion_ != nullptr;
}
inline bool TurnParams::has_motion() const {
  return _internal_has_motion();
}
inline const ::bosdyn::api::Vec2Value& TurnParams::_internal_motion() const {
  const ::bosdyn::api::Vec2Value* p = _impl_.motion_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec2Value&>(
      ::bosdyn::api::_Vec2Value_default_instance_);
}
inline const ::bosdyn::api::Vec2Value& TurnParams::motion() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.TurnParams.motion)
  return _internal_motion();
}
inline void TurnParams::unsafe_arena_set_allocated_motion(
    ::bosdyn::api::Vec2Value* motion) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.motion_);
  }
  _impl_.motion_ = motion;
  if (motion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.TurnParams.motion)
}
inline ::bosdyn::api::Vec2Value* TurnParams::release_motion() {
  
  ::bosdyn::api::Vec2Value* temp = _impl_.motion_;
  _impl_.motion_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec2Value* TurnParams::unsafe_arena_release_motion() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.TurnParams.motion)
  
  ::bosdyn::api::Vec2Value* temp = _impl_.motion_;
  _impl_.motion_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec2Value* TurnParams::_internal_mutable_motion() {
  
  if (_impl_.motion_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec2Value>(GetArenaForAllocation());
    _impl_.motion_ = p;
  }
  return _impl_.motion_;
}
inline ::bosdyn::api::Vec2Value* TurnParams::mutable_motion() {
  ::bosdyn::api::Vec2Value* _msg = _internal_mutable_motion();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.TurnParams.motion)
  return _msg;
}
inline void TurnParams::set_allocated_motion(::bosdyn::api::Vec2Value* motion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.motion_);
  }
  if (motion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(motion));
    if (message_arena != submessage_arena) {
      motion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motion, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.motion_ = motion;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.TurnParams.motion)
}

// .bosdyn.api.Vec2Value absolute_motion = 8;
inline bool TurnParams::_internal_has_absolute_motion() const {
  return this != internal_default_instance() && _impl_.absolute_motion_ != nullptr;
}
inline bool TurnParams::has_absolute_motion() const {
  return _internal_has_absolute_motion();
}
inline const ::bosdyn::api::Vec2Value& TurnParams::_internal_absolute_motion() const {
  const ::bosdyn::api::Vec2Value* p = _impl_.absolute_motion_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec2Value&>(
      ::bosdyn::api::_Vec2Value_default_instance_);
}
inline const ::bosdyn::api::Vec2Value& TurnParams::absolute_motion() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.TurnParams.absolute_motion)
  return _internal_absolute_motion();
}
inline void TurnParams::unsafe_arena_set_allocated_absolute_motion(
    ::bosdyn::api::Vec2Value* absolute_motion) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.absolute_motion_);
  }
  _impl_.absolute_motion_ = absolute_motion;
  if (absolute_motion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.TurnParams.absolute_motion)
}
inline ::bosdyn::api::Vec2Value* TurnParams::release_absolute_motion() {
  
  ::bosdyn::api::Vec2Value* temp = _impl_.absolute_motion_;
  _impl_.absolute_motion_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec2Value* TurnParams::unsafe_arena_release_absolute_motion() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.TurnParams.absolute_motion)
  
  ::bosdyn::api::Vec2Value* temp = _impl_.absolute_motion_;
  _impl_.absolute_motion_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec2Value* TurnParams::_internal_mutable_absolute_motion() {
  
  if (_impl_.absolute_motion_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec2Value>(GetArenaForAllocation());
    _impl_.absolute_motion_ = p;
  }
  return _impl_.absolute_motion_;
}
inline ::bosdyn::api::Vec2Value* TurnParams::mutable_absolute_motion() {
  ::bosdyn::api::Vec2Value* _msg = _internal_mutable_absolute_motion();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.TurnParams.absolute_motion)
  return _msg;
}
inline void TurnParams::set_allocated_absolute_motion(::bosdyn::api::Vec2Value* absolute_motion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.absolute_motion_);
  }
  if (absolute_motion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(absolute_motion));
    if (message_arena != submessage_arena) {
      absolute_motion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, absolute_motion, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.absolute_motion_ = absolute_motion;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.TurnParams.absolute_motion)
}

// .google.protobuf.BoolValue motion_is_absolute = 9;
inline bool TurnParams::_internal_has_motion_is_absolute() const {
  return this != internal_default_instance() && _impl_.motion_is_absolute_ != nullptr;
}
inline bool TurnParams::has_motion_is_absolute() const {
  return _internal_has_motion_is_absolute();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& TurnParams::_internal_motion_is_absolute() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.motion_is_absolute_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& TurnParams::motion_is_absolute() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.TurnParams.motion_is_absolute)
  return _internal_motion_is_absolute();
}
inline void TurnParams::unsafe_arena_set_allocated_motion_is_absolute(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* motion_is_absolute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.motion_is_absolute_);
  }
  _impl_.motion_is_absolute_ = motion_is_absolute;
  if (motion_is_absolute) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.TurnParams.motion_is_absolute)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* TurnParams::release_motion_is_absolute() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.motion_is_absolute_;
  _impl_.motion_is_absolute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* TurnParams::unsafe_arena_release_motion_is_absolute() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.TurnParams.motion_is_absolute)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.motion_is_absolute_;
  _impl_.motion_is_absolute_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* TurnParams::_internal_mutable_motion_is_absolute() {
  
  if (_impl_.motion_is_absolute_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.motion_is_absolute_ = p;
  }
  return _impl_.motion_is_absolute_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* TurnParams::mutable_motion_is_absolute() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_motion_is_absolute();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.TurnParams.motion_is_absolute)
  return _msg;
}
inline void TurnParams::set_allocated_motion_is_absolute(::PROTOBUF_NAMESPACE_ID::BoolValue* motion_is_absolute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.motion_is_absolute_);
  }
  if (motion_is_absolute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(motion_is_absolute));
    if (message_arena != submessage_arena) {
      motion_is_absolute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motion_is_absolute, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.motion_is_absolute_ = motion_is_absolute;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.TurnParams.motion_is_absolute)
}

// .google.protobuf.BoolValue absolute = 2 [deprecated = true];
inline bool TurnParams::_internal_has_absolute() const {
  return this != internal_default_instance() && _impl_.absolute_ != nullptr;
}
inline bool TurnParams::has_absolute() const {
  return _internal_has_absolute();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& TurnParams::_internal_absolute() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.absolute_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& TurnParams::absolute() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.TurnParams.absolute)
  return _internal_absolute();
}
inline void TurnParams::unsafe_arena_set_allocated_absolute(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* absolute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.absolute_);
  }
  _impl_.absolute_ = absolute;
  if (absolute) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.TurnParams.absolute)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* TurnParams::release_absolute() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.absolute_;
  _impl_.absolute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* TurnParams::unsafe_arena_release_absolute() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.TurnParams.absolute)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.absolute_;
  _impl_.absolute_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* TurnParams::_internal_mutable_absolute() {
  
  if (_impl_.absolute_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.absolute_ = p;
  }
  return _impl_.absolute_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* TurnParams::mutable_absolute() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_absolute();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.TurnParams.absolute)
  return _msg;
}
inline void TurnParams::set_allocated_absolute(::PROTOBUF_NAMESPACE_ID::BoolValue* absolute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.absolute_);
  }
  if (absolute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(absolute));
    if (message_arena != submessage_arena) {
      absolute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, absolute, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.absolute_ = absolute;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.TurnParams.absolute)
}

// -------------------------------------------------------------------

// Pace2StepParams

// .bosdyn.api.Vec2Value motion = 1;
inline bool Pace2StepParams::_internal_has_motion() const {
  return this != internal_default_instance() && _impl_.motion_ != nullptr;
}
inline bool Pace2StepParams::has_motion() const {
  return _internal_has_motion();
}
inline const ::bosdyn::api::Vec2Value& Pace2StepParams::_internal_motion() const {
  const ::bosdyn::api::Vec2Value* p = _impl_.motion_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec2Value&>(
      ::bosdyn::api::_Vec2Value_default_instance_);
}
inline const ::bosdyn::api::Vec2Value& Pace2StepParams::motion() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.Pace2StepParams.motion)
  return _internal_motion();
}
inline void Pace2StepParams::unsafe_arena_set_allocated_motion(
    ::bosdyn::api::Vec2Value* motion) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.motion_);
  }
  _impl_.motion_ = motion;
  if (motion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.Pace2StepParams.motion)
}
inline ::bosdyn::api::Vec2Value* Pace2StepParams::release_motion() {
  
  ::bosdyn::api::Vec2Value* temp = _impl_.motion_;
  _impl_.motion_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec2Value* Pace2StepParams::unsafe_arena_release_motion() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.Pace2StepParams.motion)
  
  ::bosdyn::api::Vec2Value* temp = _impl_.motion_;
  _impl_.motion_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec2Value* Pace2StepParams::_internal_mutable_motion() {
  
  if (_impl_.motion_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec2Value>(GetArenaForAllocation());
    _impl_.motion_ = p;
  }
  return _impl_.motion_;
}
inline ::bosdyn::api::Vec2Value* Pace2StepParams::mutable_motion() {
  ::bosdyn::api::Vec2Value* _msg = _internal_mutable_motion();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.Pace2StepParams.motion)
  return _msg;
}
inline void Pace2StepParams::set_allocated_motion(::bosdyn::api::Vec2Value* motion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.motion_);
  }
  if (motion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(motion));
    if (message_arena != submessage_arena) {
      motion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motion, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.motion_ = motion;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.Pace2StepParams.motion)
}

// .bosdyn.api.Vec2Value absolute_motion = 6;
inline bool Pace2StepParams::_internal_has_absolute_motion() const {
  return this != internal_default_instance() && _impl_.absolute_motion_ != nullptr;
}
inline bool Pace2StepParams::has_absolute_motion() const {
  return _internal_has_absolute_motion();
}
inline const ::bosdyn::api::Vec2Value& Pace2StepParams::_internal_absolute_motion() const {
  const ::bosdyn::api::Vec2Value* p = _impl_.absolute_motion_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec2Value&>(
      ::bosdyn::api::_Vec2Value_default_instance_);
}
inline const ::bosdyn::api::Vec2Value& Pace2StepParams::absolute_motion() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.Pace2StepParams.absolute_motion)
  return _internal_absolute_motion();
}
inline void Pace2StepParams::unsafe_arena_set_allocated_absolute_motion(
    ::bosdyn::api::Vec2Value* absolute_motion) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.absolute_motion_);
  }
  _impl_.absolute_motion_ = absolute_motion;
  if (absolute_motion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.Pace2StepParams.absolute_motion)
}
inline ::bosdyn::api::Vec2Value* Pace2StepParams::release_absolute_motion() {
  
  ::bosdyn::api::Vec2Value* temp = _impl_.absolute_motion_;
  _impl_.absolute_motion_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec2Value* Pace2StepParams::unsafe_arena_release_absolute_motion() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.Pace2StepParams.absolute_motion)
  
  ::bosdyn::api::Vec2Value* temp = _impl_.absolute_motion_;
  _impl_.absolute_motion_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec2Value* Pace2StepParams::_internal_mutable_absolute_motion() {
  
  if (_impl_.absolute_motion_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec2Value>(GetArenaForAllocation());
    _impl_.absolute_motion_ = p;
  }
  return _impl_.absolute_motion_;
}
inline ::bosdyn::api::Vec2Value* Pace2StepParams::mutable_absolute_motion() {
  ::bosdyn::api::Vec2Value* _msg = _internal_mutable_absolute_motion();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.Pace2StepParams.absolute_motion)
  return _msg;
}
inline void Pace2StepParams::set_allocated_absolute_motion(::bosdyn::api::Vec2Value* absolute_motion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.absolute_motion_);
  }
  if (absolute_motion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(absolute_motion));
    if (message_arena != submessage_arena) {
      absolute_motion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, absolute_motion, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.absolute_motion_ = absolute_motion;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.Pace2StepParams.absolute_motion)
}

// .google.protobuf.BoolValue motion_is_absolute = 7;
inline bool Pace2StepParams::_internal_has_motion_is_absolute() const {
  return this != internal_default_instance() && _impl_.motion_is_absolute_ != nullptr;
}
inline bool Pace2StepParams::has_motion_is_absolute() const {
  return _internal_has_motion_is_absolute();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Pace2StepParams::_internal_motion_is_absolute() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.motion_is_absolute_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Pace2StepParams::motion_is_absolute() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.Pace2StepParams.motion_is_absolute)
  return _internal_motion_is_absolute();
}
inline void Pace2StepParams::unsafe_arena_set_allocated_motion_is_absolute(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* motion_is_absolute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.motion_is_absolute_);
  }
  _impl_.motion_is_absolute_ = motion_is_absolute;
  if (motion_is_absolute) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.Pace2StepParams.motion_is_absolute)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Pace2StepParams::release_motion_is_absolute() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.motion_is_absolute_;
  _impl_.motion_is_absolute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Pace2StepParams::unsafe_arena_release_motion_is_absolute() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.Pace2StepParams.motion_is_absolute)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.motion_is_absolute_;
  _impl_.motion_is_absolute_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Pace2StepParams::_internal_mutable_motion_is_absolute() {
  
  if (_impl_.motion_is_absolute_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.motion_is_absolute_ = p;
  }
  return _impl_.motion_is_absolute_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Pace2StepParams::mutable_motion_is_absolute() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_motion_is_absolute();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.Pace2StepParams.motion_is_absolute)
  return _msg;
}
inline void Pace2StepParams::set_allocated_motion_is_absolute(::PROTOBUF_NAMESPACE_ID::BoolValue* motion_is_absolute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.motion_is_absolute_);
  }
  if (motion_is_absolute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(motion_is_absolute));
    if (message_arena != submessage_arena) {
      motion_is_absolute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motion_is_absolute, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.motion_is_absolute_ = motion_is_absolute;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.Pace2StepParams.motion_is_absolute)
}

// .google.protobuf.DoubleValue swing_height = 3;
inline bool Pace2StepParams::_internal_has_swing_height() const {
  return this != internal_default_instance() && _impl_.swing_height_ != nullptr;
}
inline bool Pace2StepParams::has_swing_height() const {
  return _internal_has_swing_height();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Pace2StepParams::_internal_swing_height() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.swing_height_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Pace2StepParams::swing_height() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.Pace2StepParams.swing_height)
  return _internal_swing_height();
}
inline void Pace2StepParams::unsafe_arena_set_allocated_swing_height(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swing_height_);
  }
  _impl_.swing_height_ = swing_height;
  if (swing_height) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.Pace2StepParams.swing_height)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Pace2StepParams::release_swing_height() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.swing_height_;
  _impl_.swing_height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Pace2StepParams::unsafe_arena_release_swing_height() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.Pace2StepParams.swing_height)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.swing_height_;
  _impl_.swing_height_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Pace2StepParams::_internal_mutable_swing_height() {
  
  if (_impl_.swing_height_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.swing_height_ = p;
  }
  return _impl_.swing_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Pace2StepParams::mutable_swing_height() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_swing_height();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.Pace2StepParams.swing_height)
  return _msg;
}
inline void Pace2StepParams::set_allocated_swing_height(::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swing_height_);
  }
  if (swing_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swing_height));
    if (message_arena != submessage_arena) {
      swing_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swing_height, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swing_height_ = swing_height;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.Pace2StepParams.swing_height)
}

// .google.protobuf.DoubleValue swing_velocity = 4;
inline bool Pace2StepParams::_internal_has_swing_velocity() const {
  return this != internal_default_instance() && _impl_.swing_velocity_ != nullptr;
}
inline bool Pace2StepParams::has_swing_velocity() const {
  return _internal_has_swing_velocity();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Pace2StepParams::_internal_swing_velocity() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.swing_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Pace2StepParams::swing_velocity() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.Pace2StepParams.swing_velocity)
  return _internal_swing_velocity();
}
inline void Pace2StepParams::unsafe_arena_set_allocated_swing_velocity(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swing_velocity_);
  }
  _impl_.swing_velocity_ = swing_velocity;
  if (swing_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.Pace2StepParams.swing_velocity)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Pace2StepParams::release_swing_velocity() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.swing_velocity_;
  _impl_.swing_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Pace2StepParams::unsafe_arena_release_swing_velocity() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.Pace2StepParams.swing_velocity)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.swing_velocity_;
  _impl_.swing_velocity_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Pace2StepParams::_internal_mutable_swing_velocity() {
  
  if (_impl_.swing_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.swing_velocity_ = p;
  }
  return _impl_.swing_velocity_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Pace2StepParams::mutable_swing_velocity() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_swing_velocity();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.Pace2StepParams.swing_velocity)
  return _msg;
}
inline void Pace2StepParams::set_allocated_swing_velocity(::PROTOBUF_NAMESPACE_ID::DoubleValue* swing_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swing_velocity_);
  }
  if (swing_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swing_velocity));
    if (message_arena != submessage_arena) {
      swing_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swing_velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swing_velocity_ = swing_velocity;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.Pace2StepParams.swing_velocity)
}

// .google.protobuf.DoubleValue yaw = 8;
inline bool Pace2StepParams::_internal_has_yaw() const {
  return this != internal_default_instance() && _impl_.yaw_ != nullptr;
}
inline bool Pace2StepParams::has_yaw() const {
  return _internal_has_yaw();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Pace2StepParams::_internal_yaw() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.yaw_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Pace2StepParams::yaw() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.Pace2StepParams.yaw)
  return _internal_yaw();
}
inline void Pace2StepParams::unsafe_arena_set_allocated_yaw(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yaw_);
  }
  _impl_.yaw_ = yaw;
  if (yaw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.Pace2StepParams.yaw)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Pace2StepParams::release_yaw() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.yaw_;
  _impl_.yaw_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Pace2StepParams::unsafe_arena_release_yaw() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.Pace2StepParams.yaw)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.yaw_;
  _impl_.yaw_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Pace2StepParams::_internal_mutable_yaw() {
  
  if (_impl_.yaw_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.yaw_ = p;
  }
  return _impl_.yaw_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Pace2StepParams::mutable_yaw() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_yaw();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.Pace2StepParams.yaw)
  return _msg;
}
inline void Pace2StepParams::set_allocated_yaw(::PROTOBUF_NAMESPACE_ID::DoubleValue* yaw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yaw_);
  }
  if (yaw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(yaw));
    if (message_arena != submessage_arena) {
      yaw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yaw, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.yaw_ = yaw;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.Pace2StepParams.yaw)
}

// .google.protobuf.DoubleValue absolute_yaw = 9;
inline bool Pace2StepParams::_internal_has_absolute_yaw() const {
  return this != internal_default_instance() && _impl_.absolute_yaw_ != nullptr;
}
inline bool Pace2StepParams::has_absolute_yaw() const {
  return _internal_has_absolute_yaw();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Pace2StepParams::_internal_absolute_yaw() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.absolute_yaw_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Pace2StepParams::absolute_yaw() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.Pace2StepParams.absolute_yaw)
  return _internal_absolute_yaw();
}
inline void Pace2StepParams::unsafe_arena_set_allocated_absolute_yaw(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* absolute_yaw) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.absolute_yaw_);
  }
  _impl_.absolute_yaw_ = absolute_yaw;
  if (absolute_yaw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.Pace2StepParams.absolute_yaw)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Pace2StepParams::release_absolute_yaw() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.absolute_yaw_;
  _impl_.absolute_yaw_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Pace2StepParams::unsafe_arena_release_absolute_yaw() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.Pace2StepParams.absolute_yaw)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.absolute_yaw_;
  _impl_.absolute_yaw_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Pace2StepParams::_internal_mutable_absolute_yaw() {
  
  if (_impl_.absolute_yaw_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.absolute_yaw_ = p;
  }
  return _impl_.absolute_yaw_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Pace2StepParams::mutable_absolute_yaw() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_absolute_yaw();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.Pace2StepParams.absolute_yaw)
  return _msg;
}
inline void Pace2StepParams::set_allocated_absolute_yaw(::PROTOBUF_NAMESPACE_ID::DoubleValue* absolute_yaw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.absolute_yaw_);
  }
  if (absolute_yaw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(absolute_yaw));
    if (message_arena != submessage_arena) {
      absolute_yaw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, absolute_yaw, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.absolute_yaw_ = absolute_yaw;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.Pace2StepParams.absolute_yaw)
}

// .google.protobuf.BoolValue yaw_is_absolute = 10;
inline bool Pace2StepParams::_internal_has_yaw_is_absolute() const {
  return this != internal_default_instance() && _impl_.yaw_is_absolute_ != nullptr;
}
inline bool Pace2StepParams::has_yaw_is_absolute() const {
  return _internal_has_yaw_is_absolute();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Pace2StepParams::_internal_yaw_is_absolute() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.yaw_is_absolute_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Pace2StepParams::yaw_is_absolute() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.Pace2StepParams.yaw_is_absolute)
  return _internal_yaw_is_absolute();
}
inline void Pace2StepParams::unsafe_arena_set_allocated_yaw_is_absolute(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* yaw_is_absolute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yaw_is_absolute_);
  }
  _impl_.yaw_is_absolute_ = yaw_is_absolute;
  if (yaw_is_absolute) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.Pace2StepParams.yaw_is_absolute)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Pace2StepParams::release_yaw_is_absolute() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.yaw_is_absolute_;
  _impl_.yaw_is_absolute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Pace2StepParams::unsafe_arena_release_yaw_is_absolute() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.Pace2StepParams.yaw_is_absolute)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.yaw_is_absolute_;
  _impl_.yaw_is_absolute_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Pace2StepParams::_internal_mutable_yaw_is_absolute() {
  
  if (_impl_.yaw_is_absolute_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.yaw_is_absolute_ = p;
  }
  return _impl_.yaw_is_absolute_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Pace2StepParams::mutable_yaw_is_absolute() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_yaw_is_absolute();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.Pace2StepParams.yaw_is_absolute)
  return _msg;
}
inline void Pace2StepParams::set_allocated_yaw_is_absolute(::PROTOBUF_NAMESPACE_ID::BoolValue* yaw_is_absolute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yaw_is_absolute_);
  }
  if (yaw_is_absolute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(yaw_is_absolute));
    if (message_arena != submessage_arena) {
      yaw_is_absolute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yaw_is_absolute, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.yaw_is_absolute_ = yaw_is_absolute;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.Pace2StepParams.yaw_is_absolute)
}

// .google.protobuf.BoolValue absolute = 5;
inline bool Pace2StepParams::_internal_has_absolute() const {
  return this != internal_default_instance() && _impl_.absolute_ != nullptr;
}
inline bool Pace2StepParams::has_absolute() const {
  return _internal_has_absolute();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Pace2StepParams::_internal_absolute() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.absolute_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Pace2StepParams::absolute() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.Pace2StepParams.absolute)
  return _internal_absolute();
}
inline void Pace2StepParams::unsafe_arena_set_allocated_absolute(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* absolute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.absolute_);
  }
  _impl_.absolute_ = absolute;
  if (absolute) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.Pace2StepParams.absolute)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Pace2StepParams::release_absolute() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.absolute_;
  _impl_.absolute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Pace2StepParams::unsafe_arena_release_absolute() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.Pace2StepParams.absolute)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.absolute_;
  _impl_.absolute_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Pace2StepParams::_internal_mutable_absolute() {
  
  if (_impl_.absolute_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.absolute_ = p;
  }
  return _impl_.absolute_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Pace2StepParams::mutable_absolute() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_absolute();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.Pace2StepParams.absolute)
  return _msg;
}
inline void Pace2StepParams::set_allocated_absolute(::PROTOBUF_NAMESPACE_ID::BoolValue* absolute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.absolute_);
  }
  if (absolute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(absolute));
    if (message_arena != submessage_arena) {
      absolute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, absolute, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.absolute_ = absolute;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.Pace2StepParams.absolute)
}

// -------------------------------------------------------------------

// ChickenHeadParams

// .bosdyn.api.Vec3Value bob_magnitude = 1;
inline bool ChickenHeadParams::_internal_has_bob_magnitude() const {
  return this != internal_default_instance() && _impl_.bob_magnitude_ != nullptr;
}
inline bool ChickenHeadParams::has_bob_magnitude() const {
  return _internal_has_bob_magnitude();
}
inline const ::bosdyn::api::Vec3Value& ChickenHeadParams::_internal_bob_magnitude() const {
  const ::bosdyn::api::Vec3Value* p = _impl_.bob_magnitude_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec3Value&>(
      ::bosdyn::api::_Vec3Value_default_instance_);
}
inline const ::bosdyn::api::Vec3Value& ChickenHeadParams::bob_magnitude() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.ChickenHeadParams.bob_magnitude)
  return _internal_bob_magnitude();
}
inline void ChickenHeadParams::unsafe_arena_set_allocated_bob_magnitude(
    ::bosdyn::api::Vec3Value* bob_magnitude) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bob_magnitude_);
  }
  _impl_.bob_magnitude_ = bob_magnitude;
  if (bob_magnitude) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.ChickenHeadParams.bob_magnitude)
}
inline ::bosdyn::api::Vec3Value* ChickenHeadParams::release_bob_magnitude() {
  
  ::bosdyn::api::Vec3Value* temp = _impl_.bob_magnitude_;
  _impl_.bob_magnitude_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec3Value* ChickenHeadParams::unsafe_arena_release_bob_magnitude() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.ChickenHeadParams.bob_magnitude)
  
  ::bosdyn::api::Vec3Value* temp = _impl_.bob_magnitude_;
  _impl_.bob_magnitude_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec3Value* ChickenHeadParams::_internal_mutable_bob_magnitude() {
  
  if (_impl_.bob_magnitude_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec3Value>(GetArenaForAllocation());
    _impl_.bob_magnitude_ = p;
  }
  return _impl_.bob_magnitude_;
}
inline ::bosdyn::api::Vec3Value* ChickenHeadParams::mutable_bob_magnitude() {
  ::bosdyn::api::Vec3Value* _msg = _internal_mutable_bob_magnitude();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.ChickenHeadParams.bob_magnitude)
  return _msg;
}
inline void ChickenHeadParams::set_allocated_bob_magnitude(::bosdyn::api::Vec3Value* bob_magnitude) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bob_magnitude_);
  }
  if (bob_magnitude) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bob_magnitude));
    if (message_arena != submessage_arena) {
      bob_magnitude = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bob_magnitude, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bob_magnitude_ = bob_magnitude;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.ChickenHeadParams.bob_magnitude)
}

// .google.protobuf.Int32Value beats_per_cycle = 2;
inline bool ChickenHeadParams::_internal_has_beats_per_cycle() const {
  return this != internal_default_instance() && _impl_.beats_per_cycle_ != nullptr;
}
inline bool ChickenHeadParams::has_beats_per_cycle() const {
  return _internal_has_beats_per_cycle();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& ChickenHeadParams::_internal_beats_per_cycle() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.beats_per_cycle_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& ChickenHeadParams::beats_per_cycle() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.ChickenHeadParams.beats_per_cycle)
  return _internal_beats_per_cycle();
}
inline void ChickenHeadParams::unsafe_arena_set_allocated_beats_per_cycle(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* beats_per_cycle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.beats_per_cycle_);
  }
  _impl_.beats_per_cycle_ = beats_per_cycle;
  if (beats_per_cycle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.ChickenHeadParams.beats_per_cycle)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ChickenHeadParams::release_beats_per_cycle() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.beats_per_cycle_;
  _impl_.beats_per_cycle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ChickenHeadParams::unsafe_arena_release_beats_per_cycle() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.ChickenHeadParams.beats_per_cycle)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.beats_per_cycle_;
  _impl_.beats_per_cycle_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ChickenHeadParams::_internal_mutable_beats_per_cycle() {
  
  if (_impl_.beats_per_cycle_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.beats_per_cycle_ = p;
  }
  return _impl_.beats_per_cycle_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ChickenHeadParams::mutable_beats_per_cycle() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_beats_per_cycle();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.ChickenHeadParams.beats_per_cycle)
  return _msg;
}
inline void ChickenHeadParams::set_allocated_beats_per_cycle(::PROTOBUF_NAMESPACE_ID::Int32Value* beats_per_cycle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.beats_per_cycle_);
  }
  if (beats_per_cycle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(beats_per_cycle));
    if (message_arena != submessage_arena) {
      beats_per_cycle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, beats_per_cycle, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.beats_per_cycle_ = beats_per_cycle;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.ChickenHeadParams.beats_per_cycle)
}

// .google.protobuf.BoolValue follow = 3;
inline bool ChickenHeadParams::_internal_has_follow() const {
  return this != internal_default_instance() && _impl_.follow_ != nullptr;
}
inline bool ChickenHeadParams::has_follow() const {
  return _internal_has_follow();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& ChickenHeadParams::_internal_follow() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.follow_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& ChickenHeadParams::follow() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.ChickenHeadParams.follow)
  return _internal_follow();
}
inline void ChickenHeadParams::unsafe_arena_set_allocated_follow(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* follow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.follow_);
  }
  _impl_.follow_ = follow;
  if (follow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.ChickenHeadParams.follow)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ChickenHeadParams::release_follow() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.follow_;
  _impl_.follow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ChickenHeadParams::unsafe_arena_release_follow() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.ChickenHeadParams.follow)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.follow_;
  _impl_.follow_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ChickenHeadParams::_internal_mutable_follow() {
  
  if (_impl_.follow_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.follow_ = p;
  }
  return _impl_.follow_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ChickenHeadParams::mutable_follow() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_follow();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.ChickenHeadParams.follow)
  return _msg;
}
inline void ChickenHeadParams::set_allocated_follow(::PROTOBUF_NAMESPACE_ID::BoolValue* follow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.follow_);
  }
  if (follow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(follow));
    if (message_arena != submessage_arena) {
      follow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, follow, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.follow_ = follow;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.ChickenHeadParams.follow)
}

// -------------------------------------------------------------------

// ClapParams

// .bosdyn.api.Vec3Value direction = 1;
inline bool ClapParams::_internal_has_direction() const {
  return this != internal_default_instance() && _impl_.direction_ != nullptr;
}
inline bool ClapParams::has_direction() const {
  return _internal_has_direction();
}
inline const ::bosdyn::api::Vec3Value& ClapParams::_internal_direction() const {
  const ::bosdyn::api::Vec3Value* p = _impl_.direction_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec3Value&>(
      ::bosdyn::api::_Vec3Value_default_instance_);
}
inline const ::bosdyn::api::Vec3Value& ClapParams::direction() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.ClapParams.direction)
  return _internal_direction();
}
inline void ClapParams::unsafe_arena_set_allocated_direction(
    ::bosdyn::api::Vec3Value* direction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.direction_);
  }
  _impl_.direction_ = direction;
  if (direction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.ClapParams.direction)
}
inline ::bosdyn::api::Vec3Value* ClapParams::release_direction() {
  
  ::bosdyn::api::Vec3Value* temp = _impl_.direction_;
  _impl_.direction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec3Value* ClapParams::unsafe_arena_release_direction() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.ClapParams.direction)
  
  ::bosdyn::api::Vec3Value* temp = _impl_.direction_;
  _impl_.direction_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec3Value* ClapParams::_internal_mutable_direction() {
  
  if (_impl_.direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec3Value>(GetArenaForAllocation());
    _impl_.direction_ = p;
  }
  return _impl_.direction_;
}
inline ::bosdyn::api::Vec3Value* ClapParams::mutable_direction() {
  ::bosdyn::api::Vec3Value* _msg = _internal_mutable_direction();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.ClapParams.direction)
  return _msg;
}
inline void ClapParams::set_allocated_direction(::bosdyn::api::Vec3Value* direction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.direction_);
  }
  if (direction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction));
    if (message_arena != submessage_arena) {
      direction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.ClapParams.direction)
}

// .bosdyn.api.Vec3Value location = 2;
inline bool ClapParams::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool ClapParams::has_location() const {
  return _internal_has_location();
}
inline const ::bosdyn::api::Vec3Value& ClapParams::_internal_location() const {
  const ::bosdyn::api::Vec3Value* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec3Value&>(
      ::bosdyn::api::_Vec3Value_default_instance_);
}
inline const ::bosdyn::api::Vec3Value& ClapParams::location() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.ClapParams.location)
  return _internal_location();
}
inline void ClapParams::unsafe_arena_set_allocated_location(
    ::bosdyn::api::Vec3Value* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.ClapParams.location)
}
inline ::bosdyn::api::Vec3Value* ClapParams::release_location() {
  
  ::bosdyn::api::Vec3Value* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec3Value* ClapParams::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.ClapParams.location)
  
  ::bosdyn::api::Vec3Value* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec3Value* ClapParams::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec3Value>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::bosdyn::api::Vec3Value* ClapParams::mutable_location() {
  ::bosdyn::api::Vec3Value* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.ClapParams.location)
  return _msg;
}
inline void ClapParams::set_allocated_location(::bosdyn::api::Vec3Value* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location));
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.ClapParams.location)
}

// .google.protobuf.DoubleValue speed = 3;
inline bool ClapParams::_internal_has_speed() const {
  return this != internal_default_instance() && _impl_.speed_ != nullptr;
}
inline bool ClapParams::has_speed() const {
  return _internal_has_speed();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ClapParams::_internal_speed() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.speed_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ClapParams::speed() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.ClapParams.speed)
  return _internal_speed();
}
inline void ClapParams::unsafe_arena_set_allocated_speed(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* speed) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.speed_);
  }
  _impl_.speed_ = speed;
  if (speed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.ClapParams.speed)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ClapParams::release_speed() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.speed_;
  _impl_.speed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ClapParams::unsafe_arena_release_speed() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.ClapParams.speed)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.speed_;
  _impl_.speed_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ClapParams::_internal_mutable_speed() {
  
  if (_impl_.speed_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.speed_ = p;
  }
  return _impl_.speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ClapParams::mutable_speed() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_speed();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.ClapParams.speed)
  return _msg;
}
inline void ClapParams::set_allocated_speed(::PROTOBUF_NAMESPACE_ID::DoubleValue* speed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.speed_);
  }
  if (speed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed));
    if (message_arena != submessage_arena) {
      speed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.speed_ = speed;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.ClapParams.speed)
}

// .google.protobuf.DoubleValue clap_distance = 4;
inline bool ClapParams::_internal_has_clap_distance() const {
  return this != internal_default_instance() && _impl_.clap_distance_ != nullptr;
}
inline bool ClapParams::has_clap_distance() const {
  return _internal_has_clap_distance();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ClapParams::_internal_clap_distance() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.clap_distance_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ClapParams::clap_distance() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.ClapParams.clap_distance)
  return _internal_clap_distance();
}
inline void ClapParams::unsafe_arena_set_allocated_clap_distance(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* clap_distance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.clap_distance_);
  }
  _impl_.clap_distance_ = clap_distance;
  if (clap_distance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.ClapParams.clap_distance)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ClapParams::release_clap_distance() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.clap_distance_;
  _impl_.clap_distance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ClapParams::unsafe_arena_release_clap_distance() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.ClapParams.clap_distance)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.clap_distance_;
  _impl_.clap_distance_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ClapParams::_internal_mutable_clap_distance() {
  
  if (_impl_.clap_distance_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.clap_distance_ = p;
  }
  return _impl_.clap_distance_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ClapParams::mutable_clap_distance() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_clap_distance();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.ClapParams.clap_distance)
  return _msg;
}
inline void ClapParams::set_allocated_clap_distance(::PROTOBUF_NAMESPACE_ID::DoubleValue* clap_distance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.clap_distance_);
  }
  if (clap_distance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clap_distance));
    if (message_arena != submessage_arena) {
      clap_distance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clap_distance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.clap_distance_ = clap_distance;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.ClapParams.clap_distance)
}

// -------------------------------------------------------------------

// KneelCircleParams

// .bosdyn.api.Vec3Value location = 1;
inline bool KneelCircleParams::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool KneelCircleParams::has_location() const {
  return _internal_has_location();
}
inline const ::bosdyn::api::Vec3Value& KneelCircleParams::_internal_location() const {
  const ::bosdyn::api::Vec3Value* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec3Value&>(
      ::bosdyn::api::_Vec3Value_default_instance_);
}
inline const ::bosdyn::api::Vec3Value& KneelCircleParams::location() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.KneelCircleParams.location)
  return _internal_location();
}
inline void KneelCircleParams::unsafe_arena_set_allocated_location(
    ::bosdyn::api::Vec3Value* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.KneelCircleParams.location)
}
inline ::bosdyn::api::Vec3Value* KneelCircleParams::release_location() {
  
  ::bosdyn::api::Vec3Value* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec3Value* KneelCircleParams::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.KneelCircleParams.location)
  
  ::bosdyn::api::Vec3Value* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec3Value* KneelCircleParams::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec3Value>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::bosdyn::api::Vec3Value* KneelCircleParams::mutable_location() {
  ::bosdyn::api::Vec3Value* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.KneelCircleParams.location)
  return _msg;
}
inline void KneelCircleParams::set_allocated_location(::bosdyn::api::Vec3Value* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location));
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.KneelCircleParams.location)
}

// .google.protobuf.Int32Value beats_per_circle = 2;
inline bool KneelCircleParams::_internal_has_beats_per_circle() const {
  return this != internal_default_instance() && _impl_.beats_per_circle_ != nullptr;
}
inline bool KneelCircleParams::has_beats_per_circle() const {
  return _internal_has_beats_per_circle();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& KneelCircleParams::_internal_beats_per_circle() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.beats_per_circle_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& KneelCircleParams::beats_per_circle() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.KneelCircleParams.beats_per_circle)
  return _internal_beats_per_circle();
}
inline void KneelCircleParams::unsafe_arena_set_allocated_beats_per_circle(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* beats_per_circle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.beats_per_circle_);
  }
  _impl_.beats_per_circle_ = beats_per_circle;
  if (beats_per_circle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.KneelCircleParams.beats_per_circle)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* KneelCircleParams::release_beats_per_circle() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.beats_per_circle_;
  _impl_.beats_per_circle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* KneelCircleParams::unsafe_arena_release_beats_per_circle() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.KneelCircleParams.beats_per_circle)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.beats_per_circle_;
  _impl_.beats_per_circle_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* KneelCircleParams::_internal_mutable_beats_per_circle() {
  
  if (_impl_.beats_per_circle_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.beats_per_circle_ = p;
  }
  return _impl_.beats_per_circle_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* KneelCircleParams::mutable_beats_per_circle() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_beats_per_circle();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.KneelCircleParams.beats_per_circle)
  return _msg;
}
inline void KneelCircleParams::set_allocated_beats_per_circle(::PROTOBUF_NAMESPACE_ID::Int32Value* beats_per_circle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.beats_per_circle_);
  }
  if (beats_per_circle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(beats_per_circle));
    if (message_arena != submessage_arena) {
      beats_per_circle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, beats_per_circle, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.beats_per_circle_ = beats_per_circle;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.KneelCircleParams.beats_per_circle)
}

// .google.protobuf.DoubleValue number_of_circles = 3;
inline bool KneelCircleParams::_internal_has_number_of_circles() const {
  return this != internal_default_instance() && _impl_.number_of_circles_ != nullptr;
}
inline bool KneelCircleParams::has_number_of_circles() const {
  return _internal_has_number_of_circles();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& KneelCircleParams::_internal_number_of_circles() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.number_of_circles_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& KneelCircleParams::number_of_circles() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.KneelCircleParams.number_of_circles)
  return _internal_number_of_circles();
}
inline void KneelCircleParams::unsafe_arena_set_allocated_number_of_circles(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* number_of_circles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.number_of_circles_);
  }
  _impl_.number_of_circles_ = number_of_circles;
  if (number_of_circles) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.KneelCircleParams.number_of_circles)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelCircleParams::release_number_of_circles() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.number_of_circles_;
  _impl_.number_of_circles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelCircleParams::unsafe_arena_release_number_of_circles() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.KneelCircleParams.number_of_circles)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.number_of_circles_;
  _impl_.number_of_circles_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelCircleParams::_internal_mutable_number_of_circles() {
  
  if (_impl_.number_of_circles_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.number_of_circles_ = p;
  }
  return _impl_.number_of_circles_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelCircleParams::mutable_number_of_circles() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_number_of_circles();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.KneelCircleParams.number_of_circles)
  return _msg;
}
inline void KneelCircleParams::set_allocated_number_of_circles(::PROTOBUF_NAMESPACE_ID::DoubleValue* number_of_circles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.number_of_circles_);
  }
  if (number_of_circles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(number_of_circles));
    if (message_arena != submessage_arena) {
      number_of_circles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, number_of_circles, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.number_of_circles_ = number_of_circles;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.KneelCircleParams.number_of_circles)
}

// .google.protobuf.DoubleValue offset = 4;
inline bool KneelCircleParams::_internal_has_offset() const {
  return this != internal_default_instance() && _impl_.offset_ != nullptr;
}
inline bool KneelCircleParams::has_offset() const {
  return _internal_has_offset();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& KneelCircleParams::_internal_offset() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& KneelCircleParams::offset() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.KneelCircleParams.offset)
  return _internal_offset();
}
inline void KneelCircleParams::unsafe_arena_set_allocated_offset(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offset_);
  }
  _impl_.offset_ = offset;
  if (offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.KneelCircleParams.offset)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelCircleParams::release_offset() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.offset_;
  _impl_.offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelCircleParams::unsafe_arena_release_offset() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.KneelCircleParams.offset)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.offset_;
  _impl_.offset_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelCircleParams::_internal_mutable_offset() {
  
  if (_impl_.offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.offset_ = p;
  }
  return _impl_.offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelCircleParams::mutable_offset() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_offset();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.KneelCircleParams.offset)
  return _msg;
}
inline void KneelCircleParams::set_allocated_offset(::PROTOBUF_NAMESPACE_ID::DoubleValue* offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offset_);
  }
  if (offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offset));
    if (message_arena != submessage_arena) {
      offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.offset_ = offset;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.KneelCircleParams.offset)
}

// .google.protobuf.DoubleValue radius = 5;
inline bool KneelCircleParams::_internal_has_radius() const {
  return this != internal_default_instance() && _impl_.radius_ != nullptr;
}
inline bool KneelCircleParams::has_radius() const {
  return _internal_has_radius();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& KneelCircleParams::_internal_radius() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.radius_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& KneelCircleParams::radius() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.KneelCircleParams.radius)
  return _internal_radius();
}
inline void KneelCircleParams::unsafe_arena_set_allocated_radius(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* radius) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.radius_);
  }
  _impl_.radius_ = radius;
  if (radius) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.KneelCircleParams.radius)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelCircleParams::release_radius() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.radius_;
  _impl_.radius_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelCircleParams::unsafe_arena_release_radius() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.KneelCircleParams.radius)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.radius_;
  _impl_.radius_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelCircleParams::_internal_mutable_radius() {
  
  if (_impl_.radius_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.radius_ = p;
  }
  return _impl_.radius_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* KneelCircleParams::mutable_radius() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_radius();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.KneelCircleParams.radius)
  return _msg;
}
inline void KneelCircleParams::set_allocated_radius(::PROTOBUF_NAMESPACE_ID::DoubleValue* radius) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.radius_);
  }
  if (radius) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(radius));
    if (message_arena != submessage_arena) {
      radius = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, radius, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.radius_ = radius;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.KneelCircleParams.radius)
}

// .google.protobuf.BoolValue reverse = 6;
inline bool KneelCircleParams::_internal_has_reverse() const {
  return this != internal_default_instance() && _impl_.reverse_ != nullptr;
}
inline bool KneelCircleParams::has_reverse() const {
  return _internal_has_reverse();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& KneelCircleParams::_internal_reverse() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.reverse_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& KneelCircleParams::reverse() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.KneelCircleParams.reverse)
  return _internal_reverse();
}
inline void KneelCircleParams::unsafe_arena_set_allocated_reverse(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* reverse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reverse_);
  }
  _impl_.reverse_ = reverse;
  if (reverse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.KneelCircleParams.reverse)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* KneelCircleParams::release_reverse() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.reverse_;
  _impl_.reverse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* KneelCircleParams::unsafe_arena_release_reverse() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.KneelCircleParams.reverse)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.reverse_;
  _impl_.reverse_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* KneelCircleParams::_internal_mutable_reverse() {
  
  if (_impl_.reverse_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.reverse_ = p;
  }
  return _impl_.reverse_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* KneelCircleParams::mutable_reverse() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_reverse();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.KneelCircleParams.reverse)
  return _msg;
}
inline void KneelCircleParams::set_allocated_reverse(::PROTOBUF_NAMESPACE_ID::BoolValue* reverse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reverse_);
  }
  if (reverse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reverse));
    if (message_arena != submessage_arena) {
      reverse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reverse, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reverse_ = reverse;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.KneelCircleParams.reverse)
}

// -------------------------------------------------------------------

// FrontUpParams

// .google.protobuf.BoolValue mirror = 1;
inline bool FrontUpParams::_internal_has_mirror() const {
  return this != internal_default_instance() && _impl_.mirror_ != nullptr;
}
inline bool FrontUpParams::has_mirror() const {
  return _internal_has_mirror();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& FrontUpParams::_internal_mirror() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.mirror_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& FrontUpParams::mirror() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.FrontUpParams.mirror)
  return _internal_mirror();
}
inline void FrontUpParams::unsafe_arena_set_allocated_mirror(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* mirror) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mirror_);
  }
  _impl_.mirror_ = mirror;
  if (mirror) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.FrontUpParams.mirror)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* FrontUpParams::release_mirror() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.mirror_;
  _impl_.mirror_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* FrontUpParams::unsafe_arena_release_mirror() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.FrontUpParams.mirror)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.mirror_;
  _impl_.mirror_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* FrontUpParams::_internal_mutable_mirror() {
  
  if (_impl_.mirror_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.mirror_ = p;
  }
  return _impl_.mirror_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* FrontUpParams::mutable_mirror() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_mirror();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.FrontUpParams.mirror)
  return _msg;
}
inline void FrontUpParams::set_allocated_mirror(::PROTOBUF_NAMESPACE_ID::BoolValue* mirror) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mirror_);
  }
  if (mirror) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mirror));
    if (message_arena != submessage_arena) {
      mirror = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mirror, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mirror_ = mirror;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.FrontUpParams.mirror)
}

// -------------------------------------------------------------------

// FidgetStandParams

// .bosdyn.api.spot.FidgetStandParams.FidgetPreset preset = 1;
inline void FidgetStandParams::clear_preset() {
  _impl_.preset_ = 0;
}
inline ::bosdyn::api::spot::FidgetStandParams_FidgetPreset FidgetStandParams::_internal_preset() const {
  return static_cast< ::bosdyn::api::spot::FidgetStandParams_FidgetPreset >(_impl_.preset_);
}
inline ::bosdyn::api::spot::FidgetStandParams_FidgetPreset FidgetStandParams::preset() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.FidgetStandParams.preset)
  return _internal_preset();
}
inline void FidgetStandParams::_internal_set_preset(::bosdyn::api::spot::FidgetStandParams_FidgetPreset value) {
  
  _impl_.preset_ = value;
}
inline void FidgetStandParams::set_preset(::bosdyn::api::spot::FidgetStandParams_FidgetPreset value) {
  _internal_set_preset(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot.FidgetStandParams.preset)
}

// .google.protobuf.DoubleValue min_gaze_pitch = 2;
inline bool FidgetStandParams::_internal_has_min_gaze_pitch() const {
  return this != internal_default_instance() && _impl_.min_gaze_pitch_ != nullptr;
}
inline bool FidgetStandParams::has_min_gaze_pitch() const {
  return _internal_has_min_gaze_pitch();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& FidgetStandParams::_internal_min_gaze_pitch() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.min_gaze_pitch_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& FidgetStandParams::min_gaze_pitch() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.FidgetStandParams.min_gaze_pitch)
  return _internal_min_gaze_pitch();
}
inline void FidgetStandParams::unsafe_arena_set_allocated_min_gaze_pitch(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* min_gaze_pitch) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.min_gaze_pitch_);
  }
  _impl_.min_gaze_pitch_ = min_gaze_pitch;
  if (min_gaze_pitch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.FidgetStandParams.min_gaze_pitch)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::release_min_gaze_pitch() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.min_gaze_pitch_;
  _impl_.min_gaze_pitch_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::unsafe_arena_release_min_gaze_pitch() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.FidgetStandParams.min_gaze_pitch)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.min_gaze_pitch_;
  _impl_.min_gaze_pitch_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::_internal_mutable_min_gaze_pitch() {
  
  if (_impl_.min_gaze_pitch_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.min_gaze_pitch_ = p;
  }
  return _impl_.min_gaze_pitch_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::mutable_min_gaze_pitch() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_min_gaze_pitch();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.FidgetStandParams.min_gaze_pitch)
  return _msg;
}
inline void FidgetStandParams::set_allocated_min_gaze_pitch(::PROTOBUF_NAMESPACE_ID::DoubleValue* min_gaze_pitch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.min_gaze_pitch_);
  }
  if (min_gaze_pitch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_gaze_pitch));
    if (message_arena != submessage_arena) {
      min_gaze_pitch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_gaze_pitch, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.min_gaze_pitch_ = min_gaze_pitch;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.FidgetStandParams.min_gaze_pitch)
}

// .google.protobuf.DoubleValue max_gaze_pitch = 3;
inline bool FidgetStandParams::_internal_has_max_gaze_pitch() const {
  return this != internal_default_instance() && _impl_.max_gaze_pitch_ != nullptr;
}
inline bool FidgetStandParams::has_max_gaze_pitch() const {
  return _internal_has_max_gaze_pitch();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& FidgetStandParams::_internal_max_gaze_pitch() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.max_gaze_pitch_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& FidgetStandParams::max_gaze_pitch() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.FidgetStandParams.max_gaze_pitch)
  return _internal_max_gaze_pitch();
}
inline void FidgetStandParams::unsafe_arena_set_allocated_max_gaze_pitch(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_gaze_pitch) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_gaze_pitch_);
  }
  _impl_.max_gaze_pitch_ = max_gaze_pitch;
  if (max_gaze_pitch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.FidgetStandParams.max_gaze_pitch)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::release_max_gaze_pitch() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_gaze_pitch_;
  _impl_.max_gaze_pitch_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::unsafe_arena_release_max_gaze_pitch() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.FidgetStandParams.max_gaze_pitch)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.max_gaze_pitch_;
  _impl_.max_gaze_pitch_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::_internal_mutable_max_gaze_pitch() {
  
  if (_impl_.max_gaze_pitch_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.max_gaze_pitch_ = p;
  }
  return _impl_.max_gaze_pitch_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::mutable_max_gaze_pitch() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_max_gaze_pitch();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.FidgetStandParams.max_gaze_pitch)
  return _msg;
}
inline void FidgetStandParams::set_allocated_max_gaze_pitch(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_gaze_pitch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_gaze_pitch_);
  }
  if (max_gaze_pitch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_gaze_pitch));
    if (message_arena != submessage_arena) {
      max_gaze_pitch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_gaze_pitch, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_gaze_pitch_ = max_gaze_pitch;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.FidgetStandParams.max_gaze_pitch)
}

// .google.protobuf.DoubleValue gaze_mean_period = 4;
inline bool FidgetStandParams::_internal_has_gaze_mean_period() const {
  return this != internal_default_instance() && _impl_.gaze_mean_period_ != nullptr;
}
inline bool FidgetStandParams::has_gaze_mean_period() const {
  return _internal_has_gaze_mean_period();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& FidgetStandParams::_internal_gaze_mean_period() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.gaze_mean_period_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& FidgetStandParams::gaze_mean_period() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.FidgetStandParams.gaze_mean_period)
  return _internal_gaze_mean_period();
}
inline void FidgetStandParams::unsafe_arena_set_allocated_gaze_mean_period(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* gaze_mean_period) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gaze_mean_period_);
  }
  _impl_.gaze_mean_period_ = gaze_mean_period;
  if (gaze_mean_period) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.FidgetStandParams.gaze_mean_period)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::release_gaze_mean_period() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.gaze_mean_period_;
  _impl_.gaze_mean_period_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::unsafe_arena_release_gaze_mean_period() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.FidgetStandParams.gaze_mean_period)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.gaze_mean_period_;
  _impl_.gaze_mean_period_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::_internal_mutable_gaze_mean_period() {
  
  if (_impl_.gaze_mean_period_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.gaze_mean_period_ = p;
  }
  return _impl_.gaze_mean_period_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::mutable_gaze_mean_period() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_gaze_mean_period();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.FidgetStandParams.gaze_mean_period)
  return _msg;
}
inline void FidgetStandParams::set_allocated_gaze_mean_period(::PROTOBUF_NAMESPACE_ID::DoubleValue* gaze_mean_period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gaze_mean_period_);
  }
  if (gaze_mean_period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gaze_mean_period));
    if (message_arena != submessage_arena) {
      gaze_mean_period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gaze_mean_period, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gaze_mean_period_ = gaze_mean_period;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.FidgetStandParams.gaze_mean_period)
}

// .bosdyn.api.Vec3Value gaze_center_cfp = 5;
inline bool FidgetStandParams::_internal_has_gaze_center_cfp() const {
  return this != internal_default_instance() && _impl_.gaze_center_cfp_ != nullptr;
}
inline bool FidgetStandParams::has_gaze_center_cfp() const {
  return _internal_has_gaze_center_cfp();
}
inline const ::bosdyn::api::Vec3Value& FidgetStandParams::_internal_gaze_center_cfp() const {
  const ::bosdyn::api::Vec3Value* p = _impl_.gaze_center_cfp_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec3Value&>(
      ::bosdyn::api::_Vec3Value_default_instance_);
}
inline const ::bosdyn::api::Vec3Value& FidgetStandParams::gaze_center_cfp() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.FidgetStandParams.gaze_center_cfp)
  return _internal_gaze_center_cfp();
}
inline void FidgetStandParams::unsafe_arena_set_allocated_gaze_center_cfp(
    ::bosdyn::api::Vec3Value* gaze_center_cfp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gaze_center_cfp_);
  }
  _impl_.gaze_center_cfp_ = gaze_center_cfp;
  if (gaze_center_cfp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.FidgetStandParams.gaze_center_cfp)
}
inline ::bosdyn::api::Vec3Value* FidgetStandParams::release_gaze_center_cfp() {
  
  ::bosdyn::api::Vec3Value* temp = _impl_.gaze_center_cfp_;
  _impl_.gaze_center_cfp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec3Value* FidgetStandParams::unsafe_arena_release_gaze_center_cfp() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.FidgetStandParams.gaze_center_cfp)
  
  ::bosdyn::api::Vec3Value* temp = _impl_.gaze_center_cfp_;
  _impl_.gaze_center_cfp_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec3Value* FidgetStandParams::_internal_mutable_gaze_center_cfp() {
  
  if (_impl_.gaze_center_cfp_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec3Value>(GetArenaForAllocation());
    _impl_.gaze_center_cfp_ = p;
  }
  return _impl_.gaze_center_cfp_;
}
inline ::bosdyn::api::Vec3Value* FidgetStandParams::mutable_gaze_center_cfp() {
  ::bosdyn::api::Vec3Value* _msg = _internal_mutable_gaze_center_cfp();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.FidgetStandParams.gaze_center_cfp)
  return _msg;
}
inline void FidgetStandParams::set_allocated_gaze_center_cfp(::bosdyn::api::Vec3Value* gaze_center_cfp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gaze_center_cfp_);
  }
  if (gaze_center_cfp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gaze_center_cfp));
    if (message_arena != submessage_arena) {
      gaze_center_cfp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gaze_center_cfp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gaze_center_cfp_ = gaze_center_cfp;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.FidgetStandParams.gaze_center_cfp)
}

// .google.protobuf.DoubleValue shift_mean_period = 6;
inline bool FidgetStandParams::_internal_has_shift_mean_period() const {
  return this != internal_default_instance() && _impl_.shift_mean_period_ != nullptr;
}
inline bool FidgetStandParams::has_shift_mean_period() const {
  return _internal_has_shift_mean_period();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& FidgetStandParams::_internal_shift_mean_period() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.shift_mean_period_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& FidgetStandParams::shift_mean_period() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.FidgetStandParams.shift_mean_period)
  return _internal_shift_mean_period();
}
inline void FidgetStandParams::unsafe_arena_set_allocated_shift_mean_period(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* shift_mean_period) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shift_mean_period_);
  }
  _impl_.shift_mean_period_ = shift_mean_period;
  if (shift_mean_period) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.FidgetStandParams.shift_mean_period)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::release_shift_mean_period() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.shift_mean_period_;
  _impl_.shift_mean_period_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::unsafe_arena_release_shift_mean_period() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.FidgetStandParams.shift_mean_period)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.shift_mean_period_;
  _impl_.shift_mean_period_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::_internal_mutable_shift_mean_period() {
  
  if (_impl_.shift_mean_period_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.shift_mean_period_ = p;
  }
  return _impl_.shift_mean_period_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::mutable_shift_mean_period() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_shift_mean_period();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.FidgetStandParams.shift_mean_period)
  return _msg;
}
inline void FidgetStandParams::set_allocated_shift_mean_period(::PROTOBUF_NAMESPACE_ID::DoubleValue* shift_mean_period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shift_mean_period_);
  }
  if (shift_mean_period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shift_mean_period));
    if (message_arena != submessage_arena) {
      shift_mean_period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shift_mean_period, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.shift_mean_period_ = shift_mean_period;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.FidgetStandParams.shift_mean_period)
}

// .google.protobuf.DoubleValue shift_max_transition_time = 7;
inline bool FidgetStandParams::_internal_has_shift_max_transition_time() const {
  return this != internal_default_instance() && _impl_.shift_max_transition_time_ != nullptr;
}
inline bool FidgetStandParams::has_shift_max_transition_time() const {
  return _internal_has_shift_max_transition_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& FidgetStandParams::_internal_shift_max_transition_time() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.shift_max_transition_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& FidgetStandParams::shift_max_transition_time() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.FidgetStandParams.shift_max_transition_time)
  return _internal_shift_max_transition_time();
}
inline void FidgetStandParams::unsafe_arena_set_allocated_shift_max_transition_time(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* shift_max_transition_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shift_max_transition_time_);
  }
  _impl_.shift_max_transition_time_ = shift_max_transition_time;
  if (shift_max_transition_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.FidgetStandParams.shift_max_transition_time)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::release_shift_max_transition_time() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.shift_max_transition_time_;
  _impl_.shift_max_transition_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::unsafe_arena_release_shift_max_transition_time() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.FidgetStandParams.shift_max_transition_time)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.shift_max_transition_time_;
  _impl_.shift_max_transition_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::_internal_mutable_shift_max_transition_time() {
  
  if (_impl_.shift_max_transition_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.shift_max_transition_time_ = p;
  }
  return _impl_.shift_max_transition_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::mutable_shift_max_transition_time() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_shift_max_transition_time();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.FidgetStandParams.shift_max_transition_time)
  return _msg;
}
inline void FidgetStandParams::set_allocated_shift_max_transition_time(::PROTOBUF_NAMESPACE_ID::DoubleValue* shift_max_transition_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shift_max_transition_time_);
  }
  if (shift_max_transition_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shift_max_transition_time));
    if (message_arena != submessage_arena) {
      shift_max_transition_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shift_max_transition_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.shift_max_transition_time_ = shift_max_transition_time;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.FidgetStandParams.shift_max_transition_time)
}

// .google.protobuf.DoubleValue breath_min_z = 8;
inline bool FidgetStandParams::_internal_has_breath_min_z() const {
  return this != internal_default_instance() && _impl_.breath_min_z_ != nullptr;
}
inline bool FidgetStandParams::has_breath_min_z() const {
  return _internal_has_breath_min_z();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& FidgetStandParams::_internal_breath_min_z() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.breath_min_z_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& FidgetStandParams::breath_min_z() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.FidgetStandParams.breath_min_z)
  return _internal_breath_min_z();
}
inline void FidgetStandParams::unsafe_arena_set_allocated_breath_min_z(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* breath_min_z) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.breath_min_z_);
  }
  _impl_.breath_min_z_ = breath_min_z;
  if (breath_min_z) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.FidgetStandParams.breath_min_z)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::release_breath_min_z() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.breath_min_z_;
  _impl_.breath_min_z_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::unsafe_arena_release_breath_min_z() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.FidgetStandParams.breath_min_z)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.breath_min_z_;
  _impl_.breath_min_z_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::_internal_mutable_breath_min_z() {
  
  if (_impl_.breath_min_z_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.breath_min_z_ = p;
  }
  return _impl_.breath_min_z_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::mutable_breath_min_z() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_breath_min_z();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.FidgetStandParams.breath_min_z)
  return _msg;
}
inline void FidgetStandParams::set_allocated_breath_min_z(::PROTOBUF_NAMESPACE_ID::DoubleValue* breath_min_z) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.breath_min_z_);
  }
  if (breath_min_z) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(breath_min_z));
    if (message_arena != submessage_arena) {
      breath_min_z = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, breath_min_z, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.breath_min_z_ = breath_min_z;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.FidgetStandParams.breath_min_z)
}

// .google.protobuf.DoubleValue breath_max_z = 9;
inline bool FidgetStandParams::_internal_has_breath_max_z() const {
  return this != internal_default_instance() && _impl_.breath_max_z_ != nullptr;
}
inline bool FidgetStandParams::has_breath_max_z() const {
  return _internal_has_breath_max_z();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& FidgetStandParams::_internal_breath_max_z() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.breath_max_z_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& FidgetStandParams::breath_max_z() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.FidgetStandParams.breath_max_z)
  return _internal_breath_max_z();
}
inline void FidgetStandParams::unsafe_arena_set_allocated_breath_max_z(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* breath_max_z) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.breath_max_z_);
  }
  _impl_.breath_max_z_ = breath_max_z;
  if (breath_max_z) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.FidgetStandParams.breath_max_z)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::release_breath_max_z() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.breath_max_z_;
  _impl_.breath_max_z_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::unsafe_arena_release_breath_max_z() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.FidgetStandParams.breath_max_z)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.breath_max_z_;
  _impl_.breath_max_z_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::_internal_mutable_breath_max_z() {
  
  if (_impl_.breath_max_z_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.breath_max_z_ = p;
  }
  return _impl_.breath_max_z_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::mutable_breath_max_z() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_breath_max_z();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.FidgetStandParams.breath_max_z)
  return _msg;
}
inline void FidgetStandParams::set_allocated_breath_max_z(::PROTOBUF_NAMESPACE_ID::DoubleValue* breath_max_z) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.breath_max_z_);
  }
  if (breath_max_z) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(breath_max_z));
    if (message_arena != submessage_arena) {
      breath_max_z = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, breath_max_z, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.breath_max_z_ = breath_max_z;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.FidgetStandParams.breath_max_z)
}

// .google.protobuf.DoubleValue breath_max_period = 10;
inline bool FidgetStandParams::_internal_has_breath_max_period() const {
  return this != internal_default_instance() && _impl_.breath_max_period_ != nullptr;
}
inline bool FidgetStandParams::has_breath_max_period() const {
  return _internal_has_breath_max_period();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& FidgetStandParams::_internal_breath_max_period() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.breath_max_period_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& FidgetStandParams::breath_max_period() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.FidgetStandParams.breath_max_period)
  return _internal_breath_max_period();
}
inline void FidgetStandParams::unsafe_arena_set_allocated_breath_max_period(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* breath_max_period) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.breath_max_period_);
  }
  _impl_.breath_max_period_ = breath_max_period;
  if (breath_max_period) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.FidgetStandParams.breath_max_period)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::release_breath_max_period() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.breath_max_period_;
  _impl_.breath_max_period_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::unsafe_arena_release_breath_max_period() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.FidgetStandParams.breath_max_period)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.breath_max_period_;
  _impl_.breath_max_period_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::_internal_mutable_breath_max_period() {
  
  if (_impl_.breath_max_period_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.breath_max_period_ = p;
  }
  return _impl_.breath_max_period_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::mutable_breath_max_period() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_breath_max_period();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.FidgetStandParams.breath_max_period)
  return _msg;
}
inline void FidgetStandParams::set_allocated_breath_max_period(::PROTOBUF_NAMESPACE_ID::DoubleValue* breath_max_period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.breath_max_period_);
  }
  if (breath_max_period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(breath_max_period));
    if (message_arena != submessage_arena) {
      breath_max_period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, breath_max_period, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.breath_max_period_ = breath_max_period;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.FidgetStandParams.breath_max_period)
}

// .google.protobuf.DoubleValue leg_gesture_mean_period = 11;
inline bool FidgetStandParams::_internal_has_leg_gesture_mean_period() const {
  return this != internal_default_instance() && _impl_.leg_gesture_mean_period_ != nullptr;
}
inline bool FidgetStandParams::has_leg_gesture_mean_period() const {
  return _internal_has_leg_gesture_mean_period();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& FidgetStandParams::_internal_leg_gesture_mean_period() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.leg_gesture_mean_period_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& FidgetStandParams::leg_gesture_mean_period() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.FidgetStandParams.leg_gesture_mean_period)
  return _internal_leg_gesture_mean_period();
}
inline void FidgetStandParams::unsafe_arena_set_allocated_leg_gesture_mean_period(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* leg_gesture_mean_period) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leg_gesture_mean_period_);
  }
  _impl_.leg_gesture_mean_period_ = leg_gesture_mean_period;
  if (leg_gesture_mean_period) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.FidgetStandParams.leg_gesture_mean_period)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::release_leg_gesture_mean_period() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.leg_gesture_mean_period_;
  _impl_.leg_gesture_mean_period_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::unsafe_arena_release_leg_gesture_mean_period() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.FidgetStandParams.leg_gesture_mean_period)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.leg_gesture_mean_period_;
  _impl_.leg_gesture_mean_period_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::_internal_mutable_leg_gesture_mean_period() {
  
  if (_impl_.leg_gesture_mean_period_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.leg_gesture_mean_period_ = p;
  }
  return _impl_.leg_gesture_mean_period_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::mutable_leg_gesture_mean_period() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_leg_gesture_mean_period();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.FidgetStandParams.leg_gesture_mean_period)
  return _msg;
}
inline void FidgetStandParams::set_allocated_leg_gesture_mean_period(::PROTOBUF_NAMESPACE_ID::DoubleValue* leg_gesture_mean_period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leg_gesture_mean_period_);
  }
  if (leg_gesture_mean_period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leg_gesture_mean_period));
    if (message_arena != submessage_arena) {
      leg_gesture_mean_period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leg_gesture_mean_period, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.leg_gesture_mean_period_ = leg_gesture_mean_period;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.FidgetStandParams.leg_gesture_mean_period)
}

// .google.protobuf.DoubleValue gaze_slew_rate = 12;
inline bool FidgetStandParams::_internal_has_gaze_slew_rate() const {
  return this != internal_default_instance() && _impl_.gaze_slew_rate_ != nullptr;
}
inline bool FidgetStandParams::has_gaze_slew_rate() const {
  return _internal_has_gaze_slew_rate();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& FidgetStandParams::_internal_gaze_slew_rate() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.gaze_slew_rate_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& FidgetStandParams::gaze_slew_rate() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.FidgetStandParams.gaze_slew_rate)
  return _internal_gaze_slew_rate();
}
inline void FidgetStandParams::unsafe_arena_set_allocated_gaze_slew_rate(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* gaze_slew_rate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gaze_slew_rate_);
  }
  _impl_.gaze_slew_rate_ = gaze_slew_rate;
  if (gaze_slew_rate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.FidgetStandParams.gaze_slew_rate)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::release_gaze_slew_rate() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.gaze_slew_rate_;
  _impl_.gaze_slew_rate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::unsafe_arena_release_gaze_slew_rate() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.FidgetStandParams.gaze_slew_rate)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.gaze_slew_rate_;
  _impl_.gaze_slew_rate_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::_internal_mutable_gaze_slew_rate() {
  
  if (_impl_.gaze_slew_rate_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.gaze_slew_rate_ = p;
  }
  return _impl_.gaze_slew_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::mutable_gaze_slew_rate() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_gaze_slew_rate();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.FidgetStandParams.gaze_slew_rate)
  return _msg;
}
inline void FidgetStandParams::set_allocated_gaze_slew_rate(::PROTOBUF_NAMESPACE_ID::DoubleValue* gaze_slew_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gaze_slew_rate_);
  }
  if (gaze_slew_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gaze_slew_rate));
    if (message_arena != submessage_arena) {
      gaze_slew_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gaze_slew_rate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gaze_slew_rate_ = gaze_slew_rate;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.FidgetStandParams.gaze_slew_rate)
}

// .bosdyn.api.Vec3Value gaze_position_generation_gain = 13;
inline bool FidgetStandParams::_internal_has_gaze_position_generation_gain() const {
  return this != internal_default_instance() && _impl_.gaze_position_generation_gain_ != nullptr;
}
inline bool FidgetStandParams::has_gaze_position_generation_gain() const {
  return _internal_has_gaze_position_generation_gain();
}
inline const ::bosdyn::api::Vec3Value& FidgetStandParams::_internal_gaze_position_generation_gain() const {
  const ::bosdyn::api::Vec3Value* p = _impl_.gaze_position_generation_gain_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec3Value&>(
      ::bosdyn::api::_Vec3Value_default_instance_);
}
inline const ::bosdyn::api::Vec3Value& FidgetStandParams::gaze_position_generation_gain() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.FidgetStandParams.gaze_position_generation_gain)
  return _internal_gaze_position_generation_gain();
}
inline void FidgetStandParams::unsafe_arena_set_allocated_gaze_position_generation_gain(
    ::bosdyn::api::Vec3Value* gaze_position_generation_gain) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gaze_position_generation_gain_);
  }
  _impl_.gaze_position_generation_gain_ = gaze_position_generation_gain;
  if (gaze_position_generation_gain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.FidgetStandParams.gaze_position_generation_gain)
}
inline ::bosdyn::api::Vec3Value* FidgetStandParams::release_gaze_position_generation_gain() {
  
  ::bosdyn::api::Vec3Value* temp = _impl_.gaze_position_generation_gain_;
  _impl_.gaze_position_generation_gain_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec3Value* FidgetStandParams::unsafe_arena_release_gaze_position_generation_gain() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.FidgetStandParams.gaze_position_generation_gain)
  
  ::bosdyn::api::Vec3Value* temp = _impl_.gaze_position_generation_gain_;
  _impl_.gaze_position_generation_gain_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec3Value* FidgetStandParams::_internal_mutable_gaze_position_generation_gain() {
  
  if (_impl_.gaze_position_generation_gain_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec3Value>(GetArenaForAllocation());
    _impl_.gaze_position_generation_gain_ = p;
  }
  return _impl_.gaze_position_generation_gain_;
}
inline ::bosdyn::api::Vec3Value* FidgetStandParams::mutable_gaze_position_generation_gain() {
  ::bosdyn::api::Vec3Value* _msg = _internal_mutable_gaze_position_generation_gain();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.FidgetStandParams.gaze_position_generation_gain)
  return _msg;
}
inline void FidgetStandParams::set_allocated_gaze_position_generation_gain(::bosdyn::api::Vec3Value* gaze_position_generation_gain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gaze_position_generation_gain_);
  }
  if (gaze_position_generation_gain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gaze_position_generation_gain));
    if (message_arena != submessage_arena) {
      gaze_position_generation_gain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gaze_position_generation_gain, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gaze_position_generation_gain_ = gaze_position_generation_gain;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.FidgetStandParams.gaze_position_generation_gain)
}

// .google.protobuf.DoubleValue gaze_roll_generation_gain = 14;
inline bool FidgetStandParams::_internal_has_gaze_roll_generation_gain() const {
  return this != internal_default_instance() && _impl_.gaze_roll_generation_gain_ != nullptr;
}
inline bool FidgetStandParams::has_gaze_roll_generation_gain() const {
  return _internal_has_gaze_roll_generation_gain();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& FidgetStandParams::_internal_gaze_roll_generation_gain() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.gaze_roll_generation_gain_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& FidgetStandParams::gaze_roll_generation_gain() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.FidgetStandParams.gaze_roll_generation_gain)
  return _internal_gaze_roll_generation_gain();
}
inline void FidgetStandParams::unsafe_arena_set_allocated_gaze_roll_generation_gain(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* gaze_roll_generation_gain) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gaze_roll_generation_gain_);
  }
  _impl_.gaze_roll_generation_gain_ = gaze_roll_generation_gain;
  if (gaze_roll_generation_gain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.FidgetStandParams.gaze_roll_generation_gain)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::release_gaze_roll_generation_gain() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.gaze_roll_generation_gain_;
  _impl_.gaze_roll_generation_gain_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::unsafe_arena_release_gaze_roll_generation_gain() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.FidgetStandParams.gaze_roll_generation_gain)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.gaze_roll_generation_gain_;
  _impl_.gaze_roll_generation_gain_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::_internal_mutable_gaze_roll_generation_gain() {
  
  if (_impl_.gaze_roll_generation_gain_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.gaze_roll_generation_gain_ = p;
  }
  return _impl_.gaze_roll_generation_gain_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FidgetStandParams::mutable_gaze_roll_generation_gain() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_gaze_roll_generation_gain();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.FidgetStandParams.gaze_roll_generation_gain)
  return _msg;
}
inline void FidgetStandParams::set_allocated_gaze_roll_generation_gain(::PROTOBUF_NAMESPACE_ID::DoubleValue* gaze_roll_generation_gain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gaze_roll_generation_gain_);
  }
  if (gaze_roll_generation_gain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gaze_roll_generation_gain));
    if (message_arena != submessage_arena) {
      gaze_roll_generation_gain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gaze_roll_generation_gain, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gaze_roll_generation_gain_ = gaze_roll_generation_gain;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.FidgetStandParams.gaze_roll_generation_gain)
}

// -------------------------------------------------------------------

// FrameSnapshotParams

// .google.protobuf.Int32Value frame_id = 1;
inline bool FrameSnapshotParams::_internal_has_frame_id() const {
  return this != internal_default_instance() && _impl_.frame_id_ != nullptr;
}
inline bool FrameSnapshotParams::has_frame_id() const {
  return _internal_has_frame_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& FrameSnapshotParams::_internal_frame_id() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.frame_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& FrameSnapshotParams::frame_id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.FrameSnapshotParams.frame_id)
  return _internal_frame_id();
}
inline void FrameSnapshotParams::unsafe_arena_set_allocated_frame_id(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* frame_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.frame_id_);
  }
  _impl_.frame_id_ = frame_id;
  if (frame_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.FrameSnapshotParams.frame_id)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* FrameSnapshotParams::release_frame_id() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.frame_id_;
  _impl_.frame_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* FrameSnapshotParams::unsafe_arena_release_frame_id() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.FrameSnapshotParams.frame_id)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.frame_id_;
  _impl_.frame_id_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* FrameSnapshotParams::_internal_mutable_frame_id() {
  
  if (_impl_.frame_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.frame_id_ = p;
  }
  return _impl_.frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* FrameSnapshotParams::mutable_frame_id() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_frame_id();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.FrameSnapshotParams.frame_id)
  return _msg;
}
inline void FrameSnapshotParams::set_allocated_frame_id(::PROTOBUF_NAMESPACE_ID::Int32Value* frame_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.frame_id_);
  }
  if (frame_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame_id));
    if (message_arena != submessage_arena) {
      frame_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.frame_id_ = frame_id;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.FrameSnapshotParams.frame_id)
}

// .google.protobuf.Int32Value fiducial_number = 2;
inline bool FrameSnapshotParams::_internal_has_fiducial_number() const {
  return this != internal_default_instance() && _impl_.fiducial_number_ != nullptr;
}
inline bool FrameSnapshotParams::has_fiducial_number() const {
  return _internal_has_fiducial_number();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& FrameSnapshotParams::_internal_fiducial_number() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.fiducial_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& FrameSnapshotParams::fiducial_number() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.FrameSnapshotParams.fiducial_number)
  return _internal_fiducial_number();
}
inline void FrameSnapshotParams::unsafe_arena_set_allocated_fiducial_number(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* fiducial_number) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fiducial_number_);
  }
  _impl_.fiducial_number_ = fiducial_number;
  if (fiducial_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.FrameSnapshotParams.fiducial_number)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* FrameSnapshotParams::release_fiducial_number() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.fiducial_number_;
  _impl_.fiducial_number_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* FrameSnapshotParams::unsafe_arena_release_fiducial_number() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.FrameSnapshotParams.fiducial_number)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.fiducial_number_;
  _impl_.fiducial_number_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* FrameSnapshotParams::_internal_mutable_fiducial_number() {
  
  if (_impl_.fiducial_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.fiducial_number_ = p;
  }
  return _impl_.fiducial_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* FrameSnapshotParams::mutable_fiducial_number() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_fiducial_number();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.FrameSnapshotParams.fiducial_number)
  return _msg;
}
inline void FrameSnapshotParams::set_allocated_fiducial_number(::PROTOBUF_NAMESPACE_ID::Int32Value* fiducial_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fiducial_number_);
  }
  if (fiducial_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fiducial_number));
    if (message_arena != submessage_arena) {
      fiducial_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fiducial_number, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fiducial_number_ = fiducial_number;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.FrameSnapshotParams.fiducial_number)
}

// .bosdyn.api.spot.FrameSnapshotParams.Inclusion include_front_left_leg = 3;
inline void FrameSnapshotParams::clear_include_front_left_leg() {
  _impl_.include_front_left_leg_ = 0;
}
inline ::bosdyn::api::spot::FrameSnapshotParams_Inclusion FrameSnapshotParams::_internal_include_front_left_leg() const {
  return static_cast< ::bosdyn::api::spot::FrameSnapshotParams_Inclusion >(_impl_.include_front_left_leg_);
}
inline ::bosdyn::api::spot::FrameSnapshotParams_Inclusion FrameSnapshotParams::include_front_left_leg() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.FrameSnapshotParams.include_front_left_leg)
  return _internal_include_front_left_leg();
}
inline void FrameSnapshotParams::_internal_set_include_front_left_leg(::bosdyn::api::spot::FrameSnapshotParams_Inclusion value) {
  
  _impl_.include_front_left_leg_ = value;
}
inline void FrameSnapshotParams::set_include_front_left_leg(::bosdyn::api::spot::FrameSnapshotParams_Inclusion value) {
  _internal_set_include_front_left_leg(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot.FrameSnapshotParams.include_front_left_leg)
}

// .bosdyn.api.spot.FrameSnapshotParams.Inclusion include_front_right_leg = 4;
inline void FrameSnapshotParams::clear_include_front_right_leg() {
  _impl_.include_front_right_leg_ = 0;
}
inline ::bosdyn::api::spot::FrameSnapshotParams_Inclusion FrameSnapshotParams::_internal_include_front_right_leg() const {
  return static_cast< ::bosdyn::api::spot::FrameSnapshotParams_Inclusion >(_impl_.include_front_right_leg_);
}
inline ::bosdyn::api::spot::FrameSnapshotParams_Inclusion FrameSnapshotParams::include_front_right_leg() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.FrameSnapshotParams.include_front_right_leg)
  return _internal_include_front_right_leg();
}
inline void FrameSnapshotParams::_internal_set_include_front_right_leg(::bosdyn::api::spot::FrameSnapshotParams_Inclusion value) {
  
  _impl_.include_front_right_leg_ = value;
}
inline void FrameSnapshotParams::set_include_front_right_leg(::bosdyn::api::spot::FrameSnapshotParams_Inclusion value) {
  _internal_set_include_front_right_leg(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot.FrameSnapshotParams.include_front_right_leg)
}

// .bosdyn.api.spot.FrameSnapshotParams.Inclusion include_hind_left_leg = 5;
inline void FrameSnapshotParams::clear_include_hind_left_leg() {
  _impl_.include_hind_left_leg_ = 0;
}
inline ::bosdyn::api::spot::FrameSnapshotParams_Inclusion FrameSnapshotParams::_internal_include_hind_left_leg() const {
  return static_cast< ::bosdyn::api::spot::FrameSnapshotParams_Inclusion >(_impl_.include_hind_left_leg_);
}
inline ::bosdyn::api::spot::FrameSnapshotParams_Inclusion FrameSnapshotParams::include_hind_left_leg() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.FrameSnapshotParams.include_hind_left_leg)
  return _internal_include_hind_left_leg();
}
inline void FrameSnapshotParams::_internal_set_include_hind_left_leg(::bosdyn::api::spot::FrameSnapshotParams_Inclusion value) {
  
  _impl_.include_hind_left_leg_ = value;
}
inline void FrameSnapshotParams::set_include_hind_left_leg(::bosdyn::api::spot::FrameSnapshotParams_Inclusion value) {
  _internal_set_include_hind_left_leg(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot.FrameSnapshotParams.include_hind_left_leg)
}

// .bosdyn.api.spot.FrameSnapshotParams.Inclusion include_hind_right_leg = 6;
inline void FrameSnapshotParams::clear_include_hind_right_leg() {
  _impl_.include_hind_right_leg_ = 0;
}
inline ::bosdyn::api::spot::FrameSnapshotParams_Inclusion FrameSnapshotParams::_internal_include_hind_right_leg() const {
  return static_cast< ::bosdyn::api::spot::FrameSnapshotParams_Inclusion >(_impl_.include_hind_right_leg_);
}
inline ::bosdyn::api::spot::FrameSnapshotParams_Inclusion FrameSnapshotParams::include_hind_right_leg() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.FrameSnapshotParams.include_hind_right_leg)
  return _internal_include_hind_right_leg();
}
inline void FrameSnapshotParams::_internal_set_include_hind_right_leg(::bosdyn::api::spot::FrameSnapshotParams_Inclusion value) {
  
  _impl_.include_hind_right_leg_ = value;
}
inline void FrameSnapshotParams::set_include_hind_right_leg(::bosdyn::api::spot::FrameSnapshotParams_Inclusion value) {
  _internal_set_include_hind_right_leg(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot.FrameSnapshotParams.include_hind_right_leg)
}

// .google.protobuf.BoolValue compensated = 7;
inline bool FrameSnapshotParams::_internal_has_compensated() const {
  return this != internal_default_instance() && _impl_.compensated_ != nullptr;
}
inline bool FrameSnapshotParams::has_compensated() const {
  return _internal_has_compensated();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& FrameSnapshotParams::_internal_compensated() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.compensated_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& FrameSnapshotParams::compensated() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.FrameSnapshotParams.compensated)
  return _internal_compensated();
}
inline void FrameSnapshotParams::unsafe_arena_set_allocated_compensated(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* compensated) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.compensated_);
  }
  _impl_.compensated_ = compensated;
  if (compensated) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.FrameSnapshotParams.compensated)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* FrameSnapshotParams::release_compensated() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.compensated_;
  _impl_.compensated_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* FrameSnapshotParams::unsafe_arena_release_compensated() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.FrameSnapshotParams.compensated)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.compensated_;
  _impl_.compensated_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* FrameSnapshotParams::_internal_mutable_compensated() {
  
  if (_impl_.compensated_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.compensated_ = p;
  }
  return _impl_.compensated_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* FrameSnapshotParams::mutable_compensated() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_compensated();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.FrameSnapshotParams.compensated)
  return _msg;
}
inline void FrameSnapshotParams::set_allocated_compensated(::PROTOBUF_NAMESPACE_ID::BoolValue* compensated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.compensated_);
  }
  if (compensated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(compensated));
    if (message_arena != submessage_arena) {
      compensated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compensated, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.compensated_ = compensated;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.FrameSnapshotParams.compensated)
}

// -------------------------------------------------------------------

// SetColorParams

// .bosdyn.api.spot.Color left_color = 1;
inline bool SetColorParams::_internal_has_left_color() const {
  return this != internal_default_instance() && _impl_.left_color_ != nullptr;
}
inline bool SetColorParams::has_left_color() const {
  return _internal_has_left_color();
}
inline void SetColorParams::clear_left_color() {
  if (GetArenaForAllocation() == nullptr && _impl_.left_color_ != nullptr) {
    delete _impl_.left_color_;
  }
  _impl_.left_color_ = nullptr;
}
inline const ::bosdyn::api::spot::Color& SetColorParams::_internal_left_color() const {
  const ::bosdyn::api::spot::Color* p = _impl_.left_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::spot::Color&>(
      ::bosdyn::api::spot::_Color_default_instance_);
}
inline const ::bosdyn::api::spot::Color& SetColorParams::left_color() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.SetColorParams.left_color)
  return _internal_left_color();
}
inline void SetColorParams::unsafe_arena_set_allocated_left_color(
    ::bosdyn::api::spot::Color* left_color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.left_color_);
  }
  _impl_.left_color_ = left_color;
  if (left_color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.SetColorParams.left_color)
}
inline ::bosdyn::api::spot::Color* SetColorParams::release_left_color() {
  
  ::bosdyn::api::spot::Color* temp = _impl_.left_color_;
  _impl_.left_color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::spot::Color* SetColorParams::unsafe_arena_release_left_color() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.SetColorParams.left_color)
  
  ::bosdyn::api::spot::Color* temp = _impl_.left_color_;
  _impl_.left_color_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot::Color* SetColorParams::_internal_mutable_left_color() {
  
  if (_impl_.left_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot::Color>(GetArenaForAllocation());
    _impl_.left_color_ = p;
  }
  return _impl_.left_color_;
}
inline ::bosdyn::api::spot::Color* SetColorParams::mutable_left_color() {
  ::bosdyn::api::spot::Color* _msg = _internal_mutable_left_color();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.SetColorParams.left_color)
  return _msg;
}
inline void SetColorParams::set_allocated_left_color(::bosdyn::api::spot::Color* left_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.left_color_;
  }
  if (left_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(left_color);
    if (message_arena != submessage_arena) {
      left_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left_color, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.left_color_ = left_color;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.SetColorParams.left_color)
}

// .google.protobuf.BoolValue right_same_as_left = 2;
inline bool SetColorParams::_internal_has_right_same_as_left() const {
  return this != internal_default_instance() && _impl_.right_same_as_left_ != nullptr;
}
inline bool SetColorParams::has_right_same_as_left() const {
  return _internal_has_right_same_as_left();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& SetColorParams::_internal_right_same_as_left() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.right_same_as_left_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& SetColorParams::right_same_as_left() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.SetColorParams.right_same_as_left)
  return _internal_right_same_as_left();
}
inline void SetColorParams::unsafe_arena_set_allocated_right_same_as_left(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* right_same_as_left) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.right_same_as_left_);
  }
  _impl_.right_same_as_left_ = right_same_as_left;
  if (right_same_as_left) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.SetColorParams.right_same_as_left)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* SetColorParams::release_right_same_as_left() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.right_same_as_left_;
  _impl_.right_same_as_left_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* SetColorParams::unsafe_arena_release_right_same_as_left() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.SetColorParams.right_same_as_left)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.right_same_as_left_;
  _impl_.right_same_as_left_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* SetColorParams::_internal_mutable_right_same_as_left() {
  
  if (_impl_.right_same_as_left_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.right_same_as_left_ = p;
  }
  return _impl_.right_same_as_left_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* SetColorParams::mutable_right_same_as_left() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_right_same_as_left();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.SetColorParams.right_same_as_left)
  return _msg;
}
inline void SetColorParams::set_allocated_right_same_as_left(::PROTOBUF_NAMESPACE_ID::BoolValue* right_same_as_left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.right_same_as_left_);
  }
  if (right_same_as_left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_same_as_left));
    if (message_arena != submessage_arena) {
      right_same_as_left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right_same_as_left, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.right_same_as_left_ = right_same_as_left;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.SetColorParams.right_same_as_left)
}

// .bosdyn.api.spot.Color right_color = 3;
inline bool SetColorParams::_internal_has_right_color() const {
  return this != internal_default_instance() && _impl_.right_color_ != nullptr;
}
inline bool SetColorParams::has_right_color() const {
  return _internal_has_right_color();
}
inline void SetColorParams::clear_right_color() {
  if (GetArenaForAllocation() == nullptr && _impl_.right_color_ != nullptr) {
    delete _impl_.right_color_;
  }
  _impl_.right_color_ = nullptr;
}
inline const ::bosdyn::api::spot::Color& SetColorParams::_internal_right_color() const {
  const ::bosdyn::api::spot::Color* p = _impl_.right_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::spot::Color&>(
      ::bosdyn::api::spot::_Color_default_instance_);
}
inline const ::bosdyn::api::spot::Color& SetColorParams::right_color() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.SetColorParams.right_color)
  return _internal_right_color();
}
inline void SetColorParams::unsafe_arena_set_allocated_right_color(
    ::bosdyn::api::spot::Color* right_color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.right_color_);
  }
  _impl_.right_color_ = right_color;
  if (right_color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.SetColorParams.right_color)
}
inline ::bosdyn::api::spot::Color* SetColorParams::release_right_color() {
  
  ::bosdyn::api::spot::Color* temp = _impl_.right_color_;
  _impl_.right_color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::spot::Color* SetColorParams::unsafe_arena_release_right_color() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.SetColorParams.right_color)
  
  ::bosdyn::api::spot::Color* temp = _impl_.right_color_;
  _impl_.right_color_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot::Color* SetColorParams::_internal_mutable_right_color() {
  
  if (_impl_.right_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot::Color>(GetArenaForAllocation());
    _impl_.right_color_ = p;
  }
  return _impl_.right_color_;
}
inline ::bosdyn::api::spot::Color* SetColorParams::mutable_right_color() {
  ::bosdyn::api::spot::Color* _msg = _internal_mutable_right_color();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.SetColorParams.right_color)
  return _msg;
}
inline void SetColorParams::set_allocated_right_color(::bosdyn::api::spot::Color* right_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.right_color_;
  }
  if (right_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(right_color);
    if (message_arena != submessage_arena) {
      right_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right_color, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.right_color_ = right_color;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.SetColorParams.right_color)
}

// .google.protobuf.DoubleValue fade_in_slices = 4;
inline bool SetColorParams::_internal_has_fade_in_slices() const {
  return this != internal_default_instance() && _impl_.fade_in_slices_ != nullptr;
}
inline bool SetColorParams::has_fade_in_slices() const {
  return _internal_has_fade_in_slices();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& SetColorParams::_internal_fade_in_slices() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.fade_in_slices_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& SetColorParams::fade_in_slices() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.SetColorParams.fade_in_slices)
  return _internal_fade_in_slices();
}
inline void SetColorParams::unsafe_arena_set_allocated_fade_in_slices(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* fade_in_slices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fade_in_slices_);
  }
  _impl_.fade_in_slices_ = fade_in_slices;
  if (fade_in_slices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.SetColorParams.fade_in_slices)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* SetColorParams::release_fade_in_slices() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.fade_in_slices_;
  _impl_.fade_in_slices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* SetColorParams::unsafe_arena_release_fade_in_slices() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.SetColorParams.fade_in_slices)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.fade_in_slices_;
  _impl_.fade_in_slices_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* SetColorParams::_internal_mutable_fade_in_slices() {
  
  if (_impl_.fade_in_slices_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.fade_in_slices_ = p;
  }
  return _impl_.fade_in_slices_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* SetColorParams::mutable_fade_in_slices() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_fade_in_slices();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.SetColorParams.fade_in_slices)
  return _msg;
}
inline void SetColorParams::set_allocated_fade_in_slices(::PROTOBUF_NAMESPACE_ID::DoubleValue* fade_in_slices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fade_in_slices_);
  }
  if (fade_in_slices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fade_in_slices));
    if (message_arena != submessage_arena) {
      fade_in_slices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fade_in_slices, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fade_in_slices_ = fade_in_slices;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.SetColorParams.fade_in_slices)
}

// .google.protobuf.DoubleValue fade_out_slices = 5;
inline bool SetColorParams::_internal_has_fade_out_slices() const {
  return this != internal_default_instance() && _impl_.fade_out_slices_ != nullptr;
}
inline bool SetColorParams::has_fade_out_slices() const {
  return _internal_has_fade_out_slices();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& SetColorParams::_internal_fade_out_slices() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.fade_out_slices_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& SetColorParams::fade_out_slices() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.SetColorParams.fade_out_slices)
  return _internal_fade_out_slices();
}
inline void SetColorParams::unsafe_arena_set_allocated_fade_out_slices(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* fade_out_slices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fade_out_slices_);
  }
  _impl_.fade_out_slices_ = fade_out_slices;
  if (fade_out_slices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.SetColorParams.fade_out_slices)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* SetColorParams::release_fade_out_slices() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.fade_out_slices_;
  _impl_.fade_out_slices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* SetColorParams::unsafe_arena_release_fade_out_slices() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.SetColorParams.fade_out_slices)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.fade_out_slices_;
  _impl_.fade_out_slices_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* SetColorParams::_internal_mutable_fade_out_slices() {
  
  if (_impl_.fade_out_slices_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.fade_out_slices_ = p;
  }
  return _impl_.fade_out_slices_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* SetColorParams::mutable_fade_out_slices() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_fade_out_slices();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.SetColorParams.fade_out_slices)
  return _msg;
}
inline void SetColorParams::set_allocated_fade_out_slices(::PROTOBUF_NAMESPACE_ID::DoubleValue* fade_out_slices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fade_out_slices_);
  }
  if (fade_out_slices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fade_out_slices));
    if (message_arena != submessage_arena) {
      fade_out_slices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fade_out_slices, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fade_out_slices_ = fade_out_slices;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.SetColorParams.fade_out_slices)
}

// -------------------------------------------------------------------

// FadeColorParams

// .bosdyn.api.spot.Color top_color = 1;
inline bool FadeColorParams::_internal_has_top_color() const {
  return this != internal_default_instance() && _impl_.top_color_ != nullptr;
}
inline bool FadeColorParams::has_top_color() const {
  return _internal_has_top_color();
}
inline void FadeColorParams::clear_top_color() {
  if (GetArenaForAllocation() == nullptr && _impl_.top_color_ != nullptr) {
    delete _impl_.top_color_;
  }
  _impl_.top_color_ = nullptr;
}
inline const ::bosdyn::api::spot::Color& FadeColorParams::_internal_top_color() const {
  const ::bosdyn::api::spot::Color* p = _impl_.top_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::spot::Color&>(
      ::bosdyn::api::spot::_Color_default_instance_);
}
inline const ::bosdyn::api::spot::Color& FadeColorParams::top_color() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.FadeColorParams.top_color)
  return _internal_top_color();
}
inline void FadeColorParams::unsafe_arena_set_allocated_top_color(
    ::bosdyn::api::spot::Color* top_color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.top_color_);
  }
  _impl_.top_color_ = top_color;
  if (top_color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.FadeColorParams.top_color)
}
inline ::bosdyn::api::spot::Color* FadeColorParams::release_top_color() {
  
  ::bosdyn::api::spot::Color* temp = _impl_.top_color_;
  _impl_.top_color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::spot::Color* FadeColorParams::unsafe_arena_release_top_color() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.FadeColorParams.top_color)
  
  ::bosdyn::api::spot::Color* temp = _impl_.top_color_;
  _impl_.top_color_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot::Color* FadeColorParams::_internal_mutable_top_color() {
  
  if (_impl_.top_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot::Color>(GetArenaForAllocation());
    _impl_.top_color_ = p;
  }
  return _impl_.top_color_;
}
inline ::bosdyn::api::spot::Color* FadeColorParams::mutable_top_color() {
  ::bosdyn::api::spot::Color* _msg = _internal_mutable_top_color();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.FadeColorParams.top_color)
  return _msg;
}
inline void FadeColorParams::set_allocated_top_color(::bosdyn::api::spot::Color* top_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.top_color_;
  }
  if (top_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(top_color);
    if (message_arena != submessage_arena) {
      top_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_color, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.top_color_ = top_color;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.FadeColorParams.top_color)
}

// .bosdyn.api.spot.Color bottom_color = 2;
inline bool FadeColorParams::_internal_has_bottom_color() const {
  return this != internal_default_instance() && _impl_.bottom_color_ != nullptr;
}
inline bool FadeColorParams::has_bottom_color() const {
  return _internal_has_bottom_color();
}
inline void FadeColorParams::clear_bottom_color() {
  if (GetArenaForAllocation() == nullptr && _impl_.bottom_color_ != nullptr) {
    delete _impl_.bottom_color_;
  }
  _impl_.bottom_color_ = nullptr;
}
inline const ::bosdyn::api::spot::Color& FadeColorParams::_internal_bottom_color() const {
  const ::bosdyn::api::spot::Color* p = _impl_.bottom_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::spot::Color&>(
      ::bosdyn::api::spot::_Color_default_instance_);
}
inline const ::bosdyn::api::spot::Color& FadeColorParams::bottom_color() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.FadeColorParams.bottom_color)
  return _internal_bottom_color();
}
inline void FadeColorParams::unsafe_arena_set_allocated_bottom_color(
    ::bosdyn::api::spot::Color* bottom_color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bottom_color_);
  }
  _impl_.bottom_color_ = bottom_color;
  if (bottom_color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.FadeColorParams.bottom_color)
}
inline ::bosdyn::api::spot::Color* FadeColorParams::release_bottom_color() {
  
  ::bosdyn::api::spot::Color* temp = _impl_.bottom_color_;
  _impl_.bottom_color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::spot::Color* FadeColorParams::unsafe_arena_release_bottom_color() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.FadeColorParams.bottom_color)
  
  ::bosdyn::api::spot::Color* temp = _impl_.bottom_color_;
  _impl_.bottom_color_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot::Color* FadeColorParams::_internal_mutable_bottom_color() {
  
  if (_impl_.bottom_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot::Color>(GetArenaForAllocation());
    _impl_.bottom_color_ = p;
  }
  return _impl_.bottom_color_;
}
inline ::bosdyn::api::spot::Color* FadeColorParams::mutable_bottom_color() {
  ::bosdyn::api::spot::Color* _msg = _internal_mutable_bottom_color();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.FadeColorParams.bottom_color)
  return _msg;
}
inline void FadeColorParams::set_allocated_bottom_color(::bosdyn::api::spot::Color* bottom_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bottom_color_;
  }
  if (bottom_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bottom_color);
    if (message_arena != submessage_arena) {
      bottom_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bottom_color, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bottom_color_ = bottom_color;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.FadeColorParams.bottom_color)
}

// .google.protobuf.DoubleValue fade_in_slices = 3;
inline bool FadeColorParams::_internal_has_fade_in_slices() const {
  return this != internal_default_instance() && _impl_.fade_in_slices_ != nullptr;
}
inline bool FadeColorParams::has_fade_in_slices() const {
  return _internal_has_fade_in_slices();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& FadeColorParams::_internal_fade_in_slices() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.fade_in_slices_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& FadeColorParams::fade_in_slices() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.FadeColorParams.fade_in_slices)
  return _internal_fade_in_slices();
}
inline void FadeColorParams::unsafe_arena_set_allocated_fade_in_slices(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* fade_in_slices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fade_in_slices_);
  }
  _impl_.fade_in_slices_ = fade_in_slices;
  if (fade_in_slices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.FadeColorParams.fade_in_slices)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FadeColorParams::release_fade_in_slices() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.fade_in_slices_;
  _impl_.fade_in_slices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FadeColorParams::unsafe_arena_release_fade_in_slices() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.FadeColorParams.fade_in_slices)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.fade_in_slices_;
  _impl_.fade_in_slices_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FadeColorParams::_internal_mutable_fade_in_slices() {
  
  if (_impl_.fade_in_slices_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.fade_in_slices_ = p;
  }
  return _impl_.fade_in_slices_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FadeColorParams::mutable_fade_in_slices() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_fade_in_slices();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.FadeColorParams.fade_in_slices)
  return _msg;
}
inline void FadeColorParams::set_allocated_fade_in_slices(::PROTOBUF_NAMESPACE_ID::DoubleValue* fade_in_slices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fade_in_slices_);
  }
  if (fade_in_slices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fade_in_slices));
    if (message_arena != submessage_arena) {
      fade_in_slices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fade_in_slices, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fade_in_slices_ = fade_in_slices;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.FadeColorParams.fade_in_slices)
}

// .google.protobuf.DoubleValue fade_out_slices = 4;
inline bool FadeColorParams::_internal_has_fade_out_slices() const {
  return this != internal_default_instance() && _impl_.fade_out_slices_ != nullptr;
}
inline bool FadeColorParams::has_fade_out_slices() const {
  return _internal_has_fade_out_slices();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& FadeColorParams::_internal_fade_out_slices() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.fade_out_slices_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& FadeColorParams::fade_out_slices() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.FadeColorParams.fade_out_slices)
  return _internal_fade_out_slices();
}
inline void FadeColorParams::unsafe_arena_set_allocated_fade_out_slices(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* fade_out_slices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fade_out_slices_);
  }
  _impl_.fade_out_slices_ = fade_out_slices;
  if (fade_out_slices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.FadeColorParams.fade_out_slices)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FadeColorParams::release_fade_out_slices() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.fade_out_slices_;
  _impl_.fade_out_slices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FadeColorParams::unsafe_arena_release_fade_out_slices() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.FadeColorParams.fade_out_slices)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.fade_out_slices_;
  _impl_.fade_out_slices_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FadeColorParams::_internal_mutable_fade_out_slices() {
  
  if (_impl_.fade_out_slices_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.fade_out_slices_ = p;
  }
  return _impl_.fade_out_slices_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* FadeColorParams::mutable_fade_out_slices() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_fade_out_slices();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.FadeColorParams.fade_out_slices)
  return _msg;
}
inline void FadeColorParams::set_allocated_fade_out_slices(::PROTOBUF_NAMESPACE_ID::DoubleValue* fade_out_slices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fade_out_slices_);
  }
  if (fade_out_slices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fade_out_slices));
    if (message_arena != submessage_arena) {
      fade_out_slices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fade_out_slices, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fade_out_slices_ = fade_out_slices;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.FadeColorParams.fade_out_slices)
}

// -------------------------------------------------------------------

// IndependentColorParams

// .bosdyn.api.spot.Color top_left = 1;
inline bool IndependentColorParams::_internal_has_top_left() const {
  return this != internal_default_instance() && _impl_.top_left_ != nullptr;
}
inline bool IndependentColorParams::has_top_left() const {
  return _internal_has_top_left();
}
inline void IndependentColorParams::clear_top_left() {
  if (GetArenaForAllocation() == nullptr && _impl_.top_left_ != nullptr) {
    delete _impl_.top_left_;
  }
  _impl_.top_left_ = nullptr;
}
inline const ::bosdyn::api::spot::Color& IndependentColorParams::_internal_top_left() const {
  const ::bosdyn::api::spot::Color* p = _impl_.top_left_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::spot::Color&>(
      ::bosdyn::api::spot::_Color_default_instance_);
}
inline const ::bosdyn::api::spot::Color& IndependentColorParams::top_left() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.IndependentColorParams.top_left)
  return _internal_top_left();
}
inline void IndependentColorParams::unsafe_arena_set_allocated_top_left(
    ::bosdyn::api::spot::Color* top_left) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.top_left_);
  }
  _impl_.top_left_ = top_left;
  if (top_left) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.IndependentColorParams.top_left)
}
inline ::bosdyn::api::spot::Color* IndependentColorParams::release_top_left() {
  
  ::bosdyn::api::spot::Color* temp = _impl_.top_left_;
  _impl_.top_left_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::spot::Color* IndependentColorParams::unsafe_arena_release_top_left() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.IndependentColorParams.top_left)
  
  ::bosdyn::api::spot::Color* temp = _impl_.top_left_;
  _impl_.top_left_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot::Color* IndependentColorParams::_internal_mutable_top_left() {
  
  if (_impl_.top_left_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot::Color>(GetArenaForAllocation());
    _impl_.top_left_ = p;
  }
  return _impl_.top_left_;
}
inline ::bosdyn::api::spot::Color* IndependentColorParams::mutable_top_left() {
  ::bosdyn::api::spot::Color* _msg = _internal_mutable_top_left();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.IndependentColorParams.top_left)
  return _msg;
}
inline void IndependentColorParams::set_allocated_top_left(::bosdyn::api::spot::Color* top_left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.top_left_;
  }
  if (top_left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(top_left);
    if (message_arena != submessage_arena) {
      top_left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_left, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.top_left_ = top_left;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.IndependentColorParams.top_left)
}

// .bosdyn.api.spot.Color upper_mid_left = 2;
inline bool IndependentColorParams::_internal_has_upper_mid_left() const {
  return this != internal_default_instance() && _impl_.upper_mid_left_ != nullptr;
}
inline bool IndependentColorParams::has_upper_mid_left() const {
  return _internal_has_upper_mid_left();
}
inline void IndependentColorParams::clear_upper_mid_left() {
  if (GetArenaForAllocation() == nullptr && _impl_.upper_mid_left_ != nullptr) {
    delete _impl_.upper_mid_left_;
  }
  _impl_.upper_mid_left_ = nullptr;
}
inline const ::bosdyn::api::spot::Color& IndependentColorParams::_internal_upper_mid_left() const {
  const ::bosdyn::api::spot::Color* p = _impl_.upper_mid_left_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::spot::Color&>(
      ::bosdyn::api::spot::_Color_default_instance_);
}
inline const ::bosdyn::api::spot::Color& IndependentColorParams::upper_mid_left() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.IndependentColorParams.upper_mid_left)
  return _internal_upper_mid_left();
}
inline void IndependentColorParams::unsafe_arena_set_allocated_upper_mid_left(
    ::bosdyn::api::spot::Color* upper_mid_left) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.upper_mid_left_);
  }
  _impl_.upper_mid_left_ = upper_mid_left;
  if (upper_mid_left) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.IndependentColorParams.upper_mid_left)
}
inline ::bosdyn::api::spot::Color* IndependentColorParams::release_upper_mid_left() {
  
  ::bosdyn::api::spot::Color* temp = _impl_.upper_mid_left_;
  _impl_.upper_mid_left_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::spot::Color* IndependentColorParams::unsafe_arena_release_upper_mid_left() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.IndependentColorParams.upper_mid_left)
  
  ::bosdyn::api::spot::Color* temp = _impl_.upper_mid_left_;
  _impl_.upper_mid_left_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot::Color* IndependentColorParams::_internal_mutable_upper_mid_left() {
  
  if (_impl_.upper_mid_left_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot::Color>(GetArenaForAllocation());
    _impl_.upper_mid_left_ = p;
  }
  return _impl_.upper_mid_left_;
}
inline ::bosdyn::api::spot::Color* IndependentColorParams::mutable_upper_mid_left() {
  ::bosdyn::api::spot::Color* _msg = _internal_mutable_upper_mid_left();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.IndependentColorParams.upper_mid_left)
  return _msg;
}
inline void IndependentColorParams::set_allocated_upper_mid_left(::bosdyn::api::spot::Color* upper_mid_left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.upper_mid_left_;
  }
  if (upper_mid_left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(upper_mid_left);
    if (message_arena != submessage_arena) {
      upper_mid_left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upper_mid_left, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.upper_mid_left_ = upper_mid_left;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.IndependentColorParams.upper_mid_left)
}

// .bosdyn.api.spot.Color lower_mid_left = 3;
inline bool IndependentColorParams::_internal_has_lower_mid_left() const {
  return this != internal_default_instance() && _impl_.lower_mid_left_ != nullptr;
}
inline bool IndependentColorParams::has_lower_mid_left() const {
  return _internal_has_lower_mid_left();
}
inline void IndependentColorParams::clear_lower_mid_left() {
  if (GetArenaForAllocation() == nullptr && _impl_.lower_mid_left_ != nullptr) {
    delete _impl_.lower_mid_left_;
  }
  _impl_.lower_mid_left_ = nullptr;
}
inline const ::bosdyn::api::spot::Color& IndependentColorParams::_internal_lower_mid_left() const {
  const ::bosdyn::api::spot::Color* p = _impl_.lower_mid_left_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::spot::Color&>(
      ::bosdyn::api::spot::_Color_default_instance_);
}
inline const ::bosdyn::api::spot::Color& IndependentColorParams::lower_mid_left() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.IndependentColorParams.lower_mid_left)
  return _internal_lower_mid_left();
}
inline void IndependentColorParams::unsafe_arena_set_allocated_lower_mid_left(
    ::bosdyn::api::spot::Color* lower_mid_left) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lower_mid_left_);
  }
  _impl_.lower_mid_left_ = lower_mid_left;
  if (lower_mid_left) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.IndependentColorParams.lower_mid_left)
}
inline ::bosdyn::api::spot::Color* IndependentColorParams::release_lower_mid_left() {
  
  ::bosdyn::api::spot::Color* temp = _impl_.lower_mid_left_;
  _impl_.lower_mid_left_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::spot::Color* IndependentColorParams::unsafe_arena_release_lower_mid_left() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.IndependentColorParams.lower_mid_left)
  
  ::bosdyn::api::spot::Color* temp = _impl_.lower_mid_left_;
  _impl_.lower_mid_left_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot::Color* IndependentColorParams::_internal_mutable_lower_mid_left() {
  
  if (_impl_.lower_mid_left_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot::Color>(GetArenaForAllocation());
    _impl_.lower_mid_left_ = p;
  }
  return _impl_.lower_mid_left_;
}
inline ::bosdyn::api::spot::Color* IndependentColorParams::mutable_lower_mid_left() {
  ::bosdyn::api::spot::Color* _msg = _internal_mutable_lower_mid_left();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.IndependentColorParams.lower_mid_left)
  return _msg;
}
inline void IndependentColorParams::set_allocated_lower_mid_left(::bosdyn::api::spot::Color* lower_mid_left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lower_mid_left_;
  }
  if (lower_mid_left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lower_mid_left);
    if (message_arena != submessage_arena) {
      lower_mid_left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lower_mid_left, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lower_mid_left_ = lower_mid_left;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.IndependentColorParams.lower_mid_left)
}

// .bosdyn.api.spot.Color bottom_left = 4;
inline bool IndependentColorParams::_internal_has_bottom_left() const {
  return this != internal_default_instance() && _impl_.bottom_left_ != nullptr;
}
inline bool IndependentColorParams::has_bottom_left() const {
  return _internal_has_bottom_left();
}
inline void IndependentColorParams::clear_bottom_left() {
  if (GetArenaForAllocation() == nullptr && _impl_.bottom_left_ != nullptr) {
    delete _impl_.bottom_left_;
  }
  _impl_.bottom_left_ = nullptr;
}
inline const ::bosdyn::api::spot::Color& IndependentColorParams::_internal_bottom_left() const {
  const ::bosdyn::api::spot::Color* p = _impl_.bottom_left_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::spot::Color&>(
      ::bosdyn::api::spot::_Color_default_instance_);
}
inline const ::bosdyn::api::spot::Color& IndependentColorParams::bottom_left() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.IndependentColorParams.bottom_left)
  return _internal_bottom_left();
}
inline void IndependentColorParams::unsafe_arena_set_allocated_bottom_left(
    ::bosdyn::api::spot::Color* bottom_left) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bottom_left_);
  }
  _impl_.bottom_left_ = bottom_left;
  if (bottom_left) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.IndependentColorParams.bottom_left)
}
inline ::bosdyn::api::spot::Color* IndependentColorParams::release_bottom_left() {
  
  ::bosdyn::api::spot::Color* temp = _impl_.bottom_left_;
  _impl_.bottom_left_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::spot::Color* IndependentColorParams::unsafe_arena_release_bottom_left() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.IndependentColorParams.bottom_left)
  
  ::bosdyn::api::spot::Color* temp = _impl_.bottom_left_;
  _impl_.bottom_left_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot::Color* IndependentColorParams::_internal_mutable_bottom_left() {
  
  if (_impl_.bottom_left_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot::Color>(GetArenaForAllocation());
    _impl_.bottom_left_ = p;
  }
  return _impl_.bottom_left_;
}
inline ::bosdyn::api::spot::Color* IndependentColorParams::mutable_bottom_left() {
  ::bosdyn::api::spot::Color* _msg = _internal_mutable_bottom_left();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.IndependentColorParams.bottom_left)
  return _msg;
}
inline void IndependentColorParams::set_allocated_bottom_left(::bosdyn::api::spot::Color* bottom_left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bottom_left_;
  }
  if (bottom_left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bottom_left);
    if (message_arena != submessage_arena) {
      bottom_left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bottom_left, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bottom_left_ = bottom_left;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.IndependentColorParams.bottom_left)
}

// .bosdyn.api.spot.Color top_right = 5;
inline bool IndependentColorParams::_internal_has_top_right() const {
  return this != internal_default_instance() && _impl_.top_right_ != nullptr;
}
inline bool IndependentColorParams::has_top_right() const {
  return _internal_has_top_right();
}
inline void IndependentColorParams::clear_top_right() {
  if (GetArenaForAllocation() == nullptr && _impl_.top_right_ != nullptr) {
    delete _impl_.top_right_;
  }
  _impl_.top_right_ = nullptr;
}
inline const ::bosdyn::api::spot::Color& IndependentColorParams::_internal_top_right() const {
  const ::bosdyn::api::spot::Color* p = _impl_.top_right_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::spot::Color&>(
      ::bosdyn::api::spot::_Color_default_instance_);
}
inline const ::bosdyn::api::spot::Color& IndependentColorParams::top_right() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.IndependentColorParams.top_right)
  return _internal_top_right();
}
inline void IndependentColorParams::unsafe_arena_set_allocated_top_right(
    ::bosdyn::api::spot::Color* top_right) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.top_right_);
  }
  _impl_.top_right_ = top_right;
  if (top_right) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.IndependentColorParams.top_right)
}
inline ::bosdyn::api::spot::Color* IndependentColorParams::release_top_right() {
  
  ::bosdyn::api::spot::Color* temp = _impl_.top_right_;
  _impl_.top_right_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::spot::Color* IndependentColorParams::unsafe_arena_release_top_right() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.IndependentColorParams.top_right)
  
  ::bosdyn::api::spot::Color* temp = _impl_.top_right_;
  _impl_.top_right_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot::Color* IndependentColorParams::_internal_mutable_top_right() {
  
  if (_impl_.top_right_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot::Color>(GetArenaForAllocation());
    _impl_.top_right_ = p;
  }
  return _impl_.top_right_;
}
inline ::bosdyn::api::spot::Color* IndependentColorParams::mutable_top_right() {
  ::bosdyn::api::spot::Color* _msg = _internal_mutable_top_right();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.IndependentColorParams.top_right)
  return _msg;
}
inline void IndependentColorParams::set_allocated_top_right(::bosdyn::api::spot::Color* top_right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.top_right_;
  }
  if (top_right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(top_right);
    if (message_arena != submessage_arena) {
      top_right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_right, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.top_right_ = top_right;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.IndependentColorParams.top_right)
}

// .bosdyn.api.spot.Color upper_mid_right = 6;
inline bool IndependentColorParams::_internal_has_upper_mid_right() const {
  return this != internal_default_instance() && _impl_.upper_mid_right_ != nullptr;
}
inline bool IndependentColorParams::has_upper_mid_right() const {
  return _internal_has_upper_mid_right();
}
inline void IndependentColorParams::clear_upper_mid_right() {
  if (GetArenaForAllocation() == nullptr && _impl_.upper_mid_right_ != nullptr) {
    delete _impl_.upper_mid_right_;
  }
  _impl_.upper_mid_right_ = nullptr;
}
inline const ::bosdyn::api::spot::Color& IndependentColorParams::_internal_upper_mid_right() const {
  const ::bosdyn::api::spot::Color* p = _impl_.upper_mid_right_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::spot::Color&>(
      ::bosdyn::api::spot::_Color_default_instance_);
}
inline const ::bosdyn::api::spot::Color& IndependentColorParams::upper_mid_right() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.IndependentColorParams.upper_mid_right)
  return _internal_upper_mid_right();
}
inline void IndependentColorParams::unsafe_arena_set_allocated_upper_mid_right(
    ::bosdyn::api::spot::Color* upper_mid_right) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.upper_mid_right_);
  }
  _impl_.upper_mid_right_ = upper_mid_right;
  if (upper_mid_right) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.IndependentColorParams.upper_mid_right)
}
inline ::bosdyn::api::spot::Color* IndependentColorParams::release_upper_mid_right() {
  
  ::bosdyn::api::spot::Color* temp = _impl_.upper_mid_right_;
  _impl_.upper_mid_right_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::spot::Color* IndependentColorParams::unsafe_arena_release_upper_mid_right() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.IndependentColorParams.upper_mid_right)
  
  ::bosdyn::api::spot::Color* temp = _impl_.upper_mid_right_;
  _impl_.upper_mid_right_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot::Color* IndependentColorParams::_internal_mutable_upper_mid_right() {
  
  if (_impl_.upper_mid_right_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot::Color>(GetArenaForAllocation());
    _impl_.upper_mid_right_ = p;
  }
  return _impl_.upper_mid_right_;
}
inline ::bosdyn::api::spot::Color* IndependentColorParams::mutable_upper_mid_right() {
  ::bosdyn::api::spot::Color* _msg = _internal_mutable_upper_mid_right();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.IndependentColorParams.upper_mid_right)
  return _msg;
}
inline void IndependentColorParams::set_allocated_upper_mid_right(::bosdyn::api::spot::Color* upper_mid_right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.upper_mid_right_;
  }
  if (upper_mid_right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(upper_mid_right);
    if (message_arena != submessage_arena) {
      upper_mid_right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upper_mid_right, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.upper_mid_right_ = upper_mid_right;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.IndependentColorParams.upper_mid_right)
}

// .bosdyn.api.spot.Color lower_mid_right = 7;
inline bool IndependentColorParams::_internal_has_lower_mid_right() const {
  return this != internal_default_instance() && _impl_.lower_mid_right_ != nullptr;
}
inline bool IndependentColorParams::has_lower_mid_right() const {
  return _internal_has_lower_mid_right();
}
inline void IndependentColorParams::clear_lower_mid_right() {
  if (GetArenaForAllocation() == nullptr && _impl_.lower_mid_right_ != nullptr) {
    delete _impl_.lower_mid_right_;
  }
  _impl_.lower_mid_right_ = nullptr;
}
inline const ::bosdyn::api::spot::Color& IndependentColorParams::_internal_lower_mid_right() const {
  const ::bosdyn::api::spot::Color* p = _impl_.lower_mid_right_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::spot::Color&>(
      ::bosdyn::api::spot::_Color_default_instance_);
}
inline const ::bosdyn::api::spot::Color& IndependentColorParams::lower_mid_right() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.IndependentColorParams.lower_mid_right)
  return _internal_lower_mid_right();
}
inline void IndependentColorParams::unsafe_arena_set_allocated_lower_mid_right(
    ::bosdyn::api::spot::Color* lower_mid_right) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lower_mid_right_);
  }
  _impl_.lower_mid_right_ = lower_mid_right;
  if (lower_mid_right) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.IndependentColorParams.lower_mid_right)
}
inline ::bosdyn::api::spot::Color* IndependentColorParams::release_lower_mid_right() {
  
  ::bosdyn::api::spot::Color* temp = _impl_.lower_mid_right_;
  _impl_.lower_mid_right_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::spot::Color* IndependentColorParams::unsafe_arena_release_lower_mid_right() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.IndependentColorParams.lower_mid_right)
  
  ::bosdyn::api::spot::Color* temp = _impl_.lower_mid_right_;
  _impl_.lower_mid_right_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot::Color* IndependentColorParams::_internal_mutable_lower_mid_right() {
  
  if (_impl_.lower_mid_right_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot::Color>(GetArenaForAllocation());
    _impl_.lower_mid_right_ = p;
  }
  return _impl_.lower_mid_right_;
}
inline ::bosdyn::api::spot::Color* IndependentColorParams::mutable_lower_mid_right() {
  ::bosdyn::api::spot::Color* _msg = _internal_mutable_lower_mid_right();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.IndependentColorParams.lower_mid_right)
  return _msg;
}
inline void IndependentColorParams::set_allocated_lower_mid_right(::bosdyn::api::spot::Color* lower_mid_right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lower_mid_right_;
  }
  if (lower_mid_right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lower_mid_right);
    if (message_arena != submessage_arena) {
      lower_mid_right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lower_mid_right, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lower_mid_right_ = lower_mid_right;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.IndependentColorParams.lower_mid_right)
}

// .bosdyn.api.spot.Color bottom_right = 8;
inline bool IndependentColorParams::_internal_has_bottom_right() const {
  return this != internal_default_instance() && _impl_.bottom_right_ != nullptr;
}
inline bool IndependentColorParams::has_bottom_right() const {
  return _internal_has_bottom_right();
}
inline void IndependentColorParams::clear_bottom_right() {
  if (GetArenaForAllocation() == nullptr && _impl_.bottom_right_ != nullptr) {
    delete _impl_.bottom_right_;
  }
  _impl_.bottom_right_ = nullptr;
}
inline const ::bosdyn::api::spot::Color& IndependentColorParams::_internal_bottom_right() const {
  const ::bosdyn::api::spot::Color* p = _impl_.bottom_right_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::spot::Color&>(
      ::bosdyn::api::spot::_Color_default_instance_);
}
inline const ::bosdyn::api::spot::Color& IndependentColorParams::bottom_right() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.IndependentColorParams.bottom_right)
  return _internal_bottom_right();
}
inline void IndependentColorParams::unsafe_arena_set_allocated_bottom_right(
    ::bosdyn::api::spot::Color* bottom_right) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bottom_right_);
  }
  _impl_.bottom_right_ = bottom_right;
  if (bottom_right) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.IndependentColorParams.bottom_right)
}
inline ::bosdyn::api::spot::Color* IndependentColorParams::release_bottom_right() {
  
  ::bosdyn::api::spot::Color* temp = _impl_.bottom_right_;
  _impl_.bottom_right_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::spot::Color* IndependentColorParams::unsafe_arena_release_bottom_right() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.IndependentColorParams.bottom_right)
  
  ::bosdyn::api::spot::Color* temp = _impl_.bottom_right_;
  _impl_.bottom_right_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot::Color* IndependentColorParams::_internal_mutable_bottom_right() {
  
  if (_impl_.bottom_right_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot::Color>(GetArenaForAllocation());
    _impl_.bottom_right_ = p;
  }
  return _impl_.bottom_right_;
}
inline ::bosdyn::api::spot::Color* IndependentColorParams::mutable_bottom_right() {
  ::bosdyn::api::spot::Color* _msg = _internal_mutable_bottom_right();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.IndependentColorParams.bottom_right)
  return _msg;
}
inline void IndependentColorParams::set_allocated_bottom_right(::bosdyn::api::spot::Color* bottom_right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bottom_right_;
  }
  if (bottom_right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bottom_right);
    if (message_arena != submessage_arena) {
      bottom_right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bottom_right, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bottom_right_ = bottom_right;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.IndependentColorParams.bottom_right)
}

// .google.protobuf.DoubleValue fade_in_slices = 9;
inline bool IndependentColorParams::_internal_has_fade_in_slices() const {
  return this != internal_default_instance() && _impl_.fade_in_slices_ != nullptr;
}
inline bool IndependentColorParams::has_fade_in_slices() const {
  return _internal_has_fade_in_slices();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& IndependentColorParams::_internal_fade_in_slices() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.fade_in_slices_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& IndependentColorParams::fade_in_slices() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.IndependentColorParams.fade_in_slices)
  return _internal_fade_in_slices();
}
inline void IndependentColorParams::unsafe_arena_set_allocated_fade_in_slices(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* fade_in_slices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fade_in_slices_);
  }
  _impl_.fade_in_slices_ = fade_in_slices;
  if (fade_in_slices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.IndependentColorParams.fade_in_slices)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* IndependentColorParams::release_fade_in_slices() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.fade_in_slices_;
  _impl_.fade_in_slices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* IndependentColorParams::unsafe_arena_release_fade_in_slices() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.IndependentColorParams.fade_in_slices)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.fade_in_slices_;
  _impl_.fade_in_slices_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* IndependentColorParams::_internal_mutable_fade_in_slices() {
  
  if (_impl_.fade_in_slices_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.fade_in_slices_ = p;
  }
  return _impl_.fade_in_slices_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* IndependentColorParams::mutable_fade_in_slices() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_fade_in_slices();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.IndependentColorParams.fade_in_slices)
  return _msg;
}
inline void IndependentColorParams::set_allocated_fade_in_slices(::PROTOBUF_NAMESPACE_ID::DoubleValue* fade_in_slices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fade_in_slices_);
  }
  if (fade_in_slices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fade_in_slices));
    if (message_arena != submessage_arena) {
      fade_in_slices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fade_in_slices, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fade_in_slices_ = fade_in_slices;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.IndependentColorParams.fade_in_slices)
}

// .google.protobuf.DoubleValue fade_out_slices = 10;
inline bool IndependentColorParams::_internal_has_fade_out_slices() const {
  return this != internal_default_instance() && _impl_.fade_out_slices_ != nullptr;
}
inline bool IndependentColorParams::has_fade_out_slices() const {
  return _internal_has_fade_out_slices();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& IndependentColorParams::_internal_fade_out_slices() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.fade_out_slices_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& IndependentColorParams::fade_out_slices() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.IndependentColorParams.fade_out_slices)
  return _internal_fade_out_slices();
}
inline void IndependentColorParams::unsafe_arena_set_allocated_fade_out_slices(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* fade_out_slices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fade_out_slices_);
  }
  _impl_.fade_out_slices_ = fade_out_slices;
  if (fade_out_slices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.IndependentColorParams.fade_out_slices)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* IndependentColorParams::release_fade_out_slices() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.fade_out_slices_;
  _impl_.fade_out_slices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* IndependentColorParams::unsafe_arena_release_fade_out_slices() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.IndependentColorParams.fade_out_slices)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.fade_out_slices_;
  _impl_.fade_out_slices_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* IndependentColorParams::_internal_mutable_fade_out_slices() {
  
  if (_impl_.fade_out_slices_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.fade_out_slices_ = p;
  }
  return _impl_.fade_out_slices_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* IndependentColorParams::mutable_fade_out_slices() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_fade_out_slices();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.IndependentColorParams.fade_out_slices)
  return _msg;
}
inline void IndependentColorParams::set_allocated_fade_out_slices(::PROTOBUF_NAMESPACE_ID::DoubleValue* fade_out_slices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fade_out_slices_);
  }
  if (fade_out_slices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fade_out_slices));
    if (message_arena != submessage_arena) {
      fade_out_slices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fade_out_slices, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fade_out_slices_ = fade_out_slices;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.IndependentColorParams.fade_out_slices)
}

// -------------------------------------------------------------------

// Color

// .google.protobuf.DoubleValue red = 1;
inline bool Color::_internal_has_red() const {
  return this != internal_default_instance() && _impl_.red_ != nullptr;
}
inline bool Color::has_red() const {
  return _internal_has_red();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Color::_internal_red() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.red_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Color::red() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.Color.red)
  return _internal_red();
}
inline void Color::unsafe_arena_set_allocated_red(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* red) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.red_);
  }
  _impl_.red_ = red;
  if (red) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.Color.red)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Color::release_red() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.red_;
  _impl_.red_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Color::unsafe_arena_release_red() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.Color.red)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.red_;
  _impl_.red_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Color::_internal_mutable_red() {
  
  if (_impl_.red_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.red_ = p;
  }
  return _impl_.red_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Color::mutable_red() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_red();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.Color.red)
  return _msg;
}
inline void Color::set_allocated_red(::PROTOBUF_NAMESPACE_ID::DoubleValue* red) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.red_);
  }
  if (red) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(red));
    if (message_arena != submessage_arena) {
      red = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, red, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.red_ = red;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.Color.red)
}

// .google.protobuf.DoubleValue green = 2;
inline bool Color::_internal_has_green() const {
  return this != internal_default_instance() && _impl_.green_ != nullptr;
}
inline bool Color::has_green() const {
  return _internal_has_green();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Color::_internal_green() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.green_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Color::green() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.Color.green)
  return _internal_green();
}
inline void Color::unsafe_arena_set_allocated_green(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* green) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.green_);
  }
  _impl_.green_ = green;
  if (green) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.Color.green)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Color::release_green() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.green_;
  _impl_.green_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Color::unsafe_arena_release_green() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.Color.green)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.green_;
  _impl_.green_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Color::_internal_mutable_green() {
  
  if (_impl_.green_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.green_ = p;
  }
  return _impl_.green_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Color::mutable_green() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_green();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.Color.green)
  return _msg;
}
inline void Color::set_allocated_green(::PROTOBUF_NAMESPACE_ID::DoubleValue* green) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.green_);
  }
  if (green) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(green));
    if (message_arena != submessage_arena) {
      green = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, green, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.green_ = green;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.Color.green)
}

// .google.protobuf.DoubleValue blue = 3;
inline bool Color::_internal_has_blue() const {
  return this != internal_default_instance() && _impl_.blue_ != nullptr;
}
inline bool Color::has_blue() const {
  return _internal_has_blue();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Color::_internal_blue() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.blue_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Color::blue() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.Color.blue)
  return _internal_blue();
}
inline void Color::unsafe_arena_set_allocated_blue(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* blue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.blue_);
  }
  _impl_.blue_ = blue;
  if (blue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.Color.blue)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Color::release_blue() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.blue_;
  _impl_.blue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Color::unsafe_arena_release_blue() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.Color.blue)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.blue_;
  _impl_.blue_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Color::_internal_mutable_blue() {
  
  if (_impl_.blue_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.blue_ = p;
  }
  return _impl_.blue_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Color::mutable_blue() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_blue();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.Color.blue)
  return _msg;
}
inline void Color::set_allocated_blue(::PROTOBUF_NAMESPACE_ID::DoubleValue* blue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.blue_);
  }
  if (blue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blue));
    if (message_arena != submessage_arena) {
      blue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blue, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.blue_ = blue;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.Color.blue)
}

// -------------------------------------------------------------------

// RippleColorParams

// .bosdyn.api.spot.Color main = 1;
inline bool RippleColorParams::_internal_has_main() const {
  return this != internal_default_instance() && _impl_.main_ != nullptr;
}
inline bool RippleColorParams::has_main() const {
  return _internal_has_main();
}
inline void RippleColorParams::clear_main() {
  if (GetArenaForAllocation() == nullptr && _impl_.main_ != nullptr) {
    delete _impl_.main_;
  }
  _impl_.main_ = nullptr;
}
inline const ::bosdyn::api::spot::Color& RippleColorParams::_internal_main() const {
  const ::bosdyn::api::spot::Color* p = _impl_.main_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::spot::Color&>(
      ::bosdyn::api::spot::_Color_default_instance_);
}
inline const ::bosdyn::api::spot::Color& RippleColorParams::main() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.RippleColorParams.main)
  return _internal_main();
}
inline void RippleColorParams::unsafe_arena_set_allocated_main(
    ::bosdyn::api::spot::Color* main) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.main_);
  }
  _impl_.main_ = main;
  if (main) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.RippleColorParams.main)
}
inline ::bosdyn::api::spot::Color* RippleColorParams::release_main() {
  
  ::bosdyn::api::spot::Color* temp = _impl_.main_;
  _impl_.main_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::spot::Color* RippleColorParams::unsafe_arena_release_main() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.RippleColorParams.main)
  
  ::bosdyn::api::spot::Color* temp = _impl_.main_;
  _impl_.main_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot::Color* RippleColorParams::_internal_mutable_main() {
  
  if (_impl_.main_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot::Color>(GetArenaForAllocation());
    _impl_.main_ = p;
  }
  return _impl_.main_;
}
inline ::bosdyn::api::spot::Color* RippleColorParams::mutable_main() {
  ::bosdyn::api::spot::Color* _msg = _internal_mutable_main();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.RippleColorParams.main)
  return _msg;
}
inline void RippleColorParams::set_allocated_main(::bosdyn::api::spot::Color* main) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.main_;
  }
  if (main) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(main);
    if (message_arena != submessage_arena) {
      main = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, main, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.main_ = main;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.RippleColorParams.main)
}

// .bosdyn.api.spot.Color secondary = 2;
inline bool RippleColorParams::_internal_has_secondary() const {
  return this != internal_default_instance() && _impl_.secondary_ != nullptr;
}
inline bool RippleColorParams::has_secondary() const {
  return _internal_has_secondary();
}
inline void RippleColorParams::clear_secondary() {
  if (GetArenaForAllocation() == nullptr && _impl_.secondary_ != nullptr) {
    delete _impl_.secondary_;
  }
  _impl_.secondary_ = nullptr;
}
inline const ::bosdyn::api::spot::Color& RippleColorParams::_internal_secondary() const {
  const ::bosdyn::api::spot::Color* p = _impl_.secondary_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::spot::Color&>(
      ::bosdyn::api::spot::_Color_default_instance_);
}
inline const ::bosdyn::api::spot::Color& RippleColorParams::secondary() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.RippleColorParams.secondary)
  return _internal_secondary();
}
inline void RippleColorParams::unsafe_arena_set_allocated_secondary(
    ::bosdyn::api::spot::Color* secondary) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.secondary_);
  }
  _impl_.secondary_ = secondary;
  if (secondary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.RippleColorParams.secondary)
}
inline ::bosdyn::api::spot::Color* RippleColorParams::release_secondary() {
  
  ::bosdyn::api::spot::Color* temp = _impl_.secondary_;
  _impl_.secondary_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::spot::Color* RippleColorParams::unsafe_arena_release_secondary() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.RippleColorParams.secondary)
  
  ::bosdyn::api::spot::Color* temp = _impl_.secondary_;
  _impl_.secondary_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot::Color* RippleColorParams::_internal_mutable_secondary() {
  
  if (_impl_.secondary_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot::Color>(GetArenaForAllocation());
    _impl_.secondary_ = p;
  }
  return _impl_.secondary_;
}
inline ::bosdyn::api::spot::Color* RippleColorParams::mutable_secondary() {
  ::bosdyn::api::spot::Color* _msg = _internal_mutable_secondary();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.RippleColorParams.secondary)
  return _msg;
}
inline void RippleColorParams::set_allocated_secondary(::bosdyn::api::spot::Color* secondary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.secondary_;
  }
  if (secondary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(secondary);
    if (message_arena != submessage_arena) {
      secondary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, secondary, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.secondary_ = secondary;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.RippleColorParams.secondary)
}

// .bosdyn.api.spot.RippleColorParams.Pattern pattern = 3;
inline void RippleColorParams::clear_pattern() {
  _impl_.pattern_ = 0;
}
inline ::bosdyn::api::spot::RippleColorParams_Pattern RippleColorParams::_internal_pattern() const {
  return static_cast< ::bosdyn::api::spot::RippleColorParams_Pattern >(_impl_.pattern_);
}
inline ::bosdyn::api::spot::RippleColorParams_Pattern RippleColorParams::pattern() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.RippleColorParams.pattern)
  return _internal_pattern();
}
inline void RippleColorParams::_internal_set_pattern(::bosdyn::api::spot::RippleColorParams_Pattern value) {
  
  _impl_.pattern_ = value;
}
inline void RippleColorParams::set_pattern(::bosdyn::api::spot::RippleColorParams_Pattern value) {
  _internal_set_pattern(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot.RippleColorParams.pattern)
}

// .bosdyn.api.spot.RippleColorParams.LightSide light_side = 4;
inline void RippleColorParams::clear_light_side() {
  _impl_.light_side_ = 0;
}
inline ::bosdyn::api::spot::RippleColorParams_LightSide RippleColorParams::_internal_light_side() const {
  return static_cast< ::bosdyn::api::spot::RippleColorParams_LightSide >(_impl_.light_side_);
}
inline ::bosdyn::api::spot::RippleColorParams_LightSide RippleColorParams::light_side() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.RippleColorParams.light_side)
  return _internal_light_side();
}
inline void RippleColorParams::_internal_set_light_side(::bosdyn::api::spot::RippleColorParams_LightSide value) {
  
  _impl_.light_side_ = value;
}
inline void RippleColorParams::set_light_side(::bosdyn::api::spot::RippleColorParams_LightSide value) {
  _internal_set_light_side(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot.RippleColorParams.light_side)
}

// .google.protobuf.DoubleValue increment_slices = 5;
inline bool RippleColorParams::_internal_has_increment_slices() const {
  return this != internal_default_instance() && _impl_.increment_slices_ != nullptr;
}
inline bool RippleColorParams::has_increment_slices() const {
  return _internal_has_increment_slices();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& RippleColorParams::_internal_increment_slices() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.increment_slices_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& RippleColorParams::increment_slices() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.RippleColorParams.increment_slices)
  return _internal_increment_slices();
}
inline void RippleColorParams::unsafe_arena_set_allocated_increment_slices(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* increment_slices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.increment_slices_);
  }
  _impl_.increment_slices_ = increment_slices;
  if (increment_slices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.RippleColorParams.increment_slices)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* RippleColorParams::release_increment_slices() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.increment_slices_;
  _impl_.increment_slices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* RippleColorParams::unsafe_arena_release_increment_slices() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.RippleColorParams.increment_slices)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.increment_slices_;
  _impl_.increment_slices_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* RippleColorParams::_internal_mutable_increment_slices() {
  
  if (_impl_.increment_slices_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.increment_slices_ = p;
  }
  return _impl_.increment_slices_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* RippleColorParams::mutable_increment_slices() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_increment_slices();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.RippleColorParams.increment_slices)
  return _msg;
}
inline void RippleColorParams::set_allocated_increment_slices(::PROTOBUF_NAMESPACE_ID::DoubleValue* increment_slices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.increment_slices_);
  }
  if (increment_slices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(increment_slices));
    if (message_arena != submessage_arena) {
      increment_slices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, increment_slices, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.increment_slices_ = increment_slices;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.RippleColorParams.increment_slices)
}

// -------------------------------------------------------------------

// AnimateParams

// string animation_name = 1;
inline void AnimateParams::clear_animation_name() {
  _impl_.animation_name_.ClearToEmpty();
}
inline const std::string& AnimateParams::animation_name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.AnimateParams.animation_name)
  return _internal_animation_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AnimateParams::set_animation_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.animation_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosdyn.api.spot.AnimateParams.animation_name)
}
inline std::string* AnimateParams::mutable_animation_name() {
  std::string* _s = _internal_mutable_animation_name();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.AnimateParams.animation_name)
  return _s;
}
inline const std::string& AnimateParams::_internal_animation_name() const {
  return _impl_.animation_name_.Get();
}
inline void AnimateParams::_internal_set_animation_name(const std::string& value) {
  
  _impl_.animation_name_.Set(value, GetArenaForAllocation());
}
inline std::string* AnimateParams::_internal_mutable_animation_name() {
  
  return _impl_.animation_name_.Mutable(GetArenaForAllocation());
}
inline std::string* AnimateParams::release_animation_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.AnimateParams.animation_name)
  return _impl_.animation_name_.Release();
}
inline void AnimateParams::set_allocated_animation_name(std::string* animation_name) {
  if (animation_name != nullptr) {
    
  } else {
    
  }
  _impl_.animation_name_.SetAllocated(animation_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.animation_name_.IsDefault()) {
    _impl_.animation_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.AnimateParams.animation_name)
}

// .google.protobuf.DoubleValue body_entry_slices = 2;
inline bool AnimateParams::_internal_has_body_entry_slices() const {
  return this != internal_default_instance() && _impl_.body_entry_slices_ != nullptr;
}
inline bool AnimateParams::has_body_entry_slices() const {
  return _internal_has_body_entry_slices();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& AnimateParams::_internal_body_entry_slices() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.body_entry_slices_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& AnimateParams::body_entry_slices() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.AnimateParams.body_entry_slices)
  return _internal_body_entry_slices();
}
inline void AnimateParams::unsafe_arena_set_allocated_body_entry_slices(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* body_entry_slices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_entry_slices_);
  }
  _impl_.body_entry_slices_ = body_entry_slices;
  if (body_entry_slices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.AnimateParams.body_entry_slices)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::release_body_entry_slices() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.body_entry_slices_;
  _impl_.body_entry_slices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::unsafe_arena_release_body_entry_slices() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.AnimateParams.body_entry_slices)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.body_entry_slices_;
  _impl_.body_entry_slices_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::_internal_mutable_body_entry_slices() {
  
  if (_impl_.body_entry_slices_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.body_entry_slices_ = p;
  }
  return _impl_.body_entry_slices_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::mutable_body_entry_slices() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_body_entry_slices();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.AnimateParams.body_entry_slices)
  return _msg;
}
inline void AnimateParams::set_allocated_body_entry_slices(::PROTOBUF_NAMESPACE_ID::DoubleValue* body_entry_slices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_entry_slices_);
  }
  if (body_entry_slices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_entry_slices));
    if (message_arena != submessage_arena) {
      body_entry_slices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body_entry_slices, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.body_entry_slices_ = body_entry_slices;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.AnimateParams.body_entry_slices)
}

// .google.protobuf.DoubleValue body_exit_slices = 3;
inline bool AnimateParams::_internal_has_body_exit_slices() const {
  return this != internal_default_instance() && _impl_.body_exit_slices_ != nullptr;
}
inline bool AnimateParams::has_body_exit_slices() const {
  return _internal_has_body_exit_slices();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& AnimateParams::_internal_body_exit_slices() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.body_exit_slices_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& AnimateParams::body_exit_slices() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.AnimateParams.body_exit_slices)
  return _internal_body_exit_slices();
}
inline void AnimateParams::unsafe_arena_set_allocated_body_exit_slices(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* body_exit_slices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_exit_slices_);
  }
  _impl_.body_exit_slices_ = body_exit_slices;
  if (body_exit_slices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.AnimateParams.body_exit_slices)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::release_body_exit_slices() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.body_exit_slices_;
  _impl_.body_exit_slices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::unsafe_arena_release_body_exit_slices() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.AnimateParams.body_exit_slices)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.body_exit_slices_;
  _impl_.body_exit_slices_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::_internal_mutable_body_exit_slices() {
  
  if (_impl_.body_exit_slices_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.body_exit_slices_ = p;
  }
  return _impl_.body_exit_slices_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::mutable_body_exit_slices() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_body_exit_slices();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.AnimateParams.body_exit_slices)
  return _msg;
}
inline void AnimateParams::set_allocated_body_exit_slices(::PROTOBUF_NAMESPACE_ID::DoubleValue* body_exit_slices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_exit_slices_);
  }
  if (body_exit_slices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_exit_slices));
    if (message_arena != submessage_arena) {
      body_exit_slices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body_exit_slices, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.body_exit_slices_ = body_exit_slices;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.AnimateParams.body_exit_slices)
}

// .bosdyn.api.Vec3Value translation_multiplier = 4;
inline bool AnimateParams::_internal_has_translation_multiplier() const {
  return this != internal_default_instance() && _impl_.translation_multiplier_ != nullptr;
}
inline bool AnimateParams::has_translation_multiplier() const {
  return _internal_has_translation_multiplier();
}
inline const ::bosdyn::api::Vec3Value& AnimateParams::_internal_translation_multiplier() const {
  const ::bosdyn::api::Vec3Value* p = _impl_.translation_multiplier_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::Vec3Value&>(
      ::bosdyn::api::_Vec3Value_default_instance_);
}
inline const ::bosdyn::api::Vec3Value& AnimateParams::translation_multiplier() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.AnimateParams.translation_multiplier)
  return _internal_translation_multiplier();
}
inline void AnimateParams::unsafe_arena_set_allocated_translation_multiplier(
    ::bosdyn::api::Vec3Value* translation_multiplier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.translation_multiplier_);
  }
  _impl_.translation_multiplier_ = translation_multiplier;
  if (translation_multiplier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.AnimateParams.translation_multiplier)
}
inline ::bosdyn::api::Vec3Value* AnimateParams::release_translation_multiplier() {
  
  ::bosdyn::api::Vec3Value* temp = _impl_.translation_multiplier_;
  _impl_.translation_multiplier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::Vec3Value* AnimateParams::unsafe_arena_release_translation_multiplier() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.AnimateParams.translation_multiplier)
  
  ::bosdyn::api::Vec3Value* temp = _impl_.translation_multiplier_;
  _impl_.translation_multiplier_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec3Value* AnimateParams::_internal_mutable_translation_multiplier() {
  
  if (_impl_.translation_multiplier_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec3Value>(GetArenaForAllocation());
    _impl_.translation_multiplier_ = p;
  }
  return _impl_.translation_multiplier_;
}
inline ::bosdyn::api::Vec3Value* AnimateParams::mutable_translation_multiplier() {
  ::bosdyn::api::Vec3Value* _msg = _internal_mutable_translation_multiplier();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.AnimateParams.translation_multiplier)
  return _msg;
}
inline void AnimateParams::set_allocated_translation_multiplier(::bosdyn::api::Vec3Value* translation_multiplier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.translation_multiplier_);
  }
  if (translation_multiplier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translation_multiplier));
    if (message_arena != submessage_arena) {
      translation_multiplier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translation_multiplier, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.translation_multiplier_ = translation_multiplier;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.AnimateParams.translation_multiplier)
}

// .bosdyn.api.spot.EulerZYXValue rotation_multiplier = 5;
inline bool AnimateParams::_internal_has_rotation_multiplier() const {
  return this != internal_default_instance() && _impl_.rotation_multiplier_ != nullptr;
}
inline bool AnimateParams::has_rotation_multiplier() const {
  return _internal_has_rotation_multiplier();
}
inline void AnimateParams::clear_rotation_multiplier() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_multiplier_ != nullptr) {
    delete _impl_.rotation_multiplier_;
  }
  _impl_.rotation_multiplier_ = nullptr;
}
inline const ::bosdyn::api::spot::EulerZYXValue& AnimateParams::_internal_rotation_multiplier() const {
  const ::bosdyn::api::spot::EulerZYXValue* p = _impl_.rotation_multiplier_;
  return p != nullptr ? *p : reinterpret_cast<const ::bosdyn::api::spot::EulerZYXValue&>(
      ::bosdyn::api::spot::_EulerZYXValue_default_instance_);
}
inline const ::bosdyn::api::spot::EulerZYXValue& AnimateParams::rotation_multiplier() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.AnimateParams.rotation_multiplier)
  return _internal_rotation_multiplier();
}
inline void AnimateParams::unsafe_arena_set_allocated_rotation_multiplier(
    ::bosdyn::api::spot::EulerZYXValue* rotation_multiplier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_multiplier_);
  }
  _impl_.rotation_multiplier_ = rotation_multiplier;
  if (rotation_multiplier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.AnimateParams.rotation_multiplier)
}
inline ::bosdyn::api::spot::EulerZYXValue* AnimateParams::release_rotation_multiplier() {
  
  ::bosdyn::api::spot::EulerZYXValue* temp = _impl_.rotation_multiplier_;
  _impl_.rotation_multiplier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bosdyn::api::spot::EulerZYXValue* AnimateParams::unsafe_arena_release_rotation_multiplier() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.AnimateParams.rotation_multiplier)
  
  ::bosdyn::api::spot::EulerZYXValue* temp = _impl_.rotation_multiplier_;
  _impl_.rotation_multiplier_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot::EulerZYXValue* AnimateParams::_internal_mutable_rotation_multiplier() {
  
  if (_impl_.rotation_multiplier_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot::EulerZYXValue>(GetArenaForAllocation());
    _impl_.rotation_multiplier_ = p;
  }
  return _impl_.rotation_multiplier_;
}
inline ::bosdyn::api::spot::EulerZYXValue* AnimateParams::mutable_rotation_multiplier() {
  ::bosdyn::api::spot::EulerZYXValue* _msg = _internal_mutable_rotation_multiplier();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.AnimateParams.rotation_multiplier)
  return _msg;
}
inline void AnimateParams::set_allocated_rotation_multiplier(::bosdyn::api::spot::EulerZYXValue* rotation_multiplier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_multiplier_;
  }
  if (rotation_multiplier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation_multiplier);
    if (message_arena != submessage_arena) {
      rotation_multiplier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation_multiplier, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_multiplier_ = rotation_multiplier;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.AnimateParams.rotation_multiplier)
}

// .google.protobuf.DoubleValue arm_entry_slices = 6;
inline bool AnimateParams::_internal_has_arm_entry_slices() const {
  return this != internal_default_instance() && _impl_.arm_entry_slices_ != nullptr;
}
inline bool AnimateParams::has_arm_entry_slices() const {
  return _internal_has_arm_entry_slices();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& AnimateParams::_internal_arm_entry_slices() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.arm_entry_slices_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& AnimateParams::arm_entry_slices() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.AnimateParams.arm_entry_slices)
  return _internal_arm_entry_slices();
}
inline void AnimateParams::unsafe_arena_set_allocated_arm_entry_slices(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* arm_entry_slices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.arm_entry_slices_);
  }
  _impl_.arm_entry_slices_ = arm_entry_slices;
  if (arm_entry_slices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.AnimateParams.arm_entry_slices)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::release_arm_entry_slices() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.arm_entry_slices_;
  _impl_.arm_entry_slices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::unsafe_arena_release_arm_entry_slices() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.AnimateParams.arm_entry_slices)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.arm_entry_slices_;
  _impl_.arm_entry_slices_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::_internal_mutable_arm_entry_slices() {
  
  if (_impl_.arm_entry_slices_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.arm_entry_slices_ = p;
  }
  return _impl_.arm_entry_slices_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::mutable_arm_entry_slices() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_arm_entry_slices();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.AnimateParams.arm_entry_slices)
  return _msg;
}
inline void AnimateParams::set_allocated_arm_entry_slices(::PROTOBUF_NAMESPACE_ID::DoubleValue* arm_entry_slices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.arm_entry_slices_);
  }
  if (arm_entry_slices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arm_entry_slices));
    if (message_arena != submessage_arena) {
      arm_entry_slices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arm_entry_slices, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.arm_entry_slices_ = arm_entry_slices;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.AnimateParams.arm_entry_slices)
}

// .google.protobuf.DoubleValue shoulder_0_offset = 7;
inline bool AnimateParams::_internal_has_shoulder_0_offset() const {
  return this != internal_default_instance() && _impl_.shoulder_0_offset_ != nullptr;
}
inline bool AnimateParams::has_shoulder_0_offset() const {
  return _internal_has_shoulder_0_offset();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& AnimateParams::_internal_shoulder_0_offset() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.shoulder_0_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& AnimateParams::shoulder_0_offset() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.AnimateParams.shoulder_0_offset)
  return _internal_shoulder_0_offset();
}
inline void AnimateParams::unsafe_arena_set_allocated_shoulder_0_offset(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* shoulder_0_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shoulder_0_offset_);
  }
  _impl_.shoulder_0_offset_ = shoulder_0_offset;
  if (shoulder_0_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.AnimateParams.shoulder_0_offset)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::release_shoulder_0_offset() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.shoulder_0_offset_;
  _impl_.shoulder_0_offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::unsafe_arena_release_shoulder_0_offset() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.AnimateParams.shoulder_0_offset)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.shoulder_0_offset_;
  _impl_.shoulder_0_offset_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::_internal_mutable_shoulder_0_offset() {
  
  if (_impl_.shoulder_0_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.shoulder_0_offset_ = p;
  }
  return _impl_.shoulder_0_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::mutable_shoulder_0_offset() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_shoulder_0_offset();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.AnimateParams.shoulder_0_offset)
  return _msg;
}
inline void AnimateParams::set_allocated_shoulder_0_offset(::PROTOBUF_NAMESPACE_ID::DoubleValue* shoulder_0_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shoulder_0_offset_);
  }
  if (shoulder_0_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shoulder_0_offset));
    if (message_arena != submessage_arena) {
      shoulder_0_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shoulder_0_offset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.shoulder_0_offset_ = shoulder_0_offset;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.AnimateParams.shoulder_0_offset)
}

// .google.protobuf.DoubleValue shoulder_1_offset = 8;
inline bool AnimateParams::_internal_has_shoulder_1_offset() const {
  return this != internal_default_instance() && _impl_.shoulder_1_offset_ != nullptr;
}
inline bool AnimateParams::has_shoulder_1_offset() const {
  return _internal_has_shoulder_1_offset();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& AnimateParams::_internal_shoulder_1_offset() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.shoulder_1_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& AnimateParams::shoulder_1_offset() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.AnimateParams.shoulder_1_offset)
  return _internal_shoulder_1_offset();
}
inline void AnimateParams::unsafe_arena_set_allocated_shoulder_1_offset(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* shoulder_1_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shoulder_1_offset_);
  }
  _impl_.shoulder_1_offset_ = shoulder_1_offset;
  if (shoulder_1_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.AnimateParams.shoulder_1_offset)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::release_shoulder_1_offset() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.shoulder_1_offset_;
  _impl_.shoulder_1_offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::unsafe_arena_release_shoulder_1_offset() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.AnimateParams.shoulder_1_offset)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.shoulder_1_offset_;
  _impl_.shoulder_1_offset_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::_internal_mutable_shoulder_1_offset() {
  
  if (_impl_.shoulder_1_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.shoulder_1_offset_ = p;
  }
  return _impl_.shoulder_1_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::mutable_shoulder_1_offset() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_shoulder_1_offset();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.AnimateParams.shoulder_1_offset)
  return _msg;
}
inline void AnimateParams::set_allocated_shoulder_1_offset(::PROTOBUF_NAMESPACE_ID::DoubleValue* shoulder_1_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shoulder_1_offset_);
  }
  if (shoulder_1_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shoulder_1_offset));
    if (message_arena != submessage_arena) {
      shoulder_1_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shoulder_1_offset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.shoulder_1_offset_ = shoulder_1_offset;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.AnimateParams.shoulder_1_offset)
}

// .google.protobuf.DoubleValue elbow_0_offset = 9;
inline bool AnimateParams::_internal_has_elbow_0_offset() const {
  return this != internal_default_instance() && _impl_.elbow_0_offset_ != nullptr;
}
inline bool AnimateParams::has_elbow_0_offset() const {
  return _internal_has_elbow_0_offset();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& AnimateParams::_internal_elbow_0_offset() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.elbow_0_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& AnimateParams::elbow_0_offset() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.AnimateParams.elbow_0_offset)
  return _internal_elbow_0_offset();
}
inline void AnimateParams::unsafe_arena_set_allocated_elbow_0_offset(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* elbow_0_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.elbow_0_offset_);
  }
  _impl_.elbow_0_offset_ = elbow_0_offset;
  if (elbow_0_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.AnimateParams.elbow_0_offset)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::release_elbow_0_offset() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.elbow_0_offset_;
  _impl_.elbow_0_offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::unsafe_arena_release_elbow_0_offset() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.AnimateParams.elbow_0_offset)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.elbow_0_offset_;
  _impl_.elbow_0_offset_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::_internal_mutable_elbow_0_offset() {
  
  if (_impl_.elbow_0_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.elbow_0_offset_ = p;
  }
  return _impl_.elbow_0_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::mutable_elbow_0_offset() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_elbow_0_offset();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.AnimateParams.elbow_0_offset)
  return _msg;
}
inline void AnimateParams::set_allocated_elbow_0_offset(::PROTOBUF_NAMESPACE_ID::DoubleValue* elbow_0_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.elbow_0_offset_);
  }
  if (elbow_0_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(elbow_0_offset));
    if (message_arena != submessage_arena) {
      elbow_0_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, elbow_0_offset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.elbow_0_offset_ = elbow_0_offset;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.AnimateParams.elbow_0_offset)
}

// .google.protobuf.DoubleValue elbow_1_offset = 10;
inline bool AnimateParams::_internal_has_elbow_1_offset() const {
  return this != internal_default_instance() && _impl_.elbow_1_offset_ != nullptr;
}
inline bool AnimateParams::has_elbow_1_offset() const {
  return _internal_has_elbow_1_offset();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& AnimateParams::_internal_elbow_1_offset() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.elbow_1_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& AnimateParams::elbow_1_offset() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.AnimateParams.elbow_1_offset)
  return _internal_elbow_1_offset();
}
inline void AnimateParams::unsafe_arena_set_allocated_elbow_1_offset(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* elbow_1_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.elbow_1_offset_);
  }
  _impl_.elbow_1_offset_ = elbow_1_offset;
  if (elbow_1_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.AnimateParams.elbow_1_offset)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::release_elbow_1_offset() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.elbow_1_offset_;
  _impl_.elbow_1_offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::unsafe_arena_release_elbow_1_offset() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.AnimateParams.elbow_1_offset)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.elbow_1_offset_;
  _impl_.elbow_1_offset_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::_internal_mutable_elbow_1_offset() {
  
  if (_impl_.elbow_1_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.elbow_1_offset_ = p;
  }
  return _impl_.elbow_1_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::mutable_elbow_1_offset() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_elbow_1_offset();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.AnimateParams.elbow_1_offset)
  return _msg;
}
inline void AnimateParams::set_allocated_elbow_1_offset(::PROTOBUF_NAMESPACE_ID::DoubleValue* elbow_1_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.elbow_1_offset_);
  }
  if (elbow_1_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(elbow_1_offset));
    if (message_arena != submessage_arena) {
      elbow_1_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, elbow_1_offset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.elbow_1_offset_ = elbow_1_offset;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.AnimateParams.elbow_1_offset)
}

// .google.protobuf.DoubleValue wrist_0_offset = 11;
inline bool AnimateParams::_internal_has_wrist_0_offset() const {
  return this != internal_default_instance() && _impl_.wrist_0_offset_ != nullptr;
}
inline bool AnimateParams::has_wrist_0_offset() const {
  return _internal_has_wrist_0_offset();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& AnimateParams::_internal_wrist_0_offset() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.wrist_0_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& AnimateParams::wrist_0_offset() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.AnimateParams.wrist_0_offset)
  return _internal_wrist_0_offset();
}
inline void AnimateParams::unsafe_arena_set_allocated_wrist_0_offset(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* wrist_0_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wrist_0_offset_);
  }
  _impl_.wrist_0_offset_ = wrist_0_offset;
  if (wrist_0_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.AnimateParams.wrist_0_offset)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::release_wrist_0_offset() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.wrist_0_offset_;
  _impl_.wrist_0_offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::unsafe_arena_release_wrist_0_offset() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.AnimateParams.wrist_0_offset)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.wrist_0_offset_;
  _impl_.wrist_0_offset_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::_internal_mutable_wrist_0_offset() {
  
  if (_impl_.wrist_0_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.wrist_0_offset_ = p;
  }
  return _impl_.wrist_0_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::mutable_wrist_0_offset() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_wrist_0_offset();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.AnimateParams.wrist_0_offset)
  return _msg;
}
inline void AnimateParams::set_allocated_wrist_0_offset(::PROTOBUF_NAMESPACE_ID::DoubleValue* wrist_0_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wrist_0_offset_);
  }
  if (wrist_0_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wrist_0_offset));
    if (message_arena != submessage_arena) {
      wrist_0_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wrist_0_offset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.wrist_0_offset_ = wrist_0_offset;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.AnimateParams.wrist_0_offset)
}

// .google.protobuf.DoubleValue wrist_1_offset = 12;
inline bool AnimateParams::_internal_has_wrist_1_offset() const {
  return this != internal_default_instance() && _impl_.wrist_1_offset_ != nullptr;
}
inline bool AnimateParams::has_wrist_1_offset() const {
  return _internal_has_wrist_1_offset();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& AnimateParams::_internal_wrist_1_offset() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.wrist_1_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& AnimateParams::wrist_1_offset() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.AnimateParams.wrist_1_offset)
  return _internal_wrist_1_offset();
}
inline void AnimateParams::unsafe_arena_set_allocated_wrist_1_offset(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* wrist_1_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wrist_1_offset_);
  }
  _impl_.wrist_1_offset_ = wrist_1_offset;
  if (wrist_1_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.AnimateParams.wrist_1_offset)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::release_wrist_1_offset() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.wrist_1_offset_;
  _impl_.wrist_1_offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::unsafe_arena_release_wrist_1_offset() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.AnimateParams.wrist_1_offset)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.wrist_1_offset_;
  _impl_.wrist_1_offset_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::_internal_mutable_wrist_1_offset() {
  
  if (_impl_.wrist_1_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.wrist_1_offset_ = p;
  }
  return _impl_.wrist_1_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::mutable_wrist_1_offset() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_wrist_1_offset();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.AnimateParams.wrist_1_offset)
  return _msg;
}
inline void AnimateParams::set_allocated_wrist_1_offset(::PROTOBUF_NAMESPACE_ID::DoubleValue* wrist_1_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wrist_1_offset_);
  }
  if (wrist_1_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wrist_1_offset));
    if (message_arena != submessage_arena) {
      wrist_1_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wrist_1_offset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.wrist_1_offset_ = wrist_1_offset;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.AnimateParams.wrist_1_offset)
}

// .google.protobuf.DoubleValue gripper_offset = 13;
inline bool AnimateParams::_internal_has_gripper_offset() const {
  return this != internal_default_instance() && _impl_.gripper_offset_ != nullptr;
}
inline bool AnimateParams::has_gripper_offset() const {
  return _internal_has_gripper_offset();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& AnimateParams::_internal_gripper_offset() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.gripper_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& AnimateParams::gripper_offset() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.AnimateParams.gripper_offset)
  return _internal_gripper_offset();
}
inline void AnimateParams::unsafe_arena_set_allocated_gripper_offset(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* gripper_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gripper_offset_);
  }
  _impl_.gripper_offset_ = gripper_offset;
  if (gripper_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.AnimateParams.gripper_offset)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::release_gripper_offset() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.gripper_offset_;
  _impl_.gripper_offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::unsafe_arena_release_gripper_offset() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.AnimateParams.gripper_offset)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.gripper_offset_;
  _impl_.gripper_offset_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::_internal_mutable_gripper_offset() {
  
  if (_impl_.gripper_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.gripper_offset_ = p;
  }
  return _impl_.gripper_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::mutable_gripper_offset() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_gripper_offset();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.AnimateParams.gripper_offset)
  return _msg;
}
inline void AnimateParams::set_allocated_gripper_offset(::PROTOBUF_NAMESPACE_ID::DoubleValue* gripper_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gripper_offset_);
  }
  if (gripper_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gripper_offset));
    if (message_arena != submessage_arena) {
      gripper_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gripper_offset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gripper_offset_ = gripper_offset;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.AnimateParams.gripper_offset)
}

// .google.protobuf.DoubleValue speed = 14;
inline bool AnimateParams::_internal_has_speed() const {
  return this != internal_default_instance() && _impl_.speed_ != nullptr;
}
inline bool AnimateParams::has_speed() const {
  return _internal_has_speed();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& AnimateParams::_internal_speed() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.speed_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& AnimateParams::speed() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.AnimateParams.speed)
  return _internal_speed();
}
inline void AnimateParams::unsafe_arena_set_allocated_speed(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* speed) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.speed_);
  }
  _impl_.speed_ = speed;
  if (speed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.AnimateParams.speed)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::release_speed() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.speed_;
  _impl_.speed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::unsafe_arena_release_speed() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.AnimateParams.speed)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.speed_;
  _impl_.speed_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::_internal_mutable_speed() {
  
  if (_impl_.speed_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.speed_ = p;
  }
  return _impl_.speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::mutable_speed() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_speed();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.AnimateParams.speed)
  return _msg;
}
inline void AnimateParams::set_allocated_speed(::PROTOBUF_NAMESPACE_ID::DoubleValue* speed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.speed_);
  }
  if (speed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed));
    if (message_arena != submessage_arena) {
      speed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.speed_ = speed;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.AnimateParams.speed)
}

// .google.protobuf.DoubleValue offset_slices = 15;
inline bool AnimateParams::_internal_has_offset_slices() const {
  return this != internal_default_instance() && _impl_.offset_slices_ != nullptr;
}
inline bool AnimateParams::has_offset_slices() const {
  return _internal_has_offset_slices();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& AnimateParams::_internal_offset_slices() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.offset_slices_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& AnimateParams::offset_slices() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.AnimateParams.offset_slices)
  return _internal_offset_slices();
}
inline void AnimateParams::unsafe_arena_set_allocated_offset_slices(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* offset_slices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offset_slices_);
  }
  _impl_.offset_slices_ = offset_slices;
  if (offset_slices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.AnimateParams.offset_slices)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::release_offset_slices() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.offset_slices_;
  _impl_.offset_slices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::unsafe_arena_release_offset_slices() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.AnimateParams.offset_slices)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.offset_slices_;
  _impl_.offset_slices_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::_internal_mutable_offset_slices() {
  
  if (_impl_.offset_slices_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.offset_slices_ = p;
  }
  return _impl_.offset_slices_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::mutable_offset_slices() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_offset_slices();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.AnimateParams.offset_slices)
  return _msg;
}
inline void AnimateParams::set_allocated_offset_slices(::PROTOBUF_NAMESPACE_ID::DoubleValue* offset_slices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offset_slices_);
  }
  if (offset_slices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offset_slices));
    if (message_arena != submessage_arena) {
      offset_slices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offset_slices, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.offset_slices_ = offset_slices;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.AnimateParams.offset_slices)
}

// .google.protobuf.DoubleValue gripper_multiplier = 16;
inline bool AnimateParams::_internal_has_gripper_multiplier() const {
  return this != internal_default_instance() && _impl_.gripper_multiplier_ != nullptr;
}
inline bool AnimateParams::has_gripper_multiplier() const {
  return _internal_has_gripper_multiplier();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& AnimateParams::_internal_gripper_multiplier() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.gripper_multiplier_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& AnimateParams::gripper_multiplier() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.AnimateParams.gripper_multiplier)
  return _internal_gripper_multiplier();
}
inline void AnimateParams::unsafe_arena_set_allocated_gripper_multiplier(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* gripper_multiplier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gripper_multiplier_);
  }
  _impl_.gripper_multiplier_ = gripper_multiplier;
  if (gripper_multiplier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.AnimateParams.gripper_multiplier)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::release_gripper_multiplier() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.gripper_multiplier_;
  _impl_.gripper_multiplier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::unsafe_arena_release_gripper_multiplier() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.AnimateParams.gripper_multiplier)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.gripper_multiplier_;
  _impl_.gripper_multiplier_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::_internal_mutable_gripper_multiplier() {
  
  if (_impl_.gripper_multiplier_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.gripper_multiplier_ = p;
  }
  return _impl_.gripper_multiplier_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::mutable_gripper_multiplier() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_gripper_multiplier();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.AnimateParams.gripper_multiplier)
  return _msg;
}
inline void AnimateParams::set_allocated_gripper_multiplier(::PROTOBUF_NAMESPACE_ID::DoubleValue* gripper_multiplier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gripper_multiplier_);
  }
  if (gripper_multiplier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gripper_multiplier));
    if (message_arena != submessage_arena) {
      gripper_multiplier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gripper_multiplier, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gripper_multiplier_ = gripper_multiplier;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.AnimateParams.gripper_multiplier)
}

// .google.protobuf.DoubleValue gripper_strength_fraction = 17;
inline bool AnimateParams::_internal_has_gripper_strength_fraction() const {
  return this != internal_default_instance() && _impl_.gripper_strength_fraction_ != nullptr;
}
inline bool AnimateParams::has_gripper_strength_fraction() const {
  return _internal_has_gripper_strength_fraction();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& AnimateParams::_internal_gripper_strength_fraction() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.gripper_strength_fraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& AnimateParams::gripper_strength_fraction() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.AnimateParams.gripper_strength_fraction)
  return _internal_gripper_strength_fraction();
}
inline void AnimateParams::unsafe_arena_set_allocated_gripper_strength_fraction(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* gripper_strength_fraction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gripper_strength_fraction_);
  }
  _impl_.gripper_strength_fraction_ = gripper_strength_fraction;
  if (gripper_strength_fraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.AnimateParams.gripper_strength_fraction)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::release_gripper_strength_fraction() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.gripper_strength_fraction_;
  _impl_.gripper_strength_fraction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::unsafe_arena_release_gripper_strength_fraction() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.AnimateParams.gripper_strength_fraction)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.gripper_strength_fraction_;
  _impl_.gripper_strength_fraction_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::_internal_mutable_gripper_strength_fraction() {
  
  if (_impl_.gripper_strength_fraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.gripper_strength_fraction_ = p;
  }
  return _impl_.gripper_strength_fraction_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::mutable_gripper_strength_fraction() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_gripper_strength_fraction();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.AnimateParams.gripper_strength_fraction)
  return _msg;
}
inline void AnimateParams::set_allocated_gripper_strength_fraction(::PROTOBUF_NAMESPACE_ID::DoubleValue* gripper_strength_fraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gripper_strength_fraction_);
  }
  if (gripper_strength_fraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gripper_strength_fraction));
    if (message_arena != submessage_arena) {
      gripper_strength_fraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gripper_strength_fraction, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gripper_strength_fraction_ = gripper_strength_fraction;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.AnimateParams.gripper_strength_fraction)
}

// .google.protobuf.Int32Value arm_dance_frame_id = 18;
inline bool AnimateParams::_internal_has_arm_dance_frame_id() const {
  return this != internal_default_instance() && _impl_.arm_dance_frame_id_ != nullptr;
}
inline bool AnimateParams::has_arm_dance_frame_id() const {
  return _internal_has_arm_dance_frame_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& AnimateParams::_internal_arm_dance_frame_id() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.arm_dance_frame_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& AnimateParams::arm_dance_frame_id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.AnimateParams.arm_dance_frame_id)
  return _internal_arm_dance_frame_id();
}
inline void AnimateParams::unsafe_arena_set_allocated_arm_dance_frame_id(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* arm_dance_frame_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.arm_dance_frame_id_);
  }
  _impl_.arm_dance_frame_id_ = arm_dance_frame_id;
  if (arm_dance_frame_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.AnimateParams.arm_dance_frame_id)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* AnimateParams::release_arm_dance_frame_id() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.arm_dance_frame_id_;
  _impl_.arm_dance_frame_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* AnimateParams::unsafe_arena_release_arm_dance_frame_id() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.AnimateParams.arm_dance_frame_id)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.arm_dance_frame_id_;
  _impl_.arm_dance_frame_id_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* AnimateParams::_internal_mutable_arm_dance_frame_id() {
  
  if (_impl_.arm_dance_frame_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.arm_dance_frame_id_ = p;
  }
  return _impl_.arm_dance_frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* AnimateParams::mutable_arm_dance_frame_id() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_arm_dance_frame_id();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.AnimateParams.arm_dance_frame_id)
  return _msg;
}
inline void AnimateParams::set_allocated_arm_dance_frame_id(::PROTOBUF_NAMESPACE_ID::Int32Value* arm_dance_frame_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.arm_dance_frame_id_);
  }
  if (arm_dance_frame_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arm_dance_frame_id));
    if (message_arena != submessage_arena) {
      arm_dance_frame_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arm_dance_frame_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.arm_dance_frame_id_ = arm_dance_frame_id;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.AnimateParams.arm_dance_frame_id)
}

// .google.protobuf.DoubleValue body_tracking_stiffness = 19;
inline bool AnimateParams::_internal_has_body_tracking_stiffness() const {
  return this != internal_default_instance() && _impl_.body_tracking_stiffness_ != nullptr;
}
inline bool AnimateParams::has_body_tracking_stiffness() const {
  return _internal_has_body_tracking_stiffness();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& AnimateParams::_internal_body_tracking_stiffness() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.body_tracking_stiffness_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& AnimateParams::body_tracking_stiffness() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot.AnimateParams.body_tracking_stiffness)
  return _internal_body_tracking_stiffness();
}
inline void AnimateParams::unsafe_arena_set_allocated_body_tracking_stiffness(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* body_tracking_stiffness) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_tracking_stiffness_);
  }
  _impl_.body_tracking_stiffness_ = body_tracking_stiffness;
  if (body_tracking_stiffness) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot.AnimateParams.body_tracking_stiffness)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::release_body_tracking_stiffness() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.body_tracking_stiffness_;
  _impl_.body_tracking_stiffness_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::unsafe_arena_release_body_tracking_stiffness() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot.AnimateParams.body_tracking_stiffness)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.body_tracking_stiffness_;
  _impl_.body_tracking_stiffness_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::_internal_mutable_body_tracking_stiffness() {
  
  if (_impl_.body_tracking_stiffness_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.body_tracking_stiffness_ = p;
  }
  return _impl_.body_tracking_stiffness_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* AnimateParams::mutable_body_tracking_stiffness() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_body_tracking_stiffness();
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot.AnimateParams.body_tracking_stiffness)
  return _msg;
}
inline void AnimateParams::set_allocated_body_tracking_stiffness(::PROTOBUF_NAMESPACE_ID::DoubleValue* body_tracking_stiffness) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_tracking_stiffness_);
  }
  if (body_tracking_stiffness) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_tracking_stiffness));
    if (message_arena != submessage_arena) {
      body_tracking_stiffness = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body_tracking_stiffness, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.body_tracking_stiffness_ = body_tracking_stiffness;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot.AnimateParams.body_tracking_stiffness)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace spot
}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::spot::SwayParams_SwayStyle> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::spot::SwayParams_SwayStyle>() {
  return ::bosdyn::api::spot::SwayParams_SwayStyle_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::spot::SideParams_Side> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::spot::SideParams_Side>() {
  return ::bosdyn::api::spot::SideParams_Side_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::spot::JumpParams_Lead> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::spot::JumpParams_Lead>() {
  return ::bosdyn::api::spot::JumpParams_Lead_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::spot::FidgetStandParams_FidgetPreset> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::spot::FidgetStandParams_FidgetPreset>() {
  return ::bosdyn::api::spot::FidgetStandParams_FidgetPreset_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::spot::FrameSnapshotParams_Inclusion> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::spot::FrameSnapshotParams_Inclusion>() {
  return ::bosdyn::api::spot::FrameSnapshotParams_Inclusion_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::spot::RippleColorParams_Pattern> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::spot::RippleColorParams_Pattern>() {
  return ::bosdyn::api::spot::RippleColorParams_Pattern_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::spot::RippleColorParams_LightSide> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::spot::RippleColorParams_LightSide>() {
  return ::bosdyn::api::spot::RippleColorParams_LightSide_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::spot::Pivot> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::spot::Pivot>() {
  return ::bosdyn::api::spot::Pivot_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::spot::Easing> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::spot::Easing>() {
  return ::bosdyn::api::spot::Easing_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::spot::ArmMoveFrame> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::spot::ArmMoveFrame>() {
  return ::bosdyn::api::spot::ArmMoveFrame_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::spot::Leg> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::spot::Leg>() {
  return ::bosdyn::api::spot::Leg_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::spot::LedLight> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::spot::LedLight>() {
  return ::bosdyn::api::spot::LedLight_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fspot_2fchoreography_5fparams_2eproto
